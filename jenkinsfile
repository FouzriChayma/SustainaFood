pipeline {
    agent any
    environment {
        // Define Node version (assuming NVM is pre-configured on the agent)
        NODE_VERSION = '20' // Specify a Node.js version >= 20
    }

    stages {

        // ✅ Étape 1: Installer les dépendances
        stage('Install Dependencies') {
            steps {
                script {
                    // Backend dependencies
                    dir('sustainafood-backend') {
                        sh 'npm install'
                    }
                    // Frontend dependencies
                    dir('sustainafood-frontend') {
                        sh 'npm install' // Remove --legacy-peer-deps, now handled by newer Node version
                    }
                }
            }
        }

       //  ✅ Étape 2: Exécuter les tests unitaires séparément (2FA & Sign-in)
        //stage('Run Backend Tests Separately') {
          //  steps {
            //    script {
              //      dir('sustainafood-backend') {
                //        ✅ Lancer user-2fa.test.js
                  //      echo 'Running backend test: 2FA'
                    //    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                      //      sh 'npx jest test/user-2fa.test.js --detectOpenHandles --forceExit --testTimeout=100000' // Increased timeout
                       // }

                        //✅ Lancer user-signin.test.js
                        //echo 'Running backend test: Sign-in'
                        //catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                          //  sh 'npx jest test/user-signin.test.js --detectOpenHandles --forceExit --testTimeout=100000' // Increased timeout
                        //}

                       // echo 'Backend tests completed.'
                   // }
                //}
            //}
      //  }

       //  ✅ Étape 3: Check Test Results (Fail Pipeline if Tests Failed)
     //   stage('Check Test Results') {
            //steps {
               // script {
                   // if (currentBuild.result == 'FAILURE') {
                    //    error('Backend tests failed. Failing the pipeline.')
                  //  }
               // }
           // }
       // }
       
        // ✅ Étape 4: Build Application
        stage('Build Application') {
            steps {
                script {
                    // Backend build (optionnel)
                    dir('sustainafood-backend') {
                        echo 'Building backend...'
                        // sh 'npm run build' // Uncomment if backend build is needed
                        echo 'Backend build completed.'
                    }

                    // Frontend build
                    dir('sustainafood-frontend') {
                        echo 'Building frontend...'

                        // Installer fontawesome icons (optional) - Only if needed
                        sh 'npm install @fortawesome/fontawesome-svg-core'
                        sh 'npm install @fortawesome/react-fontawesome'
                        sh 'npm install @fortawesome/free-solid-svg-icons'

                        // Build frontend
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {  // Ajout catchError
                           sh 'npm run build'
                        }
                        echo 'Frontend build completed.'
                    }
                }
            }
        }
        // ✅ Étape 5: Check Build Results (Fail Pipeline if Build Failed)
        stage('Check Build Results') {
            steps {
                script {
                    if (currentBuild.result == 'FAILURE') {
                        error('Frontend build failed. Failing the pipeline.')
                    }
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline completed. Result: ${currentBuild.result}"
        }
        failure {
            // Send notification on failure
            echo "Sending notification on failure..."
        }
    }
}
