pipeline {
    agent any

    stages {
        // Étape 1: Installer les dépendances
        stage('Install Dependencies') {
            steps {
                script {
                    dir('sustainafood-backend') {
                        sh 'npm install'
                    }
                    dir('sustainafood-frontend') {
                        sh 'npm install --legacy-peer-deps'
                    }
                }
            }
        }

        // Étape 2: Exécuter uniquement les tests unitaires généraux
        stage('Run Unit Tests') {
            steps {
                script {
                    dir('sustainafood-backend') {
                        echo 'Running backend unit tests (without 2FA and Sign-in)...'
                        // Exemple : lancer uniquement les tests unitaires normaux
                        sh 'npx jest "test/unit/*.test.js"'
                    }
                }
            }
        }

        // Étape 3: Tests spécifiques 2FA et Sign-in (séparés pour isoler les erreurs)
        stage('Run Functional Tests: 2FA and Sign-in') {
            steps {
                script {
                    dir('sustainafood-backend') {
                        echo 'Running backend functional test for 2FA...'
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh 'npx jest test/user-2fa.test.js --detectOpenHandles --forceExit'
                        }

                        echo 'Running backend functional test for Sign-in...'
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh 'npx jest test/user-signin.test.js --detectOpenHandles --forceExit'
                        }
                    }
                }
            }
        }

        // Étape 4: Build
        stage('Build Application') {
            steps {
                script {
                    dir('sustainafood-frontend') {
                        sh 'npm run build'
                    }
                }
            }
        }

        // Étape 5: SonarQube
        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner'
                    withSonarQubeEnv {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }
    }
}
