This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
sustainafood-backend/.env
sustainafood-backend/.gitignore
sustainafood-backend/aiService/classifyFoodItem.js
sustainafood-backend/aiService/mlModel.js
sustainafood-backend/aiService/predictSupplyDemand.js
sustainafood-backend/app.js
sustainafood-backend/bin/www
sustainafood-backend/config/database.json
sustainafood-backend/controllers/ContactSubmissionController.js
sustainafood-backend/controllers/deliveryController.js
sustainafood-backend/controllers/donationController.js
sustainafood-backend/controllers/donationTransactionController.js
sustainafood-backend/controllers/feedbackController.js
sustainafood-backend/controllers/notificationController.js
sustainafood-backend/controllers/productController.js
sustainafood-backend/controllers/requestNeedController.js
sustainafood-backend/controllers/statistics.js
sustainafood-backend/controllers/UserController.js
sustainafood-backend/docker-compose.yml
sustainafood-backend/Dockerfile
sustainafood-backend/Middleware/auth.js
sustainafood-backend/Middleware/restrictTo.js
sustainafood-backend/Middleware/Upload.js
sustainafood-backend/models/Advertisement.js
sustainafood-backend/models/ContactSubmission.js
sustainafood-backend/models/Counter.js
sustainafood-backend/models/Delivery.js
sustainafood-backend/models/Donation.js
sustainafood-backend/models/DonationTransaction.js
sustainafood-backend/models/Feedback.js
sustainafood-backend/models/Meals.js
sustainafood-backend/models/Notification.js
sustainafood-backend/models/Product.js
sustainafood-backend/models/RequestNeed.js
sustainafood-backend/models/User.js
sustainafood-backend/package.json
sustainafood-backend/public/stylesheets/style.css
sustainafood-backend/routes/authRoutes.js
sustainafood-backend/routes/ContactSubmission.js
sustainafood-backend/routes/deliveryRoutes.js
sustainafood-backend/routes/donationRoutes.js
sustainafood-backend/routes/donationTransactionRoutes.js
sustainafood-backend/routes/feedbackRoutes.js
sustainafood-backend/routes/index.js
sustainafood-backend/routes/notificationRoutes.js
sustainafood-backend/routes/preductions.js
sustainafood-backend/routes/productRoutes.js
sustainafood-backend/routes/requestNeedRoutes.js
sustainafood-backend/routes/statsRoutes.js
sustainafood-backend/routes/users.js
sustainafood-backend/sonar-project.properties
sustainafood-backend/test/testAnomalyDetection.js
sustainafood-backend/test/user-signin.test.js
sustainafood-backend/test/userDetails.test.js
sustainafood-backend/views/error.twig
sustainafood-backend/views/index.twig
sustainafood-backend/views/layout.twig
sustainafood-frontend/.env
sustainafood-frontend/.gitignore
sustainafood-frontend/Dockerfile
sustainafood-frontend/eslint.config.js
sustainafood-frontend/index.html
sustainafood-frontend/nginx.conf
sustainafood-frontend/package.json
sustainafood-frontend/public/vite.svg
sustainafood-frontend/README.md
sustainafood-frontend/src/api/contactService.js
sustainafood-frontend/src/api/deliveryService.js
sustainafood-frontend/src/api/donationService.js
sustainafood-frontend/src/api/donationTransactionService.js
sustainafood-frontend/src/api/feedbackService.js
sustainafood-frontend/src/api/notificationService.js
sustainafood-frontend/src/api/productService.js
sustainafood-frontend/src/api/requestNeedsService.js
sustainafood-frontend/src/api/userService.js
sustainafood-frontend/src/App.css
sustainafood-frontend/src/App.jsx
sustainafood-frontend/src/assets/images/react.svg
sustainafood-frontend/src/assets/styles/About.css
sustainafood-frontend/src/assets/styles/AccountSettings.css
sustainafood-frontend/src/assets/styles/AddDonation.css
sustainafood-frontend/src/assets/styles/AiClassification.css
sustainafood-frontend/src/assets/styles/Alert.css
sustainafood-frontend/src/assets/styles/assigned-deliveries.css
sustainafood-frontend/src/assets/styles/backoffcss/adminProfile.css
sustainafood-frontend/src/assets/styles/backoffcss/AnomaliesDashbord.css
sustainafood-frontend/src/assets/styles/backoffcss/backlist.css
sustainafood-frontend/src/assets/styles/backoffcss/card.css
sustainafood-frontend/src/assets/styles/backoffcss/chart.css
sustainafood-frontend/src/assets/styles/backoffcss/dashboard.css
sustainafood-frontend/src/assets/styles/backoffcss/detailspage.css
sustainafood-frontend/src/assets/styles/backoffcss/donationDetails.css
sustainafood-frontend/src/assets/styles/backoffcss/donationStatus.css
sustainafood-frontend/src/assets/styles/backoffcss/navbar.css
sustainafood-frontend/src/assets/styles/backoffcss/ngoList.css
sustainafood-frontend/src/assets/styles/backoffcss/PredictionsDashboard.css
sustainafood-frontend/src/assets/styles/backoffcss/ProductDetail.css
sustainafood-frontend/src/assets/styles/backoffcss/ProductList.css
sustainafood-frontend/src/assets/styles/backoffcss/RequestDetail.css
sustainafood-frontend/src/assets/styles/backoffcss/RequestTable.css
sustainafood-frontend/src/assets/styles/backoffcss/restaurantList.css
sustainafood-frontend/src/assets/styles/backoffcss/sidebar.css
sustainafood-frontend/src/assets/styles/backoffcss/studentList.css
sustainafood-frontend/src/assets/styles/backoffcss/supermarketList.css
sustainafood-frontend/src/assets/styles/backoffcss/transporterList.css
sustainafood-frontend/src/assets/styles/backoffcss/viewNgo.css
sustainafood-frontend/src/assets/styles/backoffcss/viewRestaurant.css
sustainafood-frontend/src/assets/styles/backoffcss/viewStudent.css
sustainafood-frontend/src/assets/styles/backoffcss/viewSupermarket.css
sustainafood-frontend/src/assets/styles/backoffcss/viewTransporter.css
sustainafood-frontend/src/assets/styles/Composantdonation.css
sustainafood-frontend/src/assets/styles/Contact.css
sustainafood-frontend/src/assets/styles/ContinueInfo.css
sustainafood-frontend/src/assets/styles/continueSignUp.css
sustainafood-frontend/src/assets/styles/DeleveryMap.css
sustainafood-frontend/src/assets/styles/DetailsDonations.css
sustainafood-frontend/src/assets/styles/DonationRecommendations.css
sustainafood-frontend/src/assets/styles/EditProfile.css
sustainafood-frontend/src/assets/styles/ForgetPass.css
sustainafood-frontend/src/assets/styles/Game.css
sustainafood-frontend/src/assets/styles/ListDonationsRequest.css
sustainafood-frontend/src/assets/styles/ListOfDonations.css
sustainafood-frontend/src/assets/styles/LocationPicker.css
sustainafood-frontend/src/assets/styles/log.css
sustainafood-frontend/src/assets/styles/MyDonations.css
sustainafood-frontend/src/assets/styles/MyRequests.css
sustainafood-frontend/src/assets/styles/Navbar.css
sustainafood-frontend/src/assets/styles/Notfound.css
sustainafood-frontend/src/assets/styles/Profile.css
sustainafood-frontend/src/assets/styles/TransporterProfile.css
sustainafood-frontend/src/components/Alert.jsx
sustainafood-frontend/src/components/AlertDisplay.jsx
sustainafood-frontend/src/components/backoffcom/CardStats.jsx
sustainafood-frontend/src/components/backoffcom/Chart.jsx
sustainafood-frontend/src/components/backoffcom/DonationStatus.jsx
sustainafood-frontend/src/components/backoffcom/Navbar.jsx
sustainafood-frontend/src/components/backoffcom/Sidebar.jsx
sustainafood-frontend/src/components/Composantdonation.jsx
sustainafood-frontend/src/components/Composantrequest.jsx
sustainafood-frontend/src/components/ContactInfoBox.jsx
sustainafood-frontend/src/components/DeleveryMap.jsx
sustainafood-frontend/src/components/DonorProfile.jsx
sustainafood-frontend/src/components/Footer.jsx
sustainafood-frontend/src/components/ForecastDashboard.jsx
sustainafood-frontend/src/components/game/FruitSelector.jsx
sustainafood-frontend/src/components/game/GameArea.jsx
sustainafood-frontend/src/components/game/GameOver.jsx
sustainafood-frontend/src/components/LoadingButton.jsx
sustainafood-frontend/src/components/LocationPicker.jsx
sustainafood-frontend/src/components/Navbar.jsx
sustainafood-frontend/src/components/RecipientProfile.jsx
sustainafood-frontend/src/components/RoleSpecificProfile.jsx
sustainafood-frontend/src/components/StarRating.jsx
sustainafood-frontend/src/components/TransporterProfile.jsx
sustainafood-frontend/src/contexts/AlertContext.jsx
sustainafood-frontend/src/contexts/AuthContext.jsx
sustainafood-frontend/src/index.css
sustainafood-frontend/src/main.jsx
sustainafood-frontend/src/pages/About.jsx
sustainafood-frontend/src/pages/AccountSettings.tsx
sustainafood-frontend/src/pages/AddDonation.jsx
sustainafood-frontend/src/pages/AiClassification.jsx
sustainafood-frontend/src/pages/AnalyticsDashboard.jsx
sustainafood-frontend/src/pages/AssignedDeliveries.jsx
sustainafood-frontend/src/pages/backoffice/Ad.jsx
sustainafood-frontend/src/pages/backoffice/AdminProfile.jsx
sustainafood-frontend/src/pages/backoffice/AnomaliesDashbord.jsx
sustainafood-frontend/src/pages/backoffice/ContactSubmissionList.jsx
sustainafood-frontend/src/pages/backoffice/Dashboard.jsx
sustainafood-frontend/src/pages/backoffice/delivery.jsx
sustainafood-frontend/src/pages/backoffice/DeliveryView.jsx
sustainafood-frontend/src/pages/backoffice/DonationDetails.jsx
sustainafood-frontend/src/pages/backoffice/DonationList.jsx
sustainafood-frontend/src/pages/backoffice/DonationsRequestList.jsx
sustainafood-frontend/src/pages/backoffice/DonationTransactionList.jsx
sustainafood-frontend/src/pages/backoffice/ONGList.jsx
sustainafood-frontend/src/pages/backoffice/PersonnelList.jsx
sustainafood-frontend/src/pages/backoffice/PredictionsDashboard.jsx
sustainafood-frontend/src/pages/backoffice/ProductDetail.jsx
sustainafood-frontend/src/pages/backoffice/ProductList.jsx
sustainafood-frontend/src/pages/backoffice/RequestDetails.jsx
sustainafood-frontend/src/pages/backoffice/RequestDonationsList.jsx
sustainafood-frontend/src/pages/backoffice/RequestTable.jsx
sustainafood-frontend/src/pages/backoffice/RestaurantList.jsx
sustainafood-frontend/src/pages/backoffice/StudentList.jsx
sustainafood-frontend/src/pages/backoffice/SubmissionDetails.jsx
sustainafood-frontend/src/pages/backoffice/SupermarketList.jsx
sustainafood-frontend/src/pages/backoffice/TransporterList.jsx
sustainafood-frontend/src/pages/backoffice/view-ngo.jsx
sustainafood-frontend/src/pages/backoffice/view-restaurant.jsx
sustainafood-frontend/src/pages/backoffice/view-student.jsx
sustainafood-frontend/src/pages/backoffice/view-supermarket.jsx
sustainafood-frontend/src/pages/backoffice/view-transporter.jsx
sustainafood-frontend/src/pages/backoffice/ViewDonationTransaction.jsx
sustainafood-frontend/src/pages/ConfirmationModal.jsx
sustainafood-frontend/src/pages/Contact.jsx
sustainafood-frontend/src/pages/Continueinfo.jsx
sustainafood-frontend/src/pages/Deliveries.jsx
sustainafood-frontend/src/pages/DetailsDonations.jsx
sustainafood-frontend/src/pages/DetailsRequest.jsx
sustainafood-frontend/src/pages/DonationRecommendations.jsx
sustainafood-frontend/src/pages/Editprofile.jsx
sustainafood-frontend/src/pages/ForgetPass.jsx
sustainafood-frontend/src/pages/GamePage.jsx
sustainafood-frontend/src/pages/Home.jsx
sustainafood-frontend/src/pages/ListDonationsRequest.jsx
sustainafood-frontend/src/pages/ListOfDonations.jsx
sustainafood-frontend/src/pages/ListOfRequests.jsx
sustainafood-frontend/src/pages/ListRequestsDonation.jsx
sustainafood-frontend/src/pages/log.jsx
sustainafood-frontend/src/pages/MyDonationsList.jsx
sustainafood-frontend/src/pages/MyDonationsRequest.jsx
sustainafood-frontend/src/pages/MyRequest.jsx
sustainafood-frontend/src/pages/MyRequestDonation.jsx
sustainafood-frontend/src/pages/Not-Found.jsx
sustainafood-frontend/src/pages/PersonalStatus.jsx
sustainafood-frontend/src/pages/PreductionForDonor.jsx
sustainafood-frontend/src/pages/Profile.jsx
sustainafood-frontend/src/pages/ResetCode.jsx
sustainafood-frontend/src/pages/ResetPassword.jsx
sustainafood-frontend/src/pages/Signup.jsx
sustainafood-frontend/src/pages/style.css
sustainafood-frontend/src/pages/TwoFAVerification.jsx
sustainafood-frontend/src/pages/ViewProfile.jsx
sustainafood-frontend/src/PrivateRoute.jsx
sustainafood-frontend/vite.config.js
sustinia-ai/.gitignore
sustinia-ai/app.py
sustinia-ai/class_indices.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="sustainafood-backend/.env">
EMAIL_USER=ssustainafood@gmail.com
EMAIL_PASS=itsuaevbthucswoe
TWILIO_ACCOUNT_SID=ACee9d420b131436687493bef16da27157
TWILIO_AUTH_TOKEN=cc06359f84b34e397fd31c247ba9b7bc
TWILIO_VERIFY_SERVICE_SID=VAaf9e604a83fd00670cf97bb6f1f9eb32
JWT_SECRET=a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6
</file>

<file path="sustainafood-backend/.gitignore">
node_modules/
.DS_Store
</file>

<file path="sustainafood-backend/aiService/classifyFoodItem.js">
// aiService/classifyFoodItem.js
const ProductType = {
    CANNED_GOODS: 'Canned_Goods',
    DRY_GOODS: 'Dry_Goods',
    BEVERAGES: 'Beverages',
    SNACKS: 'Snacks',
    CEREALS: 'Cereals',
    BAKED_GOODS: 'Baked_Goods',
    CONDIMENTS: 'Condiments',
    VEGETABLES: 'Vegetables',
    FRUITS: 'Fruits',
    MEAT: 'Meat',
    FISH: 'Fish',
    DAIRY: 'Dairy',
    EGGS: 'Eggs',
    BABY_FOOD: 'Baby_Food',
    PET_FOOD: 'Pet_Food',
    OTHER: 'Other'
};

const MealType = {
    BREAKFAST: 'Breakfast',
    LUNCH: 'Lunch',
    DINNER: 'Dinner',
    SNACK: 'Snack',
    DESSERT: 'Dessert',
    SOUP: 'Soup',
    OTHER: 'Other'
};

// Simple keyword-based classification logic (you can replace this with a more advanced ML model)
const classifyFoodItem = async (item) => {
    const { name = '', description = '', category } = item;

    // Normalize the input for better matching
    const text = `${name.toLowerCase()} ${description.toLowerCase()}`.trim();

    if (!text) {
        return category === 'prepared_meals' ? { mealType: MealType.OTHER } : { productType: ProductType.OTHER };
    }

    if (category === 'packaged_products') {
        // Keyword-based classification for packaged products
        if (text.includes('canned') || text.includes('tin') || text.includes('beans') || text.includes('soup')) {
            return { productType: ProductType.CANNED_GOODS };
        } else if (text.includes('rice') || text.includes('pasta') || text.includes('flour') || text.includes('grain')) {
            return { productType: ProductType.DRY_GOODS };
        } else if (text.includes('water') || text.includes('juice') || text.includes('soda') || text.includes('drink')) {
            return { productType: ProductType.BEVERAGES };
        } else if (text.includes('chips') || text.includes('nuts') || text.includes('crackers') || text.includes('snack')) {
            return { productType: ProductType.SNACKS };
        } else if (text.includes('cereal') || text.includes('oatmeal') || text.includes('cornflakes')) {
            return { productType: ProductType.CEREALS };
        } else if (text.includes('bread') || text.includes('cookies') || text.includes('cake') || text.includes('pastry')) {
            return { productType: ProductType.BAKED_GOODS };
        } else if (text.includes('ketchup') || text.includes('sauce') || text.includes('mustard') || text.includes('condiment')) {
            return { productType: ProductType.CONDIMENTS };
        } else if (text.includes('carrot') || text.includes('potato') || text.includes('tomato') || text.includes('vegetable')) {
            return { productType: ProductType.VEGETABLES };
        } else if (text.includes('apple') || text.includes('banana') || text.includes('orange') || text.includes('fruit')) {
            return { productType: ProductType.FRUITS };
        } else if (text.includes('beef') || text.includes('chicken') || text.includes('pork') || text.includes('meat')) {
            return { productType: ProductType.MEAT };
        } else if (text.includes('salmon') || text.includes('tuna') || text.includes('fish')) {
            return { productType: ProductType.FISH };
        } else if (text.includes('milk') || text.includes('cheese') || text.includes('yogurt') || text.includes('dairy')) {
            return { productType: ProductType.DAIRY };
        } else if (text.includes('egg')) {
            return { productType: ProductType.EGGS };
        } else if (text.includes('baby food') || text.includes('formula') || text.includes('puree')) {
            return { productType: ProductType.BABY_FOOD };
        } else if (text.includes('pet food') || text.includes('dog food') || text.includes('cat food')) {
            return { productType: ProductType.PET_FOOD };
        } else {
            return { productType: ProductType.OTHER };
        }
    } else if (category === 'prepared_meals') {
        // Keyword-based classification for prepared meals
        if (text.includes('breakfast') || text.includes('pancake') || text.includes('omelette') || text.includes('cereal')) {
            return { mealType: MealType.BREAKFAST };
        } else if (text.includes('lunch') || text.includes('sandwich') || text.includes('salad') || text.includes('burger')) {
            return { mealType: MealType.LUNCH };
        } else if (text.includes('dinner') || text.includes('steak') || text.includes('pasta') || text.includes('roast')) {
            return { mealType: MealType.DINNER };
        } else if (text.includes('snack') || text.includes('chips') || text.includes('nuts') || text.includes('fruit')) {
            return { mealType: MealType.SNACK };
        } else if (text.includes('dessert') || text.includes('cake') || text.includes('ice cream') || text.includes('pie')) {
            return { mealType: MealType.DESSERT };
        } else if (text.includes('soup') || text.includes('stew') || text.includes('broth')) {
            return { mealType: MealType.SOUP };
        } else {
            return { mealType: MealType.OTHER };
        }
    } else {
        throw new Error('Invalid category provided');
    }
};

module.exports = { classifyFoodItem };
</file>

<file path="sustainafood-backend/aiService/mlModel.js">
const numeric = require('numeric');
const { IsolationForest } = require('ml-isolation-forest');
const DonationTransaction = require('../models/DonationTransaction');
const Donation = require('../models/Donation');
const RequestNeed = require('../models/RequestNeed');

class DonationRecommender {
  constructor() {
    this.interactionMatrix = null;
    this.donationIds = [];
    this.requestIds = [];
    this.U = null;
    this.S = null;
    this.Vt = null;
  }

  async buildInteractionMatrix() {
    const transactions = await DonationTransaction.find({ status: 'completed' })
      .populate('donation')
      .populate('requestNeed');

    console.log('Transactions found:', transactions.length);
    console.log('Sample transaction:', transactions[0] || 'No transactions');

    const donationSet = new Set();
    const requestSet = new Set();
    const interactions = {};

    transactions.forEach((tx) => {
      const donationId = tx.donation._id.toString();
      const requestId = tx.requestNeed._id.toString();
      donationSet.add(donationId);
      requestSet.add(requestId);
      const key = `${donationId}-${requestId}`;
      interactions[key] = (interactions[key] || 0) + 1;
    });

    this.donationIds = Array.from(donationSet);
    this.requestIds = Array.from(requestSet);

    console.log('Donation IDs:', this.donationIds);
    console.log('Request IDs:', this.requestIds);
    console.log('Interactions:', interactions);

    if (this.donationIds.length === 0 || this.requestIds.length === 0) {
      console.log('No data to build matrix. Setting to empty 1x1 matrix.');
      this.interactionMatrix = [[0]];
    } else {
      this.interactionMatrix = numeric.dim([this.donationIds.length, this.requestIds.length], 0);
      Object.entries(interactions).forEach(([key, count]) => {
        const [donationId, requestId] = key.split('-');
        const donationIdx = this.donationIds.indexOf(donationId);
        const requestIdx = this.requestIds.indexOf(requestId);
        if (donationIdx >= 0 && requestIdx >= 0) {
          this.interactionMatrix[donationIdx][requestIdx] = count;
        }
      });
    }

    console.log('Matrix dimensions:', [this.donationIds.length, this.requestIds.length]);
    console.log('Built Interaction Matrix:', this.interactionMatrix);
  }

  train(k = 10) {
    if (!this.interactionMatrix) throw new Error('Interaction matrix not built');

    console.log('Interaction Matrix in train:', this.interactionMatrix);
    console.log('Donation IDs length:', this.donationIds.length);
    console.log('Request IDs length:', this.requestIds.length);

    if (this.donationIds.length === 0 || this.requestIds.length === 0) {
      console.log('No interactions available. Initializing default model.');
      this.U = numeric.dim([1, k], 0);
      this.S = numeric.dim([k], 0);
      this.Vt = numeric.dim([k, 1], 0);
      return;
    }

    const svd = numeric.svd(this.interactionMatrix);
    this.U = svd.U;
    this.S = svd.S;
    this.Vt = svd.V;

    this.U = numeric.getBlock(this.U, [0, 0], [this.donationIds.length - 1, k - 1]);
    this.S = this.S.slice(0, k);
    this.Vt = numeric.getBlock(this.Vt, [0, 0], [k - 1, this.requestIds.length - 1]);

    console.log('Model trained successfully');
  }

  async getRecommendations(donationId, topN = 5) {
    if (!this.U || !this.S || !this.Vt) throw new Error('Model not trained');

    const donation = await Donation.findById(donationId);
    if (!donation) throw new Error('Donation not found');

    let donationIdx = this.donationIds.indexOf(donationId.toString());
    let donationVector;

    if (donationIdx === -1) {
      donationVector = await this.createDonationVector(donation);
    } else {
      donationVector = this.U[donationIdx].slice(0, this.S.length);
    }

    const scores = numeric.dot(numeric.dot(donationVector, numeric.diag(this.S)), this.Vt);

    const requestScores = scores.map((score, idx) => ({
      requestId: this.requestIds[idx],
      score,
    })).sort((a, b) => b.score - a.score).slice(0, topN);

    const recommendations = await Promise.all(
      requestScores.map(async ({ requestId, score }) => {
        const request = await RequestNeed.findById(requestId).populate('recipient');
        const fulfilledItems = this.calculateFulfilledItems(donation, request);
        return { request, fulfilledItems, matchScore: score };
      })
    );

    return recommendations;
  }

  async createDonationVector(donation) {
    const requests = await RequestNeed.find({ category: donation.category, status: 'pending' });
    const similarityScores = await Promise.all(
      requests.map(async (req) => {
        const fulfilledItems = this.calculateFulfilledItems(donation, req);
        return fulfilledItems.length > 0
          ? fulfilledItems.reduce((sum, item) => sum + item.quantity, 0) * 10
          : 0;
      })
    );

    const avgVector = numeric.div(numeric.add(...this.U), this.U.length);
    return numeric.add(avgVector.slice(0, this.S.length), similarityScores.map((s) => s / 100));
  }

  calculateFulfilledItems(donation, request) {
    const fulfilledItems = [];
    if (donation.category === 'packaged_products') {
      for (const reqProduct of request.requestedProducts || []) {
        const matchingProduct = donation.products.find(
          (p) => p.product.toString() === reqProduct.product.toString()
        );
        if (matchingProduct) {
          const fulfilledQty = Math.min(matchingProduct.quantity, reqProduct.quantity);
          fulfilledItems.push({ product: reqProduct.product, quantity: fulfilledQty });
        }
      }
    } else if (donation.category === 'prepared_meals') {
      const requestedMeals = request.numberOfMeals || 0;
      const donatedMeals = donation.numberOfMeals || 0;
      if (requestedMeals > 0 && donatedMeals > 0) {
        const fulfilledQty = Math.min(donatedMeals, requestedMeals);
        fulfilledItems.push({ quantity: fulfilledQty });
      }
    }
    return fulfilledItems;
  }


  async detectAnomalies() {
    const donations = await Donation.find();
    const currentDate = new Date(); // Use current date instead of hardcoded '2025-04-02'
  
    console.log('Found donations in detectAnomalies:', donations.length, donations);
  
    // Gestion des cas avec moins de 2 donations
    if (donations.length < 2) {
      console.log('Not enough donations to use Isolation Forest (< 2), checking for extreme values...');
      if (donations.length === 0) return [];
  
      const d = donations[0];
      const quantity = d.category === 'prepared_meals'
        ? d.numberOfMeals || 0
        : d.products ? d.products.reduce((sum, p) => sum + p.quantity, 0) : 0;
      const daysToExpiry = d.expirationDate
        ? Math.max(0, Math.ceil((new Date(d.expirationDate) - currentDate) / (1000 * 60 * 60 * 24)))
        : 1000;
  
      // Check for large quantity (100–20,000) and near expiry (≤4 days), exclude quantity = 1
      if (quantity >= 100 && quantity <= 20000 && daysToExpiry <= 4 && quantity !== 1) {
        return [{
          donationId: d._id,
          donor: d.donor,
          title: d.title,
          quantity,
          daysToExpiry,
          linkedRequests: d.linkedRequests ? d.linkedRequests.length : 0,
          anomalyScore: 0.9, // High score for rule-based detection
          reason: `Large quantity (${quantity}) near expiry (${daysToExpiry} days)`
        }];
      }
      return [];
    }
  
    // Extraction des caractéristiques
    const features = donations.map((d) => {
      const quantity = d.category === 'prepared_meals'
        ? d.numberOfMeals || 0
        : d.products ? d.products.reduce((sum, p) => sum + p.quantity, 0) : 0;
      const frequency = donations.filter(
        (don) => don.donor.toString() === d.donor.toString()
      ).length;
      const daysToExpiry = d.expirationDate
        ? Math.max(0, Math.ceil((new Date(d.expirationDate) - currentDate) / (1000 * 60 * 60 * 24)))
        : 1000;
      const numLinkedRequests = d.linkedRequests ? d.linkedRequests.length : 0;
  
      return [quantity, frequency, daysToExpiry, numLinkedRequests];
    });
  
    console.log('Features for anomaly detection:', features);
  
    // Normalisation
    const normalize = (arr) => {
      const mean = arr.reduce((sum, val) => sum + val, 0) / arr.length;
      const std = Math.sqrt(
        arr.map((val) => (val - mean) ** 2).reduce((sum, val) => sum + val, 0) / arr.length
      );
      return std ? arr.map((val) => (val - mean) / std) : arr.map(() => 0);
    };
  
    const transposedFeatures = features[0].map((_, colIdx) => features.map((row) => row[colIdx]));
    const normalizedFeatures = transposedFeatures
      .map(normalize)
      .reduce((acc, col, colIdx) => {
        features.forEach((row, rowIdx) => {
          if (!acc[rowIdx]) acc[rowIdx] = [];
          acc[rowIdx][colIdx] = col[rowIdx];
        });
        return acc;
      }, []);
  
    console.log('Normalized features:', normalizedFeatures);
  
    // Isolation Forest
    const forest = new IsolationForest({
      nTrees: 100,
      maxSamples: Math.min(256, donations.length),
      contamination: 0.1,
    });
  
    console.log('Training Isolation Forest...');
    forest.train(normalizedFeatures);
  
    console.log('Predicting anomalies...');
    const anomalyScores = forest.predict(normalizedFeatures);
    console.log('Anomaly scores:', anomalyScores.map((score, idx) => ({
      donationId: donations[idx]._id,
      score
    })));
  
    const threshold = 0.4; // Adjusted threshold
  
    // Filter anomalies based on Isolation Forest and specific rules
    const anomalies = donations
      .filter((d, idx) => {
        const quantity = d.category === 'prepared_meals'
          ? d.numberOfMeals || 0
          : d.products ? d.products.reduce((sum, p) => sum + p.quantity, 0) : 0;
        const daysToExpiry = d.expirationDate
          ? Math.max(0, Math.ceil((new Date(d.expirationDate) - currentDate) / (1000 * 60 * 60 * 24)))
          : 1000;
  
        // Conditions: large quantity (100–20,000), near expiry (≤4 days), not small (quantity ≠ 1)
        const isLargeQuantity = quantity >= 100 && quantity <= 20000;
        const isNearExpiry = daysToExpiry <= 4;
        const isSmallDonation = quantity === 1;
  
        // Anomaly if: low score (Isolation Forest) AND meets specific rules
        return anomalyScores[idx] < threshold && isLargeQuantity && isNearExpiry && !isSmallDonation;
      })
      .map((d) => ({
        donationId: d._id,
        title: d.title,
        donor: d.donor,
        quantity: d.category === 'prepared_meals'
          ? d.numberOfMeals || 0
          : d.products ? d.products.reduce((sum, p) => sum + p.quantity, 0) : 0,
        daysToExpiry: d.expirationDate
          ? Math.ceil((new Date(d.expirationDate) - currentDate) / (1000 * 60 * 60 * 24))
          : 'N/A',
        linkedRequests: d.linkedRequests ? d.linkedRequests.length : 0,
        anomalyScore: anomalyScores[donations.indexOf(d)],
        reason: `Large quantity (${d.category === 'prepared_meals' ? d.numberOfMeals || 0 : d.products.reduce((sum, p) => sum + p.quantity, 0)}) near expiry (${d.expirationDate ? Math.ceil((new Date(d.expirationDate) - currentDate) / (1000 * 60 * 60 * 24)) : 'N/A'} days)`
      }));
  
    console.log('Detected anomalies:', anomalies);
    return anomalies;
  }
}

module.exports = DonationRecommender;
</file>

<file path="sustainafood-backend/aiService/predictSupplyDemand.js">
const Donation = require('../models/Donation');
const RequestNeed = require('../models/RequestNeed');

// Helper function to calculate ISO week number
function getISOWeek(date) {
  const tempDate = new Date(date.getTime());
  tempDate.setHours(0, 0, 0, 0);
  // Thursday in current week decides the year
  tempDate.setDate(tempDate.getDate() + 3 - (tempDate.getDay() + 6) % 7);
  // January 4 is always in week 1
  const week1 = new Date(tempDate.getFullYear(), 0, 4);
  // Adjust to Thursday in week 1 and count weeks
  const weekNumber = Math.round(((tempDate - week1) / 86400000 + 1 + (week1.getDay() + 6) % 7) / 7);
  return weekNumber;
}

// Helper function to get the year and ISO week as an object
function getYearAndWeek(date) {
  const year = date.getFullYear();
  const week = getISOWeek(date);
  return { year, week };
}

// Helper function to get the next two weeks
function getNextTwoWeeks(year, week) {
  let nextYear1 = year;
  let nextWeek1 = week + 1;
  let nextYear2 = year;
  let nextWeek2 = week + 2;

  // Handle year rollover (if week > 52)
  if (nextWeek1 > 52) {
    nextYear1 = year + 1;
    nextWeek1 = nextWeek1 - 52;
  }
  if (nextWeek2 > 52) {
    nextYear2 = year + 1;
    nextWeek2 = nextWeek2 - 52;
  }
  if (nextWeek2 > 52) {
    nextYear2 = year + 2;
    nextWeek2 = nextWeek2 - 52;
  }

  return [
    `${nextYear1}-W${nextWeek1}`,
    `${nextYear2}-W${nextWeek2}`
  ];
}

async function predictSupplyDemand(period = 'week') {
  try {
    console.log('Fetching donations and requests...');
    const donations = await Donation.find({ isaPost: true })
      .populate('products.product')
      .populate('meals.meal')
      .catch(err => {
        console.error('Error fetching donations:', err);
        return [];
      });
    const requests = await RequestNeed.find({ isaPost: true })
      .populate('requestedProducts.product')
      .populate('requestedMeals.meal')
      .catch(err => {
        console.error('Error fetching requests:', err);
        return [];
      });

    console.log('Donations:', donations.length, 'Requests:', requests.length);
    console.log('Raw Donations:', JSON.stringify(donations, null, 2));

    // Group supply data by week
    const supplyData = donations.reduce((acc, donation) => {
      const date = new Date(donation.createdAt || Date.now());
      const { year, week } = getYearAndWeek(date);
      const key = `${year}-W${week}`;
      if (!acc[key]) acc[key] = { products: 0, meals: 0 };
      if (donation.category === 'packaged_products' && Array.isArray(donation.products)) {
        const productSum = donation.products.reduce((sum, p) => sum + (p.quantity || 0), 0);
        console.log(`Donation ${donation._id}: Adding ${productSum} products for key ${key}`);
        acc[key].products += productSum;
      } else if (donation.category === 'prepared_meals') {
        console.log(`Donation ${donation._id}: Adding ${donation.numberOfMeals || 0} meals for key ${key}`);
        acc[key].meals += donation.numberOfMeals || 0;
      }
      return acc;
    }, {});

    console.log('Supply Data:', supplyData);

    // Group demand data by week
    const demandData = requests.reduce((acc, request) => {
      const date = new Date(request.created_at || Date.now());
      const { year, week } = getYearAndWeek(date);
      const key = `${year}-W${week}`;
      if (!acc[key]) acc[key] = { products: 0, meals: 0 };
      if (request.category === 'packaged_products' && Array.isArray(request.requestedProducts)) {
        const productSum = request.requestedProducts.reduce((sum, p) => sum + (p.quantity || 0), 0);
        console.log(`Request ${request._id}: Adding ${productSum} products for key ${key}`);
        acc[key].products += productSum;
      } else if (request.category === 'prepared_meals') {
        console.log(`Request ${request._id}: Adding ${request.numberOfMeals || 0} meals for key ${key}`);
        acc[key].meals += request.numberOfMeals || 0;
      }
      return acc;
    }, {});

    console.log('Demand Data:', demandData);

    // Predict the next two weeks for each historical week
    const supplyPredictions = {};
    const demandPredictions = {};

    // Process supply predictions
    for (const [key, data] of Object.entries(supplyData)) {
      const [year, week] = key.split('-W').map(Number);
      const [nextWeek1, nextWeek2] = getNextTwoWeeks(year, week);

      // Predict for the first next week
      if (!supplyPredictions[nextWeek1]) supplyPredictions[nextWeek1] = { products: 0, meals: 0 };
      supplyPredictions[nextWeek1].products += Math.round(data.products * 1.1);
      supplyPredictions[nextWeek1].meals += Math.round(data.meals * 1.1);

      // Predict for the second next week
      if (!supplyPredictions[nextWeek2]) supplyPredictions[nextWeek2] = { products: 0, meals: 0 };
      supplyPredictions[nextWeek2].products += Math.round(data.products * 1.2); // Slightly higher growth for second week
      supplyPredictions[nextWeek2].meals += Math.round(data.meals * 1.2);
    }

    // Process demand predictions
    for (const [key, data] of Object.entries(demandData)) {
      const [year, week] = key.split('-W').map(Number);
      const [nextWeek1, nextWeek2] = getNextTwoWeeks(year, week);

      // Predict for the first next week
      if (!demandPredictions[nextWeek1]) demandPredictions[nextWeek1] = { products: 0, meals: 0 };
      demandPredictions[nextWeek1].products += Math.round(data.products * 1.2);
      demandPredictions[nextWeek1].meals += Math.round(data.meals * 1.2);

      // Predict for the second next week
      if (!demandPredictions[nextWeek2]) demandPredictions[nextWeek2] = { products: 0, meals: 0 };
      demandPredictions[nextWeek2].products += Math.round(data.products * 1.3); // Slightly higher growth for second week
      demandPredictions[nextWeek2].meals += Math.round(data.meals * 1.3);
    }

    const result = {
      supply: supplyPredictions,
      demand: demandPredictions,
    };

    console.log('Prediction Result:', result);
    return result;
  } catch (error) {
    console.error('predictSupplyDemand Error:', error.stack);
    throw error;
  }
}

module.exports = { predictSupplyDemand };
</file>

<file path="sustainafood-backend/bin/www">
#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sustainafood-backend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
</file>

<file path="sustainafood-backend/controllers/feedbackController.js">
// controllers/feedbackController.js
const Feedback = require('../models/Feedback');
const Delivery = require('../models/Delivery');
const User = require('../models/User');

exports.createFeedback = async (req, res) => {
  try {
    const { deliveryId } = req.params;
    const { rating, comment } = req.body;
    const reviewerId = req.user.id; // Assuming authMiddleware adds user to req

    if (!rating || rating < 1 || rating > 5) {
      return res.status(400).json({ message: 'Rating must be between 1 and 5' });
    }

    const delivery = await Delivery.findById(deliveryId).populate('transporter');
    if (!delivery) {
      return res.status(404).json({ message: 'Delivery not found' });
    }

    if (delivery.status !== 'delivered') {
      return res.status(400).json({ message: 'Feedback can only be provided for delivered deliveries' });
    }

    const transporter = delivery.transporter;
    if (!transporter) {
      return res.status(400).json({ message: 'No transporter assigned to this delivery' });
    }

    const feedback = new Feedback({
      delivery: deliveryId,
      transporter: transporter._id,
      reviewer: reviewerId,
      rating,
      comment,
    });

    await feedback.save();
    res.status(201).json({ message: 'Feedback created successfully', feedback });
  } catch (error) {
    res.status(500).json({ message: 'Error creating feedback', error: error.message });
  }
};

exports.getTransporterFeedbacks = async (req, res) => {
  try {
    const { transporterId } = req.params;

    const feedbacks = await Feedback.find({ transporter: transporterId })
      .populate('reviewer', 'name email')
      .populate('delivery', 'pickupAddress deliveryAddress');

    res.status(200).json({ data: feedbacks });
  } catch (error) {
    res.status(500).json({ message: 'Error fetching transporter feedbacks', error: error.message });
  }
};
</file>

<file path="sustainafood-backend/controllers/notificationController.js">
// notificationController.js
const mongoose = require('mongoose');
const Notification = require('../models/Notification');
const User = require('../models/User');
const nodemailer = require('nodemailer');
const path = require('path');
const fs = require('fs');

const isValidObjectId = (id) => mongoose.Types.ObjectId.isValid(id);

const createNotification = async (req, res) => {
  try {
    const { sender, receiver, message } = req.body;

    if (!sender || !isValidObjectId(sender)) {
      return res.status(400).json({ message: 'ID de l\'expéditeur valide requis' });
    }
    if (!receiver || !isValidObjectId(receiver)) {
      return res.status(400).json({ message: 'ID du destinataire valide requis' });
    }
    if (!message || typeof message !== 'string' || message.trim() === '') {
      return res.status(400).json({ message: 'Le message est requis et doit être une chaîne non vide' });
    }

    const senderUser = await User.findById(sender);
    if (!senderUser) {
      return res.status(404).json({ message: 'Expéditeur non trouvé' });
    }
    const receiverUser = await User.findById(receiver);
    if (!receiverUser) {
      return res.status(404).json({ message: 'Destinataire non trouvé' });
    }

    const newNotification = new Notification({
      sender,
      receiver,
      message,
      isRead: false,
    });

    console.log('Création de la notification avec les données:', newNotification);

    const savedNotification = await newNotification.save();

    console.log('Notification enregistrée avec succès:', savedNotification);

    if (receiverUser.email) {
      const transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS,
        },
        tls: {
          rejectUnauthorized: false,
        },
      });

      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: receiverUser.email,
        subject: `Nouvelle notification de ${senderUser.name || 'un utilisateur'}`,
        text: `Cher ${receiverUser.name || 'Utilisateur'},

Vous avez reçu une nouvelle notification :

Message : ${message}

Vous pouvez voir cette notification dans votre compte.

Cordialement,
L'équipe de la plateforme`,
        html: `
          <div style="font-family: Arial, sans-serif; color: black;">
            <div style="text-align: center; margin-bottom: 20px;">
              <img src="cid:logo" alt="Logo de la plateforme" style="max-width: 150px; height: auto;" />
            </div>
            <h2 style="color: #228b22;">Nouvelle notification</h2>
            <p>Cher ${receiverUser.name || 'Utilisateur'},</p>
            <p>Vous avez reçu une nouvelle notification :</p>
            <p><strong>Message :</strong> ${message}</p>
            <p>Vous pouvez voir cette notification dans votre compte.</p>
            <p>Cordialement,<br>L'équipe de la plateforme</p>
          </div>
        `,
        attachments: [],
      };

      const logoPath = path.join(__dirname, '../uploads/logo.png');
      if (fs.existsSync(logoPath)) {
        mailOptions.attachments.push({
          filename: 'logo.png',
          path: logoPath,
          cid: 'logo',
        });
      } else {
        console.warn('Fichier de logo non trouvé à:', logoPath);
        mailOptions.html = mailOptions.html.replace('<img src="cid:logo" alt="Logo de la plateforme" style="max-width: 150px; height: auto;" />', '');
      }

      try {
        await transporter.sendMail(mailOptions);
        console.log(`Email envoyé à ${receiverUser.email}`);
      } catch (emailError) {
        console.error('Échec de l\'envoi de l\'email:', emailError);
      }
    } else {
      console.warn(`Email du destinataire non trouvé pour l'ID du destinataire : ${receiver}`);
    }

    res.status(201).json({ message: 'Notification créée avec succès', notification: savedNotification });
  } catch (error) {
    console.error('Erreur lors de la création de la notification:', error);
    res.status(500).json({ message: 'Erreur serveur lors de la création de la notification', error: error.message });
  }
};

const getNotificationsByReceiver = async (req, res) => {
  try {
    const { receiverId } = req.params;
    if (!isValidObjectId(receiverId)) {
      return res.status(400).json({ message: 'ID du destinataire invalide' });
    }

    const notifications = await Notification.find({ receiver: receiverId })
      .populate('sender', 'name email')
      .populate('receiver', 'name email')
      .sort({ createdAt: -1 });

    res.status(200).json({ notifications });
  } catch (error) {
    console.error('Erreur lors de la récupération des notifications:', error);
    res.status(500).json({ message: 'Erreur serveur lors de la récupération des notifications', error: error.message });
  }
};

const getNotificationById = async (req, res) => {
  try {
    const { notificationId } = req.params;
    if (!isValidObjectId(notificationId)) {
      return res.status(400).json({ message: 'ID de notification invalide' });
    }

    const notification = await Notification.findById(notificationId)
      .populate('sender', 'name email')
      .populate('receiver', 'name email');

    if (!notification) {
      return res.status(404).json({ message: 'Notification non trouvée' });
    }

    res.status(200).json({ notification });
  } catch (error) {
    console.error('Erreur lors de la récupération de la notification:', error);
    res.status(500).json({ message: 'Erreur serveur lors de la récupération de la notification', error: error.message });
  }
};

const markNotificationAsRead = async (req, res) => {
  try {
    const { notificationId } = req.params;
    if (!isValidObjectId(notificationId)) {
      return res.status(400).json({ message: 'ID de notification invalide' });
    }

    const notification = await Notification.findById(notificationId);
    if (!notification) {
      return res.status(404).json({ message: 'Notification non trouvée' });
    }

    notification.isRead = true;
    await notification.save();

    res.status(200).json({ message: 'Notification marquée comme lue', notification });
  } catch (error) {
    console.error('Erreur lors de la mise à jour de la notification:', error);
    res.status(500).json({ message: 'Erreur serveur lors de la mise à jour de la notification', error: error.message });
  }
};

const deleteNotification = async (req, res) => {
  try {
    const { notificationId } = req.params;
    if (!isValidObjectId(notificationId)) {
      return res.status(400).json({ message: 'ID de notification invalide' });
    }

    const notification = await Notification.findByIdAndDelete(notificationId);
    if (!notification) {
      return res.status(404).json({ message: 'Notification non trouvée' });
    }

    res.status(200).json({ message: 'Notification supprimée avec succès' });
  } catch (error) {
    console.error('Erreur lors de la suppression de la notification:', error);
    res.status(500).json({ message: 'Erreur serveur lors de la suppression de la notification', error: error.message });
  }
};

const getUnreadNotificationsCount = async (req, res) => {
  try {
    const { receiverId } = req.params;
    if (!isValidObjectId(receiverId)) {
      return res.status(400).json({ message: 'ID du destinataire invalide' });
    }

    const count = await Notification.countDocuments({ receiver: receiverId, isRead: false });

    res.status(200).json({ unreadCount: count });
  } catch (error) {
    console.error('Erreur lors de la récupération du nombre de notifications non lues:', error);
    res.status(500).json({ message: 'Erreur serveur lors de la récupération du nombre de notifications non lues', error:emailError.message });
  }
};

module.exports = {
  createNotification,
  getNotificationsByReceiver,
  getNotificationById,
  markNotificationAsRead,
  deleteNotification,
  getUnreadNotificationsCount,
};
</file>

<file path="sustainafood-backend/controllers/productController.js">
const Product = require('../models/Product');
const Counter = require('../models/Counter');
const mongoose = require('mongoose');

// ✅ Get all products
async function getAllProducts(req, res) {
    try {
        const products = await Product.find().populate('donation');
        res.status(200).json(products);
    } catch (error) {
        console.error("Error in getAllProducts:", error);
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// ✅ Get product by ID
async function getProductById(req, res) {
    try {
        const { id } = req.params;

        // Check if 'id' is a valid integer
        const parsedId = parseInt(id, 10);
        if (isNaN(parsedId)) {
            return res.status(400).json({ message: 'Invalid product ID. Must be an integer.' });
        }

        const product = await Product.findById(parsedId).populate('donation');

        if (!product) {
            return res.status(404).json({ message: 'Product not found' });
        }

        res.status(200).json(product);
    } catch (error) {
        console.error("Error in getProductById:", error);
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// ✅ Get products by Donation ID
async function getProductsByDonationId(req, res) {
    try {
        const { idDonation } = req.params;

        if (!mongoose.Types.ObjectId.isValid(idDonation)) {
            return res.status(400).json({ message: 'Invalid Donation ID format' });
        }

        const products = await Product.find({ donation: idDonation });

        if (!products.length) {
            return res.status(404).json({ message: 'No products found for this donation' });
        }

        res.status(200).json(products);
    } catch (error) {
        console.error("Error in getProductsByDonationId:", error);
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// ✅ Get products by Status
async function getProductsByStatus(req, res) {
    try {
        const { status } = req.params;
        const products = await Product.find({ status });

        if (!products.length) {
            return res.status(404).json({ message: 'No products found with this status' });
        }

        res.status(200).json(products);
    } catch (error) {
        console.error("Error in getProductsByStatus:", error);
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// ✅ Create a new product
async function createProduct(req, res) {
    try {
        console.log('Received request to create product:', req.body);
        const { name, productType, productDescription, weightPerUnit, weightUnit, totalQuantity, donation, status } = req.body;

        // Validate required fields
        if (!name || !productType || !productDescription || !donation || !status) {
            console.log('Validation failed: Missing required fields');
            return res.status(400).json({ message: 'Please fill in all required fields.' });
        }

        // Check if an image file was uploaded
        let imagePath = null;
        if (req.files && req.files.image && req.files.image[0]) {
            imagePath = req.files.image[0].path;
            console.log('Image uploaded:', imagePath);
        }

        // Generate the ID using the Counter model
        console.log('Generating ID for new Product');
        const counter = await Counter.findOneAndUpdate(
            { _id: 'ProductId' },
            { $inc: { seq: 1 } },
            { new: true, upsert: true }
        );
        if (!counter) {
            console.log('Counter not found or created for ProductId');
            throw new Error('Counter not found or created for ProductId');
        }
        const productId = counter.seq;
        console.log(`Assigned ID: ${productId} to new Product`);

        // Build the product object
        const productData = {
            id: productId,
            name,
            productType,
            productDescription,
            weightPerUnit,
            weightUnit,
            totalQuantity,
            donation,
            status,
            image: imagePath,
            isArchived: false,
        };

        // Create the product
        console.log('Saving new product:', productData);
        const newProduct = new Product(productData);
        await newProduct.save();

        console.log('Product created successfully:', newProduct);
        res.status(201).json(newProduct);
    } catch (error) {
        console.error("Error in createProduct:", error);
        res.status(400).json({ message: 'Failed to create product', error: error.message });
    }
}

// ✅ Update a product by ID
async function updateProduct(req, res) {
    try {
        const { id } = req.params;

        // Check if 'id' is a valid integer
        const parsedId = parseInt(id, 10);
        if (isNaN(parsedId)) {
            return res.status(400).json({ message: 'Invalid product ID. Must be an integer.' });
        }

        const { name, productType, productDescription, weightPerUnit, weightUnit, totalQuantity, donation, status } = req.body;

        // Find the product by ID
        const product = await Product.findById(parsedId);

        if (!product) {
            return res.status(404).json({ message: 'Product not found' });
        }

        // Check if a new image file was uploaded
        if (req.files && req.files.image && req.files.image[0]) {
            product.image = req.files.image[0].path; // Update the image path
        }

        // Update other fields if provided
        if (name) product.name = name;
        if (productType) product.productType = productType;
        if (productDescription) product.productDescription = productDescription;
        if (weightPerUnit) product.weightPerUnit = weightPerUnit;
        if (weightUnit) product.weightUnit = weightUnit;
        if (totalQuantity) product.totalQuantity = totalQuantity;
        if (donation) product.donation = donation;
        if (status) product.status = status;

        // Save the updated product
        const updatedProduct = await product.save();

        res.status(200).json({ message: 'Product updated successfully', updatedProduct });
    } catch (error) {
        console.error("Error in updateProduct:", error);
        res.status(500).json({ message: 'Failed to update product', error: error.message });
    }
}

// ✅ Delete a product by ID
async function deleteProduct(req, res) {
    try {
        const { id } = req.params;

        // Check if 'id' is a valid integer
        const parsedId = parseInt(id, 10);
        if (isNaN(parsedId)) {
            return res.status(400).json({ message: 'Invalid product ID. Must be an integer.' });
        }

        const deletedProduct = await Product.findOneAndDelete({id: parsedId});

        if (!deletedProduct) {
            return res.status(404).json({ message: 'Product not found' });
        }

        res.status(200).json({ message: 'Product deleted successfully' });
    } catch (error) {
        console.error("Error in deleteProduct:", error);
        res.status(500).json({ message: 'Failed to delete product', error: error.message });
    }
}

module.exports = { getAllProducts, getProductById, getProductsByDonationId, getProductsByStatus, createProduct, updateProduct, deleteProduct };
</file>

<file path="sustainafood-backend/Middleware/auth.js">
const jwt = require('jsonwebtoken');
const User = require('../models/User');

const authMiddleware = async (req, res, next) => {
  try {
    const authHeader = req.headers['authorization'];
    console.log('Auth Header:', authHeader);

    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ message: 'Unauthorized - Invalid or missing token' });
    }

    const token = authHeader.replace('Bearer ', '');
    console.log('Token:', token);

    if (!token) {
      return res.status(401).json({ message: 'Unauthorized - Token is empty' });
    }

    const secret = process.env.JWT_SECRET || 'fallback_secret'; // Fallback for testing
    const decoded = jwt.verify(token, secret);
    console.log('Decoded token:', decoded);

    // Fetch user from database to ensure req.user matches expected format
    const user = await User.findById(decoded.userId).select('_id role');
    if (!user) {
      return res.status(401).json({ message: 'Unauthorized - User not found' });
    }

    req.user = user; // Attach Mongoose document with _id and role
    next();
  } catch (error) {
    console.error('Token verification error:', error.message);
    return res.status(401).json({ message: 'Unauthorized - Invalid token' });
  }
};

module.exports = authMiddleware;
</file>

<file path="sustainafood-backend/Middleware/restrictTo.js">
const User = require('../models/User');

const restrictTo = (...roles) => {
  return async (req, res, next) => {
    try {
      const user = await User.findById(req.user._id); // Assumes req.user is set by auth middleware
      if (!user || !roles.includes(user.role)) {
        return res.status(403).json({ message: 'Access denied: Insufficient permissions' });
      }
      next();
    } catch (error) {
      res.status(500).json({ message: 'Error checking permissions', error: error.message });
    }
  };
};

module.exports = restrictTo;
</file>

<file path="sustainafood-backend/Middleware/Upload.js">
// middleware/upload.js

const multer = require("multer");
const path = require("path");

// Configuration du stockage
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    // Dossier où seront enregistrés les fichiers
    // Vous pouvez mettre 'uploads/' ou un chemin plus spécifique (e.g. 'public/uploads/')
    cb(null, "uploads/");
  },
  filename: (req, file, cb) => {
    // Pour éviter les conflits de noms, on ajoute un timestamp
    cb(null, Date.now() + "-" + file.originalname);
  },
});

// Filtrage des types de fichiers (facultatif, ici on accepte uniquement les images)
const fileFilter = (req, file, cb) => {
  if (file.mimetype.startsWith("image/")) {
    cb(null, true);
  } else {
    cb(new Error("Only image files are allowed!"), false);
  }
};

// Limiter la taille des fichiers (par exemple à 2MB)
const limits = { fileSize: 2 * 1024 * 1024 }; // 2 MB

// Créer l'instance de Multer
const upload = multer({ storage, fileFilter, limits });

module.exports = upload;
</file>

<file path="sustainafood-backend/models/Counter.js">
// models/Counter.js

const mongoose = require('mongoose');
const Schema = mongoose.Schema;

// Counter schema for managing the auto-incrementing `id`
const counterSchema = new Schema({
  _id: { type: String, required: true },
  seq: { type: Number, default: 0 }
});

const Counter = mongoose.model('Counter', counterSchema);

module.exports = Counter;
</file>

<file path="sustainafood-backend/models/Donation.js">
const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const Counter = require('./Counter');

// Define Enums
const Category = {
    PREPARED_MEALS: 'prepared_meals',
    PACKAGED_PRODUCTS: 'packaged_products'
};
Object.freeze(Category);

const Status = {
    PENDING: 'pending',
    APPROVED: 'approved',
    REJECTED: 'rejected',
    PARTIALLY_FULFILLED: 'partially_fulfilled',
    FULFILLED: 'fulfilled',
    CANCELLED: 'cancelled'
};
Object.freeze(Status);

// Define Donation Schema
const donationSchema = new Schema({

    isaPost: { type: Boolean, default: true },
    id: { type: Number, unique: true }, // Auto-incremented custom ID
    donor: { type: Schema.Types.ObjectId, ref: 'User', required: true }, // Renamed from 'user'
    title: { type: String, required: true, minlength: 3, maxlength: 100 },
    description: { type: String, maxlength: 500 },
    category: { type: String, enum: Object.values(Category), required: true }, // Lowercase naming
    isAnomaly: { type: Boolean, default: false }, // Nouveau champ
    isapprovedfromadmin: { type: String, enum: Object.values(Status), default: Status.PENDING},

    products: [{
        product: { type: Schema.Types.ObjectId, ref: 'Product', required: true }, // Reference to Product
        quantity: { type: Number, required: true, min: 0 } // Donated quantity
    }],
    meals: [{
        meal: { 
            type: Schema.Types.ObjectId, 
            ref: 'Meals',
            required: [
                function() { return this.category === 'prepared_meals'; },
                'Meal ID is required for prepared meals'
            ]
        },
        quantity: { 
            type: Number,
            required: [
                function() { return this.category === 'prepared_meals'; },
                'Quantity is required for prepared meals'
            ],
            min: [1, 'Quantity must be at least 1'],
            validate: {
                validator: Number.isInteger,
                message: 'Quantity must be an integer'
            }
        }
    }],
    numberOfMeals: {
        type: Number,
        required: [
            function() { return this.category === 'prepared_meals'; },
            'Number of meals is required for prepared meals'
        ],
        validate: {
            validator: Number.isInteger,
            message: 'Number of meals must be an integer'
        }
    },
    remainingMeals: { type: Number, min: 0 }, // New field to track remaining meals
    location: {
        type: {
          type: String,
          enum: ['Point'],
          default: 'Point',
          required: true
        },
        coordinates: {
          type: [Number], // [longitude, latitude]
          required: true
        }
      },
      address: {type:String}, // Nouveau champ pour l'adresse lisible
    expirationDate: {
        type: Date,
        required: true,
        validate: {
            validator: (date) => date > new Date(), // Ensure future date
            message: 'Expiration date must be in the future'
        }
    },
    status: { type: String, enum: Object.values(Status), default: Status.PENDING, required: true },
    linkedRequests: [{ type: Schema.Types.ObjectId, ref: 'RequestNeed' }], // Added from concept
    mealName: { type: String },  // Add mealName
    mealDescription: { type: String },  // Add mealDescription
    MealType: { type: String} //Add MealType
}, {
    timestamps: true // Adds createdAt and updatedAt automatically
});

// Indexes for performance
donationSchema.index({ status: 1 });
donationSchema.index({ category: 1 });
donationSchema.index({ expirationDate: 1 });

// Pre-save hook for auto-incrementing ID
donationSchema.pre('save', async function(next) {
    if (this.isNew) {
        try {
            const counter = await Counter.findOneAndUpdate(
                { _id: 'DonationId' },
                { $inc: { seq: 1 } },
                { new: true, upsert: true }
            );
            this.id = counter.seq;
        } catch (err) {
            return next(new Error('Failed to generate donation ID: ' + err.message));
        }
    }
    next();
});
// Pre-save hook to ensure numberOfMeals matches the sum of meal quantities
donationSchema.pre('save', async function(next) {
    if (this.category === 'prepared_meals') {
        const totalMeals = this.meals.reduce((sum, mealEntry) => sum + (mealEntry.quantity || 0), 0);
        
    }
    next();
});

// Create and export the Donation model
const Donation = mongoose.model('Donation', donationSchema);
module.exports = Donation;
</file>

<file path="sustainafood-backend/models/DonationTransaction.js">
const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const Counter = require('./Counter'); // Assumes a Counter model for auto-incrementing IDs

// Define the status enum
const TransactionStatus = {
    PENDING: 'pending',
    APPROVED: 'approved',
    REJECTED: 'rejected',
    IN_PROGRESS: 'in_progress',
    COMPLETED: 'completed',
    CANCELLED: 'cancelled'
};
Object.freeze(TransactionStatus); // Prevents changes to the enum



// Define the DonationTransaction schema
const donationTransactionSchema = new Schema({
    id: {
        type: Number,
        unique: true,
        required: true
    },
    requestNeed: { 
        type: Schema.Types.ObjectId, 
        ref: 'RequestNeed', 
        required: true 
    },
    donation: { 
        type: Schema.Types.ObjectId, 
        ref: 'Donation', 
        required: true 
    },
    allocatedProducts: [{
        product: { type: Schema.Types.ObjectId, ref: 'Product' },
        quantity: { type: Number }
    }],
    allocatedMeals: [{ // New field for allocated meals
        meal: { type: Schema.Types.ObjectId, ref: 'Meals' },
        quantity: { type: Number}
    }] ,
    status: { 
        type: String, 
        enum: Object.values(TransactionStatus), 
        default: TransactionStatus.PENDING, 
        required: true 
    },
    recipient: {
        type: Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    donor: {
        type: Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    responseDate: {
        type: Date
    },
    rejectionReason: {
        type: String,
        maxlength: 500
    }
}, {
    timestamps: true
});

// Pre-save hook to auto-increment the ID
// Pre-save hook to auto-increment the ID
donationTransactionSchema.pre('save', async function(next) {
    if (this.isNew) {
        try {
            console.log('Running pre-save hook for DonationTransaction');
            const counter = await Counter.findOneAndUpdate(
                { _id: 'DonationTransactionId' },
                { $inc: { seq: 1 } },
                { new: true, upsert: true }
            );
            if (!counter) {
                throw new Error('Counter not found or created');
            }
            this.id = counter.seq;
            console.log(`Assigned ID: ${this.id}`);
        } catch (err) {
            console.error('Pre-save hook error:', err);
            return next(new Error('Failed to generate transaction ID: ' + err.message));
        }
    }
    next();
});

// Add indexes for better query performance
donationTransactionSchema.index({ requestNeed: 1 });
donationTransactionSchema.index({ donation: 1 });
donationTransactionSchema.index({ status: 1 });

// Create and export the model
const DonationTransaction = mongoose.model('DonationTransaction', donationTransactionSchema);
module.exports = DonationTransaction;
</file>

<file path="sustainafood-backend/models/Meals.js">
const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const Counter = require('./Counter');

// Define the Meal schema
const mealSchema = new Schema({
    id: { 
        type: Number, 
        unique: true, 
        required: true 
    }, 
    quantity:{
        type : Number,
    },
    mealName: { 
        type: String,
        required: true // Suggested addition for data integrity
    },  
    donation: { 
        type: Schema.Types.ObjectId, 
        ref: 'Donation' 
    }, // Optional reference to Donation
    mealDescription: { 
        type: String 
    }, 
    mealType: { 
        type: String,
        // Optionally, add an enum to restrict possible meal types
        enum: ['Breakfast', 'Lunch', 'Dinner', 'Snack', 'Dessert', 'Other'] // Example values
    }
});

// Pre-save hook to auto-increment the 'id' field using the Counter model
mealSchema.pre('save', async function (next) {
    const doc = this;
    if (doc.isNew) {
        try {
            const counter = await Counter.findOneAndUpdate(
                { _id: 'mealId' },
                { $inc: { seq: 1 } },
                { new: true, upsert: true }
            );
            doc.id = counter.seq;
            next();
        } catch (error) {
            next(error);
        }
    } else {
        next();
    }
});

// Create and export the Meal model
const Meal = mongoose.model('Meals', mealSchema); // Change 'Meal' to 'Meals'
module.exports = Meal; // Corrected export name
</file>

<file path="sustainafood-backend/models/Notification.js">
const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const Counter = require('./Counter');

// Define the Notification schema
const NotificationSchema = new Schema({
    id: { 
        type: Number, 
        unique: true 
    },
    sender: {
        type: Schema.Types.ObjectId, 
        ref: 'User', 
        required: [true, 'sender is required']
    },
    receiver: {
        type: Schema.Types.ObjectId, 
        ref: 'User', 
        required: [true, 'receiver is required']
    },
    message: { 
        type: String, 
        required: [true, 'Message is required'] 
    },
    isRead: { 
        type: Boolean, 
        default: false 
    },
    createdAt: { 
        type: Date, 
        default: Date.now 
    }
});

// Pre-save hook to auto-increment the 'id' field using the Counter model
NotificationSchema.pre('save', async function (next) {
    const doc = this;
    console.log('Pre-save hook triggered for notification:', doc);

    if (doc.isNew) {
        try {
            let counter = await Counter.findOneAndUpdate(
                { _id: 'notificationId' },
                { $inc: { seq: 1 } },
                { new: true, upsert: true }
            );
            console.log('Counter result:', counter);

            // Vérifier que counter.seq est valide
            doc.id = counter && counter.seq ? counter.seq : Date.now(); // Fallback si counter.seq est inexistant

            console.log('Set notification id to:', doc.id);
            next();
        } catch (error) {
            console.error('Error in pre-save hook:', error);
            next(error);
        }
    } else {
        console.log('Document is not new, skipping id assignment');
        next();
    }
});



// Create and export the Notification model
const Notification = mongoose.model('Notification', NotificationSchema); 
module.exports = Notification;
</file>

<file path="sustainafood-backend/models/Product.js">
const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const Counter = require('./Counter'); // Assumes a Counter model exists for auto-incrementing IDs

// Define enums for productType
const ProductType = {
    // Packaged Products - Non-Perishable
    CANNED_GOODS: 'Canned_Goods',        // e.g., canned beans, soups
    DRY_GOODS: 'Dry_Goods',              // e.g., rice, pasta
    BEVERAGES: 'Beverages',              // e.g., bottled water, juice
    SNACKS: 'Snacks',                    // e.g., chips, granola bars
    CEREALS: 'Cereals',                  // e.g., oatmeal, cornflakes (new)
    BAKED_GOODS: 'Baked_Goods',          // e.g., packaged bread, cookies (new)
    CONDIMENTS: 'Condiments',            // e.g., ketchup, sauces (new)

    // Fresh Products
    VEGETABLES: 'Vegetables',            // e.g., carrots, potatoes
    FRUITS: 'Fruits',                    // e.g., apples, bananas
    MEAT: 'Meat',                        // e.g., fresh beef, chicken
    FISH: 'Fish',                        // e.g., fresh salmon, tuna
    DAIRY: 'Dairy',                      // e.g., milk, cheese (new)
    EGGS: 'Eggs',                        // e.g., fresh eggs (new)

    // Miscellaneous
    BABY_FOOD: 'Baby_Food',              // e.g., formula, purees (new)
    PET_FOOD: 'Pet_Food',                // e.g., dog/cat food (new)
    OTHER: 'Other'                       // Catch-all for uncategorized items                // Flexible for both
};
Object.freeze(ProductType); // Prevents changes to the enum
const MealType = {
    BREAKFAST: 'Breakfast',
    LUNCH: 'Lunch',
    DINNER: 'Dinner',
    SNACK: 'Snack',
    DESSERT: 'Dessert',
    SOUP: 'Soup',
    OTHER: 'Other'
};
Object.freeze(MealType);
// Define enums for weight units
const WeightUnit = {
    KG: 'kg',
    G: 'g',
    LB: 'lb',
    OZ: 'oz',
    ML: 'ml',
    L: 'l', // Liters
    
};
Object.freeze(WeightUnit);

// Define enums for product status
const ProductStatus = {
    AVAILABLE: 'available',
    PENDING: 'pending',
    RESERVED: 'reserved',
    OUT_OF_STOCK: 'out_of_stock'
};
Object.freeze(ProductStatus);

// Define the Product schema
const productSchema = new Schema({
    id: { 
        type: Number, 
        unique: true, 
        required: true 
    }, // Auto-incremented unique ID
    name: { 
        type: String, 
        required: true, 
        minlength: 2, 
        maxlength: 100 
    }, // Product name, 2-100 characters
    image: {
        type: String, // Could use Buffer for binary data or String for URL/path
        required: false
    },
    productType: { 
        type: String, 
        enum: Object.values(ProductType), 
        required: true 
    }, 
    MealType: { 
        type: String, 
        enum: Object.values(MealType), 
    }, // Must be one of the ProductType values
    productDescription: { 
        type: String, 
        required: true, 
        maxlength: 500 
    }, // Description, max 500 characters
    weightPerUnit: { 
        type: Number, 
        required: false, // Optional for prepared meals
        min: [0, 'Weight per unit must be non-negative'] 
    }, // Weight per item, if applicable
    weightUnit: { 
        type: String, 
        enum: Object.values(WeightUnit), 
        required: false // Optional for prepared meals
    }, // Unit of weight, if applicable
    weightUnitTotale: { 
        type: String, 
        enum: Object.values(WeightUnit), 
        required: false // Optional for prepared meals
    },
    totalQuantity: { 
        type: Number, 
        required: false, // Optional for prepared meals
        min: [0, 'Total quantity must be non-negative'],
        validate: {
            validator: Number.isInteger,
            message: 'Total quantity must be an integer'
        }
    }, // Total number of units, if applicable
    donation: { type: Schema.Types.ObjectId, ref: 'Donation' }, // Optional
    request: { type: Schema.Types.ObjectId, ref: 'RequestNeed' },// Reference to a Donation

    isArchived: { // New field to mark product as archived
        type: Boolean,
        default: false,
        required: true
    },
    archivedAt: { // Timestamp of when archived
        type: Date,
        default: null
    },
    status: { 
        type: String, 
        enum: Object.values(ProductStatus), 
        default: ProductStatus.AVAILABLE, 
        required: true 
    } // Product availability status
}, {
    timestamps: true, // Automatically adds createdAt and updatedAt fields
    toJSON: { virtuals: true }, // Include virtual fields in JSON output
    toObject: { virtuals: true } // Include virtual fields in object output
});

// Add a virtual field to calculate total weight
productSchema.virtual('totalWeight').get(function() {
    if (this.weightPerUnit && this.totalQuantity) {
        return this.weightPerUnit * this.totalQuantity;
    }
    return null; // Returns null if weight or quantity is missing
});

// Attach enums to the model for easy access
productSchema.statics.ProductType = ProductType;
productSchema.statics.WeightUnit = WeightUnit;
productSchema.statics.ProductStatus = ProductStatus;

// Auto-increment the ID before saving a new product
productSchema.pre('save', async function(next) {
    if (this.isNew) { // Only for new documents
        try {
            const counter = await Counter.findOneAndUpdate(
                { _id: 'ProductId' },
                { $inc: { seq: 1 } },
                { new: true, upsert: true }
            );
            this.id = counter.seq; // Set the new ID
        } catch (err) {
            return next(new Error('Failed to generate product ID: ' + err.message));
        }
    }
    next(); // Proceed with saving
});

// Add an index for faster queries on donation
productSchema.index({ donation: 1 });
productSchema.index({ isArchived: 1 });

// Create and export the Product model
const Product = mongoose.model('Product', productSchema);
module.exports = Product;
</file>

<file path="sustainafood-backend/models/RequestNeed.js">
const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const Counter = require('./Counter'); // Assumes a Counter model for auto-incrementing IDs

// Define the status enum
const RequestStatus = {
    PENDING: 'pending',
    APPROVED: 'approved',
    REJECTED: 'rejected',
    FULFILLED: 'fulfilled',
    PARTIALLY_FULFILLED: 'partially_fulfilled',
};
Object.freeze(RequestStatus);

// Define the category enum
const Category = {
    PREPARED_MEALS: 'prepared_meals',
    PACKAGED_PRODUCTS: 'packaged_products',
};
Object.freeze(Category);

// Define the ProductRequest subdocument schema (embedded in RequestNeed)


// Define the RequestNeed schema
const requestNeedSchema = new Schema({
    isaPost: { type: Boolean, default: true },
    id: { type: Number },
    title: {
        type: String,
        required: [true, 'Title is required'],
        maxlength: [100, 'Title cannot exceed 100 characters'],
        trim: true
    },
    location: {
        type: {
          type: String,
          enum: ['Point'],
          default: 'Point',
          required: true
        },
        coordinates: {
          type: [Number], // [longitude, latitude]
          required: true
        }
      },
      address: {type:String}, // Nouveau champ pour l'adresse lisible

    expirationDate: {
        type: Date,
        required: [true, 'Expiration date is required'],
        validate: {
            validator: (date) => date > new Date(), // Ensure future date
            message: 'Expiration date must be in the future'
        }
    },
    description: { 
        type: String, 
        maxlength: [500, 'Description cannot exceed 500 characters'],
        trim: true 
    },
    category: { 
        type: String, 
        enum: Object.values(Category), 
        required: [true, 'Category is required'] 
    },
    recipient: { 
        type: Schema.Types.ObjectId, 
        ref: 'User', 
        required: [true, 'Recipient is required'] 
    },
    status: { 
        type: String, 
        enum: Object.values(RequestStatus), 
        default: RequestStatus.PENDING, 
        required: [true, 'Status is required'] 
    },
    linkedDonation:[ { 
        type: Schema.Types.ObjectId, 
        ref: 'Donation', 
        required: false ,
        default: []
    }],
    requestedProducts: [{
        product: { type: Schema.Types.ObjectId, ref: 'Product' },
        quantity: { type: Number, min: 0, default: 1 }
      }],
      requestedMeals: [{
        meal: { type: Schema.Types.ObjectId, ref: 'Meals' },
        quantity: { type: Number, min: 0, default: 1 }
      }],


      numberOfMeals: {
        type: Number,
        required: [
            function() { return this.category === 'prepared_meals'; },
            'required for prepared meals'
        ],
        validate: {
            validator: function(value) {
                // Skip validation if value is null/undefined and not required
                if (value == null && this.category !== 'prepared_meals') return true;
                return Number.isInteger(value);
            },
            message: 'Number of meals must be an integer'
        }
    },
 
}, {
    timestamps: { 
        createdAt: 'created_at', 
        updatedAt: 'updated_at' 
    } // Map to your custom field names
});

// Pre-save hook to auto-increment the ID
requestNeedSchema.pre('save', async function(next) {
    if (this.isNew) {
        try {
            const counter = await Counter.findOneAndUpdate(
                { _id: 'RequestNeedId' },
                { $inc: { seq: 1 } },
                { new: true, upsert: true }
            );
            this.id = counter.seq;
            next();
        } catch (err) {
            next(new Error(`Failed to generate request ID: ${err.message}`));
        }
    } else {
        next();
    }
});

// Create and export the model
const RequestNeed = mongoose.model('RequestNeed', requestNeedSchema);
module.exports = RequestNeed;
</file>

<file path="sustainafood-backend/package.json">
{
  "name": "sustainafood-backend",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "start": "node ./bin/www",
    "test": " cross-env NODE_ENV=test jest --detectOpenHandles --forceExit"
  },
  "dependencies": {
    "axios": "^1.8.4",
    "bcrypt": "^5.1.1",
    "bcryptjs": "^3.0.2",
    "body-parser": "^2.2.0",
    "chart.js": "^4.4.8",
    "cookie-parser": "~1.4.4",
    "cors": "^2.8.5",
    "debug": "~2.6.9",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "http-errors": "~1.6.3",
    "json2csv": "^6.0.0-alpha.2",
    "jsonwebtoken": "^9.0.2",
    "mathjs": "^14.4.0",
    "ml-isolation-forest": "^0.1.0",
    "mongoose": "^8.13.1",
    "morgan": "~1.9.1",
    "multer": "^1.4.5-lts.1",
    "node-cron": "^3.0.3",
    "node-fetch": "^2.6.7",
    "nodemailer": "^6.10.0",
    "numeric": "^1.2.6",
    "passport": "^0.7.0",
    "passport-google-oauth20": "^2.0.0",
    "qrcode": "^1.5.4",
    "react-chartjs-2": "^5.3.0",
    "react-google-recaptcha": "^3.1.0",
    "speakeasy": "^2.0.0",
    "twig": "~0.10.3",
    "twilio": "^5.5.0",
    "ua-parser-js": "^2.0.2",
    "uuid": "^11.1.0",
    "wide-align": "^1.1.5"
  },
  "devDependencies": {
    "cross-env": "^7.0.3",
    "jest": "^29.7.0",
    "supertest": "^7.0.0"
  }
}
</file>

<file path="sustainafood-backend/public/stylesheets/style.css">
body {
  padding: 50px;
  font: 14px "Lucida Grande", Helvetica, Arial, sans-serif;
}

a {
  color: #00B7FF;
}
</file>

<file path="sustainafood-backend/routes/authRoutes.js">
const express = require("express");
const passport = require("passport");
const jwt = require("jsonwebtoken"); // Ajouter pour générer un JWT
const router = express.Router();

// Lancer l'authentification Google
router.get("/google", passport.authenticate("google", { scope: ["profile", "email"] }));

// Callback après l'auth Google
router.get(
  "/google/callback",
  passport.authenticate("google", { session: false }),
  (req, res) => {
    if (!req.user) {
      return res.status(401).json({ error: "Échec de l'authentification" });
    }

    // Création du JWT à partir des données de l'utilisateur Google
    const token = generateJwtToken(req.user.profile);

    // Renvoyer le JWT et les infos utilisateur au frontend
    res.json({
      token,
      user: {
        id: req.user.profile.id,
        email: req.user.profile.emails[0].value,
        name: req.user.profile.displayName,
      },
    });
  }
);

// Fonction pour générer un JWT
function generateJwtToken(userProfile) {
  const payload = {
    id: userProfile.id,  // ID de l'utilisateur Google
    email: userProfile.emails[0].value,
    name: userProfile.displayName,
    picture: userProfile.photos ? userProfile.photos[0].value : "", // Ajouter la photo de profil, si disponible
  };

  // Clé secrète pour signer le JWT
  const secretKey = 'ta-clé-secrète'; // Remplace par ta clé secrète
  const token = jwt.sign(payload, secretKey, { expiresIn: '1h' });  // Le token expire après 1 heure

  return token;
}

module.exports = router;
</file>

<file path="sustainafood-backend/routes/donationRoutes.js">
const express = require('express');
const multer = require('multer');
const upload = multer(); // Pour parser les champs sans fichier
const router = express.Router();
const Donation = require('../models/Donation'); // Import the Donation model
const RequestNeed = require('../models/RequestNeed');
const DonationRecommender=require('../aiService/mlModel');
const User = require('../models/User');
const nodemailer = require('nodemailer');
const mongoose = require('mongoose');

require('dotenv').config();
// Route to get recommendations for a donation
router.get('/donations/anomalies', async (req, res) => {
    try {
      const recommender = new DonationRecommender();
      const anomalies = await recommender.detectAnomalies();
  
      const detailedAnomalies = await Promise.all(
        anomalies.map(async (anomaly) => {
          const donation = await Donation.findById(anomaly.donationId).populate('donor', 'name role photo');
          if (!donation || !donation.donor) {
            return {
              donationId: anomaly.donationId,
              title: 'Unknown Donation',
              donor: { id: anomaly.donor || 'Unknown', photo: '', name: 'Unknown Donor', role: 'N/A' },
              quantity: anomaly.quantity,
              daysToExpiry: anomaly.daysToExpiry,
              linkedRequests: anomaly.linkedRequests,
              anomalyScore: anomaly.anomalyScore,
              reason: anomaly.reason,
              isapprovedfromadmin: 'pending' // Statut par défaut si donation introuvable
            };
          }
          return {
            donationId: anomaly.donationId,
            title: donation.title,
            donor: {
              id: donation.donor._id,
              name: donation.donor.name || 'Missing Name',
              role: donation.donor.role || 'Missing Role',
              photo: donation.donor.photo || ''
            },
            quantity: anomaly.quantity,
            daysToExpiry: anomaly.daysToExpiry,
            linkedRequests: anomaly.linkedRequests,
            anomalyScore: anomaly.anomalyScore,
            reason: anomaly.reason,
            isapprovedfromadmin: donation.isapprovedfromadmin // Inclure le statut de la donation
          };
        })
      );
      res.json(detailedAnomalies);
    } catch (error) {
      console.error('Error fetching anomalies:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  });
// Route to get recommendations for a donation
router.get('/donation/:donationId/recommendations', async (req, res) => {
    try {
        const donation = await Donation.findById(req.params.donationId)
            .populate('products.product')
            .populate('meals.meal')
            .populate('donor');
        if (!donation) {
            return res.status(404).json({ message: "Donation not found" });
        }
        const matches = await matchDonationToRequests(donation);
        res.status(200).json(matches);
    } catch (error) {
        res.status(500).json({ message: "Failed to get recommendations", error: error.message });
    }
});
// The matchDonationToRequests function (as previously defined)



// Approbation d'une donation
router.post('/donations/:id/approve', async (req, res) => {
    try {
      const donation = await Donation.findById(req.params.id).populate('donor', 'name email');
      if (!donation) return res.status(404).json({ message: 'Donation not found' });
  
      // Mettre à jour le statut et isAnomaly
      donation.isapprovedfromadmin = 'approved';
      donation.isAnomaly = false; // Une fois approuvée, ce n'est plus une anomalie
      await donation.save();
  
      const transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS,
        },
        tls: { rejectUnauthorized: false },
      });
  
      if (donation.donor.email) {
        const mailOptions = {
          from: process.env.EMAIL_USER,
          to: donation.donor.email,
          subject: 'Your Donation Has Been Approved',
          text: `Dear ${donation.donor.name || 'Donor'},
  
  Your donation titled "${donation.title}" has been reviewed and approved by our admin team.
  It is no longer flagged as an anomaly and is now available for processing.
  
  Thank you for your contribution!
  Best regards,
  SustainaFood Team`,
          html: `
            <div style="font-family: Arial, sans-serif; color: black;">
              <h2 style="color: #228b22;">Donation Approved</h2>
              <p>Dear ${donation.donor.name || 'Donor'},</p>
              <p>Your donation titled "<strong>${donation.title}</strong>" has been reviewed and approved by our admin team.</p>
              <p>It is no longer flagged as an anomaly and is now available for processing.</p>
              <p>Thank you for your contribution!<br>Best regards,<br>SustainaFood Team</p>
            </div>
          `,
        };
  
        await transporter.sendMail(mailOptions);
        console.log(`Approval email sent to ${donation.donor.email}`);
      }
  
      res.status(200).json({ message: 'Donation approved successfully', donation });
    } catch (error) {
      console.error('Error approving donation:', error);
      res.status(500).json({ message: 'Failed to approve donation', error: error.message });
    }
  });
// Rejet d'une donation
router.post('/donations/:id/reject', async (req, res) => {
  try {
    const donation = await Donation.findById(req.params.id).populate('donor', 'name email');
    if (!donation) return res.status(404).json({ message: 'Donation not found' });

    donation.isapprovedfromadmin = 'rejected';
    await donation.save();

    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
      tls: { rejectUnauthorized: false },
    });

    if (donation.donor.email) {
      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: donation.donor.email,
        subject: 'Your Donation Has Been Rejected',
        text: `Dear ${donation.donor.name || 'Donor'},

Your donation titled "${donation.title}" has been reviewed and rejected by our admin team.
Please contact support if you have any questions.

Best regards,
SustainaFood Team`,
        html: `
          <div style="font-family: Arial, sans-serif; color: black;">
            <h2 style="color: #ff4444;">Donation Rejected</h2>
            <p>Dear ${donation.donor.name || 'Donor'},</p>
            <p>Your donation titled "<strong>${donation.title}</strong>" has been reviewed and rejected by our admin team.</p>
            <p>Please contact support if you have any questions.</p>
            <p>Best regards,<br>SustainaFood Team</p>
          </div>
        `,
      };

      await transporter.sendMail(mailOptions);
      console.log(`Rejection email sent to ${donation.donor.email}`);
    }

    res.status(200).json({ message: 'Donation rejected successfully', donation });
  } catch (error) {
    console.error('Error rejecting donation:', error);
    res.status(500).json({ message: 'Failed to reject donation', error: error.message });
  }
});

async function matchDonationToRequests(donation) {
  const { category, products, meals, expirationDate, numberOfMeals: donatedMeals } = donation;

  const requests = await RequestNeed.find({
      category: donation.category,
      status: 'pending',
      expirationDate: { $gte: new Date() }
  }).populate('recipient');

  const matches = [];
  for (const request of requests) {
      let matchScore = 0;
      let fulfilledItems = [];

      if (category === 'packaged_products') {
          const requestedProducts = request.requestedProducts || [];
          for (const reqProduct of requestedProducts) {
              // Handle both nested and flat structures
              const reqProductType = reqProduct.product?.productType || reqProduct.productType;
              const reqQuantity = reqProduct.quantity || reqProduct.totalQuantity || 0;

              const matchingProduct = products.find(p => p.productType === reqProductType);
              if (matchingProduct) {
                  const fulfilledQty = Math.min(matchingProduct.totalQuantity || matchingProduct.quantity || 0, reqQuantity);
                  fulfilledItems.push({ 
                      product: reqProduct.product?._id || reqProduct._id || reqProduct.productType, 
                      quantity: fulfilledQty 
                  });
                  matchScore += fulfilledQty * 10;
              }
          }
      } else if (category === 'prepared_meals') {
          const requestedMeals = request.numberOfMeals || 0;
          if (requestedMeals > 0 && donatedMeals > 0) {
              const fulfilledQty = Math.min(donatedMeals, requestedMeals);
              fulfilledItems.push({ quantity: fulfilledQty });
              matchScore += fulfilledQty * 10;
          }
      }

      if (fulfilledItems.length > 0) {
          const daysUntilExpiration = (new Date(expirationDate) - new Date()) / (1000 * 60 * 60 * 24);
          if (daysUntilExpiration < 3) matchScore += 50;
          else if (daysUntilExpiration < 7) matchScore += 20;

          if (request.recipient?.type === 'RELIEF' && daysUntilExpiration < 7) {
              matchScore += 30;
          } else if (request.recipient?.type === 'SOCIAL_WELFARE') {
              matchScore += 10;
          }

          matches.push({
              request,
              fulfilledItems,
              matchScore
          });
      }
  }

  return matches.sort((a, b) => b.matchScore - a.matchScore);
}

// Other routes (e.g., for getting donations by user ID)
router.get('/user/:userId', async (req, res) => {
    try {
        const donations = await Donation.find({ donor: req.params.userId })
            .populate('products.product')
            .populate('meals.meal')
            .populate('donor');
        res.status(200).json(donations);
    } catch (error) {
        res.status(500).json({ message: "Failed to get donations", error: error.message });
    }
});

const donationController = require('../controllers/donationController');
router.post('/donations/classify-food', donationController.classifyFood);
// Log to confirm this route is hit
router.get('/donations/predict-supply-demand', (req, res, next) => {
    console.log('Route /donations/predict-supply-demand matched');
    next();
  }, donationController.getSupplyDemandPrediction);
  
  // Log to confirm this route is hit
  router.get('/donations/:requestId', (req, res, next) => {
    console.log('Route /donations/:requestId matched with:', req.params.requestId);
    next();
  }, donationController.getDonationByRequestId);
// ✅ Get all donations
router.get('/', donationController.getAllDonations);


// ✅ Get donation by ID
router.get('/:id', donationController.getDonationById);

// ✅ Get donations by User ID
router.get('/user/:userId', donationController.getDonationsByUserId);
// ✅ Get donations by Donor ID not post
router.get('/donor/:donorId', donationController.getRequestDonationsByUserId);

// ✅ Get donations by Date
router.get('/date/:date', donationController.getDonationsByDate);

// ✅ Get donations by Type (donation/request)
router.get('/type/:type', donationController.getDonationsByType);

// ✅ Get donations by Category (Prepared_Meals, Packaged_Products)
router.get('/category/:category', donationController.getDonationsByCategory);

// ✅ Create a new donation (with associated products)
// Ajout de "upload.none()" pour parser les champs du FormData
router.post('/', upload.none(), donationController.createDonation);

// ✅ Update a donation (and update associated products)
router.put('/:id', donationController.updateDonation);

// ✅ Delete a donation (and delete associated products)
router.delete('/:id', donationController.deleteDonation);
router.get('/donations/:requestId',donationController.getDonationByRequestId)
// Donor Analytics
// Donor Analytics
// Donor Analytics

router.get("/api/analytics/donor/:donorId", async (req, res) => {
  const donorId = req.params.donorId;
  try {
    if (!donorId) {
      return res.status(400).json({ error: "Donor ID is required" });
    }

    const donorObjectId = new mongoose.Types.ObjectId(donorId);
    const donations = await Donation.find({ donor: donorObjectId });
    const totalDonations = donations.length;
    const totalItems = donations.reduce((sum, d) => {
      if (d.category === "prepared_meals") {
        return sum + (d.numberOfMeals || 0);
      }
      return sum + (d.products ? d.products.reduce((s, p) => s + (p.totalQuantity || 0), 0) : 0);
    }, 0);
    const categories = [...new Set(donations.map((d) => d.category))];
    const weeklyTrends = await Donation.aggregate([
      { $match: { donor: donorObjectId } },
      { $group: { _id: { $week: "$createdAt" }, count: { $sum: 1 } } },
      { $sort: { "_id": 1 } },
    ]);
    console.log("weeklyTrends from donor aggregation:", weeklyTrends); // Log ajouté

    res.json({ totalDonations, totalItems, categories, weeklyTrends });
  } catch (error) {
    console.error("Donor Analytics Error:", error);
    res.status(500).json({ error: error.message });
  }
});

// Recipient Analytics
router.get("/api/analytics/recipient/:recipientId", async (req, res) => {
  const recipientId = req.params.recipientId;
  try {
    if (!recipientId) {
      return res.status(400).json({ error: "Recipient ID is required" });
    }

    const recipientObjectId = new mongoose.Types.ObjectId(recipientId);
    const requests = await RequestNeed.find({ recipient: recipientObjectId });
    const totalRequests = requests.length;
    const fulfilledRequests = requests.filter((r) => r.status === "fulfilled").length;
    const totalFulfilledItems = requests.reduce((sum, r) => {
      if (r.category === "prepared_meals") {
        return sum + (r.numberOfMeals || 0);
      }
      return sum + ((r.requestedProducts || []).reduce((s, p) => s + (p.quantity || 0), 0));
    }, 0);
    const categories = [...new Set(requests.map((r) => r.category))];
    const weeklyTrends = await RequestNeed.aggregate([
      { $match: { recipient: recipientObjectId } },
      { $group: { _id: { $week: "$created_at" }, count: { $sum: 1 } } },
      { $sort: { "_id": 1 } },
    ]);
    console.log("weeklyTrends from recipient aggregation:", weeklyTrends); // Log ajouté

    res.json({ totalRequests, fulfilledRequests, totalFulfilledItems, categories, weeklyTrends });
  } catch (error) {
    console.error("Recipient Analytics Error:", error);
    res.status(500).json({ error: error.message });
  }
});

router.get("/api/personal-stats/donor/:donorId", async (req, res) => {
  const donorId = req.params.donorId;
  try {
    if (!donorId) {
      return res.status(400).json({ error: "Donor ID is required" });
    }

    const donorObjectId = new mongoose.Types.ObjectId(donorId); // Conversion en ObjectId
    const donations = await Donation.find({ donor: donorObjectId });
    const acceptedDonations = donations.filter((d) => d.status === "fulfilled").length;
    const requestsForDonations = await RequestNeed.countDocuments({ donation: { $in: donations.map((d) => d._id) } });
    const weeklyAcceptedTrends = await Donation.aggregate([
      { $match: { donor: donorObjectId, status: "fulfilled" } },
      { $group: { _id: { $week: "$createdAt" }, count: { $sum: 1 } } }, // Corrigé : createdAt
      { $sort: { "_id": 1 } },
    ]);
    console.log("weeklyAcceptedTrends:", weeklyAcceptedTrends); // Log pour débogage

    res.json({ acceptedDonations, requestsForDonations, weeklyAcceptedTrends });
  } catch (error) {
    console.error("Donor Personal Stats Error:", error);
    res.status(500).json({ error: error.message });
  }
});

router.get("/api/personal-stats/recipient/:recipientId", async (req, res) => {
  const recipientId = req.params.recipientId;
  try {
    if (!recipientId) {
      return res.status(400).json({ error: "Recipient ID is required" });
    }

    const recipientObjectId = new mongoose.Types.ObjectId(recipientId); // Conversion en ObjectId
    const requests = await RequestNeed.find({ recipient: recipientObjectId });
    const totalRequests = requests.length;
    const acceptedDonations = requests.filter((r) => r.status === "fulfilled").length;
    const weeklyRequestTrends = await RequestNeed.aggregate([
      { $match: { recipient: recipientObjectId } },
      { $group: { _id: { $week: "$created_at" }, count: { $sum: 1 } } }, // Correct : created_at
      { $sort: { "_id": 1 } },
    ]);
    console.log("weeklyRequestTrends:", weeklyRequestTrends); // Log pour débogage

    res.json({ totalRequests, acceptedDonations, weeklyRequestTrends });
  } catch (error) {
    console.error("Recipient Personal Stats Error:", error);
    res.status(500).json({ error: error.message });
  }
});
module.exports = router;
</file>

<file path="sustainafood-backend/routes/donationTransactionRoutes.js">
const express = require('express');
const router = express.Router();
const donationTransactionController = require('../controllers/donationTransactionController');

// ✅ Get all donation transactions
router.get('/', donationTransactionController.getAllDonationTransactions);

// ✅ Get donation transaction by ID
router.get('/:id', donationTransactionController.getDonationTransactionById);

// ✅ Get donation transactions by RequestNeed ID
router.get('/requestNeed/:requestNeedId', donationTransactionController.getDonationTransactionsByRequestNeedId);

// ✅ Get donation transactions by Donation ID
router.get('/donation/:donationId', donationTransactionController.getDonationTransactionsByDonationId);

// ✅ Get donation transactions by Status
router.get('/status/:status', donationTransactionController.getDonationTransactionsByStatus);

// ✅ Create a new donation transaction
router.post('/', donationTransactionController.createDonationTransaction);

// ✅ Update a donation transaction by ID
router.put('/:id', donationTransactionController.updateDonationTransaction);

// ✅ Delete a donation transaction by ID
router.delete('/:id', donationTransactionController.deleteDonationTransaction);

router.get('/recipient/:recipientId', donationTransactionController.getTransactionsByRecipientId);
router.put('/:transactionId/accept', donationTransactionController.acceptDonationTransaction);
router.put('/:transactionId/reject', donationTransactionController.rejectDonationTransaction);
// New endpoint to create and accept a transaction from a donation
router.post('/create-and-accept', donationTransactionController.createAndAcceptDonationTransaction);
router.post('/create-et-accept', donationTransactionController.createAndAcceptDonationTransactionBiderc);
router.put('/donation/:donationId/reject', donationTransactionController.rejectDonation);
// ✅ Get donations by Donor ID
router.get('/donor/:donorId', donationTransactionController.getDonationTransactionsByDonorId);
module.exports = router;
</file>

<file path="sustainafood-backend/routes/index.js">
var express = require('express');
var router = express.Router();

/* GET home page. */
router.get('/', function(req, res, next) {
  res.render('index', { title: 'Express' });
});

module.exports = router;
</file>

<file path="sustainafood-backend/routes/notificationRoutes.js">
const express = require('express');
const router = express.Router();
const notificationController = require('../controllers/notificationController');

// Create a new notification
router.post('/', notificationController.createNotification);

// Get all notifications for a specific receiver
router.get('/receiver/:receiverId', notificationController.getNotificationsByReceiver);

// Get a single notification by ID
router.get('/:notificationId', notificationController.getNotificationById);

// Mark a notification as read
router.put('/:notificationId/read', notificationController.markNotificationAsRead);

// Delete a notification
router.delete('/:notificationId', notificationController.deleteNotification);

// Get unread notifications count for a user
router.get('/receiver/:receiverId/unread-count', notificationController.getUnreadNotificationsCount);

module.exports = router;
</file>

<file path="sustainafood-backend/routes/productRoutes.js">
const express = require('express');
const router = express.Router();
const productController = require('../controllers/productController');
const upload = require('../Middleware/Upload'); // Import your Multer configuration

// Routes
router.get('/all', productController.getAllProducts);
router.get('/:id', productController.getProductById); // Get product by ID
router.get('/donation/:idDonation', productController.getProductsByDonationId);
router.get('/status/:status', productController.getProductsByStatus);

// Create a new product with image upload
router.post(
    '/create',
    upload.single('image'), // Use Multer to handle a single file upload for the 'image' field
    productController.createProduct
);

// Update a product with optional image upload
router.put(
    '/update/:id',
    upload.single('image'), // Use Multer to handle a single file upload for the 'image' field
    productController.updateProduct
);

router.delete('/delete/:id', productController.deleteProduct);

module.exports = router;
</file>

<file path="sustainafood-backend/routes/requestNeedRoutes.js">
const express = require('express');
const router = express.Router();
const authMiddleware = require('../Middleware/auth'); // Your authentication middleware
const requestNeedController = require('../controllers/requestNeedController');

router.get('/', requestNeedController.getAllRequests);
router.get('/requests',requestNeedController.getAllRequestsbackoffice);
router.get('/:id', requestNeedController.getRequestById);
router.get('/recipient/:recipientId', requestNeedController.getRequestsByRecipientId);
router.get('/status/:status', requestNeedController.getRequestsByStatus);
router.post('/', requestNeedController.createRequest);
router.put('/:id', requestNeedController.updateRequest);
router.delete('/:id', requestNeedController.deleteRequest);
router.post('/addDonationToRequest/:requestId/donations', requestNeedController.addDonationToRequest);
router.put('/UpdateAddDonationToRequest/:requestId/donations', requestNeedController.UpdateAddDonationToRequest);

router.post('/requestdonation/:donationId', requestNeedController.createRequestNeedForExistingDonation);
router.get('/:requestId/with-donations', requestNeedController.getRequestWithDonations);
router.get('/donation/:donationId', requestNeedController.getRequestsByDonationId);
// New route for rejecting a request
router.put('/:requestId/reject', requestNeedController.rejectRequest);
module.exports = router;
</file>

<file path="sustainafood-backend/routes/statsRoutes.js">
// routes/statsRoutes.js
const express = require("express");
const router = express.Router();
const { getStatistics } = require("../controllers/statistics"); // Correct import

router.get("/", getStatistics); // Simplified path to avoid redundancy

module.exports = router;
</file>

<file path="sustainafood-backend/test/testAnomalyDetection.js">
const mongoose = require('mongoose');
const DonationRecommender = require('../aiService/mlModel');
const Donation = require('../models/Donation');
const User = require('../models/User');

mongoose.connect('mongodb://127.0.0.1:27017/sustainafood');

async function setupTestData() {
  await Donation.deleteMany({});

  const donor1 = new mongoose.Types.ObjectId();
  const donor2 = new mongoose.Types.ObjectId();

  const testDonations = [
    {
      donor: donor1,
      title: 'Donation de repas normaux',
      location: 'Paris',
      numberOfMeals: 5,
      meals: [{ meal: new mongoose.Types.ObjectId(), quantity: 5 }],
      expirationDate: new Date('2025-04-12'),
      linkedRequests: [new mongoose.Types.ObjectId(), new mongoose.Types.ObjectId()],
      category: 'prepared_meals',
      createdAt: new Date('2025-03-01'),
    },
    {
      donor: donor1,
      title: 'Donation de pâtes',
      location: 'Lyon',
      products: [{ product: new mongoose.Types.ObjectId(), quantity: 10 }],
      expirationDate: new Date('2025-04-15'),
      linkedRequests: [new mongoose.Types.ObjectId()],
      category: 'packaged_products',
      createdAt: new Date('2025-03-02'),
    },
    {
      donor: donor2,
      title: 'Gros don de repas',
      location: 'Marseille',
      numberOfMeals: 199,
      meals: [{ meal: new mongoose.Types.ObjectId(), quantity: 199 }],
      expirationDate: new Date('2025-04-03'),
      linkedRequests: [new mongoose.Types.ObjectId()],
      category: 'prepared_meals',
      createdAt: new Date('2025-03-03'),
    },
    {
      donor: donor2,
      title: 'Donation de riz suspecte',
      location: 'Toulouse',
      products: [{ product: new mongoose.Types.ObjectId(), quantity: 50 }],
      expirationDate: new Date('2025-04-20'),
      linkedRequests: Array(12).fill(new mongoose.Types.ObjectId()),
      category: 'packaged_products',
      createdAt: new Date('2025-03-04'),
    },
    // Nouveau don normal
    {
      donor: donor1,
      title: 'Donation de pain',
      location: 'Nice',
      products: [{ product: new mongoose.Types.ObjectId(), quantity: 15 }],
      expirationDate: new Date('2025-04-10'),
      linkedRequests: [new mongoose.Types.ObjectId()],
      category: 'packaged_products',
      createdAt: new Date('2025-03-05'),
    },
  ];

  for (const donationData of testDonations) {
    const donation = new Donation(donationData);
    await donation.save();
  }
  console.log('Test data inserted');

  const insertedDonations = await Donation.find();
  console.log('Inserted donations:', insertedDonations.length, insertedDonations);
}

async function testAnomalyDetection() {
  const recommender = new DonationRecommender();

  await setupTestData();

  const anomalies = await recommender.detectAnomalies();
  console.log('Test Result - Detected Anomalies:', anomalies);

  console.log('\nValidation:');
  anomalies.forEach((anomaly) => {
    if (anomaly.quantity > 100) {
      console.log(`- High quantity detected: ${anomaly.donationId} (Qty: ${anomaly.quantity})`);
    }
    if (anomaly.linkedRequests > 10) {
      console.log(`- High linkedRequests detected: ${anomaly.donationId} (Linked: ${anomaly.linkedRequests})`);
    }
    if (anomaly.daysToExpiry < 5) {
      console.log(`- Near expiry detected: ${anomaly.donationId} (Days: ${anomaly.daysToExpiry})`);
    }
  });

  if (anomalies.length === 0) {
    console.log('Aucune anomalie détectée - vérifier le seuil ou les données.');
  }

  await mongoose.connection.close();
}

testAnomalyDetection().catch((err) => console.error('Test failed:', err));
</file>

<file path="sustainafood-backend/test/user-signin.test.js">
const request = require('supertest');
const mongoose = require('mongoose');
const app = require('../app'); // Ton app.js complet

const mongoUri = 'mongodb://localhost:27017/sustainafood'; // ⚠️ Ta base de développement

beforeAll(async () => {
  await mongoose.connect(mongoUri, {
    // (Tu peux retirer les warnings ici aussi, voir plus bas)
  });
});

afterAll(async () => {
  await mongoose.connection.close(); // Ne pas supprimer la base, attention !
});

describe('✅ TEST SIGN IN SUR DONNEES EXISTANTES', () => {

  it('✅ Devrait se connecter avec un utilisateur existant', async () => {
    const res = await request(app).post('/users/login').send({
      email: "carrefour@gmail.com", // Met ton email existant ici
      password: "carrefour"        // Met ton mot de passe correspondant
    });

    console.log(res.body); // 🔹 Pour voir la réponse complète dans la console

    // ✅ Attentes
    expect(res.statusCode).toBe(200);
    expect(res.body).toHaveProperty('token');
    expect(res.body).toHaveProperty('role'); // Optionnel : tu peux préciser le role attendu
    expect(res.body).toHaveProperty('id');
  });

  it('❌ Devrait échouer avec un mauvais mot de passe pour cet email', async () => {
    const res = await request(app).post('/users/login').send({
      email: "carrefour@gmail.com", // Même email
      password: "WrongPassword" // Mauvais mot de passe
    });

    console.log(res.body); // Pour voir la réponse complète dans la console

    // ✅ Attentes
    expect(res.statusCode).toBe(400);
    expect(res.body).toHaveProperty('error', 'Invalid credentials');
  });

});
</file>

<file path="sustainafood-backend/test/userDetails.test.js">
const request = require('supertest');
const mongoose = require('mongoose');
const app = require('../app'); // Adjust the path if needed

// --- Database Setup ---
const mongoUri = 'mongodb://localhost:27017/sustainafood';

beforeAll(async () => {
  try {
    await mongoose.connect(mongoUri);
    console.log('MongoDB connected for userDetails tests.');
  } catch (err) {
    console.error('MongoDB connection error:', err);
    process.exit(1);
  }
});

afterAll(async () => {
  await mongoose.connection.close();
  console.log('MongoDB connection closed for userDetails tests.');
});

// --- Test Suite for Get User By ID ---
describe('✅ TEST Get User By ID (GET /users/details/:id)', () => {

  // Using the specific ID from your database
  const EXISTING_USER_ID = '67bdf9511252b84ad112abc0';

  // A plausible but likely non-existent ObjectId
  const NON_EXISTENT_USER_ID = '111111111111111111111111';

  // An invalid format ID
  const INVALID_FORMAT_USER_ID = 'this-is-not-an-object-id';

  it('✅ Should retrieve an existing user by their valid ID', async () => {
    // The ID is now correctly set above, no need for the placeholder check.

    const res = await request(app).get(`/users/details/${EXISTING_USER_ID}`);

    console.log(`GET /users/details/${EXISTING_USER_ID} Response Status:`, res.statusCode);
    console.log(`GET /users/details/${EXISTING_USER_ID} Response Body:`, res.body);

    // Assertions
    expect(res.statusCode).toBe(200); // Expect success
    expect(res.body).toHaveProperty('_id');
    expect(res.body._id).toBe(EXISTING_USER_ID); // Check the ID matches
    expect(res.body).toHaveProperty('email', 'wala.ammar@esprit.tn'); // Check specific email
    expect(res.body).toHaveProperty('name', 'wala ammar'); // Check specific name
    expect(res.body).toHaveProperty('role', 'admin'); // Check specific role
    expect(res.body).toHaveProperty('phone', 26745248); // Check specific phone
    // Add any other assertions for fields you want to verify for this specific user
    expect(res.body.isBlocked).toBe(false);
    expect(res.body.isActive).toBe(true); // Based on your DB data
    expect(res.body).toHaveProperty('photo'); // Check if photo path exists
  });

  it('❌ Should return 404 Not Found for a non-existent user ID', async () => {
    const res = await request(app).get(`/users/details/${NON_EXISTENT_USER_ID}`);

    console.log(`GET /users/details/${NON_EXISTENT_USER_ID} Response Status:`, res.statusCode);
    console.log(`GET /users/details/${NON_EXISTENT_USER_ID} Response Body:`, res.body);

    // Assertions
    expect(res.statusCode).toBe(404);
    expect(res.body).toHaveProperty('error');
    expect(res.body.error).toBe('User not found');
  });

  it('❌ Should return 500 Internal Server Error for an invalid ID format', async () => {
    const res = await request(app).get(`/users/details/${INVALID_FORMAT_USER_ID}`);

    console.log(`GET /users/details/${INVALID_FORMAT_USER_ID} Response Status:`, res.statusCode);
    console.log(`GET /users/details/${INVALID_FORMAT_USER_ID} Response Body:`, res.body);

    // Assertions
    expect(res.statusCode).toBe(500);
    expect(res.body).toHaveProperty('error');
  });

});
</file>

<file path="sustainafood-backend/views/error.twig">
{% extends 'layout.twig' %}

{% block body %}
  <h1>{{message}}</h1>
  <h2>{{error.status}}</h2>
  <pre>{{error.stack}}</pre>
{% endblock %}
</file>

<file path="sustainafood-backend/views/index.twig">
{% extends 'layout.twig' %}

{% block body %}
  <h1>{{title}}</h1>
  <p>Welcome to {{title}}</p>
{% endblock %}
</file>

<file path="sustainafood-backend/views/layout.twig">
<!DOCTYPE html>
<html>
  <head>
    <title>{{ title }}</title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
    {% block body %}{% endblock %}
  </body>
</html>
</file>

<file path="sustainafood-frontend/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="sustainafood-frontend/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]
</file>

<file path="sustainafood-frontend/index.html">
<!doctype html>
<html lang="en">
  <head>

    <meta http-equiv="Cross-Origin-Opener-Policy" content="same-origin-allow-popups">
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="sustainafood-frontend/public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="sustainafood-frontend/README.md">
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh
</file>

<file path="sustainafood-frontend/src/api/donationService.js">
import axios from "axios";

export const addDonation = async (donationrData) => {
  return await axios.post('http://localhost:3000/donation/', donationrData, {
    headers: {
      "Content-Type": "multipart/form-data",
    },
  });
};
export const getDonations = async () => {
  return axios.get(`http://localhost:3000/donation/`);
};
export const getDonationById = async (id) => {
  try {
    return await axios.get(`http://localhost:3000/donation/${id}`);
  } catch (error) {
    console.error("Error fetching donation:", error);
    throw error;
  }
};
export const getDonationByRequestId = async (requestId) => {
  try {
    const response = await axios.get(`http://localhost:3000/donation/donations/${requestId}`);
    return response.data; // Return the actual data from the response
  } catch (error) {
    console.error('Error fetching donation:', error.response?.data || error.message);
    throw error; // Re-throw the error for the caller to handle
  }
};

export const getDonationByUserId = async (id) => {
  return axios.get(`http://localhost:3000/donation/user/${id}`);
};
export const getDonationsByUserId = async (id) => {

  return axios.get(`http://localhost:3000/donation/user/${id}`);
}
export const getRequestDonationsByUserId = async (id) => {

  return axios.get(`http://localhost:3000/donation/donor/${id}`);
}
export const deleteDonation = async (id) => {
  return axios.delete(`http://localhost:3000/donation/${id}`);
};
// donationService.js
export const updateDonation = async (id, donationData) => {
  try {
    return await axios.put(`http://localhost:3000/donation/${id}`, donationData, {
      headers: {
        "Content-Type": "application/json",
      },
    });
  } catch (error) {
    console.error("Error updating donation:", error.response?.data || error.message);
    throw error;
  }
};
</file>

<file path="sustainafood-frontend/src/api/donationTransactionService.js">
// src/api/donationTransactionService.js
import axios from 'axios';
export const API_BASE = 'http://localhost:3000/donationTransaction';

// Fetch all donation transactions
export const getAllDonationTransactions = async () => {
    try {
        const response = await axios.get(`${API_BASE}/`);
        console.log("Full API Response (getAllDonationTransactions):", JSON.stringify(response, null, 2));
        console.log("Response Data:", response.data);
        return response.data;
    } catch (error) {
        console.error('Error fetching all donation transactions:', {
            message: error.message,
            response: error.response ? error.response.data : null,
            status: error.response ? error.response.status : null,
        });
        throw error;
    }
};

// Fetch donation transactions by RequestNeed ID
export const getDonationTransactionsByRequestNeedId = async (requestNeedId) => {
    try {
        const response = await axios.get(`${API_BASE}/requestNeed/${requestNeedId}`);
        console.log(`Full API Response (getDonationTransactionsByRequestNeedId ${requestNeedId}):`, response);
        return response.data;
    } catch (error) {
        console.error(`Error fetching donation transactions for RequestNeed ID ${requestNeedId}:`, error.message);
        throw error;
    }
};

// Fetch donation transactions by Donation ID
export const getDonationTransactionsByDonationId = async (donationId) => {
    try {
        const response = await axios.get(`${API_BASE}/donation/${donationId}`);
        console.log(`Full API Response (getDonationTransactionsByDonationId ${donationId}):`, response);
        return response.data;
    } catch (error) {
        console.error(`Error fetching donation transactions for Donation ID ${donationId}:`, error.message);
        throw error;
    }
};

// Fetch donation transactions by Status
export const getDonationTransactionsByStatus = async (status) => {
    try {
        const response = await axios.get(`${API_BASE}/status/${status}`);
        console.log(`Full API Response (getDonationTransactionsByStatus ${status}):`, response);
        return response.data;
    } catch (error) {
        console.error(`Error fetching donation transactions with status ${status}:`, error.message);
        throw error;
    }
};

// Create a new donation transaction
export const createDonationTransaction = async (transactionData) => {
    try {
        const response = await axios.post(`${API_BASE}/`, transactionData);
        console.log("Full API Response (createDonationTransaction):", response);
        return response.data;
    } catch (error) {
        console.error('Error creating donation transaction:', error.message);
        throw error;
    }
};

// Update a donation transaction by ID
export const updateDonationTransaction = async (id, transactionData) => {
    try {
        const response = await axios.put(`${API_BASE}/${id}`, transactionData);
        console.log(`Full API Response (updateDonationTransaction ${id}):`, response);
        return response.data;
    } catch (error) {
        console.error(`Error updating donation transaction with ID ${id}:`, error.message);
        throw error;
    }
};

// Delete a donation transaction by ID
export const deleteDonationTransaction = async (id) => {
    try {
        const response = await axios.delete(`${API_BASE}/${id}`);
        console.log(`Full API Response (deleteDonationTransaction ${id}):`, response);
        return response.data;
    } catch (error) {
        console.error(`Error deleting donation transaction with ID ${id}:`, error.message);
        throw error;
    }
};

// Accept a donation transaction
export const acceptDonationTransaction = async (transactionId) => {
    try {
        const token = localStorage.getItem('token');
        if (!token) throw new Error('No authentication token found');
        
        const response = await axios.put(
            `${API_BASE}/${transactionId}/accept`,
            {},
            {
                headers: {
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            }
        );
        console.log(`Full API Response (acceptDonationTransaction ${transactionId}):`, response);
        return response.data;
    } catch (error) {
        console.error(`Error accepting donation transaction with ID ${transactionId}:`, {
            message: error.message,
            response: error.response ? error.response.data : null,
            status: error.response ? error.response.status : null,
        });
        throw error;
    }
};

// Reject a donation transaction
export const rejectDonationTransaction = async (transactionId, reason) => {
    try {
        const token = localStorage.getItem('token');
        if (!token) throw new Error('No authentication token found');
        
        const response = await axios.put(
            `${API_BASE}/${transactionId}/reject`,
            { rejectionReason: reason },
            {
                headers: {
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            }
        );
        console.log(`Full API Response (rejectDonationTransaction ${transactionId}):`, response);
        return response.data;
    } catch (error) {
        console.error(`Error rejecting donation transaction with ID ${transactionId}:`, {
            message: error.message,
            response: error.response ? error.response.data : null,
            status: error.response ? error.response.status : null,
        });
        throw error;
    }
};

// Fetch transactions by Donation ID
async function getTransactionByRequestId(req, res) {
  try {
    const { requestId } = req.params;

    if (!mongoose.Types.ObjectId.isValid(requestId)) {
      return res.status(400).json({ message: 'Invalid request ID' });
    }

    const transaction = await DonationTransaction.findOne({ requestNeed: requestId })
      .populate({
        path: 'requestNeed',
        populate: [
          { path: 'recipient' },
          { path: 'requestedProducts.product' },
          { path: 'requestedMeals.meal' },
        ],
      })
      .populate('donation')
      .populate('allocatedProducts.product')
      .populate('allocatedMeals.meal');

    if (!transaction) {
      return res.status(404).json({ message: 'Transaction not found for this request' });
    }

    res.status(200).json(transaction);
  } catch (error) {
    console.error('Error fetching transaction:', error);
    res.status(500).json({ message: 'Failed to fetch transaction', error: error.message });
  }
}
// Create and accept a donation transaction
export const createAndAcceptDonationTransaction = async (donationId, requestNeedId) => {
    try {
        const token = localStorage.getItem('token');
        if (!token) throw new Error('No authentication token found');
        
        const response = await axios.post(
            `${API_BASE}/create-and-accept`,
            { donationId, requestNeedId },
            {
                headers: {
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            }
        );
        console.log(`Full API Response (createAndAcceptDonationTransaction):`, response);
        return response.data;
    } catch (error) {
        console.error(`Error creating and accepting donation transaction:`, {
            message: error.message,
            response: error.response ? error.response.data : null,
            status: error.response ? error.response.status : null,
        });
        throw error;
    }
};
export const createAndAcceptDonationTransactionBiderc = async (donationId, requestNeedId) => {
    try {
        const token = localStorage.getItem('token');
        if (!token) throw new Error('No authentication token found');
        
        const response = await axios.post(
            `${API_BASE}/create-et-accept`,
            { donationId, requestNeedId },
            {
                headers: {
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            }
        );
        console.log(`Full API Response (createAndAcceptDonationTransactionBiderc):`, response);
        return response.data;
    } catch (error) {
        console.error(`Error creating and accepting donation transaction:`, {
            message: error.message,
            response: error.response ? error.response.data : null,
            status: error.response ? error.response.status : null,
        });
        throw error;
    }
};
// Fetch a donation transaction by ID

export const getDonationTransactionById = async (id) => {
    try {
        const response = await axios.get(`${API_BASE}/${id}`, {
            params: {
                populate: 'requestNeed donation allocatedProducts.product allocatedMeals.meal donor recipient'
            }
        });
        console.log(`Full API Response (getDonationTransactionById ${id}):`, response);
        return response.data;
    } catch (error) {
        console.error(`Error fetching donation transaction with ID ${id}:`, error.message);
        throw error;
    }
};

// Fetch transactions by recipient ID
export const getTransactionsByRecipientId = async (recipientId) => {
    try {
        const response = await axios.get(`${API_BASE}/recipient/${recipientId}`);
        console.log(`Full API Response (getTransactionsByRecipientId ${recipientId}):`, response);
        return response.data;
    } catch (error) {
        console.error(`Error fetching transactions for recipient ID ${recipientId}:`, error.message);
        throw error;
    }
};
// Reject a donation directly
export const rejectDonation = async (donationId, rejectionReason) => {
    try {
        const token = localStorage.getItem('token');
        if (!token) throw new Error('No authentication token found');
        
        const response = await axios.put(
            `${API_BASE}/donation/${donationId}/reject`,
            { rejectionReason: rejectionReason },
            {
                headers: {
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            }
        );
        console.log(`Full API Response (rejectDonation ${donationId}):`, response);
        return response.data;
    } catch (error) {
        console.error(`Error rejecting donation with ID ${donationId}:`, {
            message: error.message,
            response: error.response ? error.response.data : null,
            status: error.response ? error.response.status : null,
        });
        throw error;
    }
};
export const rejectRequest = async (requestId, reason) => {
    const token = localStorage.getItem('token');
    return await axios.put(
      `${API_URL}/reject-request/${requestId}`,
      { reason },
      { headers: { Authorization: `Bearer ${token}` } }
    );
  };
  
// New function for fetching transactions by donor ID
export const getDonationTransactionsByDonorId = async (donorId) => {
    try {
        const response = await axios.get(`${API_BASE}/donor/${donorId}`);
        console.log(`Full API Response (getDonationTransactionsByDonorId ${donorId}):`, response);
        return response.data;
    } catch (error) {
        console.error(`Error fetching donation transactions for Donor ID ${donorId}:`, error.message);
        throw error;
    }
};
export default {
    getDonationTransactionsByDonorId,
    getAllDonationTransactions,
    getDonationTransactionById,
    getDonationTransactionsByRequestNeedId,
    getDonationTransactionsByDonationId,
    getDonationTransactionsByStatus,
    createDonationTransaction,
    updateDonationTransaction,
    deleteDonationTransaction,
    acceptDonationTransaction,
    rejectDonationTransaction,
    createAndAcceptDonationTransaction,
    getTransactionsByRecipientId,
    rejectDonation,
    rejectRequest
};
</file>

<file path="sustainafood-frontend/src/api/notificationService.js">
import axios from "axios";

// Créer une notification
export const createnotification = async (requestData) => {
  try {
    const response = await axios.post('http://localhost:3000/notification', requestData, {
      headers: {
        "Content-Type": "application/json",
      },
    });
    return response.data;
  } catch (error) {
    console.error('Error creating notification:', error);
    throw new Error('Failed to create notification');
  }
};

// Obtenir toutes les notifications d'un récepteur
export const getNotificationsByReceiver = async (receiverId) => {
  try {
    const response = await axios.get(`http://localhost:3000/notification/receiver/${receiverId}`);
    return response.data;
  } catch (error) {
    console.error('Error fetching notifications:', error);
    throw new Error('Failed to fetch notifications');
  }
};

// Obtenir une notification par son ID
export const getNotificationById = async (notificationId) => {
  try {
    const response = await axios.get(`http://localhost:3000/notification/${notificationId}`);
    return response.data;
  } catch (error) {
    console.error('Error fetching notification by ID:', error);
    throw new Error('Failed to fetch notification by ID');
  }
};

// Marquer une notification comme lue
export const markNotificationAsRead = async (notificationId) => {
  try {
    const response = await axios.put(`http://localhost:3000/notification/${notificationId}/read`);
    return response.data;
  } catch (error) {
    console.error('Error marking notification as read:', error);
    throw new Error('Failed to mark notification as read');
  }
};

// Supprimer une notification
export const deleteNotification = async (notificationId) => {
  try {
    const response = await axios.delete(`http://localhost:3000/notification/${notificationId}`);
    return response.data;
  } catch (error) {
    console.error('Error deleting notification:', error);
    throw new Error('Failed to delete notification');
  }
};

// Obtenir le nombre de notifications non lues pour un récepteur
export const getUnreadNotificationsCount = async (receiverId) => {
  try {
    const response = await axios.get(`http://localhost:3000/notification/receiver/${receiverId}/unread-count`);
    return response.data;
  } catch (error) {
    console.error('Error fetching unread notifications count:', error);
    throw new Error('Failed to fetch unread notifications count');
  }
};
</file>

<file path="sustainafood-frontend/src/api/productService.js">
import axios from "axios";

const PRODUCT_BASE_URL = 'http://localhost:3000/product';

// ✅ Get all products
export const getAllProducts = async () => {
  try {
    return await axios.get(`${PRODUCT_BASE_URL}/all`);
  } catch (error) {
    console.error("Error fetching all products:", error.response?.data || error.message);
    throw error;
  }
};

// ✅ Get product by ID
export const getProductById = async (id) => {
  try {
    return await axios.get(`${PRODUCT_BASE_URL}/${id}`);
  } catch (error) {
    console.error("Error fetching product by ID:", error.response?.data || error.message);
    throw error;
  }
};

// ✅ Get products by Donation ID
export const getProductsByDonationId = async (idDonation) => {
  try {
    return await axios.get(`${PRODUCT_BASE_URL}/donation/${idDonation}`);
  } catch (error) {
    console.error("Error fetching products by donation ID:", error.response?.data || error.message);
    throw error;
  }
};

// ✅ Get products by Status
export const getProductsByStatus = async (status) => {
  try {
    return await axios.get(`${PRODUCT_BASE_URL}/status/${status}`);
  } catch (error) {
    console.error("Error fetching products by status:", error.response?.data || error.message);
    throw error;
  }
};

// ✅ Create a new product (with optional image upload)
export const createProduct = async (productData, imageFile = null) => {
  try {
    // If there's an image, use FormData for multipart/form-data
    if (imageFile) {
      const formData = new FormData();
      // Append the image file
      formData.append("image", imageFile);
      // Append other product data fields
      Object.keys(productData).forEach((key) => {
        formData.append(key, productData[key]);
      });

      return await axios.post(`${PRODUCT_BASE_URL}/create`, formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });
    } else {
      // If no image, send as JSON
      return await axios.post(`${PRODUCT_BASE_URL}/create`, productData, {
        headers: {
          "Content-Type": "application/json",
        },
      });
    }
  } catch (error) {
    console.error("Error creating product:", error.response?.data || error.message);
    throw error;
  }
};

// ✅ Update a product by ID (with optional image upload)
export const updateProduct = async (id, productData, imageFile = null) => {
  try {
    // If there's an image, use FormData for multipart/form-data
    if (imageFile) {
      const formData = new FormData();
      // Append the image file
      formData.append("image", imageFile);
      // Append other product data fields
      Object.keys(productData).forEach((key) => {
        formData.append(key, productData[key]);
      });

      return await axios.put(`${PRODUCT_BASE_URL}/update/${id}`, formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });
    } else {
      // If no image, send as JSON
      return await axios.put(`${PRODUCT_BASE_URL}/update/${id}`, productData, {
        headers: {
          "Content-Type": "application/json",
        },
      });
    }
  } catch (error) {
    console.error("Error updating product:", error.response?.data || error.message);
    throw error;
  }
};

// ✅ Delete a product by ID
export const deleteProduct = async (id) => {
  try {
    return await axios.delete(`${PRODUCT_BASE_URL}/delete/${id}`);
  } catch (error) {
    console.error("Error deleting product:", error.response?.data || error.message);
    throw error;
  }
};
</file>

<file path="sustainafood-frontend/src/api/requestNeedsService.js">
import axios from "axios";
export const createrequests = async (requestData) => {
  return await axios.post('http://localhost:3000/request/', requestData, {
    headers: {
      "Content-Type": "application/json",
    },
  });
};
export const createRequestNeedForExistingDonation = async (donationId, requestData) => {
  console.log('Sending request data:', requestData);

  try {
    const response = await axios.post(
      `http://localhost:3000/request/requestdonation/${donationId}`,
      requestData,
      {
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
    return response.data;
  } catch (error) {
    console.error('Error in createRequestNeedForExistingDonation:', error.response?.data || error.message);
    throw error.response?.data || error;
  }
};
export const addDonationToRequest = async (requestId, donationData) => {
  console.log('Sending donation data:', requestId);
  const token = localStorage.getItem('token');
  if (!token) {
    throw new Error('User not authenticated - No token found');
  }

  console.log('Sending donation data:', donationData);
  console.log('Token:', token);

  try {
    const response = await axios.post(
      `http://localhost:3000/request/addDonationToRequest/${requestId}/donations`,
      donationData,
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      }
    );
    return response.data;
  } catch (error) {
    console.error('Error in addDonationToRequest:', error.response?.data || error.message);
    throw error.response?.data || error;
  }
};

export const getrequests = async () => {
  return axios.get(`http://localhost:3000/request/`);
};

export const getrequestsback = async () => {
  return axios.get(`http://localhost:3000/request/requests`);
};
export const getRequestsByRecipientId = async (id) => {
  const token = localStorage.getItem('token');
  return axios.get(`http://localhost:3000/request/recipient/${id}`, {
    headers: {
      Authorization: `Bearer ${token}`
    }
  });
};
export const getRequestById = async (id) => {
  try {
    return await axios.get(`http://localhost:3000/request/${id}`);
  } catch (error) {
    console.error("Error fetching request:", error.response?.data || error.message);
    throw error;
  }
};
export const deleteRequest = async (id) => {
  try{
  return await axios.delete(`http://localhost:3000/request/${id}`);
} catch (error) {
    console.error("Error deleting request:", error.response?.data || error.message);
    throw error;
  }
};
export const updateRequest = async (id, RequestData) => {
  console.log(RequestData);
  try{
  return await axios.put(`http://localhost:3000/request/${id}`, RequestData, {
    headers: {
      "Content-Type": "application/json",
    },
  });
} catch (error) {
    console.error("Error updating request:", error.response?.data || error.message);
    throw error;
  }
};

export const getRequestsByDonationId = async (donationId) => {
  const token = localStorage.getItem('token');
  return await axios.get(`http://localhost:3000/request/donation/${donationId}`, {
    headers: { Authorization: `Bearer ${token}` },
  });
};
export const updateRequestStatus = async (requestId, status) => {
  const token = localStorage.getItem('token');
  if (!token) {
    throw new Error('User not authenticated - No token found');
  }

  try {
    const response = await axios.put(
      `http://localhost:3000/request-needs/request/${requestId}/status`,
      { status },
      {
        headers: { Authorization: `Bearer ${token}` }
      }
    );
    return response;
  } catch (error) {
    console.error('Error updating request status:', error.response?.data || error.message);
    throw error;
  }
};
</file>

<file path="sustainafood-frontend/src/App.css">
#root {
  width: 100%;
  margin: 0;
  padding: 0;
  text-align: center;

}
</file>

<file path="sustainafood-frontend/src/assets/images/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="sustainafood-frontend/src/assets/styles/AccountSettings.css">
.accountsettings-page {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }
  
  .accountsettings-content {
    flex: 1;
    background-color: #f2f7eb;
    padding: 2rem 0;
  }
  
  .accountsettings-container {
    max-width: 600px;
    margin: 0 auto;
    padding: 2rem;
    background-color: #ffffff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .accountsettings-title {
    color: #2e7d32;
    font-size: 2rem;
    margin-bottom: 1.5rem;
  }
  
  .accountsettings-section {
    margin-bottom: 2rem;
  }
  
  .accountsettings-section h2 {
    color: #388e3c;
    font-size: 1.5rem;
    margin-bottom: 1rem;
  }
  
  .accountsettings-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .accountsettings-form-group {
    display: flex;
    flex-direction: column;
  }
  
  .accountsettings-form-group label {
    margin-bottom: 0.5rem;
    color: #4a4a4a;
  }
  
  .accountsettings-form-group input {
    padding: 0.5rem;
    border: 1px solid #ccc;
    border-radius: 4px;
  }
  
  .accountsettings-button {
    background-color: #4caf50;
    color: white;
    border: none;
    padding: 0.75rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
  }
  
  .accountsettings-button:hover {
    background-color: #45a049;
  }
  
  .accountsettings-twofa-toggle {
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  
  .accountsettings-switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 34px;
  }
  
  .accountsettings-switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }
  
  .accountsettings-slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;
  }
  
  .accountsettings-slider:before {
    position: absolute;
    content: "";
    height: 26px;
    width: 26px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: .4s;
  }
  
  .accountsettings-switch input:checked + .accountsettings-slider {
    background-color: #4caf50;
  }
  
  .accountsettings-switch input:checked + .accountsettings-slider:before {
    transform: translateX(26px);
  }
  
  .accountsettings-slider.accountsettings-round {
    border-radius: 34px;
  }
  
  .accountsettings-slider.accountsettings-round:before {
    border-radius: 50%;
  }
  
  .accountsettings-section p {
    margin-bottom: 1rem;
    color: #666;
    line-height: 1.5;
  }
  
  .accountsettings-deactivate {
    background-color: #f44336;
  }
  
  .accountsettings-deactivate:hover {
    background-color: #d32f2f;
  }
  
  /* Add these styles to your existing CSS file */

.custom-alert {
  position: fixed;
  top: 24px;
  left: 50%;
  transform: translateX(-50%);
  z-index: 1000;
  min-width: 300px;
  max-width: 90%;
  background: white;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  overflow: hidden;
  animation: slideIn 0.3s ease-out;
}

.custom-alert.success {
  border-left: 4px solid #4caf50;
}

.custom-alert.error {
  border-left: 4px solid #f44336;
}

.alert-content {
  display: flex;
  align-items: center;
  padding: 16px;
  gap: 12px;
}

.alert-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 24px;
  height: 24px;
}

.success .alert-icon {
  color: #4caf50;
}

.error .alert-icon {
  color: #f44336;
}

.alert-close {
  background: none;
  border: none;
  padding: 4px;
  cursor: pointer;
  color: #666;
  margin-left: auto;
  border-radius: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background-color 0.2s;
}

.alert-close:hover {
  background-color: rgba(0, 0, 0, 0.05);
}

.alert-progress {
  height: 3px;
  background: #e0e0e0;
  width: 100%;
}

.success .alert-progress {
  background: #4caf50;
  animation: progress 3s linear forwards;
}

.error .alert-progress {
  background: #f44336;
  animation: progress 3s linear forwards;
}

@keyframes slideIn {
  from {
    transform: translate(-50%, -100%);
    opacity: 0;
  }
  to {
    transform: translate(-50%, 0);
    opacity: 1;
  }
}

@keyframes progress {
  from {
    width: 100%;
  }
  to {
    width: 0%;
  }
}

/* Add a slide-out animation when the alert is being removed */
.custom-alert.hiding {
  animation: slideOut 0.3s ease-in forwards;
}

@keyframes slideOut {
  from {
    transform: translate(-50%, 0);
    opacity: 1;
  }
  to {
    transform: translate(-50%, -100%);
    opacity: 0;
  }
}

/* Add some sparkle effects for success messages */
.success .alert-icon {
  position: relative;
}

.success .alert-icon::before,
.success .alert-icon::after {
  content: "✨";
  position: absolute;
  font-size: 12px;
  animation: sparkle 1.5s ease-in-out infinite;
}

.success .alert-icon::before {
  top: -8px;
  right: -8px;
}

.success .alert-icon::after {
  bottom: -8px;
  left: -8px;
  animation-delay: 0.75s;
}

@keyframes sparkle {
  0%,
  100% {
    opacity: 0;
    transform: scale(0.5);
  }
  50% {
    opacity: 1;
    transform: scale(1);
  }
}

/* Responsive adjustments */
@media (max-width: 480px) {
  .custom-alert {
    min-width: calc(100% - 32px);
    margin: 0 16px;
  }
}

/* Confirmation Modal Styles */
.confirmation-modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.confirmation-modal {
  background: white;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  padding: 20px;
  max-width: 400px;
  width: 90%;
  text-align: center;
}

.confirmation-modal-content p {
  font-size: 16px;
  color: #333;
  margin-bottom: 20px;
}

.confirmation-modal-buttons {
  display: flex;
  justify-content: center;
  gap: 10px;
}

.confirmation-modal-button {
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.3s;
}

.confirmation-modal-button.confirm {
  background-color: #4caf50;
  color: white;
}

.confirmation-modal-button.confirm:hover {
  background-color: #45a049;
}

.confirmation-modal-button.cancel {
  background-color: #f44336;
  color: white;
}

.confirmation-modal-button.cancel:hover {
  background-color: #d32f2f;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/AiClassification.css">
.ai-classification-container {
    max-width: 1200px;
    margin: 40px auto;
    padding: 20px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.ai-classification-container h1 {
    text-align: center;
    color: #333;
    margin-bottom: 30px;
    font-size: 2rem;
}

.section {
    margin-bottom: 40px;
}

.section h2 {
    color: #4CAF50;
    margin-bottom: 20px;
    font-size: 1.5rem;
}

.table-container {
    margin-bottom: 20px;
    padding: 15px;
    background-color: #f9f9f9;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.table-container h3 {
    margin-bottom: 10px;
    color: #555;
    font-size: 1.2rem;
}

.donation-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 0.9rem;
}

.donation-table th,
.donation-table td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

.donation-table th {
    background-color: #4CAF50;
    color: white;
    font-weight: bold;
}

.donation-table tr:nth-child(even) {
    background-color: #f2f2f2;
}

.donation-table tr:hover {
    background-color: #e0e0e0;
}

.donation-table select {
    padding: 5px;
    border: 1px solid #ccc;
    border-radius: 4px;
    background-color: #fff;
    cursor: pointer;
}

.donation-table select:focus {
    outline: none;
    border-color: #4CAF50;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/Alert.css">
/* Base styles */
.alert {
    position: fixed;
    top: 20px;
    right: 20px;
    min-width: 280px;
    max-width: 420px;
    padding: 15px;
    border-radius: 10px;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
    display: flex;
    align-items: center;
    opacity: 0;
    transform: translateX(100%) scale(0.9);
    transition: opacity 0.6s ease-out, transform 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);
    font-family: 'Poppins', sans-serif;
    font-size: 16px;
    font-weight: 500;
    z-index: 9999;
    overflow: hidden;
}

/* Show animation */
.alert.show {
    opacity: 1;
    transform: translateX(0) scale(1);
}

/* Disappearing animation */
.alert.hide {
    opacity: 0;
    transform: translateX(50px) scale(0.8) rotate(5deg);
    transition: opacity 0.4s, transform 0.4s ease-in;
}

/* Success */
.alert-success {
    background: linear-gradient(135deg, #28a745, #34d058);
    color: white;
    border-left: 6px solid #155724;
    box-shadow: 0 0 15px rgba(40, 167, 69, 0.5);
}

/* Warning */
.alert-warning {
    background: linear-gradient(135deg, #ffcc00, #ff8800);
    color: #fff;
    border-left: 6px solid #856404;
    box-shadow: 0 0 15px rgba(255, 204, 0, 0.5);
}

/* Error */
.alert-error {
    background: linear-gradient(135deg, #dc3545, #ff0000);
    color: white;
    border-left: 6px solid #721c24;
    box-shadow: 0 0 15px rgba(220, 53, 69, 0.5);
}

/* Icon */
.alert-icon {
    margin-right: 12px;
    font-size: 24px;
    animation: iconPop 0.8s ease-in-out infinite alternate;
}

/* Icon hover effect */
.alert:hover .alert-icon {
    transform: rotate(-10deg) scale(1.1);
}

/* Close button */
.alert-close {
    margin-left: auto;
    cursor: pointer;
    font-size: 20px;
    color: white;
    transition: transform 0.3s, opacity 0.3s;
}

.alert-close:hover {
    transform: scale(1.2);
    opacity: 0.8;
}

/* Icon Animation */
@keyframes iconPop {
    from {
        transform: scale(1);
    }
    to {
        transform: scale(1.1);
    }
}

/* Glow Animation */
@keyframes glow {
    0% {
        box-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
    }
    100% {
        box-shadow: 0 0 20px rgba(255, 255, 255, 0.5);
    }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/AnomaliesDashbord.css">
.anomalies-section {
    margin-top: 20px;
  }
  
  .anomalies-section h2 {
    font-size: 24px;
    margin-bottom: 15px;
  }
  
  .anomalies-table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .anomalies-table th,
  .anomalies-table td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #ddd;
  }
  
  .anomalies-table th {
    background-color: #f4f4f4;
    font-weight: bold;
  }
  
  .anomalies-table td {
    vertical-align: middle;
  }
  
  .approve-btn,
  .reject-btn {
    padding: 6px 12px;
    margin-right: 10px;
    border: none;
    border-radius: 4px;
    color: white;
    cursor: pointer;
  }
  
  .approve-btn {
    background-color: #28a745; /* Vert */
  }
  
  .reject-btn {
    background-color: #dc3545; /* Rouge */
  }
  
  .approve-btn:hover {
    background-color: #218838;
  }
  
  .reject-btn:hover {
    background-color: #c82333;
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/donationDetails.css">
/* src/assets/styles/backoffcss/donationDetails.css */

.product-detail-container {
    display: flex; /* Pour aligner Sidebar et content */
  }
  
  .product-detail-content {
    flex: 1; /* Prend tout l'espace disponible */
    padding: 20px;
  }
  
  .product-card {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    padding: 20px;
    transform: translateY(50px); /* Ajuste cette valeur selon tes besoins */
  }
  
  .product-header {
    margin-bottom: 20px;
    text-align: center;
  }
  
  .details-table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .details-table td {
    padding: 8px 12px;
    border-bottom: 1px solid #f0f0f0;
    text-align: left;
  }
  
  .details-table td:first-child {
    font-weight: bold;
    width: 20%;
  }
  
  .details-table tbody tr:last-child td {
    border-bottom: none;
  }
  
  .loading {
      text-align: center;
      padding: 20px;
      font-style: italic;
      color: #888;
  }
  
  /* Styles spécifiques pour la page de détails des dons */
  .donation-detail-content {
    flex: 1;
    padding: 20px;
  }
  
  .donation-card {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    padding: 20px;
    transform: translateY(50px);
  }
  
  .donation-header {
    margin-bottom: 20px;
    text-align: center;
  }
  
  .donation-details-table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .donation-details-table td {
    padding: 8px 12px;
    border-bottom: 1px solid #f0f0f0;
    text-align: left;
  }
  
  .donation-details-table td:first-child {
    font-weight: bold;
    width: 30%;
  }
  
  .donation-details-table tbody tr:last-child td {
    border-bottom: none;
  }
  
  .loading {
      text-align: center;
      padding: 20px;
      font-style: italic;
      color: #888;
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/donationStatus.css">
.donation-status {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.donation-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 15px;
}

.donation-info {
    display: flex;
    align-items: center;
    gap: 10px;
}

.donation-info svg {
    font-size: 24px;
}

.donation-name {
    font-weight: bold;
}

.progress-container {
    flex: 1;
    height: 6px;
    background: #eee;
    border-radius: 5px;
    margin-left: 10px;
    overflow: hidden;
}

.progress-bar {
    height: 100%;
    border-radius: 5px;
}

.progress-text {
    width: 40px;
    text-align: right;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/navbar.css">
/* Style général de la navbar */
.navbar {
    width: calc(100% - 270px); /* Adjust based on sidebar width */
    height: 60px;
    position: fixed;
    top: 0;
    left: 270px; /* Sidebar width */
    background: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 20px;
    box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    transition: all 0.3s ease-in-out;
}

/* Ajustement si la sidebar est réduite */
.sidebar-collapsed .navbar {
    width: calc(100% - 80px);
    left: 80px;
}

/* Barre de recherche */
.search-container {
    display: flex;
    background: #f9f9f9;
    margin-top: 15px;
}

.search-container input {
    border: none;
    outline: none;
    background: transparent;
    padding: 5px;
    width: 200px;
}

.search-icon {
    color: #666;
    cursor: pointer;
    background-color: white;
}

/* Espace entre les icônes */
.navbar-actions {
    display: flex;
    align-items: center;
    gap: 20px; /* Augmente l'espacement */
}

/* Style des icônes */
.icon {
    font-size: 22px;
    cursor: pointer;
    transition: 0.3s ease-in-out;
}

/* Couleurs des icônes */
.globe { color: #3498db; }  /* Bleu */
.moon { color: #f1c40f; }   /* Jaune */
.bell { color: #e74c3c; }   /* Rouge */
.user { color: #2c3e50; }   /* Bleu foncé */

/* Effet au survol */
.icon:hover {
    transform: scale(1.1);
}

/* Style de la notification */
.notification-container {
    position: relative;
}

.badge {
    position: absolute;
    top: -5px;
    right: -5px;
    background: red;
    color: white;
    font-size: 12px;
    padding: 3px 6px;
    border-radius: 50%;
}

/* Assure que le contenu sous la navbar n'est pas caché */
.content-container {
    margin-top: 80px; /* Ajoute un espace sous la navbar */
    padding: 20px;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/ngoList.css">
/* Style de la page ongs */

/* Style for the header container */
.header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

/* Style for the export PDF button */
.export-pdf-btn {
    background-color: #4CAF50; /* Green */
    border: none;
    color: white;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    font-size: 16px;
    cursor: pointer;
    border-radius: 5px;
}

.export-pdf-btn:hover {
    background-color: #45a049;
}
/* Sorting Container */
.sort-container {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 20px;
}

.sort-container label {
    font-size: 16px;
    font-weight: 500;
    color: #333;
}

.sort-container select {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
    background-color: white;
    transition: border-color 0.3s ease;
}

.sort-container select:hover {
    border-color: #007bff;
}

.sort-container select:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
}

.ong-list {
    background: white;
    padding: 15px;
    border-radius: 10px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 1200px;
    margin: 20px auto;
    margin-top: 50px;

}

/* Titre */
.ong-list h3 {
    font-size: 18px;
    font-weight: bold;
    margin-bottom: 15px;
}

/* Tableau */
table {
    width: 100%;
    border-collapse: collapse;
}

th, td {
    padding: 10px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

/* Photo des ongs */
.ong-photoList {
    width: 40px;
    height: 40px;
    border-radius: 50%;
}

/* Boutons actions */
.view-btn,  .delete-btn {
    border: none;
    background: none;
    cursor: pointer;
    font-size: 16px;
    margin-right: 8px;
}

.view-btn:hover {
    color: blue;
}



.delete-btn:hover {
    color: red;
}
.pagination {
    display: flex;
    justify-content: center;
    list-style: none;
    padding: 10px;
}

.pagination li {
    margin: 0 5px;
    padding: 8px 12px;
    border: 1px solid #ccc;
    cursor: pointer;
    background-color: white;
    border-radius: 5px;
}

.paginationActive {
    font-weight: bold;
    background-color: #007bff;
    color: white;
    border: none;
}

.previousBttn, .nextBttn {
    margin: 5px;
    padding: 5px 10px;
    cursor: pointer;
}

.paginationDisabled {
    opacity: 0.5;
    cursor: not-allowed;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/ProductDetail.css">
/* src/assets/styles/backoffcss/ProductDetail.css */

.product-detail-container {
    display: flex; /* Pour aligner Sidebar et content */
  }
  
  .product-detail-content {
    flex: 1; /* Prend tout l'espace disponible */
    padding: 20px;
  }
  
  .product-card {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    padding: 20px;
    transform: translateY(50px); /* Ajuste cette valeur selon tes besoins */
  }
  
  .product-header {
    margin-bottom: 20px;
    text-align: center;
  }
  
  .details-table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .details-table td {
    padding: 8px 12px;
    border-bottom: 1px solid #f0f0f0;
    text-align: left;
  }
  
  .details-table td:first-child {
    font-weight: bold;
    width: 20%;
  }
  
  .details-table tbody tr:last-child td {
    border-bottom: none;
  }
  
  .loading {
      text-align: center;
      padding: 20px;
      font-style: italic;
      color: #888;
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/ProductList.css">
/* General Dashboard Styles */
.dashboard-container {
    display: flex;
    min-height: 100vh;
  }
  
  .dashboard-content {
    flex: 1;
    display: flex;
    flex-direction: column;
  }
  
  /* Product List Styles */
  .product-list {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    margin: 20px;
  }
  
  /* Header Container: "Product Management" title and "Export to PDF" button */
  .header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
  }
  
  .header-container h2 {
    font-size: 24px;
    margin: 0;
    color: #333;
  }
  
  /* Export PDF Button */
  .export-pdf-btn {
    background-color: #4CAF50;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    display: flex;
    align-items: center;
    gap: 8px;  /* space between icon and text */
    transition: background-color 0.2s ease;
  }
  
  .export-pdf-btn:hover {
    background-color: #45a049;
  }
  
  /* Search Container */
  .search-container {
    margin-bottom: 20px;
  }
  
  .search-container input[type="text"] {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
    outline: none; /* remove default focus outline */
  }
  
  .search-container input[type="text"]:focus {
    border-color: #007bff; /* highlight on focus */
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.3); /* add a subtle shadow */
  }
  
  
  /* Table Styles */
  table {
    width: 100%;
    border-collapse: collapse;
  }
  
  thead {
    background-color: #f8f9fa; /* Optional: Light grey background for thead */
  }
  
  th,
  td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #ddd;
  }
  
  th {
    font-weight: bold;
    color: #333;
  }
  
  tbody tr:hover {
    background-color: #f5f5f5; /* Optional: Highlight row on hover */
  }
  
  /* Action Buttons */
  .action-btn {
    background-color: #007bff;
    color: white;
    padding: 8px 12px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-right: 5px;
    font-size: 14px;
    transition: background-color 0.2s ease;
  }
  
  .action-btn:hover {
    background-color: #0056b3;
  }
  
  /* Pagination Styles */
  .pagination {
    display: flex;
    justify-content: center;
    list-style: none;
    padding: 0;
    margin-top: 20px;
  }
  
  .pagination li {
    margin: 0 5px;
  }
  
  .pagination a {
    color: #333;
    padding: 8px 12px;
    text-decoration: none;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: white;
    transition: background-color 0.2s ease;
  }
  
  .pagination a:hover,
  .pagination a:focus {
    background-color: #eee;
  }
  
  .pagination .active a {
    background-color: #007bff;
    color: white;
    border-color: #007bff;
  }
  
  .pagination .disabled a {
    color: #999;
    cursor: not-allowed;
    background-color: #f9f9f9;
    border-color: #ddd;
  }
  
  /* Loading and Error States */
  .product-list > div {  /* Targeting the loading/error divs */
    padding: 20px;
    text-align: center;
    font-size: 16px;
    color: #555;
  }
  
  
  
  /* Responsive Design */
  @media (max-width: 768px) {
    .product-list {
      margin: 10px;
      padding: 10px;
    }
  
    .header-container {
      flex-direction: column;
      align-items: flex-start;
    }
  
    .header-container h2 {
      margin-bottom: 10px;
    }
  
    .search-container input[type="text"] {
      padding: 8px;
      font-size: 14px;
    }
  
    th,
    td {
      padding: 8px;
      font-size: 14px;
    }
  
    .action-btn {
      padding: 6px 10px;
      font-size: 12px;
    }
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/RequestDetail.css">
.request-detail-container {
  display: flex;
}

.request-detail-content {
  flex: 1;
  padding: 20px;
}

/* 🎴 Styled Card */
.request-card {
  background-color: #fff;
  border-radius: 12px;
  box-shadow: 0 4px 15px rgba(0, 128, 0, 0.2); /* 💚 Green Glow */
  padding: 20px;
  margin: 50px auto;
  border-left: 6px solid #228b22; /* 💚 Green Accent */
}

.request-header {
  text-align: center;
  margin-bottom: 20px;
  color: #228b22; /* 💚 Green Title */
}

/* 🧍 Recipient Info */
.recipient-info {
  display: flex;
  align-items: center;
  gap: 15px;
  margin-bottom: 20px;
}

.profile-img-details {
  width: 70px;
  height: 70px;
  border-radius: 50%;
  object-fit: cover;
  border: 3px solid #228b22; /* 💚 Green Border */
}

.recipient-text h3 {
  margin: 0;
  font-size: 20px;
}

.recipient-text .role {
  color: #228b22;
  font-size: 14px;
  font-weight: bold;
}

/* ℹ️ General Details */
.request-info {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.detail-item {
  padding: 10px;
  background: #f8f8f8;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 500;
  display: flex;
  align-items: center;
  gap: 5px;
}

/* 📦 Product Cards */
.products-section {
  margin-top: 20px;
}

.products-grid {
  display: grid;

  gap: 15px;
  margin-top: 15px;

}

.product-card-details {
  background: #e6ffe6; /* 🍀 Light Green */
  padding: 12px;
  border-radius: 8px;
  gap: 25px;

  text-align: center;
  display: flex;
  box-shadow: 0 3px 8px rgba(0, 128, 0, 0.2);
  border-left: 4px solid #228b22;
  background-color: #fff;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/RequestTable.css">
.request-list{
background-color: white;
padding: 20px;
border-radius: 10px;
box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    margin-top: 12px;
}
/* General Table Styling */
table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
  background-color: #ffffff;
  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
  border-radius: 5px;
  overflow: hidden;
}

/* Table Header */
table thead {
  background-color: #4CAF50;
  color: white;
  text-align: left;
}

table th, table td {
  padding: 12px;
  border: 1px solid #ddd;
  text-align: left;
  font-size: 14px;
}

/* Table Rows */
table tbody tr:nth-child(even) {
  background-color: #f9f9f9;
}

table tbody tr:hover {
  background-color: #f1f1f1;
  transition: background-color 0.2s ease-in-out;
}

/* Action Buttons */
.action-buttons {
  display: flex;
  gap: 5px;
  justify-content: center;
}

.view-btn {
  background: none;
  border: none;
  cursor: pointer;
  padding: 5px;
  font-size: 16px;
}

.view-btn a {
  color: #4CAF50;
  text-decoration: none;
}

.view-btn:hover a {
  color: #388E3C;
}

/* Pagination */
.pagination {
  display: flex;
  list-style: none;
  padding: 0;
  justify-content: center;
  margin-top: 20px;
}

.pagination li {
  padding: 8px 12px;
  margin: 0 5px;
  cursor: pointer;
  border-radius: 4px;
  background: #f0f0f0;
  border: 1px solid #ccc;
}

.pagination .active {
  background: #4CAF50;
  color: white;
  border: none;
}

/* Sort Container */
.sort-container {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 15px;
}

.sort-container select {
  padding: 6px 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

/* Export Button */
.export-pdf-btn {
  background-color: #d32f2f;
  color: white;
  border: none;
  padding: 8px 12px;
  cursor: pointer;
  font-size: 14px;
  display: flex;
  align-items: center;
  gap: 5px;
  border-radius: 4px;
}

.export-pdf-btn:hover {
  background-color: #b71c1c;
}

/* Responsive Design */
@media (max-width: 768px) {
  table {
    display: block;
    overflow-x: auto;
  }

  .sort-container {
    flex-direction: column;
    align-items: flex-start;
  }

  .export-pdf-btn {
    width: 100%;
    justify-content: center;
  }
}

/* Filter Section */
.filter-container {
  display: flex;
  flex-wrap: wrap;
  gap: 15px;
  align-items: center;
  background: #fff;
  border-radius: 8px;
  margin-bottom: 20px;
}

.filter-container label {
  font-weight: bold;
}

.filter-container select {
  padding: 8px;
  font-size: 14px;
  border: 1px solid #ccc;
  border-radius: 5px;
  background: #fff;
  cursor: pointer;
  transition: border 0.3s;
}

.filter-container select:focus {
  border-color: #228b22;
  outline: none;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/restaurantList.css">
/* Style de la page Student */
.restaurant-dashboardcontent {
    margin-left: 150px; /* Adjust based on your sidebar width */
    padding: 20px;
    padding-top: 80px; /* Add more padding at the top to push content down */
}
.header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

/* Style for the export PDF button */
.export-pdf-btn {
    background-color: #4CAF50; /* Green */
    border: none;
    color: white;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    font-size: 16px;
    cursor: pointer;
    border-radius: 5px;
}

.export-pdf-btn:hover {
    background-color: #45a049;
}
/* Sorting Container */
.sort-container {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 20px;
}

.sort-container label {
    font-size: 16px;
    font-weight: 500;
    color: #333;
}

.sort-container select {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
    background-color: white;
    transition: border-color 0.3s ease;
}

.sort-container select:hover {
    border-color: #007bff;
}

.sort-container select:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
}

.restaurant-list {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 1400px;
    margin-top: 20px;
    overflow-x: auto; /* Ensure table is scrollable on small screens */
    margin-top: 50px;
}
/* Title */
.restaurant-list h3 {
    font-size: 24px;
    font-weight: bold;
    margin-bottom: 20px;
    color: #333;
}

/* Table */
table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

th, td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

th {
    background-color: #f8f9fa;
    font-weight: bold;
    color: #333;
}

/* Restaurant Photo */
.restaurant-photoList {
    width: 40px; /* Increase photo size */
    height: 40px; /* Increase photo size */
    border-radius: 50%;
    object-fit: cover;
}

/* Action Buttons */
.action-buttons button {
    background: transparent;
    border: none;
    cursor: pointer;
    font-size: 16px;
    margin: 0 5px;
    transition: color 0.3s ease-in-out;
}

.view-btn {
    color: #656565;
}

.block-btn {
    color: #ff9500;
}

.delete-btn {
    color: #dc3545;
}

.action-buttons button:hover {
    color: black;
}

/* Pagination */
.pagination {
    display: flex;
    justify-content: center;
    list-style: none;
    padding: 10px;
    margin-top: 20px;
}

.pagination li {
    margin: 0 5px;
    padding: 8px 12px;
    border: 1px solid #ccc;
    cursor: pointer;
    background-color: white;
    border-radius: 5px;
    transition: background-color 0.3s ease-in-out;
}

.pagination li:hover {
    background-color: #f8f9fa;
}

.paginationActive {
    font-weight: bold;
    background-color: #007bff;
    color: white;
    border: none;
}

.previousBttn, .nextBttn {
    margin: 5px;
    padding: 5px 10px;
    cursor: pointer;
    border: 1px solid #ccc;
    border-radius: 5px;
    transition: background-color 0.3s ease-in-out;
}

.previousBttn:hover, .nextBttn:hover {
    background-color: #f8f9fa;
}

.paginationDisabled {
    opacity: 0.5;
    cursor: not-allowed;
}

/* Responsive Design */
@media (max-width: 768px) {
    .dashboardcontent {
        margin-left: 0;
        padding: 10px;
        padding-top: 60px; /* Adjust for smaller screens */
    }

    .restaurant-list {
        padding: 10px;
    }

    table {
        display: block;
        overflow-x: auto;
    }

    th, td {
        padding: 8px;
    }

    .pagination li {
        padding: 6px 10px;
    }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/studentList.css">
/* Style de la page Student */
.student-dashboardcontent {
    margin-left: 150px; /* Adjust based on your sidebar width */
    padding: 20px;
    padding-top: 100px; /* Add more padding at the top to push content down */
}
.header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

/* Style for the export PDF button */
.export-pdf-btn {
    background-color: #4CAF50; /* Green */
    border: none;
    color: white;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    font-size: 16px;
    cursor: pointer;
    border-radius: 5px;
}

.export-pdf-btn:hover {
    background-color: #45a049;
}
.student-list {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 1400px;
    margin-top: 20px;
    overflow-x: auto; /* Ensure table is scrollable on small screens */
    margin-top: 50px;
}
/* Sorting Container */
.sort-container {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 20px;
}

.sort-container label {
    font-size: 16px;
    font-weight: 500;
    color: #333;
}

.sort-container select {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
    background-color: white;
    transition: border-color 0.3s ease;
}

.sort-container select:hover {
    border-color: #007bff;
}

.sort-container select:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
}

/* Titre */
.student-list h3 {
    font-size: 24px;
    font-weight: bold;
    margin-bottom: 20px;
    color: #333;
}

/* Tableau */
table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

th, td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

th {
    background-color: #f8f9fa;
    font-weight: bold;
    color: #333;
}

/* Photo des Students */
.student-photoList {
    width: 55px; /* Increase photo size */
    height: 55px; /* Increase photo size */
    border-radius: 50%;
    object-fit: cover;
}

/* Boutons actions */
.action-buttons button {
    background: transparent;
    border: none;
    cursor: pointer;
    font-size: 16px;
    margin: 0 5px;
    transition: color 0.3s ease-in-out;
}

.view-btn {
    color: #656565;
}

.block-btn {
    color: #ff9500;
}

.delete-btn {
    color: #dc3545;
}

.action-buttons button:hover {
    color: black;
}

/* Pagination */
.pagination {
    display: flex;
    justify-content: center;
    list-style: none;
    padding: 10px;
    margin-top: 20px;
}

.pagination li {
    margin: 0 5px;
    padding: 8px 12px;
    border: 1px solid #ccc;
    cursor: pointer;
    background-color: white;
    border-radius: 5px;
    transition: background-color 0.3s ease-in-out;
}

.pagination li:hover {
    background-color: #f8f9fa;
}

.paginationActive {
    font-weight: bold;
    background-color: #007bff;
    color: white;
    border: none;
}

.previousBttn, .nextBttn {
    margin: 5px;
    padding: 5px 10px;
    cursor: pointer;
    border: 1px solid #ccc;
    border-radius: 5px;
    transition: background-color 0.3s ease-in-out;
}

.previousBttn:hover, .nextBttn:hover {
    background-color: #f8f9fa;
}

.paginationDisabled {
    opacity: 0.5;
    cursor: not-allowed;
}

/* Responsive Design */
@media (max-width: 768px) {
    .dashboardcontent {
        margin-left: 0;
        padding: 10px;
        padding-top: 60px; /* Adjust for smaller screens */
    }

    .student-list {
        padding: 10px;
    }

    table {
        display: block;
        overflow-x: auto;
    }

    th, td {
        padding: 8px;
    }

    .pagination li {
        padding: 6px 10px;
    }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/supermarketList.css">
/* Style de la page Supermarket */
.supermarket-dashboardcontent {
    margin-left: 150px; /* Adjust based on your sidebar width */
    padding: 20px;
    padding-top: 80px; /* Add more padding at the top to push content down */
}
.header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}
/* Sorting Container */
.sort-container {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 20px;
}

.sort-container label {
    font-size: 16px;
    font-weight: 500;
    color: #333;
}

.sort-container select {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
    background-color: white;
    transition: border-color 0.3s ease;
}

.sort-container select:hover {
    border-color: #007bff;
}

.sort-container select:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
}

/* Style for the export PDF button */
.export-pdf-btn {
    background-color: #4CAF50; /* Green */
    border: none;
    color: white;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    font-size: 16px;
    cursor: pointer;
    border-radius: 5px;
}

.export-pdf-btn:hover {
    background-color: #45a049;
}
.supermarket-list {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 1400px;
    margin-top: 20px;
    overflow-x: auto; /* Ensure table is scrollable on small screens */
    margin-top: 50px;
}

/* Titre */
.supermarket-list h3 {
    font-size: 24px;
    font-weight: bold;
    margin-bottom: 20px;
    color: #333;
}

/* Tableau */
table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

th, td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

th {
    background-color: #f8f9fa;
    font-weight: bold;
    color: #333;
}

/* Photo des Supermarkets */
.supermarket-photoList {
    width: 40px; /* Increase photo size */
    height: 40px; /* Increase photo size */
    border-radius: 50%;
    object-fit: cover;
}

/* Boutons actions */
.action-buttons button {
    background: transparent;
    border: none;
    cursor: pointer;
    font-size: 16px;
    margin: 0 5px;
    transition: color 0.3s ease-in-out;
}

.view-btn {
    color: #656565;
}

.block-btn {
    color: #ff9500;
}

.delete-btn {
    color: #dc3545;
}

.action-buttons button:hover {
    color: black;
}

/* Pagination */
.pagination {
    display: flex;
    justify-content: center;
    list-style: none;
    padding: 10px;
    margin-top: 20px;
}

.pagination li {
    margin: 0 5px;
    padding: 8px 12px;
    border: 1px solid #ccc;
    cursor: pointer;
    background-color: white;
    border-radius: 5px;
    transition: background-color 0.3s ease-in-out;
}

.pagination li:hover {
    background-color: #f8f9fa;
}

.paginationActive {
    font-weight: bold;
    background-color: #007bff;
    color: white;
    border: none;
}

.previousBttn, .nextBttn {
    margin: 5px;
    padding: 5px 10px;
    cursor: pointer;
    border: 1px solid #ccc;
    border-radius: 5px;
    transition: background-color 0.3s ease-in-out;
}

.previousBttn:hover, .nextBttn:hover {
    background-color: #f8f9fa;
}

.paginationDisabled {
    opacity: 0.5;
    cursor: not-allowed;
}

/* Responsive Design */
@media (max-width: 768px) {
    .supermarket-dashboardcontent {
        margin-left: 0;
        padding: 10px;
        padding-top: 60px; /* Adjust for smaller screens */
    }

    .supermarket-list {
        padding: 10px;
    }

    table {
        display: block;
        overflow-x: auto;
    }

    th, td {
        padding: 8px;
    }

    .pagination li {
        padding: 6px 10px;
    }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/transporterList.css">
/* Transporter Management Page */

.transporter-list {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 1400px;
    margin-top: 20px;
    overflow-x: auto; /* Ensure table is scrollable on small screens */
    margin-top: 50px;
}
.header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

/* Style for the export PDF button */
.export-pdf-btn {
    background-color: #4CAF50; /* Green */
    border: none;
    color: white;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    font-size: 16px;
    cursor: pointer;
    border-radius: 5px;
}

.export-pdf-btn:hover {
    background-color: #45a049;
}
/* Title */
.transporter-list h3 {
    font-size: 18px;
    font-weight: bold;
    margin-bottom: 15px;
}
/* Sorting Container */
.sort-container {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 20px;
}

.sort-container label {
    font-size: 16px;
    font-weight: 500;
    color: #333;
}

.sort-container select {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
    background-color: white;
    transition: border-color 0.3s ease;
}

.sort-container select:hover {
    border-color: #007bff;
}

.sort-container select:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
}

/* Table */
table {
    width: 100%;
    border-collapse: collapse;
}

th, td {
    padding: 10px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

/* Transporter photo */
.transporter-photoList {
    width: 40px;
    height: 40px;
    border-radius: 50%;
}

/* Action Buttons */
.view-btn, .delete-btn {
    border: none;
    background: none;
    cursor: pointer;
    font-size: 16px;
    margin-right: 8px;
}

.view-btn:hover {
    color: blue;
}



.delete-btn:hover {
    color: red;
}
.pagination {
    display: flex;
    justify-content: center;
    list-style: none;
    padding: 10px;
}

.pagination li {
    margin: 0 5px;
    padding: 8px 12px;
    border: 1px solid #ccc;
    cursor: pointer;
    background-color: white;
    border-radius: 5px;
}

.paginationActive {
    font-weight: bold;
    background-color: #007bff;
    color: white;
    border: none;
}

.previousBttn, .nextBttn {
    margin: 5px;
    padding: 5px 10px;
    cursor: pointer;
}

.paginationDisabled {
    opacity: 0.5;
    cursor: not-allowed;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/viewNgo.css">
/* viewngo.css */
.view-ngo-container {
    display: flex;
    height: 100vh;
    background-color: #f4f7fc;
}

.view-ngo-content {
    margin-left: 50px;
    margin-top: 50px;
    padding: 20px;
    width: 100%;
}

.ngo-card {
    background: #ffffff;
    border-radius: 10px;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    margin-top: 40px;
    display: flex;
    flex-direction: column;
    padding: 30px;
    transition: transform 0.3s ease;
}

.ngo-card:hover {
    transform: translateY(-10px);
}

.ngo-header {
    display: flex;
    align-items: center;
    margin-bottom: 30px;
}

.ngo-photo {
    width: 130px;
    height: 130px;
    border-radius: 50%;
    object-fit: cover;
    margin-right: 20px;
    border: 4px solid #8dc73f;
}

.ngo-info h2 {
    font-size: 30px;
    color: #333;
    margin-bottom: 10px;
}

.ngo-info p {
    font-size: 16px;
    color: #777;
    margin-bottom: 5px;
}

.ngo-actions button {
    margin-right: 10px;
    padding: 10px 20px;
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s;
}
/* viewngo.css */
.ngo-actions button {
    margin-right: 10px;
    padding: 10px 20px;
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s;
}
/* viewngo.css */
.ngo-actions button.block-btn {
    padding: 8px 16px;
    font-size: 14px;
    background-color: transparent;
    border: 2px solid;
    border-radius: 5px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s;
}

.ngo-actions button.block-btn:hover {
    background-color: #f0f0f0;
}

.ngo-actions button.block-btn:focus {
    outline: none;
}

.ngo-actions button.block-btn[style*="color: rgb(116, 16, 16)"] {
    border-color: rgb(165, 45, 45);
    color: rgb(165, 45, 45);
}

.ngo-actions button.block-btn[style*="color: green"] {
    border-color: #8dc73f;
    color: #8dc73f;
}



.ngo-details {
    background: #f9f9f9;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}

.details-table td {
    padding: 15px;
    font-size: 16px;
    border-bottom: 1px solid #f0f0f0;
}

.details-table td:first-child {
    font-weight: bold;
    width: 150px;
}

.details-table tr:last-child td {
    border-bottom: none;
}

.details-table td {
    color: #555;
}

.loading {
    text-align: center;
    font-size: 24px;
    color: #8dc73f;
    margin-top: 50px;
}

@media (max-width: 768px) {
    .ngo-card {
        padding: 20px;
    }

    .ngo-header {
        flex-direction: column;
        align-items: center;
    }

    .ngo-photo {
        margin-right: 0;
        margin-bottom: 20px;
    }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/viewRestaurant.css">
/* viewrestaurant.css */
.view-restaurant-container {
    display: flex;
    height: 100vh;
    background-color: #f4f7fc;
}

.view-restaurant-content {
    margin-left: 50px;
    margin-top: 50px;
    padding: 20px;
    width: 100%;
}

.restaurant-card {
    background: #ffffff;
    border-radius: 10px;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    margin-top: 40px;
    display: flex;
    flex-direction: column;
    padding: 30px;
    transition: transform 0.3s ease;
}

.restaurant-card:hover {
    transform: translateY(-10px);
}

.restaurant-header {
    display: flex;
    align-items: center;
    margin-bottom: 30px;
}

.restaurant-photo {
    width: 130px;
    height: 130px;
    border-radius: 50%;
    object-fit: cover;
    margin-right: 20px;
    border: 4px solid #8dc73f;
}

.restaurant-info h2 {
    font-size: 30px;
    color: #333;
    margin-bottom: 10px;
}

.restaurant-info p {
    font-size: 16px;
    color: #777;
    margin-bottom: 5px;
}

.restaurant-actions button {
    margin-right: 10px;
    padding: 10px 20px;
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s;
}
/* viewrestaurant.css */
.restaurant-actions button {
    margin-right: 10px;
    padding: 10px 20px;
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s;
}
/* viewrestaurant.css */
.restaurant-actions button.block-btn {
    padding: 8px 16px;
    font-size: 14px;
    background-color: transparent;
    border: 2px solid;
    border-radius: 5px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s;
}

.restaurant-actions button.block-btn:hover {
    background-color: #f0f0f0;
}

.restaurant-actions button.block-btn:focus {
    outline: none;
}

.restaurant-actions button.block-btn[style*="color: rgb(116, 16, 16)"] {
    border-color: rgb(165, 45, 45);
    color: rgb(165, 45, 45);
}

.restaurant-actions button.block-btn[style*="color: green"] {
    border-color: #8dc73f;
    color: #8dc73f;
}



.restaurant-details {
    background: #f9f9f9;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}

.details-table td {
    padding: 15px;
    font-size: 16px;
    border-bottom: 1px solid #f0f0f0;
}

.details-table td:first-child {
    font-weight: bold;
    width: 150px;
}

.details-table tr:last-child td {
    border-bottom: none;
}

.details-table td {
    color: #555;
}

.loading {
    text-align: center;
    font-size: 24px;
    color: #8dc73f;
    margin-top: 50px;
}

@media (max-width: 768px) {
    .restaurant-card {
        padding: 20px;
    }

    .restaurant-header {
        flex-direction: column;
        align-items: center;
    }

    .restaurant-photo {
        margin-right: 0;
        margin-bottom: 20px;
    }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/viewStudent.css">
/* viewStudent.css */
.view-student-container {
    display: flex;
    height: 100vh;
    background-color: #f4f7fc;
}

.view-student-content {
    margin-left: 50px;
    margin-top: 50px;
    padding: 20px;
    width: 100%;
}

.student-card {
    background: #ffffff;
    border-radius: 10px;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    margin-top: 40px;
    display: flex;
    flex-direction: column;
    padding: 30px;
    transition: transform 0.3s ease;
}

.student-card:hover {
    transform: translateY(-10px);
}

.student-header {
    display: flex;
    align-items: center;
    margin-bottom: 30px;
}

.student-photo {
    width: 130px;
    height: 130px;
    border-radius: 50%;
    object-fit: cover;
    margin-right: 20px;
    border: 4px solid #8dc73f;
}

.student-info h2 {
    font-size: 30px;
    color: #333;
    margin-bottom: 10px;
}

.student-info p {
    font-size: 16px;
    color: #777;
    margin-bottom: 5px;
}

.student-actions button {
    margin-right: 10px;
    padding: 10px 20px;
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s;
}
/* viewStudent.css */
.student-actions button {
    margin-right: 10px;
    padding: 10px 20px;
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s;
}
/* viewStudent.css */
.student-actions button.block-btn {
    padding: 8px 16px;
    font-size: 14px;
    background-color: transparent;
    border: 2px solid;
    border-radius: 5px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s;
}

.student-actions button.block-btn:hover {
    background-color: #f0f0f0;
}

.student-actions button.block-btn:focus {
    outline: none;
}

.student-actions button.block-btn[style*="color: rgb(116, 16, 16)"] {
    border-color: rgb(165, 45, 45);
    color: rgb(165, 45, 45);
}

.student-actions button.block-btn[style*="color: green"] {
    border-color: #8dc73f;
    color: #8dc73f;
}



.student-details {
    background: #f9f9f9;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}

.details-table td {
    padding: 15px;
    font-size: 16px;
    border-bottom: 1px solid #f0f0f0;
}

.details-table td:first-child {
    font-weight: bold;
    width: 150px;
}

.details-table tr:last-child td {
    border-bottom: none;
}

.details-table td {
    color: #555;
}

.loading {
    text-align: center;
    font-size: 24px;
    color: #8dc73f;
    margin-top: 50px;
}

@media (max-width: 768px) {
    .student-card {
        padding: 20px;
    }

    .student-header {
        flex-direction: column;
        align-items: center;
    }

    .student-photo {
        margin-right: 0;
        margin-bottom: 20px;
    }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/viewSupermarket.css">
/* viewsupermarket.css */
.view-supermarket-container {
    display: flex;
    height: 100vh;
    background-color: #f4f7fc;
}

.view-supermarket-content {
    margin-left: 50px;
    margin-top: 50px;
    padding: 20px;
    width: 100%;
}

.supermarket-card {
    background: #ffffff;
    border-radius: 10px;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    margin-top: 40px;
    display: flex;
    flex-direction: column;
    padding: 30px;
    transition: transform 0.3s ease;
}

.supermarket-card:hover {
    transform: translateY(-10px);
}

.supermarket-header {
    display: flex;
    align-items: center;
    margin-bottom: 30px;
}

.supermarket-photo {
    width: 130px;
    height: 130px;
    border-radius: 50%;
    object-fit: cover;
    margin-right: 20px;
    border: 4px solid #8dc73f;
}

.supermarket-info h2 {
    font-size: 30px;
    color: #333;
    margin-bottom: 10px;
}

.supermarket-info p {
    font-size: 16px;
    color: #777;
    margin-bottom: 5px;
}

.supermarket-actions button {
    margin-right: 10px;
    padding: 10px 20px;
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s;
}
/* viewsupermarket.css */
.supermarket-actions button {
    margin-right: 10px;
    padding: 10px 20px;
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s;
}
/* viewsupermarket.css */
.supermarket-actions button.block-btn {
    padding: 8px 16px;
    font-size: 14px;
    background-color: transparent;
    border: 2px solid;
    border-radius: 5px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s;
}

.supermarket-actions button.block-btn:hover {
    background-color: #f0f0f0;
}

.supermarket-actions button.block-btn:focus {
    outline: none;
}

.supermarket-actions button.block-btn[style*="color: rgb(116, 16, 16)"] {
    border-color: rgb(165, 45, 45);
    color: rgb(165, 45, 45);
}

.supermarket-actions button.block-btn[style*="color: green"] {
    border-color: #8dc73f;
    color: #8dc73f;
}



.supermarket-details {
    background: #f9f9f9;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}

.details-table td {
    padding: 15px;
    font-size: 16px;
    border-bottom: 1px solid #f0f0f0;
}

.details-table td:first-child {
    font-weight: bold;
    width: 150px;
}

.details-table tr:last-child td {
    border-bottom: none;
}

.details-table td {
    color: #555;
}

.loading {
    text-align: center;
    font-size: 24px;
    color: #8dc73f;
    margin-top: 50px;
}

@media (max-width: 768px) {
    .supermarket-card {
        padding: 20px;
    }

    .supermarket-header {
        flex-direction: column;
        align-items: center;
    }

    .supermarket-photo {
        margin-right: 0;
        margin-bottom: 20px;
    }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/viewTransporter.css">
/* viewtransporter.css */
.view-transporter-container {
    display: flex;
    height: 100vh;
    background-color: #f4f7fc;
}

.view-transporter-content {
    margin-left: 50px;
    margin-top: 50px;
    padding: 20px;
    width: 100%;
}

.transporter-card {
    background: #ffffff;
    border-radius: 10px;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    margin-top: 40px;
    display: flex;
    flex-direction: column;
    padding: 30px;
    transition: transform 0.3s ease;
}

.transporter-card:hover {
    transform: translateY(-10px);
}

.transporter-header {
    display: flex;
    align-items: center;
    margin-bottom: 30px;
}

.transporter-photo {
    width: 130px;
    height: 130px;
    border-radius: 50%;
    object-fit: cover;
    margin-right: 20px;
    border: 4px solid #8dc73f;
}

.transporter-info h2 {
    font-size: 30px;
    color: #333;
    margin-bottom: 10px;
}

.transporter-info p {
    font-size: 16px;
    color: #777;
    margin-bottom: 5px;
}

.transporter-actions button {
    margin-right: 10px;
    padding: 10px 20px;
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s;
}
/* viewtransporter.css */
.transporter-actions button {
    margin-right: 10px;
    padding: 10px 20px;
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s;
}
/* viewtransporter.css */
.transporter-actions button.block-btn {
    padding: 8px 16px;
    font-size: 14px;
    background-color: transparent;
    border: 2px solid;
    border-radius: 5px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s;
}

.transporter-actions button.block-btn:hover {
    background-color: #f0f0f0;
}

.transporter-actions button.block-btn:focus {
    outline: none;
}

.transporter-actions button.block-btn[style*="color: rgb(116, 16, 16)"] {
    border-color: rgb(165, 45, 45);
    color: rgb(165, 45, 45);
}

.transporter-actions button.block-btn[style*="color: green"] {
    border-color: #8dc73f;
    color: #8dc73f;
}



.transporter-details {
    background: #f9f9f9;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}

.details-table td {
    padding: 15px;
    font-size: 16px;
    border-bottom: 1px solid #f0f0f0;
}

.details-table td:first-child {
    font-weight: bold;
    width: 150px;
}

.details-table tr:last-child td {
    border-bottom: none;
}

.details-table td {
    color: #555;
}

.loading {
    text-align: center;
    font-size: 24px;
    color: #8dc73f;
    margin-top: 50px;
}

@media (max-width: 768px) {
    .transporter-card {
        padding: 20px;
    }

    .transporter-header {
        flex-direction: column;
        align-items: center;
    }

    .transporter-photo {
        margin-right: 0;
        margin-bottom: 20px;
    }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/ContinueInfo.css">
.continueinfo-container {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f0f0f0;
    padding: 20px;
  }
  
  .continueinfo-card {
    background-color: #ffffff;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    padding: 40px;
    width: 100%;
    max-width: 600px;
  }
  
  .continueinfo-title {
    font-size: 24px;
    font-weight: bold;
    color: #333;
    margin-bottom: 10px;
  }
  
  .continueinfo-description {
    font-size: 16px;
    color: #666;
    margin-bottom: 20px;
  }
  
  .continueinfo-form {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }
  
  .continueinfo-form-group {
    display: flex;
    flex-direction: column;
  }
  
  .continueinfo-label {
    font-size: 14px;
    font-weight: 600;
    color: #333;
    margin-bottom: 5px;
  }
  
  .continueinfo-input,
  .continueinfo-select {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 16px;
  }
  
  .continueinfo-input:focus,
  .continueinfo-select:focus {
    outline: none;
    border-color: #8dc73f;
  }
  
  .continueinfo-input-error {
    border-color: #e74c3c;
  }
  
  .continueinfo-file-input {
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .continueinfo-file-button {
    display: flex;
    align-items: center;
    gap: 5px;
    padding: 10px;
    background-color: #8dc73f;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
  }
  
  .continueinfo-camera-icon {
    font-size: 18px;
  }
  
  .continueinfo-hidden-input {
    display: none;
  }
  
  .continueinfo-image-preview {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    object-fit: cover;
  }
  
  .continueinfo-file-name {
    font-size: 14px;
    color: #666;
  }
  
  .continueinfo-recaptcha {
    margin-top: 20px;
  }
  
  .continueinfo-error {
    color: #e74c3c;
    font-size: 14px;
    margin-top: 10px;
  }
  
  .continueinfo-error-message {
    color: #e74c3c;
    font-size: 12px;
    margin-top: 5px;
  }
  
  .continueinfo-submit-button {
    padding: 12px;
    background-color: #8dc73f;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .continueinfo-submit-button:hover {
    background-color: #7ab62f;
  }
  
  @media (max-width: 768px) {
    .continueinfo-card {
      padding: 20px;
    }
  
    .continueinfo-title {
      font-size: 20px;
    }
  
    .continueinfo-description {
      font-size: 14px;
    }
  
    .continueinfo-input,
    .continueinfo-select,
    .continueinfo-submit-button {
      font-size: 14px;
    }
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/continueSignUp.css">
@import url('https://fonts.googleapis.com/css?family=Montserrat:400,800');

* {
  box-sizing: border-box;
}

.signup-body {
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  font-family: 'Montserrat', sans-serif;
  height: 100vh;
  margin: 0;
  overflow: hidden;
}

.signup-body::before {
  content: '';
  background-image: url('../images/welcomeback.png');
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  opacity: 0.2;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
}

.signup-root {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
}

.signup-h1 {
  font-weight: bold;
}

.signup-h2 {
  text-align: center;
}

.signup-p {
  font-size: 14px;
  font-weight: 100;
  line-height: 20px;
  letter-spacing: 0.5px;
  margin: 20px 0 30px;
}

.signup-span {
  font-size: 12px;
}

.signup-a {
  color: #333;
  font-size: 12px;
  text-decoration: none;
  margin-left: 160px;
}

.signup-button {
  border-radius: 2px;
  border: 1px solid #8dc73f;
  background-color: #8dc73f;
  color: #000000;
  font-size: 12px;
  font-weight: bold;
  padding: 12px 45px;
  letter-spacing: 1px;
  text-transform: uppercase;
  transition: transform 80ms ease-in;
  width: 100%;
  margin-top: 10px;
}

.signup-button:active {
  transform: scale(0.95);
}

.signup-button:focus {
  outline: none;
}

.signup-form {
  background-color: #FFFFFF;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  padding: 0 50px;
  height: 100%;
  text-align: center;
}

.error-message {
  color: red;
  font-size: 14px;
  margin-bottom: 10px;
}

.signup-input {
  background-color: #eee;
  border: none;
  color: black;
  padding: 12px 15px;
  margin: 4px 0;
  width: 100%;
}

.auth-eye-icon {
  transform: translateX(-50%);
  cursor: pointer;
  font-size: 18px;
  margin-left: 400px;
  margin-top: -33px;
}

.signup-container {
  background-color: #fff;
  border-radius: 10px;
  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);
  position: relative;
  overflow: hidden;
  width: 1088px;
  max-width: 100%;
  height: 900px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.signup-form-container {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 50%;
}

.signup-logo-container {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 50%;
}

.signup-logo {
  max-width: 350px;
  margin-bottom: 5px;
}

.aa {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 110%;
  margin: 40px;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/DetailsDonations.css">
/* Enhanced CSS for DetailsDonations component */
.details-donation-page {
    font-family: "Poppins", sans-serif;
    background: linear-gradient(135deg, #f5f9ed 0%, #edf5e0 100%);
    padding: 40px 0;
    min-height: 100vh;
    position: relative;
    overflow: hidden;
  }
  
  .details-donation-page::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%238dc43f' fill-opacity='0.05' fill-rule='evenodd'/%3E%3C/svg%3E");
    pointer-events: none;
    z-index: 0;
  }
  
  .details-donation-container {
    width: 85%;
    max-width: 1200px;
    margin: 0 auto;
    background: rgba(255, 255, 255, 0.95);
    border-radius: 20px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1), 0 10px 25px rgba(141, 196, 63, 0.1), 0 0 0 1px rgba(255, 255, 255, 0.1);
    overflow: hidden;
    min-height: 500px;
    backdrop-filter: blur(10px);
    transform: translateZ(0);
    transition: all 0.5s cubic-bezier(0.215, 0.61, 0.355, 1);
    position: relative;
    z-index: 1;
  }
  
  .details-donation-container:hover {
    transform: translateY(-5px) translateZ(0);
    box-shadow: 0 25px 70px rgba(0, 0, 0, 0.12), 0 15px 35px rgba(141, 196, 63, 0.15), 0 0 0 1px rgba(255, 255, 255, 0.2);
  }
  
  /* Header section */
  .details-donation-header {
    background: linear-gradient(135deg, #8dc43f, #7aaa36);
    padding: 40px 30px;
    color: white;
    position: relative;
    overflow: hidden;
  }
  
  .details-donation-header::before {
    content: "";
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0) 70%);
    transform: rotate(30deg);
    pointer-events: none;
  }
  
  .details-donation-header::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 15px;
    background: url("data:image/svg+xml,%3Csvg viewBox='0 0 1200 120' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0 0v46.29c47.79 22.2 103.59 32.17 158 28 70.36-5.37 136.33-33.31 206.8-37.5 73.84-4.36 147.54 16.88 218.2 35.26 69.27 18 138.3 24.88 209.4 13.08 36.15-6 69.85-17.84 104.45-29.34C989.49 25 1113-14.29 1200 52.47V0z' fill='%23ffffff' opacity='.25'%3E%3C/path%3E%3Cpath d='M0 0v15.81c13 21.11 27.64 41.05 47.69 56.24C99.41 111.27 165 111 224.58 91.58c31.15-10.15 60.09-26.07 89.67-39.8 40.92-19 84.73-46 130.83-49.67 36.26-2.85 70.9 9.42 98.6 31.56 31.77 25.39 62.32 62 103.63 73 40.44 10.79 81.35-6.69 119.13-24.28s75.16-39 116.92-43.05c59.73-5.85 113.28 22.88 168.9 38.84 30.2 8.66 59 6.17 87.09-7.5 22.43-10.89 48-26.93 60.65-49.24V0z' fill='%23ffffff' opacity='.5'%3E%3C/path%3E%3Cpath d='M0 0v5.63C149.93 59 314.09 71.32 475.83 42.57c43-7.64 84.23-20.12 127.61-26.46 59-8.63 112.48 12.24 165.56 35.4C827.93 77.22 886 95.24 951.2 90c86.53-7 172.46-45.71 248.8-84.81V0z' fill='%23ffffff' opacity='.75'%3E%3C/path%3E%3C/svg%3E");
    background-size: cover;
    background-position: center;
  }
  
  .details-donation-title-container {
    display: flex;
    align-items: center;
    justify-content: space-between;
    position: relative;
    z-index: 2;
  }
  
  .details-donation-title {
    font-size: 2.5rem;
    font-weight: 800;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 15px;
    text-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    letter-spacing: -0.5px;
    position: relative;
  }
  
  .details-donation-title::after {
    content: "";
    position: absolute;
    bottom: -10px;
    left: 0;
    width: 60px;
    height: 4px;
    background: rgba(255, 255, 255, 0.5);
    border-radius: 2px;
  }
  
  .details-donation-actions {
    display: flex;
    gap: 15px;
  }
  
  .details-donation-action-icon {
    background: rgba(255, 255, 255, 0.2);
    border: none;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    color: white;
    font-size: 1.2rem;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    position: relative;
    overflow: hidden;
  }
  
  .details-donation-action-icon::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle, rgba(255, 255, 255, 0.3) 0%, rgba(255, 255, 255, 0) 70%);
    opacity: 0;
    transition: opacity 0.4s ease;
  }
  
  .details-donation-action-icon:hover {
    transform: translateY(-5px) scale(1.05);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
  }
  
  .details-donation-action-icon:hover::before {
    opacity: 1;
  }
  
  .details-donation-action-icon.delete {
    background: rgba(220, 53, 69, 0.3);
  }
  
  .details-donation-action-icon.delete:hover {
    background: rgba(220, 53, 69, 0.8);
  }
  
  /* Content section */
  .details-donation-content {
    padding: 40px;
    position: relative;
  }
  
  .details-donation-info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 25px;
    margin-bottom: 40px;
  }
  
  .details-donation-info-item {
    display: flex;
    align-items: flex-start;
    gap: 20px;
    background: linear-gradient(135deg, #f9f9f9, #f5f5f5);
    padding: 25px;
    border-radius: 16px;
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    position: relative;
    overflow: hidden;
    border: 1px solid rgba(0, 0, 0, 0.05);
  }
  
  
  
  .details-donation-info-item:hover {
    transform: translateY(-8px);
    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.08);
    border-color: rgba(141, 196, 63, 0.2);
  }
  
  .details-donation-info-item:hover::before {
    opacity: 1;
  }
  
  .details-donation-info-icon {
    font-size: 1.8rem;
    color: #8dc43f;
    background: rgba(141, 196, 63, 0.1);
    width: 60px;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 16px;
    transition: all 0.3s ease;
  }
  
  .details-donation-info-item:hover .details-donation-info-icon {
    background: rgba(141, 196, 63, 0.2);
    transform: scale(1.1);
  }
  
  .details-donation-info-content {
    flex: 1;
  }
  
  .details-donation-info-label {
    font-weight: 600;
    color: #555;
    margin-bottom: 8px;
    font-size: 0.95rem;
    text-transform: uppercase;
    letter-spacing: 1px;
  }
  
  .details-donation-info-value {
    font-size: 1.2rem;
    color: #333;
    font-weight: 500;
  }
  .details-donation-edit-input {
  width: 100%;
  padding: 12px 18px;
  border: 2px solid #e0e0e0;
  border-radius: 10px;
  font-size: 1rem;
  transition: all 0.3s ease;
  background-color: #f9f9f9;
  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.03);
  margin-bottom: 15px;
}

.details-donation-edit-input:focus {
  border-color: #8dc43f;
  box-shadow: 0 0 0 3px rgba(141, 196, 63, 0.2), inset 0 2px 4px rgba(0, 0, 0, 0.03);
  outline: none;
}

.details-donation-edit-date {
  width: 100%;
  padding: 12px 18px;
  border: 2px solid #e0e0e0;
  border-radius: 10px;
  font-size: 1rem;
  transition: all 0.3s ease;
  background-color: #f9f9f9;
  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.03);
  margin-top: 5px;
}

.details-donation-edit-date:focus {
  border-color: #8dc43f;
  box-shadow: 0 0 0 3px rgba(141, 196, 63, 0.2), inset 0 2px 4px rgba(0, 0, 0, 0.03);
  outline: none;
}
  /* Products section */
  .details-donation-products-section {
    margin-top: 40px;
    position: relative;
  }
  
  .details-donation-section-title {
    font-size: 1.8rem;
    color: #333;
    margin: 0 0 25px 0;
    display: flex;
    align-items: center;
    gap: 15px;
    position: relative;
    padding-bottom: 15px;
  }
  
  .details-donation-section-title::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    width: 80px;
    height: 4px;
    background: linear-gradient(90deg, #8dc43f, rgba(141, 196, 63, 0.3));
    border-radius: 2px;
  }
  
  .details-donation-products-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
  }
  
  .details-donation-product-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 20px;
    background: #fff;
    border-radius: 16px;
    margin-bottom: 0;
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    border: 1px solid rgba(0, 0, 0, 0.05);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.03);
    position: relative;
    overflow: hidden;
  }
  
  .details-donation-product-item::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 4px;
    height: 100%;
    background: #8dc43f;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .details-donation-product-item:hover {
    transform: translateY(-5px) translateX(5px);
    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.08);
    border-color: rgba(141, 196, 63, 0.2);
  }
  
  .details-donation-product-item:hover::before {
    opacity: 1;
  }
  
  .details-donation-product-info {
    display: flex;
    align-items: center;
    gap: 20px;
  }
  
  .details-donation-product-icon {
    font-size: 1.8rem;
    background: rgba(141, 196, 63, 0.1);
    width: 50px;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 12px;
    transition: all 0.3s ease;
  }
  
  .details-donation-product-item:hover .details-donation-product-icon {
    background: rgba(141, 196, 63, 0.2);
    transform: scale(1.1);
  }
  
  .details-donation-product-details {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }
  
  .details-donation-product-name {
    font-weight: 600;
    font-size: 1.1rem;
    color: #333;
    margin: 0;
  }
  
  .details-donation-product-quantity {
    color: #666;
    font-size: 0.9rem;
    margin: 0;
  }
  
  .details-donation-product-status {
    padding: 8px 18px;
    border-radius: 30px;
    font-size: 0.85rem;
    font-weight: 600;
    text-transform: capitalize;
    letter-spacing: 0.5px;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
    transition: all 0.3s ease;
  }
  
  .details-donation-product-status.available {
    background-color: rgba(141, 196, 63, 0.15);
    color: #7aaa36;
    border: 1px solid rgba(141, 196, 63, 0.3);
  }
  
  .details-donation-product-status.pending {
    background-color: rgba(241, 196, 15, 0.15);
    color: #f39c12;
    border: 1px solid rgba(241, 196, 15, 0.3);
  }
  
  .details-donation-product-status.delivered {
    background-color: rgba(52, 152, 219, 0.15);
    color: #2980b9;
    border: 1px solid rgba(52, 152, 219, 0.3);
  }
  
  /* Edit mode styles */
  .details-donation-edit-input {
    width: 100%;
    padding: 12px 18px;
    border: 2px solid #e0e0e0;
    border-radius: 10px;
    font-size: 1rem;
    transition: all 0.3s ease;
    background-color: #f9f9f9;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.03);
    margin-bottom: 0;
  }
  
  .details-donation-edit-input:focus {
    border-color: #8dc43f;
    box-shadow: 0 0 0 3px rgba(141, 196, 63, 0.2), inset 0 2px 4px rgba(0, 0, 0, 0.03);
    outline: none;
  }
  
  .details-donation-edit-date {
    width: 100%;
    padding: 12px 18px;
    border: 2px solid #e0e0e0;
    border-radius: 10px;
    font-size: 1rem;
    transition: all 0.3s ease;
    background-color: #f9f9f9;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.03);
    margin-top: 5px;
  }
  
  .details-donation-edit-date:focus {
    border-color: #8dc43f;
    box-shadow: 0 0 0 3px rgba(141, 196, 63, 0.2), inset 0 2px 4px rgba(0, 0, 0, 0.03);
    outline: none;
  }
  
  .details-donation-edit-select {
    width: 100%;
    padding: 12px 18px;
    border: 2px solid #e0e0e0;
    border-radius: 10px;
    background-color: #f9f9f9;
    font-size: 1rem;
    transition: all 0.3s ease;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.03);
    appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23333' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 12px center;
    background-size: 16px;
    padding-right: 40px;
  }
  
  .details-donation-edit-select:focus {
    border-color: #8dc43f;
    box-shadow: 0 0 0 3px rgba(141, 196, 63, 0.2), inset 0 2px 4px rgba(0, 0, 0, 0.03);
    outline: none;
  }
  
  .details-donation-edit-product-row {
    display: grid;
    grid-template-columns: 2fr 1fr 1fr auto;
    gap: 15px;
    margin-bottom: 20px;
    align-items: center;
    background: #f8f9fa;
    padding: 25px;
    border-radius: 16px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.03);
    transition: all 0.3s ease;
    border: 1px solid rgba(0, 0, 0, 0.05);
    position: relative;
    overflow: hidden;
  }
  
  .details-donation-edit-product-row:hover {
    background: #f5f5f5;
    border-color: rgba(141, 196, 63, 0.2);
  }
  
  /* Fixed: Make edit product row full width on mobile */
  @media (max-width: 768px) {
    .details-donation-edit-product-row {
      grid-template-columns: 1fr;
      gap: 15px;
      padding: 20px;
    }
  
    .details-donation-edit-product-row > * {
      margin-bottom: 10px;
    }
  
    .details-donation-delete-product-button {
      margin: 0 auto;
    }
  }
  
  .details-donation-delete-product-button {
    background: rgba(220, 53, 69, 0.1);
    border: none;
    color: #dc3545;
    cursor: pointer;
    font-size: 1.2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    transition: all 0.3s ease;
  }
  
  .details-donation-delete-product-button:hover {
    background: rgba(220, 53, 69, 0.2);
    transform: rotate(90deg);
  }
  
  .details-donation-add-product-button {
    background: linear-gradient(135deg, #8dc43f, #7aaa36);
    color: white;
    border: none;
    padding: 14px 25px;
    border-radius: 10px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    display: flex;
    align-items: center;
    gap: 10px;
    margin-top: 25px;
    box-shadow: 0 5px 15px rgba(141, 196, 63, 0.3);
    position: relative;
    overflow: hidden;
  }
  
  .details-donation-add-product-button::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.2) 0%, rgba(255, 255, 255, 0) 100%);
    opacity: 0;
    transition: opacity 0.4s ease;
  }
  
  .details-donation-add-product-button:hover {
    background: linear-gradient(135deg, #7aaa36, #6a9530);
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(141, 196, 63, 0.4);
  }
  
  .details-donation-add-product-button:hover::before {
    opacity: 1;
  }
  
  /* Action buttons */
  .details-donation-actions-container {
    display: flex;
    justify-content: center;
    margin-top: 40px;
  }
  
  .details-donation-request-button {
    background: linear-gradient(135deg, #8dc43f, #7aaa36);
    color: white;
    border: none;
    padding: 16px 40px;
    border-radius: 50px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    box-shadow: 0 10px 25px rgba(141, 196, 63, 0.3);
    position: relative;
    overflow: hidden;
    letter-spacing: 0.5px;
  }
  
  .details-donation-request-button::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      rgba(255, 255, 255, 0) 0%,
      rgba(255, 255, 255, 0.3) 50%,
      rgba(255, 255, 255, 0) 100%
    );
    transition: all 0.6s ease;
  }
  
  .details-donation-request-button:hover {
    background: linear-gradient(135deg, #7aaa36, #6a9530);
    transform: translateY(-5px);
    box-shadow: 0 15px 35px rgba(141, 196, 63, 0.4);
  }
  
  .details-donation-request-button:hover::before {
    left: 100%;
  }
  
  /* Loading and error states */
  .details-donation-loading,
  .details-donation-error {
    text-align: center;
    padding: 80px 50px;
    font-size: 1.4rem;
    color: #6c757d;
    background: #f8f9fa;
    border-radius: 16px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
    position: relative;
    overflow: hidden;
  }
  
  .details-donation-loading::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 4px;
    background: linear-gradient(90deg, #f8f9fa, #8dc43f, #f8f9fa);
    background-size: 200% 100%;
    animation: loading-animation 2s infinite;
  }
  
  @keyframes loading-animation {
    0% {
      background-position: 100% 0;
    }
    100% {
      background-position: -100% 0;
    }
  }
  
  /* Responsive styles */
  @media (max-width: 992px) {
    .details-donation-container {
      width: 90%;
    }
  
    .details-donation-products-list {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }
  }
  
  @media (max-width: 768px) {
    .details-donation-container {
      width: 95%;
    }
  
    .details-donation-header {
      padding: 30px 20px;
    }
  
    .details-donation-content {
      padding: 30px 20px;
    }
  
    .details-donation-title-container {
      flex-direction: column;
      text-align: center;
      gap: 20px;
    }
  
    .details-donation-title::after {
      left: 50%;
      transform: translateX(-50%);
    }
  
    .details-donation-actions {
      position: static;
      transform: none;
      justify-content: center;
    }
  
    .details-donation-title {
      font-size: 2rem;
      justify-content: center;
    }
  
    .details-donation-products-list {
      grid-template-columns: 1fr;
    }
  }
  
  @media (max-width: 576px) {
    .details-donation-content {
      padding: 20px 15px;
    }
  
    .details-donation-info-grid {
      grid-template-columns: 1fr;
    }
  
    .details-donation-request-button {
      width: 100%;
    }
  }
  
  /* Animations */
  @keyframes details-donation-fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes details-donation-pulse {
    0% {
      box-shadow: 0 0 0 0 rgba(141, 196, 63, 0.4);
    }
    70% {
      box-shadow: 0 0 0 10px rgba(141, 196, 63, 0);
    }
    100% {
      box-shadow: 0 0 0 0 rgba(141, 196, 63, 0);
    }
  }
  
  .details-donation-fade-in {
    animation: details-donation-fadeIn 0.6s ease forwards;
  }
  
  .details-donation-pulse {
    animation: details-donation-pulse 2s infinite;
  }
  
  /* Custom scrollbar */
  .details-donation-container::-webkit-scrollbar {
    width: 8px;
  }
  
  .details-donation-container::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
  }
  
  .details-donation-container::-webkit-scrollbar-thumb {
    background: rgba(141, 196, 63, 0.5);
    border-radius: 10px;
  }
  
  .details-donation-container::-webkit-scrollbar-thumb:hover {
    background: rgba(141, 196, 63, 0.7);
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/DonationRecommendations.css">
.donation-recommendations-container {
    max-width: 1200px;
    margin: 40px auto;
    padding: 20px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.donation-recommendations-container h1 {
    text-align: center;
    color: #333;
    margin-bottom: 30px;
    font-size: 2rem;
}

.donation-section {
    margin-bottom: 40px;
    padding: 20px;
    background-color: #f9f9f9;
    border-radius: 8px;
}

.donation-section h2 {
    color: #4CAF50;
    margin-bottom: 10px;
    font-size: 1.5rem;
}

.donation-section h3 {
    color: #555;
    margin-top: 20px;
    margin-bottom: 10px;
    font-size: 1.2rem;
}

.donation-section p {
    color: #666;
    margin-bottom: 10px;
}

.warning {
    color: #e74c3c;
    font-weight: bold;
}

.donation-table, .recommendation-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 0.9rem;
    margin-bottom: 20px;
}

.donation-table th, .donation-table td,
.recommendation-table th, .recommendation-table td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

.donation-table th, .recommendation-table th {
    background-color: #4CAF50;
    color: white;
    font-weight: bold;
}

.donation-table tr:nth-child(even),
.recommendation-table tr:nth-child(even) {
    background-color: #f2f2f2;
}

.donation-table tr:hover,
.recommendation-table tr:hover {
    background-color: #e0e0e0;
}

.recommendation-table button {
    padding: 5px 10px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.recommendation-table button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
}

.recommendation-table button:hover:not(:disabled) {
    background-color: #45a049;
}

.loading-spinner {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 200px;
}

.spinner {
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.donation-recommendations-container p a {
    color: #4CAF50;
    text-decoration: none;
    font-weight: bold;
}

.donation-recommendations-container p a:hover {
    text-decoration: underline;
}

.about-section {
    margin-top: 40px;
    padding: 20px;
    background-color: #f5f5f5;
    border-radius: 8px;
    text-align: center;
}

.about-section h2 {
    color: #4CAF50;
    margin-bottom: 20px;
    font-size: 1.5rem;
}

.about-section p {
    color: #666;
    line-height: 1.6;
    margin-bottom: 15px;
    font-size: 1rem;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/ForgetPass.css">
.forget-pass-container { 
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    position: relative; /* Ensure positioning context for pseudo-element */
    overflow: hidden;
  }
  
  .forget-pass-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url('../images/welcomeback.png'); /* Ensure the path is correct */
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    opacity: 0.3; /* Set the opacity of the background image */
    z-index: 1; /* Ensure the background is above the container but below the card */
  }
  
  .forget-pass-card {
    background: white;
    padding: 2rem;
    border-radius: 10px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    text-align: center;
    width: 350px;
    position: relative; /* Ensure card is on top of the background */
    z-index: 2; /* Ensure the card is above the background */
  }
  
  .forget-pass-card h2 {
    margin-bottom: 10px;
  }
  
  .forget-pass-card p {
    font-size: 14px;
    color: #555;
  }
  
  .forget-pass-card input {
    width: 100%;
    padding: 10px;
    margin: 10px 0;
    border: 1px solid #ccc;
    border-radius: 5px;
  }
  
  .forget-pass-card button {
    width: 100%;
    padding: 10px;
    background-color: #79ba7d;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
  }
  
  .forget-pass-card button:hover {
    background-color: #8dc73f;
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/ListDonationsRequest.css">
/* General container styling */
.container {
    padding: 20px;
    max-width: 1200px;
    margin: 0 auto;
  }
  
  /* Page Title */
  .title {
    color: #228b22;
    font-size: 28px;
    margin-bottom: 20px;
    text-align: center;
  }
  
  /* Donation Card */
  .donation-card-listrequestsdonation {
    background: #f8f9fa;
    border-left: 4px solid #228b22;

    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease-in-out;
    display: flex;
    flex-direction: column;
  }
  
  .donation-card-listrequestsdonation:hover {
    transform: scale(1.02);
  }
  
  /* Profile Info */
  .profile-info {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-bottom: 15px;
  }
  
  .dropdown-img {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid #228b22;
  }
  
  .profile-info p {
    margin: 0;
    font-size: 16px;
    font-weight: bold;
  }
  
  /* Products List (Now using Flexbox) */
  .product-list-listrequestsdonation {
    list-style: none;
    padding: 0;
    display: flex; /* FLEXBOX */
    flex-wrap: wrap; /* Allow wrapping if needed */
    gap: 10px;
    margin-top: 10px;
    justify-content: space-between;
  }
  
  /* Product Item - Now Using Flex */
/* Products List - Aligned & Compact */
.product-list-listrequestsdonation {
    list-style: none;
    padding: 0;
    display: flex;
    flex-direction: column; /* Stack items */
    gap: 8px;
    margin-top: 10px;
  }
  
  /* Product Item - Now More Structured */
  .product-item-listrequestsdonation {
    background: #ffffff;
    padding: 10px;
    border-left: 3px solid #228b22;
    border-radius: 5px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    font-size: 14px;
  }
  
  /* Product Details */
  .product-details {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
  }
  
  .product-details span {
    display: block;
    font-size: 13px;
    color: #333;
  }
  
  /* Quantity Highlighted */
  .product-quantity {
    font-size: 16px;
    font-weight: bold;
    color: #d9534f; /* Rouge pour attirer l'attention */
    padding: 4px 8px;
    border-radius: 4px;
  }
  
  /* Responsive Design */
  @media (max-width: 768px) {
    .product-item-listrequestsdonation {
      flex-direction: column; /* Stack on small screens */
      align-items: flex-start;
    }
  
    .product-quantity {
      font-size: 14px;
      padding: 6px;
    }
  }
  
  
  .product-item-listrequestsdonation span {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 14px;
    padding: 5px 0;
  }
  
  /* Button Container */
  .button-container {
    display: flex;
    justify-content: space-evenly;
    margin-top: 15px;
  }
  
  .accept-btn, .reject-btn {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    font-weight: bold;
    transition: background 0.3s ease-in-out;
  }
  
  .accept-btn {
    background-color: #28a745;
    color: white;
  }
  
  .accept-btn:hover {
    background-color: #218838;
  }
  
  .reject-btn {
    background-color: #dc3545;
    color: white;
  }
  
  .reject-btn:hover {
    background-color: #c82333;
  }
  
  /* Responsive Design */
  @media (max-width: 768px) {
    .donation-card {
      padding: 15px;
    }
  
    /* Stack product items in one column on small screens */
    .product-item {
      width: 100%;
    }
  
    .profile-info {
      flex-direction: column;
      align-items: flex-start;
    }
  }
  .search-container {
    display: flex;
    align-items: center;
    justify-content: center;
    background: white;
    padding: 8px;
    border-radius: 25px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    width: 320px;
    margin: 0 auto 20px;
    transition: all 0.3s ease-in-out;
  }
  
  .search-container:hover {
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }
  
  .search-icon {
    color: #555;
    margin-right: 8px;
  }
  
  .search-input-requests {
    border: none;
    outline: none;
    font-size: 16px;
    width: 100%;
    padding: 8px;
    background: transparent;
  }
  .controls {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 15px;
    margin: 20px 0;
  }
  
  .select {
    padding: 10px;
    font-size: 16px;
    border-radius: 25px;
    border: 1px solid #ccc;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    transition: 0.3s;
    cursor: pointer;
    background: white;
    color: #333;
    font-weight: bold;
  }
  
  .select:hover {
    border-color: #228b22;
    transform: scale(1.05);
  }
  
  .filter-checkbox {
    display: flex;
    align-items: center;
    font-size: 16px;
    color: #333;
  }
  
  .filter-icon {
    margin-right: 8px;
  }
  
  .filter-checkbox input {
    margin-right: 5px;
  }
  .content-list {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 20px;
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/ListOfDonations.css">
/* ===== Global Styles ===== */
body {
  margin: 0;
  font-family: "Poppins", sans-serif;
  background-color: #f0f8f0;
  box-sizing: border-box;
}

/* ===== Container Principal ===== */
.container-listdonation {
  width: 80%;
  margin: auto;
  padding: 40px 0;
}

/* ===== Header Section ===== */
.profile-headerLIST {
  display: flex;
  align-items: center;
  justify-content: space-between;
  background-color: #ffffff;
  padding: 20px 30px;
  border-radius: 10px;
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
  margin-bottom: 20px;
}

.profile-headerLIST h1 {
  font-size: 40px;
  color: #228b22;
  margin: 0;
}

/* ===== Search Bar ===== */
.groupsearch {
  position: relative;
  display: flex;
  align-items: center;
}

.inputsearch {
  width: 250px;
  padding: 10px 15px;
  border: 1px solid #ddd;
  border-radius: 30px;
  font-size: 16px;
  outline: none;
  transition: all 0.3s ease;
  padding-left: 40px;
}

.inputsearch:focus {
  border-color: #56ab2f;
  box-shadow: 0px 0px 8px rgba(34, 139, 34, 0.3);
}

.iconsearch {
  position: absolute;
  left: 12px;
  width: 20px;
  height: 20px;
  fill: #228b22;
}

/* ===== Liste des donations ===== */
.contentlist {
  display: flex;
  flex-direction: column;
  gap: 20px;
  width: 100%;
}

.contentlist > div {
  background: transparent;
  padding: 0px;
  border-radius: 10px;
  transition: transform 0.3s ease;
  width: 100%;
}

.donor-profile .projects {
  display: grid;
  grid-template-columns: 1fr;
  gap: 20px;
  width: 100%;
}

/* Grid layout for donation cards on larger screens */
@media (min-width: 768px) {
  .donor-profile .projects {
    grid-template-columns: repeat(2, 1fr);
  }
}

/* ===== Responsive Design ===== */
@media (max-width: 1024px) {
  .container-listdonation {
    width: 95%;
  }
}

@media (max-width: 768px) {
  .profile-headerLIST {
    flex-direction: column;
    text-align: center;
    gap: 15px;
  }

  .inputsearch {
    width: 100%;
  }

  .donor-profile .projects {
    grid-template-columns: 1fr;
  }
}

@media (max-width: 480px) {
  .donation-card-footer {
    justify-content: center;
  }

  .btnseemorelist,
  .btnseelist {
    width: 100%;
    text-align: center;
  }
}

/* Style du select avec position à droite */
.sort-select {
  width: 20px;
  padding: 8px 12px;
  background-color: #fff;
  border: 1px solid #ccc;
  border-radius: 50px;
  font-size: 16px;
  color: #333;
  appearance: none; /* Supprime le style par défaut du select */
  cursor: pointer;
  right: 20px; /* 20px à partir du bord droit */
  top: 10px; /* 10px à partir du bord supérieur */
}

/* Style du select au focus */
.sort-select:focus {
  border-color: #228b22;
  outline: none;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/log.css">
@import url('https://fonts.googleapis.com/css?family=Montserrat:400,800');

* {
  box-sizing: border-box;
}

.signup-body {
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  font-family: 'Montserrat', sans-serif;
  height: 100vh;
  margin: 0;
  overflow: hidden;
}

.signup-body::before {
  content: '';
  background-image: url('../images/welcomeback.png');
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  opacity: 0.2;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
}

.signup-root {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
}

.signup-h1 {
  font-weight: bold;
}

.signup-h2 {
  text-align: center;
}

.signup-p {
  font-size: 14px;
  font-weight: 100;
  line-height: 20px;
  letter-spacing: 0.5px;
  margin: 20px 0 30px;
}

.signup-span {
  font-size: 12px;
}

.signup-a {
  color: #333;
  font-size: 12px;
  text-decoration: none;
  margin-left: 160px;
}

.signup-button {
  border-radius: 2px;
  border: 1px solid #8dc73f;
  background-color: #8dc73f;
  color: #000000;
  font-size: 12px;
  font-weight: bold;
  padding: 12px 45px;
  letter-spacing: 1px;
  text-transform: uppercase;
  transition: transform 80ms ease-in;
  width: 100%;
  margin-top: 10px;
}

.signup-button:active {
  transform: scale(0.95);
}

.signup-button:focus {
  outline: none;
}

.signup-button .ghost {
  background-color: #FFFFFF;
  border-color: black;
}

.signup-form {
  background-color: #FFFFFF;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  padding: 0 50px;
  height: 100%;
  text-align: center;
}
.error-message {
  color: red;
  font-size: 14px;
  margin-bottom: 10px;
}

.signup-input {
  background-color: #eee;
  border: none;
  color: black;
  padding: 12px 15px;
  margin: 4px 0;
  width: 100%;
}

.auth-eye-icon {
  transform: translateX(-50%);
  cursor: pointer;
  font-size: 18px;
  margin-left: 400px;
  margin-top: -33px;
}


.signup-container {
  background-color: #fff;
  border-radius: 10px;
  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);
  position: relative;
  overflow: hidden;
  width: 1088px;
  max-width: 100%;
  height: 900px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.signup-form-container {
  position: absolute;
  top: 0;
  height: 100%;
  transition: all 0.6s ease-in-out;
}

.signup-sign-in-container {
  left: 0;
  width: 50%;
  z-index: 2;
}

.signup-container.right-panel-active .signup-sign-in-container {
  transform: translateX(100%);
}

.signup-sign-up-container {
  left: 0;
  width: 50%;
  opacity: 0;
  z-index: 1;
}

.signup-container.right-panel-active .signup-sign-up-container {
  transform: translateX(100%);
  opacity: 1;
  z-index: 5;
  animation: signup-show 0.6s;
}

@keyframes signup-show {
  0%, 49.99% {
    opacity: 0;
    z-index: 1;
  }
  50%, 100% {
    opacity: 1;
    z-index: 5;
  }
}

.signup-overlay-container {
  position: absolute;
  top: 0;
  left: 50%;
  width: 50%;
  height: 100%;
  overflow: hidden;
  transition: transform 0.6s ease-in-out;
  z-index: 100;
}

.signup-container.right-panel-active .signup-overlay-container {
  transform: translateX(-100%);
}

.signup-overlay {
  background: #79ba7d;
  background: -webkit-linear-gradient(to right, #8dc73f, #8eb73f);
  background: linear-gradient(to right, #8dc73f, #8eb73f);
  background-repeat: no-repeat;
  background-size: cover;
  background-position: 0 0;
  color: #FFFFFF;
  position: relative;
  left: -100%;
  height: 100%;
  width: 200%;
  transform: translateX(0);
  transition: transform 0.6s ease-in-out;
}

.signup-container.right-panel-active .signup-overlay {
  transform: translateX(50%);
}

.signup-overlay-panel {
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  padding: 0 40px;
  text-align: center;
  top: 0;
  height: 100%;
  width: 50%;
  transform: translateX(0);
  transition: transform 0.6s ease-in-out;
}

.signup-overlay-left {
  transform: translateX(-20%);
}

.signup-container.right-panel-active .signup-overlay-left {
  transform: translateX(0);
}

.signup-logo {
  max-width: 350px;
  margin-bottom: 5px;
}

.signup-overlay-right {
  right: 0;
  transform: translateX(0);
}

.signup-container.right-panel-active .signup-overlay-right {
  transform: translateX(20%);
}

.signup-social-container {
  margin: 10px 0;
}

.signup-social-container a {
  border: 1px solid #DDDDDD;
  border-radius: 50%;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  margin: 0 5px;
  height: 40px;
  width: 40px;
}

.signup-social-container img {
  width: 30px;
  height: 30px;
  object-fit: cover;
  border-radius: 50%;
}
.aa{
  display: flex;
  justify-content: center;
  align-items: center;
  height: 110%;
  margin: 40px;
}
/* From Uiverse.io by kyle1dev */ 
.checkbox-container {
  display: flex;
  gap: 20px;
  padding: 20px;
  background: #f8fafc;
  border-radius: 16px;
  box-shadow:
    0 4px 6px -1px rgba(0, 0, 0, 0.1),
    0 2px 4px -2px rgba(0, 0, 0, 0.05);
}

.ios-checkbox {
  --checkbox-size: 15px;
  

  position: relative;
  display: inline-block;
  cursor: pointer;
  user-select: none;
  -webkit-tap-highlight-color: transparent;
}

.ios-checkbox input {
  display: none;
}

.checkbox-wrapper {
  position: relative;
  width: var(--checkbox-size);
  height: var(--checkbox-size);
  border-radius: 8px;
  transition: transform 0.2s ease;
}

.checkbox-bg {
  position: absolute;
  inset: 0;
  
  border-radius: 5px;
  border: 2px solid var(--checkbox-border);
  background: white;
  transition: all 0.2s ease;
}

.checkbox-icon {
  position: absolute;
  inset: 0;
  margin: auto;
  
  width: 80%;
  height: 80%;
  color: white;
  transform: scale(0);
  transition: all 0.2s ease;
}

.check-path {
  stroke-dasharray: 40;
  stroke-dashoffset: 40;
  transition: stroke-dashoffset 0.3s ease 0.1s;
}

/* Checked State */
.ios-checkbox input:checked + .checkbox-wrapper .checkbox-bg {
  background: var(--checkbox-color);
  border-color: var(--checkbox-color);
}

.ios-checkbox input:checked + .checkbox-wrapper .checkbox-icon {
  transform: scale(1);
}

.ios-checkbox input:checked + .checkbox-wrapper .check-path {
  stroke-dashoffset: 0;
}

/* Hover Effects */
.ios-checkbox:hover .checkbox-wrapper {
  transform: scale(1.05);
}

/* Active Animation */
.ios-checkbox:active .checkbox-wrapper {
  transform: scale(0.95);
}

/* Focus Styles */
.ios-checkbox input:focus + .checkbox-wrapper .checkbox-bg {
  box-shadow: 0 0 0 4px var(--checkbox-bg);
}



.ios-checkbox.green {
  --checkbox-color: #8dc73f ;
  --checkbox-bg: #d1fae5;
  --checkbox-border: #8dc73f ;
  margin-left: -10px;
  
}


/* Animation */
@keyframes bounce {
  0%,
  100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.1);
  }
}

.ios-checkbox input:checked + .checkbox-wrapper {
  animation: bounce 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}
.signbtn{
  margin-top: 10px;
  font-size: 12px;
  padding:  5px 10px; 
  background-color: black;
  color: white;
  border-radius: 5px;
  border: none;
  width: 100px;
  height: 40px;
  font-size: 15px;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/MyDonations.css">
/* 🟢 Style général */
.mydonations-container {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}

/* 🟢 Ajoute un espace sous le Navbar */
.mydonations-content {
    padding: 20px;
    padding-top: 40px; /* Plus d'espace sous le Navbar */
    flex-grow: 1;
}

/* 🟢 Style du titre */
.mydonations-title {
    font-size: 26px;
    font-weight: bold;
    margin-bottom: 20px;
    color: #333;
    text-align: center;
}

/* 🟢 Style du tableau */
.mydonations-list {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 1400px;
    margin: 0 auto;
    overflow-x: auto;
}

/* 🟢 Style du tableau */
table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

/* 🟢 Style des colonnes */
th, td {
    padding: 14px;
    text-align: center;
    border-bottom: 1px solid #ddd;
}

/* 🟢 Style des en-têtes */
th {
    background-color: #f8f9fa;
    font-weight: bold;
    color: #333;
}

/* 🟢 Effet survol des lignes du tableau */
tr:hover {
    background-color: #f2f2f2;
    transition: background 0.3s ease-in-out;
}

/* 🟢 Statuts colorés */
.status {
    padding: 6px 12px;
    border-radius: 5px;
    font-weight: bold;
    text-transform: capitalize;
}

/* 🔵 Statut en attente */
.status.pending {
    background-color: #ffcc00;
    color: #333;
}

/* 🟢 Statut approuvé */
.status.approved {
    background-color: #28a745;
    color: white;
}

/* 🔵 Statut livré */
.status.delivered {
    background-color: #007bff;
    color: white;
}

/* 🟢 Colonne Self-Delivery */
.self-delivery {
    font-weight: bold;
    color: #333;
}

.self-delivery.yes {
    color: #28a745; /* ✅ Vert pour "Yes" */
}

.self-delivery.no {
    color: #dc3545; /* ❌ Rouge pour "No" */
}



/* 🟢 Style des boutons d'action */
.action-buttons {
    display: flex;
    justify-content: center;
    gap: 10px;
}

/* 🟢 Style des icônes */
.action-buttons button {
    background: transparent;
    border: none;
    cursor: pointer;
    font-size: 20px;
    transition: color 0.3s;
}

/* 🟢 Modifier */
.edit-btn {
    color: #007bff;
}

.edit-btn:hover {
    color: #0056b3;
}

/* 🟢 Sauvegarder */
.save-btn {
    color: #28a745;
}

.save-btn:hover {
    color: #1e7e34;
}

/* 🟢 Supprimer */
.delete-btn {
    color: #dc3545;
}

.delete-btn:hover {
    color: #c82333;
}

/* 🟢 Style des inputs en mode édition */
.edit-input {
    padding: 5px;
    border: 1px solid #ddd;
    border-radius: 5px;
    width: 100%;
}

/* 🟢 Responsive */
@media (max-width: 768px) {
    .mydonations-list {
        padding: 10px;
    }

    table {
        display: block;
        overflow-x: auto;
    }

    th, td {
        padding: 10px;
    }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/MyRequests.css">
/* 🟢 Style général */
.myrequests-container {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}

/* 🟢 Ajoute un espace sous le Navbar */
.myrequests-content {
    padding: 20px;
    padding-top: 20px; /* Espace sous le navbar */
    flex-grow: 1;
}

/* 🟢 Style du titre */
.myrequests-title {
    font-size: 26px;
    font-weight: bold;
    margin-bottom: 20px;
    color: #333;
    text-align: center;
}

/* 🟢 Style du tableau */
.myrequests-list {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 1400px;
    margin-top: 20px;
    overflow-x: auto; /* Scroll horizontal sur petits écrans */
}

/* 🟢 Style du tableau */
table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

th, td {
    padding: 12px;
    text-align: center;
    border-bottom: 1px solid #ddd;
}

th {
    background-color: #f8f9fa;
    font-weight: bold;
    color: #333;
}

/* 🟢 Statuts colorés */
.status {
    padding: 6px 10px;
    border-radius: 5px;
    font-weight: bold;
    text-transform: capitalize;
}

.status.pending {
    background-color: #ffcc00;
    color: #333;
}

.status.approved {
    background-color: #28a745;
    color: white;
}

.status.rejected {
    background-color: #dc3545;
    color: white;
}

/* 🟢 Style des boutons */
.action-buttons {
    display: flex;
    justify-content: center;
    gap: 10px;
}

.action-buttons button {
    background: transparent;
    border: none;
    cursor: pointer;
    font-size: 18px;
    transition: color 0.3s;
}

.edit-btn {
    color: #007bff;
}

.save-btn {
    color: #28a745;
}

.delete-btn {
    color: #dc3545;
}

.action-buttons button:hover {
    color: black;
}

/* 🟢 Input d'édition */
.edit-input {
    padding: 5px;
    border: 1px solid #ddd;
    border-radius: 5px;
    width: 100%;
}

/* 🟢 Responsive */
@media (max-width: 768px) {
    .myrequests-content {
        margin-left: 0;
        padding: 10px;
        padding-top: 60px;
    }

    .myrequests-list {
        padding: 10px;
    }

    table {
        display: block;
        overflow-x: auto;
    }

    th, td {
        padding: 8px;
    }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/Navbar.css">
/* Style général */
.navbarfront {
  background: white;
  padding: 0.6rem 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
}

.logo-container {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.logo {
  height: 50px;
}

.title {
  color: #8dc73f;
  font-size: 1.5rem;
  font-weight: bold;
}

/* Navigation Links */
.nav-links {
  list-style: none;
  display: flex;
  align-items: center;
  gap: 1.5rem;
}

.nav-link {
  text-decoration: none;
  color: black;
  font-size: 1rem;
  cursor: pointer;
  transition: color 0.3s ease;
}

.nav-link:hover {
  color: #8dc73f;
  font-weight: bold;
}

/* Style Dropdown */
.dropdown {
  position: relative;
}

.dropdown-toggle {
  cursor: pointer;
  color: black;
  font-size: 1rem;
  padding: 10px;
  transition: color 0.3s ease;
}

.dropdown-toggle:hover {
  color: #8dc73f;
  font-weight: bold;
}

.dropdown-content {
  display: none;
  position: absolute;
  background: white;
  min-width: 180px;
  box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
  border-radius: 5px;
  padding: 10px 0;
  z-index: 1000;
  text-align: left;
}

.dropdown:hover .dropdown-content {
  display: block;
}

.dropdown-content a {
  display: block;
  padding: 10px 15px;
  color: black;
  text-decoration: none;
  font-size: 0.9rem;
  transition: background 0.3s ease, color 0.3s ease;
}

.dropdown-content a:hover {
  background: #8dc73f;
  color: white;
}

/* Profil Menu */
.profile-menu {
  position: relative;
  cursor: pointer;
}

.profile-img {
  height: 40px;
  width: 40px;
  border-radius: 50%;
}

.dropdown-menu {
  display: none;
  position: absolute;
  top: 50px;
  right: 0;
  background: white;
  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
  border-radius: 5px;
  overflow: hidden;
  z-index: 1000;
  min-width: 200px;
}

.dropdown-menu.active {
  display: block;
}

.profile-info {
  display: flex;
  align-items: center;
  padding: 10px;
}

.dropdown-img {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  margin-right: 10px;
}

.user-name {
  font-weight: bold;
  color: #000;
}

.user-email {
  font-size: 0.8rem;
  color: #434141;
}

.menu-item {
  display: block;
  width: 100%;
  padding: 10px;
  border: none;
  background: none;
  text-align: left;
  cursor: pointer;
  transition: background 0.3s ease;
}

.menu-item:hover {
  background: #8dc73f;
  color: white;
}

.logout {
  color: red;
  font-weight: bold;
}

/* Auth Buttons */
.auth-buttons {
  display: flex;
  gap: 1rem;
  align-items: center;
}

.auth-button {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  text-decoration: none;
  font-weight: 500;
  transition: all 0.3s ease;
}

.signin {
  color: #8dc73f;
  border: 1px solid #8dc73f;
}

.signin:hover {
  background-color: rgba(141, 199, 63, 0.1);
}

.signup {
  background-color: #8dc73f;
  color: white;
}

.signup:hover {
  background-color: #7ab32f;
}

/* Responsive Design */
@media (max-width: 1024px) {
  .nav-links {
    gap: 1rem;
  }
}

@media (max-width: 950px) {
  .navbarfront {
    flex-direction: row;
    justify-content: space-between;
    padding: 0.8rem;
  }

  .title {
    font-size: 1.2rem;
  }

  .nav-links {
    display: none;
    flex-direction: column;
    position: absolute;
    top: 70px;
    left: 0;
    width: 100%;
    background: white;
    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.1);
    padding: 1rem 0;
    z-index: 1000;
  }

  .nav-links.open {
    display: flex;
  }

  .nav-link {
    padding: 10px;
    text-align: center;
    font-size: 1rem;
  }

  .auth-buttons {
    flex-direction: column;
    width: 100%;
    padding: 0 1rem;
    gap: 0.5rem;
  }

  .auth-button {
    width: 100%;
    justify-content: center;
  }

  .menu-toggle {
    display: flex;
    flex-direction: column;
    cursor: pointer;
  }

  .bar {
    background: black;
    height: 3px;
    width: 20px;
    margin: 2px 0;
    transition: 0.4s;
  }

  /* Animation pour le menu burger */
  .menu-toggle.open .bar:nth-child(1) {
    transform: rotate(45deg) translate(5px, 5px);
  }

  .menu-toggle.open .bar:nth-child(2) {
    opacity: 0;
  }

  .menu-toggle.open .bar:nth-child(3) {
    transform: rotate(-45deg) translate(6px, -6px);
  }
}

/* notification Design */
/* Existing styles... */

/* Notification Bell and Dropdown */
.notification-bell {
  position: relative;
  cursor: pointer;
  color: black;
  font-size: 1.5rem;
}

.notification-count {
  position: absolute;
  top: -5px;
  right: -5px;
  background-color: red;
  color: white;
  border-radius: 50%;
  padding: 2px 6px;
  font-size: 0.75rem;
}

.notification-dropdown {
  position: absolute;
  top: 50px;
  right: 20px;
  background-color: #fff;
  border: 1px solid #ddd;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  width: 300px;
  max-height: 400px;
  overflow-y: auto;
  z-index: 1000;
}
.notification-item {
  display: flex;
  align-items: center;
  padding: 10px;
  border-bottom: 1px solid #eee;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.notification-item.unread {
  background-color: #f0f0f0; /* Fond pour notifications non lues */
}

.notification-item.read {
  background-color: #ffffff;
}

.notification-item:hover {
  background-color: #e9ecef;
}

.notification-avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  object-fit: cover;
  margin-right: 10px;
}

.notification-content {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.notification-content p {
  margin: 0;
  font-size: 0.9rem;
  color: #333;
  font-weight: 500;
}

.notification-content small {
  font-size: 0.75rem;
  color: #777;
  margin-top: 3px;
}

.notification-status {
  width: 10px;
  height: 10px;
  background-color: blue;
  border-radius: 50%;
  margin-left: auto; /* Pousse le point bleu à droite */
}


/* Ensure the social-icons container doesn't interfere */
.social-icons {
  display: flex;
  align-items: center;
  gap: 15px;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/Notfound.css">
.notfound-container {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    background: linear-gradient(to bottom, #f2f7eb, #e8f3dc);
  }
  
  .notfound-content {
    flex-grow: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 3rem 1rem;
  }
  
  .notfound-card {
    max-width: 48rem;
    width: 100%;
    background-color: white;
    border-radius: 0.75rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    padding: 2rem;
    text-align: center;
  }
  
  .notfound-icon-container {
    margin-bottom: 1.5rem;
  }
  
  .notfound-icon {
    width: 5rem;
    height: 5rem;
    margin: 0 auto;
    color: #4caf50;
  }
  
  .notfound-title {
    font-size: 3.75rem;
    font-weight: bold;
    color: #2e7d32;
    margin-bottom: 1rem;
  }
  
  .notfound-subtitle {
    font-size: 1.875rem;
    font-weight: 600;
    color: #388e3c;
    margin-bottom: 1.5rem;
  }
  
  .notfound-message {
    color: #666;
    margin-bottom: 2rem;
    max-width: 32rem;
    margin-left: auto;
    margin-right: auto;
  }
  
  .notfound-actions {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    justify-content: center;
  }
  
  .notfound-btn {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    font-weight: 500;
    text-decoration: none;
    border-radius: 9999px;
    transition: background-color 0.3s, color 0.3s;
  }
  
  .notfound-btn-primary {
    background-color: #4caf50;
    color: white;
  }
  
  .notfound-btn-primary:hover {
    background-color: #388e3c;
  }
  
  .notfound-btn-secondary {
    border: 2px solid #4caf50;
    color: #4caf50;
  }
  
  .notfound-btn-secondary:hover {
    background-color: #f0f8eb;
  }
  
  @media (min-width: 640px) {
    .notfound-actions {
      flex-direction: row;
    }
  }
  
  @media (min-width: 768px) {
    .notfound-card {
      padding: 3rem;
    }
  
    .notfound-title {
      font-size: 4.5rem;
    }
  
    .notfound-subtitle {
      font-size: 2.25rem;
    }
  }
</file>

<file path="sustainafood-frontend/src/components/Alert.jsx">
import React, { useEffect, useState } from 'react';
import '../assets/styles/Alert.css';

const Alert = ({ type = 'success', message, onClose, duration = 3000 }) => {
  const [visible, setVisible] = useState(true);

  useEffect(() => {
    if (duration > 0) {
      const timer = setTimeout(() => {
        setVisible(false);
        setTimeout(onClose, 500); // Delay to allow animation
      }, duration);
      return () => clearTimeout(timer);
    }
  }, [duration, onClose]);

  return visible ? (
    <div className={`alert alert-${type} show`}>
      <span className="alert-icon"></span>
      <div className="alert-text">{message}</div>
      <span className="alert-close" onClick={() => setVisible(false)}>×</span>
    </div>
  ) : null;
};

export default Alert;
</file>

<file path="sustainafood-frontend/src/components/AlertDisplay.jsx">
import React from 'react';
import { useAlert } from '../contexts/AlertContext';
import Alert from '../components/Alert'; // Votre composant Alert existant

const AlertDisplay = () => {
  const { alerts, closeAlert } = useAlert();

  return (
    <div className="alert-container">
      {alerts.map((alert) => (
        <Alert
          key={alert.id}
          type={alert.type}
          message={alert.message}
          onClose={() => closeAlert(alert.id)}
          duration={5000} // Durée de 5 secondes
        />
      ))}
    </div>
  );
};

export default AlertDisplay;
</file>

<file path="sustainafood-frontend/src/components/backoffcom/DonationStatus.jsx">
import "/src/assets/styles/backoffcss/donationStatus.css";
import { FaApple, FaFacebook, FaPaypal, FaGithub } from "react-icons/fa";
import { SiFigma } from "react-icons/si";

import { FaStore, FaCarrot, FaHandsHelping, FaUtensils, FaTruck } from "react-icons/fa";

const donations = [
  { name: "Monoprix", category: "Supermarket Donations", progress: 54, icon: <FaStore size={16} color="red" /> },
  { name: "Supermarket", category: "Fresh Produce", progress: 86, icon: <FaCarrot size={16} color="orange" /> },
  { name: "Ha Food", category: "Charity Support", progress: 90, icon: <FaHandsHelping size={16} color="green" /> },
  { name: "Pasta Cosi", category: "Restaurant Donations", progress: 37, icon: <FaUtensils size={16} color="brown" /> },
  { name: "First Delivery", category: "Transport & Logistics", progress: 29, icon: <FaTruck size={16} color="blue" /> },
];


const DonationStatus = () => {
  return (
    <div className="donation-status">
      <h3>Donation Status</h3>
      {donations.map((donation, index) => (
        <div key={index} className="donation-item">
          <div className="donation-info">
            {donation.icon}
            <div>
              <p className="donation-name">{donation.name}</p>
              <p className="donation-category">{donation.category}</p>
            </div>
          </div>
          <div className="progress-container">
            <div className="progress-bar" style={{ width: `${donation.progress}%`, backgroundColor: donation.icon.props.color }}></div>
          </div>
          <p className="progress-text">{donation.progress}%</p>
        </div>
      ))}
    </div>
  );
};


export default DonationStatus;
</file>

<file path="sustainafood-frontend/src/components/backoffcom/Navbar.jsx">
import { FaSearch, FaGlobe, FaMoon, FaBell, FaUserCircle, FaSignOutAlt } from "react-icons/fa";
import { useNavigate, useLocation } from "react-router-dom";
import { useState, useEffect } from "react";
import { useAuth } from "../../contexts/AuthContext";
import { getUserById } from "../../api/userService";
import { getNotificationsByReceiver, markNotificationAsRead } from "../../api/notificationService"; // Import des services de notification
import imgmouna from "../../assets/images/imgmouna.png"; // Image par défaut
import "/src/assets/styles/backoffcss/navbar.css";

const Navbar = ({ setSearchQuery }) => {
  const navigate = useNavigate();
  const location = useLocation();
  const [searchQuery, setSearchQueryLocal] = useState("");
  const [menuOpen, setMenuOpen] = useState(false);
  const [notificationDropdownOpen, setNotificationDropdownOpen] = useState(false); // État pour le menu déroulant des notifications
  const { user: authUser, token, logout } = useAuth();
  const [user, setUser] = useState(authUser);
  const [notifications, setNotifications] = useState([]); // État pour stocker les notifications

  // Récupérer les détails de l’admin
  useEffect(() => {
    const fetchAdminDetails = async () => {
      if (authUser && (authUser._id || authUser.id)) {
        try {
          const response = await getUserById(authUser._id || authUser.id);
          setUser(response.data);
        } catch (error) {
          console.error("Error fetching admin details:", error);
        }
      }
    };
    fetchAdminDetails();
  }, [authUser]);

  // Récupérer les notifications pour l’admin
  useEffect(() => {
    const fetchNotifications = async () => {
      if (!authUser || !token) return;
      const userId = authUser._id || authUser.id;
      if (!userId) return;

      try {
        const response = await getNotificationsByReceiver(userId, token);
        setNotifications(response.notifications || []);
      } catch (error) {
        console.error("Error fetching notifications:", error);
      }
    };

    fetchNotifications();
  }, [authUser, token]);

  // Marquer une notification comme lue
  const handleMarkAsRead = async (notificationId) => {
    try {
      await markNotificationAsRead(notificationId, token);
      setNotifications((prevNotifications) =>
        prevNotifications.map((notif) =>
          notif._id === notificationId ? { ...notif, isRead: true } : notif
        )
      );
    } catch (error) {
      console.error("Error marking notification as read:", error);
    }
  };

  const handleSearch = (e) => {
    setSearchQueryLocal(e.target.value);
  };

  const handleSearchSubmit = (e) => {
    e.preventDefault();
    setSearchQuery(searchQuery.trim());
    if (searchQuery.trim()) {
      navigate(`${location.pathname}?search=${searchQuery}`);
    }
  };

  const handleLogout = () => {
    logout();
    navigate("/login");
  };

  const profilePhotoUrl = user?.photo ? `http://localhost:3000/${user.photo}` : null;

  return (
    <div className="navbar">
      {/* Barre de recherche */}
      <form className="search-container" onSubmit={handleSearchSubmit}>
        <input
          type="text"
          placeholder="Search..."
          value={searchQuery}
          onChange={handleSearch}
        />
        <button type="submit">
          <FaSearch />
        </button>
      </form>

      {/* Icônes de la navbar */}
      <div className="navbar-actions">
        <FaGlobe className="icon globe" />
        <FaMoon className="icon moon" />

        {/* Notification Bell avec Dropdown */}
        <div className="notification-container">
          <FaBell
            className="icon bell"
            onClick={() => setNotificationDropdownOpen(!notificationDropdownOpen)}
          />
          {notifications.filter((notif) => !notif.isRead).length > 0 && (
            <span className="badge">
              {notifications.filter((notif) => !notif.isRead).length}
            </span>
          )}
          {notificationDropdownOpen && (
            <div className="notification-dropdown">
              {notifications.length > 0 ? (
                notifications.map((notification) => {
                  const senderPhotoUrl = notification.sender?.photo
                    ? `http://localhost:3000/${notification.sender.photo}`
                    : imgmouna;

                  return (
                    <div
                      key={notification._id}
                      className={`notification-item ${notification.isRead ? "read" : "unread"}`}
                      onClick={() => handleMarkAsRead(notification._id)}
                    >
                      <img
                        src={senderPhotoUrl}
                        alt="Sender"
                        className="notification-avatar"
                        onError={(e) => (e.target.src = imgmouna)}
                      />
                      <div className="notification-content">
                        <p>
                          <strong>{notification.sender?.name || "Unknown User"}</strong>{" "}
                          {notification.message}
                        </p>
                        <small>{new Date(notification.createdAt).toLocaleString()}</small>
                      </div>
                      {!notification.isRead && <div className="notification-status"></div>}
                    </div>
                  );
                })
              ) : (
                <div className="notification-item">
                  <p>No notifications</p>
                </div>
              )}
            </div>
          )}
        </div>

        {/* Profile Dropdown Menu */}
        <div className="profile-menu" onClick={() => setMenuOpen(!menuOpen)}>
          {profilePhotoUrl ? (
            <img src={profilePhotoUrl} alt="Profile" className="profile-img" />
          ) : (
            <FaUserCircle className="icon user" />
          )}
          <div className={`dropdown-menu ${menuOpen ? "active" : ""}`}>
            <div className="profile-info">
              {profilePhotoUrl ? (
                <img src={profilePhotoUrl} alt="Profile" className="dropdown-img" />
              ) : (
                <FaUserCircle className="dropdown-img" />
              )}
              <div>
                <p className="user-name">{user?.name || "Loading..."}</p>
                <p className="user-email">{user?.email || "Loading..."}</p>
              </div>
            </div>
            <hr />
            <button className="menu-item" onClick={() => navigate("/admin-profile")}>
              Your account
            </button>
            <hr />
            <button onClick={handleLogout} className="menu-item logout">
              <FaSignOutAlt /> Logout
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Navbar;
</file>

<file path="sustainafood-frontend/src/contexts/AlertContext.jsx">
import React, { createContext, useState, useContext } from 'react';

const AlertContext = createContext();

export const AlertProvider = ({ children }) => {
  const [alerts, setAlerts] = useState([]);

  const showAlert = (type, message) => {
    const newAlert = { id: Date.now(), type, message };
    setAlerts((prev) => [...prev, newAlert]);
    setTimeout(() => {
      setAlerts((prev) => prev.filter((a) => a.id !== newAlert.id));
    }, 5000); // L'alerte disparaît automatiquement après 5 secondes
  };

  const closeAlert = (id) => {
    setAlerts((prev) => prev.filter((a) => a.id !== id));
  };

  return (
    <AlertContext.Provider value={{ alerts, showAlert, closeAlert }}>
      {children}
    </AlertContext.Provider>
  );
};

export const useAlert = () => useContext(AlertContext);
</file>

<file path="sustainafood-frontend/src/contexts/AuthContext.jsx">
import { createContext, useContext, useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";

// Create the context
export const AuthContext = createContext();

// Custom hook to use AuthContext
export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const navigate = useNavigate();

  // Retrieve initial authentication state from localStorage safely
  const [user, setUser] = useState(() => {
    const storedUser = localStorage.getItem("user");
    return storedUser && storedUser !== "undefined" ? JSON.parse(storedUser) : null;
  });

  const [token, setToken] = useState(() => {
    const storedToken = localStorage.getItem("token");
    return storedToken && storedToken !== "undefined" ? storedToken : null;
  });
  // State for password reset
  const [resetStatus, setResetStatus] = useState(""); // Track reset status
  const [error, setError] = useState(""); // Track error messages
  const [loading, setLoading] = useState(false); // Track loading state

  // Login function
  const login = (userData, token , is2FAEnabled) => {
    setUser({ ...userData, is2FAEnabled }); // Include is2FAEnabled in user data
    console.log("User logged in:", userData);
    setToken(token);
    localStorage.setItem("user", JSON.stringify({ ...userData, is2FAEnabled }));
    localStorage.setItem("token", token);
    console.log("the token in local storge est from authicontext in fn login:", token)
    navigate("/profile"); // Redirect after login
  };

  // Logout function
  const logout = () => {
    setUser(null);
    setToken(null);
    localStorage.removeItem("user");
    localStorage.removeItem("token");
    navigate("/login"); // Redirect to login page
  };

  // Check if the user is authenticated
  const isAuthenticated = () => !!token;


    // Clear the welcome message
    const clearWelcomeMessage = () => {
      setUser((prevUser) => {
        if (!prevUser) return prevUser;
        const updatedUser = { ...prevUser, welcomeMessage: "" };
        localStorage.setItem("user", JSON.stringify(updatedUser));
        return updatedUser;
      });
    };

  // Send password reset code
  const sendResetCode = async (email) => {
    setLoading(true);
    try {
      const response = await axios.post("/api/auth/send-reset-code", { email });
      setResetStatus("Reset code sent successfully.");
      setLoading(false);
    } catch (err) {
      setError("Error sending reset code.");
      setLoading(false);
    }
  };
  // Validate the password reset code
  const validateResetCode = async (email, resetCode) => {
    setLoading(true);
    try {
      const response = await axios.post("/api/auth/validate-reset-code", { email, resetCode });
      setResetStatus("Reset code validated successfully.");
      setLoading(false);
    } catch (err) {
      setError("Invalid or expired reset code.");
      setLoading(false);
    }
  };

  // Reset password
  const resetPassword = async (email, newPassword) => {
    setLoading(true);
    try {
      const response = await axios.post("/api/auth/reset-password", { email, newPassword });
      setResetStatus("Password successfully reset.");
      setLoading(false);
    } catch (err) {
      setError("Error resetting password.");
      setLoading(false);
    }
  };




  // Method to get the role of the current user
  const getRole = () => {
    return user?.role || null;
  };

  return (
    <AuthContext.Provider value={{
      user,
      token,
      login,
      logout,
      isAuthenticated, getRole,
      sendResetCode,
      validateResetCode,
      resetPassword,
      clearWelcomeMessage,
      resetStatus,
      error,
      loading,
    }}>
      {children}
    </AuthContext.Provider>
  );
};

export default AuthProvider;
</file>

<file path="sustainafood-frontend/src/index.css">
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}
.map-container {
  width: 100%;
  height: 400px;
}
@media (max-width: 600px) {
  .map-container {
    height: 300px;
  }
}
@import 'leaflet/dist/leaflet.css';
</file>

<file path="sustainafood-frontend/src/main.jsx">
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { AuthProvider } from "./contexts/AuthContext";
import { BrowserRouter as Router } from "react-router-dom";
import {GoogleOAuthProvider} from "@react-oauth/google"

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <Router>
    <AuthProvider>
    <GoogleOAuthProvider clientId="956944465220-h2iu00f6if7r8a58tb69s34qt9etetli.apps.googleusercontent.com">
    <App />
    </GoogleOAuthProvider>
    </AuthProvider>
    </Router>
  </React.StrictMode>
);
</file>

<file path="sustainafood-frontend/src/pages/AccountSettings.tsx">
import React, { useState, useEffect } from "react";
import Navbar from "../components/Navbar";
import Footer from "../components/Footer";
import "../assets/styles/AccountSettings.css";
import { useAuth } from "../contexts/AuthContext";
import { deactivateAccount, changePassword, toggle2FA, getUserById } from "../api/userService";
import ConfirmationModal from "../pages/ConfirmationModal"; // Import the ConfirmationModal

const AccountSettings = () => {
  const [is2FAEnabled, setIs2FAEnabled] = useState(false);
  const { user, token, logout } = useAuth();

  const [currentPassword, setCurrentPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [showAlert, setShowAlert] = useState(false);
  const [alertMessage, setAlertMessage] = useState("");
  const [alertType, setAlertType] = useState("success");

  const [showConfirmationModal, setShowConfirmationModal] = useState(false); // State for confirmation modal

  const handleChangePassword = async (e) => {
    e.preventDefault();

    if (newPassword !== confirmPassword) {
      setAlertMessage("New password and Confirm password do not match!");
      setAlertType("error");
      setShowAlert(true);
      return;
    }

    try {
      const response = await changePassword(user.id, currentPassword, newPassword);

      if (response.status === 200) {
        setAlertMessage("Password changed successfully!");
        setAlertType("success");
        setShowAlert(true);
        setCurrentPassword("");
        setNewPassword("");
        setConfirmPassword("");
      }
    } catch (error) {
      console.error("Error changing password:", error);
      setAlertMessage(error.response?.data?.error || "Failed to change password");
      setAlertType("error");
      setShowAlert(true);
    }
  };

  const handleDeactivateAccount = async () => {
    setShowConfirmationModal(true); // Show the confirmation modal
  };

  const confirmDeactivateAccount = async () => {
    setShowConfirmationModal(false); // Hide the confirmation modal

    if (user && user.id) {
      try {
        const response = await deactivateAccount(user.id, token);

        if (response.status === 200) {
          setAlertMessage("Your account has been deactivated. You can reactivate it by logging in.");
          setAlertType("success");
          setShowAlert(true);

          // Delay the logout to allow the alert to be displayed
          setTimeout(() => {
            logout();
          }, 3000); // Logout after 3 seconds
        }
      } catch (error) {
        console.error("Error deactivating account:", error);
        setAlertMessage("Failed to deactivate account. Please try again.");
        setAlertType("error");
        setShowAlert(true);
      }
    } else {
      setAlertMessage("User information is not available. Please try again.");
      setAlertType("error");
      setShowAlert(true);
    }
  };

  const cancelDeactivateAccount = () => {
    setShowConfirmationModal(false); // Hide the confirmation modal
  };

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const response = await getUserById(user.id);
        setIs2FAEnabled(response.data.is2FAEnabled);
      } catch (error) {
        console.error("Error fetching user data:", error);
      }
    };

    fetchUserData();
  }, [user.id]);

  const handle2FAToggle = async () => {
    try {
      const response = await toggle2FA(user.email);

      if (response.status === 200) {
        setIs2FAEnabled(!is2FAEnabled);
        setAlertMessage(`2FA has been ${!is2FAEnabled ? "enabled" : "disabled"}.`);
        setAlertType("success");
        setShowAlert(true);
      }
    } catch (error) {
      console.error("Error toggling 2FA:", error);
      setAlertMessage("Failed to toggle 2FA. Please try again.");
      setAlertType("error");
      setShowAlert(true);
    }
  };

  useEffect(() => {
    if (showAlert) {
      const timer = setTimeout(() => {
        setShowAlert(false);
      }, 3000); // Dismiss after 3 seconds

      return () => clearTimeout(timer); // Cleanup the timer
    }
  }, [showAlert]);

  return (
    <div className="accountsettings-page">
      <Navbar />
      {showAlert && (
        <div className={`custom-alert ${alertType}`}>
          <div className="alert-content">
            {alertType === "success" && (
              <div className="alert-icon">
                <svg viewBox="0 0 24 24" width="24" height="24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path
                    d="M20 6L9 17L4 12"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                </svg>
              </div>
            )}
            {alertType === "error" && (
              <div className="alert-icon">
                <svg viewBox="0 0 24 24" width="24" height="24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path
                    d="M12 8V12M12 16H12.01M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                  />
                </svg>
              </div>
            )}
            <span>{alertMessage}</span>
            <button className="alert-close" onClick={() => setShowAlert(false)} aria-label="Close alert">
              <svg viewBox="0 0 24 24" width="18" height="18" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" />
              </svg>
            </button>
          </div>
          {/* Animated progress bar for auto-dismiss */}
          <div className="alert-progress"></div>
        </div>
      )}

      {/* Confirmation Modal */}
      {showConfirmationModal && (
        <ConfirmationModal
          message="Are you sure you want to deactivate your account? You can reactivate it later by logging in."
          onConfirm={confirmDeactivateAccount}
          onCancel={cancelDeactivateAccount}
        />
      )}

      <div className="accountsettings-content">
        <div className="accountsettings-container">
          <h1 className="accountsettings-title">Account Settings</h1>

          {/* Change Password Section */}
          <section className="accountsettings-section">
            <h2>Change Password</h2>
            <form onSubmit={handleChangePassword} className="accountsettings-form">
              <div className="accountsettings-form-group">
                <label htmlFor="currentPassword">Current Password</label>
                <input
                  type="password"
                  id="currentPassword"
                  required
                  value={currentPassword}
                  onChange={(e) => setCurrentPassword(e.target.value)}
                />
              </div>
              <div className="accountsettings-form-group">
                <label htmlFor="newPassword">New Password</label>
                <input
                  type="password"
                  id="newPassword"
                  required
                  value={newPassword}
                  onChange={(e) => setNewPassword(e.target.value)}
                />
              </div>
              <div className="accountsettings-form-group">
                <label htmlFor="confirmPassword">Confirm New Password</label>
                <input
                  type="password"
                  id="confirmPassword"
                  required
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                />
              </div>
              <button type="submit" className="accountsettings-button">
                Change Password
              </button>
            </form>
          </section>

          {/* 2FA Section */}
          <section className="accountsettings-section">
            <h2>Two-Factor Authentication (2FA)</h2>
            <div className="accountsettings-twofa-toggle">
              <label className="accountsettings-switch">
                <input
                  type="checkbox"
                  checked={is2FAEnabled}
                  onChange={handle2FAToggle}
                />
                <span className="accountsettings-slider accountsettings-round"></span>
              </label>
              <span>{is2FAEnabled ? "Enabled" : "Disabled"}</span>
            </div>
            {is2FAEnabled && <p>2FA is enabled. Use an authenticator app to generate codes.</p>}
          </section>

          {/* Deactivate Account Section */}
          <section className="accountsettings-section">
            <h2>Deactivate Account</h2>
            <p>
              Warning: Deactivating your account will temporarily suspend your access to
              SustainaFood. Your data will be preserved, and you can reactivate your account at
              any time by logging in.
            </p>
            <button
              onClick={handleDeactivateAccount}
              className="accountsettings-button accountsettings-deactivate"
            >
              Deactivate Account
            </button>
          </section>
        </div>
      </div>
      <Footer />
    </div>
  );
};

export default AccountSettings;
</file>

<file path="sustainafood-frontend/src/pages/AiClassification.jsx">
"use client"

import { useState, useEffect } from "react";
import Navbar from "../components/Navbar";
import Footer from "../components/Footer";
import "../assets/styles/AiClassification.css"; // Use the correct CSS file
import { useNavigate } from "react-router-dom";
import { useAuth } from "../contexts/AuthContext";
import { useAlert } from "../contexts/AlertContext";
import { getDonationsByUserId } from "../api/donationService"; // Import the API to fetch donations
import { getUserById } from "../api/userService"; // Import the API to fetch user data
import axios from "axios"; // For making API calls to update classifications

const AiClassification = () => {
    const { user: authUser, token, logout } = useAuth(); // Get the logged-in user from context
    const { showAlert } = useAlert(); // For showing success/error messages
    const navigate = useNavigate();

    const [user, setUser] = useState(null); // Store the fetched user data
    const [donations, setDonations] = useState([]); // Store the user's donations
    const [loading, setLoading] = useState(true); // Loading state while fetching data
    const [userId, setUserId] = useState(null);
    // Fetch user and donations when the component mounts
    useEffect(() => {
        const fetchData = async () => {
            // Check if the user is authenticated
            if (!authUser || (!authUser.id && !authUser._id)) {
                showAlert("error", "Please log in to view your donations.");
                navigate("/login");
                return;
            }

            try {
                setLoading(true);

                // Determine the user ID (handle both `id` and `_id` cases)

                // Determine the user ID (handle both `id` and `_id` cases)
                if (typeof authUser.id === "number") {
                    if (!authUser || !authUser._id) return;
                    try {
                        setUserId(authUser._id);
                    } catch (error) {
                      console.error("Backend Error:", error);
                    }
                  }
                  else if (typeof authUser.id === "string") {
                    if (!authUser || !authUser.id) return;
                    try {
                        setUserId(authUser.id);
                    } catch (error) {
                      console.error("Backend Error:", error);
                    }
                  }                console.log("Fetching data for userId:", userId); // Debug log

                // Fetch user data
                const userResponse = await getUserById(userId);
                const fetchedUser = userResponse.data;
                setUser(fetchedUser);

                // Fetch donations using the user ID
                const donationsResponse = await getDonationsByUserId(userId);
                console.log("Donations response:", donationsResponse.data); // Debug log
                setDonations(donationsResponse.data || []);
            } catch (error) {
                console.error("Error fetching data:", error);
                showAlert("error", "Failed to load your data.");
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, [authUser, navigate, showAlert]); // Dependencies: authUser, navigate, showAlert

    // Function to handle updating the productType or mealType
    const handleClassificationChange = async (donationId, itemIndex, newType, category) => {
        try {
            const donation = donations.find((d) => d._id === donationId);
            let updatedItems;

            if (category === "packaged_products") {
                updatedItems = [...donation.products];
                updatedItems[itemIndex].product.productType = newType; // Update the productType in the nested product object
            } else if (category === "prepared_meals") {
                updatedItems = [...donation.meals];
                updatedItems[itemIndex].meal.mealType = newType; // Update the mealType in the nested meal object
            }

            // Update the donation in the backend
            const updatedDonation = {
                ...donation,
                products: category === "packaged_products" ? updatedItems : donation.products,
                meals: category === "prepared_meals" ? updatedItems : donation.meals,
            };

            await axios.put(`/api/donations/update/${donationId}`, updatedDonation);

            // Update the local state
            setDonations((prev) =>
                prev.map((d) =>
                    d._id === donationId ? { ...d, ...updatedDonation } : d
                )
            );

            showAlert("success", "Classification updated successfully!");
        } catch (error) {
            console.error("Error updating classification:", error);
            showAlert("error", "Failed to update classification.");
        }
    };

    // Separate donations into packaged products and prepared meals
    const packagedDonations = donations.filter((d) => d.category === "packaged_products");
    const mealDonations = donations.filter((d) => d.category === "prepared_meals");

    return (
        <>
            <Navbar />

            <div className="ai-classification-container">
                <h1>AI Classification Results</h1>
                {loading ? (
                    <div className="loading-spinner">
                        <svg
                            width="50"
                            height="50"
                            viewBox="0 0 50 50"
                            xmlns="http://www.w3.org/2000/svg"
                            className="spinner"
                        >
                            <circle
                                cx="25"
                                cy="25"
                                r="20"
                                stroke="#4CAF50"
                                strokeWidth="5"
                                fill="none"
                                strokeDasharray="31.415, 31.415"
                                strokeLinecap="round"
                            />
                        </svg>
                    </div>
                ) : (
                    <>
                        {/* Display Packaged Products */}
                        {packagedDonations.length > 0 ? (
                            <div className="section">
                                <h2>Packaged Products</h2>
                                {packagedDonations.map((donation) => (
                                    <div key={donation._id} className="table-container">
                                        <h3>Donation ID: {donation._id}</h3>
                                        <table className="donation-table">
                                            <thead>
                                                <tr>
                                                    <th>Name</th>
                                                    <th>Description</th>
                                                    <th>Weight Per Unit</th>
                                                    <th>Weight Unit</th>
                                                    <th>Total Weight Unit</th>
                                                    <th>Donated Quantity</th>
                                                    <th>Product Type</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                {donation.products.map((item, index) => (
                                                    <tr key={index}>
                                                        <td>{item.product.name}</td>
                                                        <td>{item.product.productDescription}</td>
                                                        <td>{item.product.weightPerUnit}</td>
                                                        <td>{item.product.weightUnit}</td>
                                                        <td>{item.product.weightUnitTotale}</td>
                                                        <td>{item.quantity}</td> {/* Use the donated quantity */}
                                                        <td>
                                                            <div style={{ display: "flex", alignItems: "center", gap: "5px" }}>
                                                                <select
                                                                    value={item.product.productType || "Other"}
                                                                    onChange={(e) =>
                                                                        handleClassificationChange(
                                                                            donation._id,
                                                                            index,
                                                                            e.target.value,
                                                                            "packaged_products"
                                                                        )
                                                                    }
                                                                >
                                                                    <option value="Canned_Goods">Canned Goods</option>
                                                                    <option value="Dry_Goods">Dry Goods</option>
                                                                    <option value="Beverages">Beverages</option>
                                                                    <option value="Snacks">Snacks</option>
                                                                    <option value="Cereals">Cereals</option>
                                                                    <option value="Baked_Goods">Baked Goods</option>
                                                                    <option value="Condiments">Condiments</option>
                                                                    <option value="Vegetables">Vegetables</option>
                                                                    <option value="Fruits">Fruits</option>
                                                                    <option value="Meat">Meat</option>
                                                                    <option value="Fish">Fish</option>
                                                                    <option value="Dairy">Dairy</option>
                                                                    <option value="Eggs">Eggs</option>
                                                                    <option value="Baby_Food">Baby Food</option>
                                                                    <option value="Pet_Food">Pet Food</option>
                                                                    <option value="Other">Other</option>
                                                                </select>
                                                                <span
                                                                    title="Automatically classified by AI"
                                                                    style={{ cursor: "pointer", color: "#4CAF50" }}
                                                                >
                                                                    ℹ️
                                                                </span>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                ))}
                                            </tbody>
                                        </table>
                                    </div>
                                ))}
                            </div>
                        ) : (
                            <p>
                                No packaged product donations found.{" "}
                                <a href="/add-donation">Add a donation now</a> to get started!
                            </p>
                        )}

                        {/* Display Prepared Meals */}
                        {mealDonations.length > 0 ? (
                            <div className="section">
                                <h2>Prepared Meals</h2>
                                {mealDonations.map((donation) => (
                                    <div key={donation._id} className="table-container">
                                        <h3>Donation ID: {donation._id}</h3>
                                        <table className="donation-table">
                                            <thead>
                                                <tr>
                                                    <th>Meal Name</th>
                                                    <th>Meal Description</th>
                                                    <th>Quantity</th>
                                                    <th>Meal Type</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                {donation.meals.map((item, index) => (
                                                    <tr key={index}>
                                                        <td>{item.meal.mealName}</td>
                                                        <td>{item.meal.mealDescription}</td>
                                                        <td>{item.quantity}</td> {/* Use the donated quantity */}
                                                        <td>
                                                            <div style={{ display: "flex", alignItems: "center", gap: "5px" }}>
                                                                <select
                                                                    value={item.meal.mealType || "Other"}
                                                                    onChange={(e) =>
                                                                        handleClassificationChange(
                                                                            donation._id,
                                                                            index,
                                                                            e.target.value,
                                                                            "prepared_meals"
                                                                        )
                                                                    }
                                                                >
                                                                    <option value="Breakfast">Breakfast</option>
                                                                    <option value="Lunch">Lunch</option>
                                                                    <option value="Dinner">Dinner</option>
                                                                    <option value="Snack">Snack</option>
                                                                    <option value="Dessert">Dessert</option>
                                                                    <option value="Soup">Soup</option>
                                                                    <option value="Other">Other</option>
                                                                </select>
                                                                <span
                                                                    title="Automatically classified by AI"
                                                                    style={{ cursor: "pointer", color: "#4CAF50" }}
                                                                >
                                                                    ℹ️
                                                                </span>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                ))}
                                            </tbody>
                                        </table>
                                    </div>
                                ))}
                            </div>
                        ) : (
                            <p>
                                No prepared meal donations found.{" "}
                                <a href="/add-donation">Add a donation now</a> to get started!
                            </p>
                        )}

                        {/* About SustainaFood Section */}
                        <div className="about-section">
                            <h2>About SustainaFood</h2>
                            <p>
                                SustainaFood is a platform dedicated to reducing food waste and fighting hunger by connecting food donors with those in need. 
                                Our mission is to create a sustainable food ecosystem where surplus food from restaurants, supermarkets, and individuals can be 
                                redistributed to communities and organizations that need it most.
                            </p>
                            <p>
                                Using advanced AI technology, SustainaFood automatically classifies donated food items to streamline the donation process, ensuring 
                                that food reaches its destination quickly and efficiently. Join us in making a difference—one donation at a time.
                            </p>
                        </div>
                    </>
                )}
            </div>

            <Footer />
        </>
    );
};

export default AiClassification;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/DonationsRequestList.jsx">
import React, { useState, useEffect } from "react";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import { getRequestById } from "../../api/requestNeedsService";
import { getDonationByRequestId, getDonationById } from "../../api/donationService";
import { getUserById } from "../../api/userService";
import { createAndAcceptDonationTransaction, rejectDonation } from "../../api/donationTransactionService";
import "../../assets/styles/backoffcss/RequestTable.css";
import { useParams } from "react-router-dom";
import styled from "styled-components";
import { useAlert } from "../../contexts/AlertContext";
import "../../assets/styles/backoffcss/RequestDetail.css";
import imgmouna from "../../assets/images/imgmouna.png";

// Styled Components (inchangés, inclus pour référence)
const DonationCard = styled.div`
  background: #f8f9fa;
  border-left: 4px solid #228b22;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 20px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: transform 0.2s ease-in-out;

  &:hover {
    transform: scale(1.02);
  }

  @media (max-width: 768px) {
    padding: 15px;
  }
`;

const ProfileInfo = styled.div`
  display: flex;
  align-items: center;
  gap: 15px;
  margin-bottom: 15px;

  @media (max-width: 768px) {
    flex-direction: column;
    align-items: flex-start;
  }
`;

const ProfileImg = styled.img`
  width: 50px;
  height: 50px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #228b22;
`;

const ProfileText = styled.p`
  margin: 0;
  font-size: 16px;
  font-weight: bold;
  color: #495057;
`;

const DonationDetails = styled.div`
  margin-bottom: 15px;
`;

const DonationDetail = styled.p`
  font-size: 14px;
  color: #495057;
  margin: 5px 0;

  strong {
    color: #222;
    font-weight: 600;
  }
`;

const ProductSection = styled.div`
  margin-bottom: 15px;
`;

const ProductsTitle = styled.h4`
  font-size: 16px;
  color: #222;
  margin: 0 0 10px;
`;

const ProductList = styled.ul`
  list-style: none;
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 8px;
  margin-top: 10px;
`;

const ProductItem = styled.li`
  background: #ffffff;
  padding: 10px;
  border-left: 3px solid #228b22;
  border-radius: 5px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  font-size: 14px;

  @media (max-width: 768px) {
    flex-direction: column;
    align-items: flex-start;
  }
`;

const ProductDetails = styled.div`
  display: flex;
  flex-direction: column;
  flex-grow: 1;

  span {
    display: block;
    font-size: 13px;
    color: #333;
  }
`;

const ProductQuantity = styled.span`
  font-size: 16px;
  font-weight: bold;
  color: #d9534f;
  padding: 4px 8px;
  border-radius: 4px;

  @media (max-width: 768px) {
    font-size: 14px;
    padding: 6px;
  }
`;

const ButtonContainer = styled.div`
  display: flex;
  justify-content: space-evenly;
  margin-top: 15px;
`;



const Button = styled.button`
  display: inline-block;
  padding: 12px 20px;
  font-size: 16px;
  font-weight: 600;
  text-align: center;
  border-radius: 8px;
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 8px;
  color: white;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);

  ${({ variant }) =>
    variant === "back" &&
    `
    background: #6c757d;
    &:hover { background: #5a6268; transform: translateY(-2px); }
  `}

  &:active {
    transform: translateY(1px);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }
`;

const ErrorContainer = styled.div`
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100vh;
  margin-top: -500px;
  margin-left: 200px;
  color: #4caf50;
  font-size: 1.5rem;
  text-align: center;
  padding: 20px;
`;

const PaginationControls = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  gap: 10px;

  button {
    padding: 10px 20px;
    font-size: 16px;
    background: #228b22;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s;

    &:hover {
      background: #56ab2f;
    }

    &:disabled {
      background: #ccc;
      cursor: not-allowed;
    }
  }

  span {
    font-size: 16px;
    color: #333;
  }
`;

const RejectionModal = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
`;

const ModalContent = styled.div`
  background: white;
  padding: 20px;
  border-radius: 8px;
  width: 400px;
  max-width: 90%;
`;

const ModalTextarea = styled.textarea`
  width: 100%;
  min-height: 100px;
  margin: 10px 0;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
`;

const ModalButtons = styled.div`
  display: flex;
  justify-content: flex-end;
  gap: 10px;
`;

const DonationsRequestList = () => {
  const { showAlert } = useAlert();
  const { id } = useParams();
  const [donations, setDonations] = useState([]);
  const [filteredDonations, setFilteredDonations] = useState([]);
  const [request, setRequest] = useState(null);
  const [users, setUsers] = useState({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(3);
  const [filterOption, setFilterOption] = useState("all");
  const [sortOption, setSortOption] = useState("date");
  const [searchQuery, setSearchQuery] = useState("");
  const [processing, setProcessing] = useState({});
  const [currentRejectionId, setCurrentRejectionId] = useState(null);
  const [rejectionReason, setRejectionReason] = useState("");

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const [requestResponse, donationData] = await Promise.all([
          getRequestById(id),
          getDonationByRequestId(id),
        ]);

        console.log("Request Response:", requestResponse.data);
        console.log("Donation Data:", donationData);

        setRequest(requestResponse.data);
        const donationsArray = Array.isArray(donationData) ? donationData : [];
        setDonations(donationsArray);

        if (donationsArray.length > 0) {
          // Extraire l'ID du donateur à partir de l'objet donor
          const uniqueDonorIds = [
            ...new Set(
              donationsArray.map((d) =>
                d.donor && typeof d.donor === "object" ? d.donor._id : d.donor
              )
            ),
          ].filter((id) => id); // Filtrer les valeurs undefined/null
          console.log("Unique Donor IDs:", uniqueDonorIds);

          const userPromises = uniqueDonorIds.map((id) =>
            getUserById(id)
              .then((response) => {
                console.log(`User data for ${id}:`, response.data);
                return { id, data: response.data };
              })
              .catch((err) => {
                console.error(`Error fetching user ${id}:`, err);
                return { id, data: null };
              })
          );

          const userResults = await Promise.all(userPromises);
          const usersMap = Object.fromEntries(
            userResults.map(({ id, data }) => [id, data])
          );
          console.log("Users Map:", usersMap);
          setUsers(usersMap);
        }
      } catch (err) {
        setError(err.response?.data?.message || "Failed to fetch data");
        console.error("Fetch Error:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [id]);

  useEffect(() => {
    if (!donations.length || !request) return;

    let result = [...donations];

    if (filterOption !== "all") {
      if (["pending", "approved", "rejected"].includes(filterOption)) {
        result = result.filter((d) => d.status === filterOption);
      } else if (filterOption === "full") {
        result = result.filter((donation) =>
          donation.products.every((item) => {
            const requestedProduct = request?.requestedProducts?.find(
              (rp) =>
                rp.productType === item.product?.productType ||
                rp._id === item.product?._id
            );
            return (
              requestedProduct && item.quantity >= requestedProduct.totalQuantity
            );
          })
        );
      }
    }

    if (searchQuery) {
      result = result.filter((donation) => {
        const productMatch = donation.products?.some(
          (product) =>
            product.product?.name
              ?.toLowerCase()
              .includes(searchQuery.toLowerCase()) ||
            product.product?.productType
              ?.toLowerCase()
              .includes(searchQuery.toLowerCase())
        );
        const donorId =
          donation.donor && typeof donation.donor === "object"
            ? donation.donor._id
            : donation.donor;
        const donorMatch = users[donorId]?.name
          ?.toLowerCase()
          .includes(searchQuery.toLowerCase());
        return productMatch || donorMatch;
      });
    }

    result.sort((a, b) => {
      const donorAId =
        a.donor && typeof a.donor === "object" ? a.donor._id : a.donor;
      const donorBId =
        b.donor && typeof b.donor === "object" ? b.donor._id : b.donor;
      switch (sortOption) {
        case "title":
          return (a.title || "").localeCompare(b.title || "");
        case "donor":
          return (users[donorAId]?.name || "").localeCompare(
            users[donorBId]?.name || ""
          );
        case "status":
          return a.status.localeCompare(b.status);
        default:
          return new Date(b.createdAt) - new Date(a.createdAt);
      }
    });

    setFilteredDonations(result);
    setCurrentPage(1);
  }, [donations, request, users, filterOption, sortOption, searchQuery]);

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = filteredDonations.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(filteredDonations.length / itemsPerPage);

  const handlePageChange = (page) => {
    if (page >= 1 && page <= totalPages) {
      setCurrentPage(page);
    }
  };



  const openRejectionDialog = (donationId) => {
    setCurrentRejectionId(donationId);
    setRejectionReason("");
  };

  if (loading) return <div className="loading-message">Loading...</div>;

  if (error)
    return (
      <>
        <Navbar />
        <Sidebar />
        <ErrorContainer>
          {error}
          <br />
          <Button variant="back" onClick={() => window.history.back()}>
            🔙 Go Back
          </Button>
        </ErrorContainer>
      </>
    );

  return (
    <div className="request-detail-container">
      <Sidebar />
      <div className="request-detail-content">
        <Navbar />
        <div className="container my-5">
          <h1>Donations for Request: {request?.title || "Loading..."}</h1>
          <div
            className="header-container"
            style={{ display: "flex", justifyContent: "space-between", marginTop: "20px", padding: "10px" ,backgroundColor:"white"}}
          >
            <div className="filter-container">
              <Button variant="back" onClick={() => window.history.back()}>
                🔙 Go Back
              </Button>
              <select
                onChange={(e) => setFilterOption(e.target.value)}
                value={filterOption}
              >
                <option value="all">All</option>
                <option value="pending">Pending</option>
                <option value="approved">Approved</option>
                <option value="rejected">Rejected</option>
                <option value="full">Full</option>
              </select>
              <select
                onChange={(e) => setSortOption(e.target.value)}
                value={sortOption}
              >
                <option value="date">Sort by Date</option>
                <option value="title">Sort by Title</option>
                <option value="donor">Sort by Donor</option>
                <option value="status">Sort by Status</option>
              </select>
            </div>
          </div>

          {currentItems.length > 0 ? (
            currentItems.map((donation) => {
              const donorId =
                donation.donor && typeof donation.donor === "object"
                  ? donation.donor._id
                  : donation.donor;
              const userPhoto = users[donorId]?.photo
                ? `http://localhost:3000/${users[donorId].photo}`
                : imgmouna;

              return (
                <DonationCard key={donation._id}>
                  <ProfileInfo>
                    <ProfileImg
                      src={userPhoto}
                      alt="Donor"
                      onError={(e) => {
                        e.target.src = imgmouna;
                        console.error(`Failed to load image: ${userPhoto}`);
                      }}
                    />
                    <ProfileText>{users[donorId]?.name || "Unknown"}</ProfileText>
                    <ProfileText>{users[donorId]?.role || "N/A"}</ProfileText>
                  </ProfileInfo>
                  <DonationDetails>
                    <DonationDetail>
                      <strong>Title:</strong> {donation.title || "Untitled"}
                    </DonationDetail>
                    <DonationDetail>
                      <strong>Location:</strong> {donation.location || "Not specified"}
                    </DonationDetail>
                    <DonationDetail>
                      <strong>Expiration Date:</strong>{" "}
                      {donation.expirationDate
                        ? new Date(donation.expirationDate).toLocaleDateString()
                        : "Not set"}
                    </DonationDetail>
                    <DonationDetail>
                      <strong>Category:</strong> {donation.category || "Not specified"}
                    </DonationDetail>
                    <DonationDetail>
                      <strong>Status:</strong> {donation.status || "pending"}
                    </DonationDetail>
                    {donation.category === "prepared_meals" && (
                      <DonationDetail>
                        <strong>Total Meals Donated:</strong>{" "}
                        {donation.numberOfMeals || "N/A"}
                      </DonationDetail>
                    )}
                  </DonationDetails>
                  <ProductSection>
                    <ProductsTitle>
                      {donation.category === "prepared_meals" ? "Meals:" : "Products:"}
                    </ProductsTitle>
                    <ProductList>
                      {donation.category === "prepared_meals" ? (
                        donation.meals && donation.meals.length > 0 ? (
                          donation.meals.map((item, itemIndex) => (
                            <ProductItem key={item._id || itemIndex}>
                              <ProductDetails>
                                <span>
                                  <strong>Name:</strong> {item.meal?.mealName || "N/A"}
                                </span>
                                <span>
                                  <strong>Type:</strong> {item.meal?.mealType || "N/A"}
                                </span>
                              </ProductDetails>
                              <ProductQuantity>
                                <strong>Quantity Given:</strong> {item.quantity || 0}
                              </ProductQuantity>
                            </ProductItem>
                          ))
                        ) : (
                          <ProductItem>No meals available</ProductItem>
                        )
                      ) : (
                        donation.products && donation.products.length > 0 ? (
                          donation.products.map((item, itemIndex) => (
                            <ProductItem key={item._id || itemIndex}>
                              <ProductDetails>
                                <span>
                                  <strong>Name:</strong> {item.product?.name || "N/A"}
                                </span>
                                <span>
                                  <strong>Type:</strong>{" "}
                                  {item.product?.productType || "N/A"}
                                </span>
                                <span>
                                  <strong>Weight:</strong>{" "}
                                  {item.product?.weightPerUnit
                                    ? `${item.product.weightPerUnit} ${item.product.weightUnit || ""}`
                                    : "N/A"}
                                </span>
                              </ProductDetails>
                              <ProductQuantity>
                                <strong>Quantity Given:</strong> {item.quantity || 0}
                              </ProductQuantity>
                            </ProductItem>
                          ))
                        ) : (
                          <ProductItem>No products available</ProductItem>
                        )
                      )}
                    </ProductList>
                  </ProductSection>
                  
                </DonationCard>
              );
            })
          ) : (
            <p>No donations match the current filters</p>
          )}

          {currentRejectionId && (
            <RejectionModal>
              <ModalContent>
                <h3>Reason for Rejection</h3>
                <p>Please explain why you're rejecting this donation:</p>
                <ModalTextarea
                  value={rejectionReason}
                  onChange={(e) => setRejectionReason(e.target.value)}
                  placeholder="Enter rejection reason (required)..."
                />
                <ModalButtons>
                  <Button
                    variant="cancel"
                    onClick={() => setCurrentRejectionId(null)}
                  >
                    Cancel
                  </Button>
                  <Button
                    variant="submit"
                    onClick={() => handleRejectDonation(currentRejectionId)}
                    disabled={!rejectionReason || processing[currentRejectionId]}
                  >
                    {processing[currentRejectionId] === "rejecting"
                      ? "Submitting..."
                      : "Submit Rejection"}
                  </Button>
                </ModalButtons>
              </ModalContent>
            </RejectionModal>
          )}

          <PaginationControls>
            <button
              onClick={() => handlePageChange(currentPage - 1)}
              disabled={currentPage === 1}
            >
              Previous
            </button>
            <span>Page {currentPage} of {totalPages}</span>
            <button
              onClick={() => handlePageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
            >
              Next
            </button>
          </PaginationControls>
        </div>
      </div>
    </div>
  );
};

export default DonationsRequestList;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/DonationTransactionList.jsx">
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom"; // Add this import
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "../../assets/styles/backoffcss/studentList.css";
import { FaEye, FaFilePdf, FaSort } from "react-icons/fa";
import ReactPaginate from "react-paginate";
import { Link } from "react-router-dom";
import logo from '../../assets/images/logooo.png';
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";
import { getAllDonationTransactions } from "../../api/donationTransactionService";

const DonationTransactionList = () => {
    const navigate = useNavigate(); // Initialize navigate
    const [donationTransactions, setDonationTransactions] = useState([]);
    const [currentPage, setCurrentPage] = useState(0);
    const [searchQuery, setSearchQuery] = useState("");
    const [sortField, setSortField] = useState("id");
    const [sortOrder, setSortOrder] = useState("asc");
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const transactionsPerPage = 3;

    const pagesVisited = currentPage * transactionsPerPage;

    const handleViewClick = (transactionId) => {
        navigate(`/donation-transactions/view/${transactionId}`);
    };

    useEffect(() => {
        const fetchDonationTransactions = async () => {
            setLoading(true);
            setError(null);
            try {
                const transactions = await getAllDonationTransactions();
                console.log("Fetched Transactions:", transactions);
                if (Array.isArray(transactions)) {
                    setDonationTransactions(transactions);
                } else {
                    console.error("Response is not a valid array:", transactions);
                    setDonationTransactions([]);
                    setError("No data returned from the server or invalid format.");
                }
            } catch (error) {
                console.error("Error fetching donation transactions:", {
                    message: error.message,
                    response: error.response ? error.response.data : null,
                    status: error.response ? error.response.status : null,
                });
                setError("Failed to fetch donation transactions. Please try again.");
                setDonationTransactions([]);
            } finally {
                setLoading(false);
            }
        };
        fetchDonationTransactions();
    }, []);

    const exportToPDF = () => {
        const doc = new jsPDF({
            orientation: "landscape",
            unit: "mm",
            format: "a4",
        });

        doc.setFillColor(245, 245, 245);
        doc.rect(0, 0, doc.internal.pageSize.width, 40, "F");

        doc.setDrawColor(144, 196, 60);
        doc.setLineWidth(1.5);
        doc.line(0, 40, doc.internal.pageSize.width, 40);

        const imgWidth = 30, imgHeight = 30;
        doc.addImage(logo, "PNG", 5, 5, imgWidth, imgHeight);

        const title = "DONATION TRANSACTIONS LIST";
        doc.setFontSize(28);
        doc.setTextColor(50, 62, 72);
        doc.setFont("helvetica", "bold");
        doc.text(title, doc.internal.pageSize.width / 2, 20, { align: "center" });

        const today = new Date();
        const dateStr = today.toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
        });
        doc.setFontSize(10);
        doc.setTextColor(80, 80, 80);
        doc.text(`Generated: ${dateStr}`, doc.internal.pageSize.width - 50, 38);

        autoTable(doc, {
            head: [["ID", "Request Need Title", "Donation Title", "Status", "Allocated Products", "Allocated Meals", "Created At", "Updated At"]],
            body: donationTransactions.map((tx) => [
                tx.id?.toString() || "N/A",
                tx.requestNeed?.title || "N/A",
                tx.donation?.title || "N/A",
                tx.status || "N/A",
                tx.allocatedProducts && tx.allocatedProducts.length > 0
                    ? tx.allocatedProducts.map(p => `${p.product?.name || "N/A"} (Qty: ${p.quantity})`).join(", ")
                    : "None",
                tx.allocatedMeals && tx.allocatedMeals.length > 0
                    ? tx.allocatedMeals.map(m => `${m.meal?.mealName || "N/A"} (Qty: ${m.quantity})`).join(", ")
                    : "None",
                tx.createdAt ? new Date(tx.createdAt).toLocaleDateString() : "N/A",
                tx.updatedAt ? new Date(tx.updatedAt).toLocaleDateString() : "N/A",
            ]),
            startY: 50,
            theme: "grid",
            styles: {
                fontSize: 9,
                cellPadding: 6,
                lineColor: [200, 200, 200],
                lineWidth: 0.2,
                valign: "middle",
                textColor: [45, 45, 45],
            },
            headStyles: {
                fillColor: [70, 80, 95],
                textColor: [255, 255, 255],
                fontStyle: "bold",
                halign: "center",
                fontSize: 10,
            },
            alternateRowStyles: {
                fillColor: [250, 250, 250],
            },
            didDrawPage: (data) => {
                doc.setDrawColor(200, 200, 200);
                doc.setLineWidth(0.5);
                doc.line(15, doc.internal.pageSize.height - 20, doc.internal.pageSize.width - 15, doc.internal.pageSize.height - 20);

                doc.setFillColor(144, 196, 60);
                doc.roundedRect(doc.internal.pageSize.width / 2 - 15, doc.internal.pageSize.height - 18, 30, 12, 3, 3, "F");
                doc.setTextColor(255, 255, 255);
                doc.setFontSize(9);
                doc.text(`Page ${data.pageNumber} of ${doc.internal.getNumberOfPages()}`, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 10, { align: "center" });

                doc.setTextColor(120, 120, 120);
                doc.setFontSize(8);
                doc.setFont("helvetica", "italic");
                doc.text("Confidential - For internal use only", 15, doc.internal.pageSize.height - 10);

                doc.text("©SustainaFood", doc.internal.pageSize.width - 45, doc.internal.pageSize.height - 10);
            },
        });

        doc.save(`Donation_Transactions_${today.toISOString().split("T")[0]}.pdf`);
    };

    const filteredTransactions = donationTransactions.filter(tx => {
        const createdAtString = tx.createdAt ? new Date(tx.createdAt).toLocaleDateString() : "";
        const updatedAtString = tx.updatedAt ? new Date(tx.updatedAt).toLocaleDateString() : "";
        return (
            (tx.id?.toString() || "").includes(searchQuery) ||
            (tx.requestNeed?.title || "").toLowerCase().includes(searchQuery.toLowerCase()) ||
            (tx.donation?.title || "").toLowerCase().includes(searchQuery.toLowerCase()) ||
            (tx.status || "").toLowerCase().includes(searchQuery.toLowerCase()) ||
            createdAtString.includes(searchQuery) ||
            updatedAtString.includes(searchQuery)
        );
    });

    const sortedTransactions = filteredTransactions.sort((a, b) => {
        if (sortField === "id") {
            return sortOrder === "asc" ? (a.id || 0) - (b.id || 0) : (b.id || 0) - (a.id || 0);
        } else if (sortField === "status") {
            return sortOrder === "asc" ? (a.status || "").localeCompare(b.status || "") : (b.status || "").localeCompare(a.status || "");
        } else if (sortField === "createdAt") {
            return sortOrder === "asc"
                ? (new Date(a.createdAt) || 0) - (new Date(b.createdAt) || 0)
                : (new Date(b.createdAt) || 0) - (new Date(a.createdAt) || 0);
        } else if (sortField === "updatedAt") {
            return sortOrder === "asc"
                ? (new Date(a.updatedAt) || 0) - (new Date(b.updatedAt) || 0)
                : (new Date(b.updatedAt) || 0) - (new Date(a.updatedAt) || 0);
        }
        return 0;
    });

    const displayTransactions = sortedTransactions.slice(pagesVisited, pagesVisited + transactionsPerPage);
    const pageCount = Math.ceil(filteredTransactions.length / transactionsPerPage);

    const changePage = ({ selected }) => {
        setCurrentPage(selected);
    };

    return (
        <div className="dashboard-container">
            <Sidebar />
            <div className="dashboard-content">
                <Navbar setSearchQuery={setSearchQuery} />
                <div className="student-list">
                    <div className="header-container">
                        <h2>Donation Transaction Management</h2>
                        <button className="export-pdf-btn" onClick={exportToPDF}>
                            <FaFilePdf /> Export to PDF
                        </button>
                    </div>
                    <div className="sort-container">
                        <label>Sort by:</label>
                        <select value={sortField} onChange={(e) => setSortField(e.target.value)}>
                            <option value="id">ID</option>
                            <option value="status">Status</option>
                            <option value="createdAt">Created At</option>
                            <option value="updatedAt">Updated At</option>
                        </select>
                        <select value={sortOrder} onChange={(e) => setSortOrder(e.target.value)}>
                            <option value="asc">Ascending</option>
                            <option value="desc">Descending</option>
                        </select>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Request Need Title</th>
                                <th>Donation Title</th>
                                <th>Status</th>
                                <th>Allocated Products</th>
                                <th>Allocated Meals</th>
                                <th>Created At</th>
                                <th>Updated At</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {loading ? (
                                <tr>
                                    <td colSpan="9" style={{ textAlign: "center" }}>
                                        Loading...
                                    </td>
                                </tr>
                            ) : error ? (
                                <tr>
                                    <td colSpan="9" style={{ textAlign: "center", color: "red" }}>
                                        {error}
                                    </td>
                                </tr>
                            ) : displayTransactions.length > 0 ? (
                                displayTransactions.map((tx) => (
                                    <tr key={tx._id}>
                                        <td>{tx.id || "N/A"}</td>
                                        <td>{tx.requestNeed?.title || "N/A"}</td>
                                        <td>{tx.donation?.title || "N/A"}</td>
                                        <td>{tx.status || "N/A"}</td>
                                        <td>
                                            {tx.allocatedProducts && tx.allocatedProducts.length > 0
                                                ? tx.allocatedProducts.map(p => `${p.product?.name || "N/A"} (Qty: ${p.quantity})`).join(", ")
                                                : "None"}
                                        </td>
                                        <td>
                                            {tx.allocatedMeals && tx.allocatedMeals.length > 0
                                                ? tx.allocatedMeals.map(m => `${m.meal?.mealName || "N/A"} (Qty: ${m.quantity})`).join(", ")
                                                : "None"}
                                        </td>
                                        <td>{tx.createdAt ? new Date(tx.createdAt).toLocaleDateString() : "N/A"}</td>
                                        <td>{tx.updatedAt ? new Date(tx.updatedAt).toLocaleDateString() : "N/A"}</td>
                                        <td className="action-buttons">
                                            <button className="view-btn" onClick={() => handleViewClick(tx._id)}>
                                                <FaEye />
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            ) : (
                                <tr>
                                    <td colSpan="9" style={{ textAlign: "center" }}>
                                        No transactions available
                                    </td>
                                </tr>
                            )}
                        </tbody>
                    </table>

                    <ReactPaginate
                        previousLabel={"Previous"}
                        nextLabel={"Next"}
                        pageCount={pageCount}
                        onPageChange={changePage}
                        containerClassName={"pagination"}
                        previousLinkClassName={"previousBttn"}
                        nextLinkClassName={"nextBttn"}
                        disabledClassName="paginationDisabled"
                        activeClassName="paginationActive"
                    />
                </div>
            </div>
        </div>
    );
};

export default DonationTransactionList;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/ProductDetail.jsx">
// ProductDetail.js
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { getProductById } from '../../api/productService'; // Assure-toi que le chemin est correct
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "../../assets/styles/backoffcss/ProductDetail.css"; // Crée ce fichier CSS

const ProductDetail = () => {
  const { id } = useParams(); // Récupère l'ID depuis l'URL
  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchProduct = async () => {
      try {
        setLoading(true);
        const response = await getProductById(id);
        setProduct(response.data);
        setLoading(false);
      } catch (error) {
        setError('Error fetching product details.');
        console.error(error);
        setLoading(false);
      }
    };

    fetchProduct();
  }, [id]);

  if (loading) {
    return <div className="loading">Loading product details...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  if (!product) {
    return <div>Product not found.</div>;
  }

  return (
    <div className="product-detail-container">
      <Sidebar />
      <div className="product-detail-content">
        <Navbar />
        <div className="product-card">
          <div className="product-header">
            <h2>Product Details</h2>
          </div>
          <div className="product-details">
            <table className="details-table">
              <tbody>
                <tr>
                  <td><strong>ID:</strong></td>
                  <td>{product.id}</td>
                </tr>
                <tr>
                  <td><strong>Name:</strong></td>
                  <td>{product.name}</td>
                </tr>
                <tr>
                  <td><strong>Type:</strong></td>
                  <td>{product.productType}</td>
                </tr>
                <tr>
                  <td><strong>Status:</strong></td>
                  <td>{product.status}</td>
                </tr>
                <tr>
                  <td><strong>Description:</strong></td>
                  <td>{product.productDescription}</td>
                </tr>
                <tr>
                  <td><strong>Weight:</strong></td>
                  <td>{product.weightPerUnit ? `${product.weightPerUnit} ${product.weightUnit}` : "N/A"}</td>
                </tr>
                {/* Ajoute d'autres champs ici selon ton modèle de produit */}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProductDetail;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/ProductList.jsx">
import React, { useState, useEffect } from "react";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import { FaFilePdf, FaEye } from "react-icons/fa";
import ReactPaginate from "react-paginate";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import "../../assets/styles/backoffcss/ProductList.css";
import { getAllProducts } from "../../api/productService";
import { getrequests } from "../../api/requestNeedsService"; // Importez getrequests
import { Link } from 'react-router-dom';

const ProductList = () => {
  const [products, setProducts] = useState([]);
  const [currentPage, setCurrentPage] = useState(0);
  const [sortField, setSortField] = useState("name");
  const [sortOrder, setSortOrder] = useState("asc");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const productsPerPage = 5;

  const pagesVisited = currentPage * productsPerPage;

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        setLoading(true);
        const productsResponse = await getAllProducts();
        const requestsResponse = await getrequests(); // Récupérer les requêtes
        console.log("Products API Response Data:", productsResponse.data);
        console.log("Requests API Response Data:", requestsResponse.data);

        // Filtrer les requêtes pour ne garder que les "prepared_meals"
        const preparedMeals = requestsResponse.data.filter(req => req.category === "prepared_meals");

        // Formatter les "prepared_meals" pour qu'ils aient la même structure que les produits
        const formattedMeals = preparedMeals.map(meal => ({
          id: meal._id,
          name: meal.mealName,
          productType: meal.mealType, // Assigner mealType à productType
          status: meal.status,
          productDescription: meal.mealDescription,
          weightPerUnit: meal.numberOfMeals,
          weightUnit: "meals",
          isPreparedMeal: true // Ajouter un indicateur pour distinguer les "prepared_meals" des produits
        }));

        // Combiner les produits et les "prepared_meals"
        const allProducts = [...productsResponse.data, ...formattedMeals];
        setProducts(allProducts);
        setLoading(false);
      } catch (error) {
        setLoading(false);
        setError("Error fetching products. Please try again later.");
        console.error("Error fetching products:", error);
      }
    };
    fetchProducts();
  }, []);

  const filteredProducts = products;

  const sortedProducts = [...filteredProducts].sort((a, b) => {
    let comparison = 0;

    if (sortField === "name") {
      comparison = (a.name || "").localeCompare(b.name || "");
    } else if (sortField === "productType") {
      comparison = (a.productType || "").localeCompare(b.productType || "");
    } else if (sortField === "status") {
      comparison = (a.status || "").localeCompare(b.status || "");
    } else if (sortField === "weight") {
      const weightA = a.weightPerUnit || 0;
      const weightB = b.weightPerUnit || 0;
      comparison = weightA - weightB;
    } else if (sortField === "id") {
      comparison = a.id - b.id;
    }

    return sortOrder === "asc" ? comparison : comparison * -1;
  });

  const exportToPDF = () => {
    const doc = new jsPDF();
    doc.setFontSize(18);
    doc.text("Product List", 10, 10);

    const tableColumn = ["ID", "Name", "Type", "Status", "Description", "Weight"];
    const tableRows = sortedProducts.map((product) => [
      product.id,
      product.name,
      product.productType,
      product.status,
      product.productDescription,
      product.weightPerUnit ? `${product.weightPerUnit} ${product.weightUnit}` : "N/A",
    ]);

    autoTable(doc, {
      head: [tableColumn],
      body: tableRows,
      startY: 20,
      theme: "grid",
      styles: {
        fontSize: 10,
        cellPadding: 3,
      },
      headStyles: {
        fillColor: "#4CAF50",
        textColor: "#ffffff",
      },
    });

    doc.save("Product_List.pdf");
  };

  const displayProducts = sortedProducts.slice(pagesVisited, pagesVisited + productsPerPage);
  const pageCount = Math.ceil(filteredProducts.length / productsPerPage);

  const changePage = ({ selected }) => {
    setCurrentPage(selected);
  };

  const handleSortChange = (e) => {
    setSortField(e.target.value);
  };

  const handleSortOrderChange = (e) => {
    setSortOrder(e.target.value);
  };

  return (
    <div className="dashboard-container">
      <Sidebar />
      <div className="dashboard-content">
        <Navbar />

        <div className="product-list">
          <div className="header-container">
            <h2>Product Management</h2>
            <button className="export-pdf-btn" onClick={exportToPDF}>
              <FaFilePdf /> Export to PDF
            </button>
          </div>

          <div className="sort-container">
            <label htmlFor="sortField">Sort By:</label>
            <select
              id="sortField"
              value={sortField}
              onChange={handleSortChange}
            >
              <option value="name">Name</option>
              <option value="productType">Type</option>
              <option value="status">Status</option>
              <option value="weight">Weight</option>
              <option value="id">ID</option>
            </select>

            <label htmlFor="sortOrder">Order:</label>
            <select
              id="sortOrder"
              value={sortOrder}
              onChange={handleSortOrderChange}
            >
              <option value="asc">Ascending</option>
              <option value="desc">Descending</option>
            </select>
          </div>

          {loading ? (
            <div>Loading products...</div>
          ) : error ? (
            <div>{error}</div>
          ) : (
            <>
              <table>
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Type</th>
                    <th>Status</th>
                    <th>Description</th>
                    <th>Weight</th>
                    <th>Actions</th>{/* Nouvelle colonne */}
                  </tr>
                </thead>
                <tbody>
                  {displayProducts.map((product) => (
                    <tr key={product.id}>
                      <td>{product.id}</td>
                      <td>{product.name}</td>
                      <td>{product.productType}</td>
                      <td>{product.status}</td>
                      <td>{product.productDescription}</td>
                      <td>{product.weightPerUnit ? `${product.weightPerUnit} ${product.weightUnit}` : "N/A"}</td>
                      <td>
                        <Link to={`/products/view/${product.id}`}>
                          <button>
                            <FaEye />{/* Utilise l'icône FaEye de react-icons/fa */}
                          </button>
                        </Link>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>

              <ReactPaginate
                previousLabel={"Previous"}
                nextLabel={"Next"}
                pageCount={pageCount}
                onPageChange={changePage}
                containerClassName={"pagination"}
                activeClassName={"active"}
              />
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default ProductList;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/RequestDetails.jsx">
import React, { useState, useEffect } from 'react';
import { useParams,Link } from 'react-router-dom';
import { getRequestById } from '../../api/requestNeedsService';
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "../../assets/styles/backoffcss/RequestDetail.css";
import imgmouna from '../../assets/images/imgmouna.png';
import styled from 'styled-components';

const Button = styled.button`
  display: inline-block;
  padding: 12px 20px;
  font-size: 16px;
  font-weight: 600;
  text-align: center;
  border-radius: 8px;
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 8px;
  color: white;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);

  ${({ variant }) => variant === 'add' && `
    background: #228b22;
    &:hover { background: #1e7b1e; transform: translateY(-2px); }
  `}
  ${({ variant }) => variant === 'cancel' && `
    background: #dc3545;
    &:hover { background: #b02a37; transform: translateY(-2px); }
  `}
  ${({ variant }) => variant === 'submit' && `
    background: #28a745;
    &:hover { background: #218838; transform: translateY(-2px); }
  `}
  ${({ variant }) => variant === 'donate' && `
    background: #228b22;
    &:hover { background: #1e7b1e; transform: translateY(-2px); }
  `}
  ${({ variant }) => variant === 'back' && `
    background: #6c757d;
    &:hover { background: #5a6268; transform: translateY(-2px); }
  `}

  &:active {
    transform: translateY(1px);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }
`;
const RequestDetail = () => {
  const { id } = useParams();
  const [request, setRequest] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchRequest = async () => {
      try {
        setLoading(true);
        const response = await getRequestById(id);
        setRequest(response.data);
      } catch (err) {
        setError('❌ Error fetching request details.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchRequest();
  }, [id]);

  if (loading) return <div className="loading">⏳ Loading request details...</div>;
  if (error) return <div className="error">{error}</div>;
  if (!request) return <div className="error">⚠️ Request not found.</div>;

  return (
    <div className="request-detail-container">
      <Sidebar />
      <div className="request-detail-content">
        <Navbar />
        <div className="request-card">
          <div className="request-header">
            <h2>📄 Request Details</h2>
          </div>

          <div className="request-info">
            <div className="recipient-info">
              <img
                src={request.recipient?.photo ? `http://localhost:3000/${request.recipient.photo}` : imgmouna}
                alt="Profile"
                className="profile-img-details"
                onError={(e) => (e.target.src = imgmouna)}
              />
              <div className="recipient-text">
                <h3> {request.recipient?.name || "Unknown User"}</h3>
                <p className="role"> {request.recipient?.role || "Role Not Specified"}</p>
              </div>
            </div>

            <div className="detail-item">📌 <strong>Title:</strong> {request.title || 'Untitled Request'}</div>
            <div className="detail-item">📂 <strong>Category:</strong> {request.category || 'Not specified'}</div>
            <div className="detail-item">📅 <strong>Expiration Date:</strong> 
              {request.expirationDate ? new Date(request.expirationDate).toLocaleDateString() : 'Not defined'}
            </div>
            <div className="detail-item">📊 <strong>Status:</strong> {request.status || 'Unknown'}</div>
            <div className="detail-item">📝 <strong>Description:</strong> {request.description || 'N/A'}</div>

            {request.category === 'prepared_meals' && (
              <div className="detail-item">🍽️ <strong>Number of Meals:</strong> {request.numberOfMeals || 'Not specified'}</div>
            )}

            {request.category === 'packaged_products' && request.requestedProducts && (
              <div className="products-section">
                <h3>🛒 Requested Products:</h3>
                {request.requestedProducts.length > 0 ? (
                  <div className="products-grid">
                    {request.requestedProducts.map((item, index) => (
                      <div className="product-card-details" key={index}>
                        <p> <strong>Name:</strong>{item.product?.name || item.product?.productType || 'Unknown Product'}</p>
                        <p>📦 <strong>Type:</strong> {item.product?.productType || 'Not specified'}</p>
                        <p>⚖️ <strong>Weight:</strong> {item.product?.weightPerUnit || 0} {item.product?.weightUnit || ''}</p>
                        <p>🔢 <strong>Quantity:</strong> {item.quantity || 0} {item.product?.weightUnitTotale || ''}</p>
                        <p>🟢 <strong>Status:</strong> {item.product?.status || 'Unknown'}</p>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p>🚫 No products requested</p>
                )}
              </div>
            )}
          </div>
          <Button variant="back" onClick={() => window.history.back()}>🔙 Go Back</Button>
          <Button
              variant="submit"
              as={Link}
              to={`/DonationsRequestList/${id}`}
              style={{ textDecoration: 'none' }}
            >
              👀 View Donations
            </Button>
        </div>

      </div>

    </div>
  );
};

export default RequestDetail;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/RequestDonationsList.jsx">
import React, { useState, useEffect } from "react";
import { useParams, Link } from "react-router-dom";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import { getRequestsByDonationId } from "../../api/requestNeedsService";
import { getDonationById } from "../../api/donationService";
import { getUserById } from "../../api/userService";
import "../../assets/styles/backoffcss/RequestDetail.css";
import imgmouna from '../../assets/images/imgmouna.png';
import styled from 'styled-components';
import { useAlert } from '../../contexts/AlertContext';

// Styled Components (unchanged)
const Button = styled.button`
  display: inline-block;
  padding: 12px 20px;
  font-size: 16px;
  font-weight: 600;
  text-align: center;
  border-radius: 8px;
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 8px;
  color: white;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);

  ${({ variant }) => variant === 'back' && `
    background: #6c757d;
    &:hover { background: #5a6268; transform: translateY(-2px); }
  `}

  ${({ variant }) => variant === 'submit' && `
    background: #28a745;
    &:hover { background: #218838; transform: translateY(-2px); }
  `}

  &:active {
    transform: translateY(1px);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }
`;

const RequestCard = styled.div`
  background: #f8f9fa;
  border-left: 4px solid #228b22;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 20px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: transform 0.2s ease-in-out;

  &:hover {
    transform: scale(1.02);
  }

  @media (max-width: 768px) {
    padding: 15px;
  }
`;

const ProfileInfo = styled.div`
  display: flex;
  align-items: center;
  gap: 15px;
  margin-bottom: 15px;

  @media (max-width: 768px) {
    flex-direction: column;
    align-items: flex-start;
  }
`;

const ProfileImg = styled.img`
  width: 50px;
  height: 50px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #228b22;
`;

const ProfileText = styled.p`
  margin: 0;
  font-size: 16px;
  font-weight: bold;
  color: #495057;
`;

const RequestDetails = styled.div`
  margin-bottom: 15px;
`;

const RequestDetail = styled.p`
  font-size: 14px;
  color: #495057;
  margin: 5px 0;

  strong {
    color: #222;
    font-weight: 600;
  }
`;

const ItemSection = styled.div`
  margin-bottom: 15px;
`;

const ItemsTitle = styled.h4`
  font-size: 16px;
  color: #222;
  margin: 0 0 10px;
`;

const ItemList = styled.ul`
  list-style: none;
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 8px;
  margin-top: 10px;
`;

const Item = styled.li`
  background: #ffffff;
  padding: 10px;
  border-left: 3px solid #228b22;
  border-radius: 5px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  font-size: 14px;

  @media (max-width: 768px) {
    flex-direction: column;
    align-items: flex-start;
  }
`;

const ItemDetails = styled.div`
  display: flex;
  flex-direction: column;
  flex-grow: 1;
    gap: 60px;
      span {
    display: block;
    font-size: 13px;
    color: #333;
  }
`;

const ItemQuantity = styled.span`
  font-size: 14px;
  font-weight: bold;
  color: #d9534f;
  padding: 4px 8px;
  border-radius: 4px;

  @media (max-width: 768px) {
    font-size: 13px;
    padding: 6px;
  }
`;

const PaginationControls = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  gap: 10px;

  button {
    padding: 10px 20px;
    font-size: 16px;
    background: #228b22;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s;

    &:hover {
      background: #56ab2f;
    }

    &:disabled {
      background: #ccc;
      cursor: not-allowed;
    }
  }

  span {
    font-size: 16px;
    color: #333;
  }
`;

const ErrorContainer = styled.div`
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100vh;
  margin-top: -500px;
  margin-left: 200px;
  color: #4CAF50;
  font-size: 1.5rem;
  text-align: center;
  padding: 20px;
`;

const DonationsRequestList = () => {
  const { showAlert } = useAlert();
  const { id } = useParams();
  const [requests, setRequests] = useState([]);
  const [filteredRequests, setFilteredRequests] = useState([]);
  const [donation, setDonation] = useState(null);
  const [users, setUsers] = useState({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(3);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const [donationResponse, requestsData] = await Promise.all([
          getDonationById(id),
          getRequestsByDonationId(id)
        ]);

        console.log('Donation Response:', donationResponse.data);
        console.log('Requests Data:', requestsData);

        setDonation(donationResponse.data);
        const requestsArray = Array.isArray(requestsData.data) ? requestsData.data : requestsData || [];
        setRequests(requestsArray);

        if (requestsArray.length > 0) {
          const uniqueRecipientIds = [...new Set(requestsArray.map(r => {
            return typeof r.recipient === 'object' ? r.recipient._id : r.recipient;
          }).filter(id => id))];

          console.log('Unique Recipient IDs:', uniqueRecipientIds);

          const userPromises = uniqueRecipientIds.map(id => 
            getUserById(id)
              .then(response => {
                console.log(`User data for ID ${id}:`, response.data);
                return { id, data: response.data };
              })
              .catch(err => {
                console.error(`Error fetching user ${id}:`, err);
                return { id, data: null };
              })
          );
          
          const userResults = await Promise.all(userPromises);
          const usersData = Object.fromEntries(
            userResults.map(({ id, data }) => [id, data])
          );
          console.log('Fetched Users:', usersData);
          setUsers(usersData);
        }
      } catch (err) {
        console.error('Fetch Error:', err);
        setError(err.response?.data?.message || 'Failed to fetch data');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [id]);

  useEffect(() => {
    if (!requests.length) return;

    let result = [...requests];
    setFilteredRequests(result);
  }, [requests]);

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = filteredRequests.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(filteredRequests.length / itemsPerPage);

  const handlePageChange = (page) => {
    if (page >= 1 && page <= totalPages) {
      setCurrentPage(page);
    }
  };

  const RequestCardComponent = ({ request }) => {
    const userPhoto = request.recipient?.photo
      ? `http://localhost:3000/${request.recipient.photo}`
      : imgmouna;

    return (
      <RequestCard>
        <ProfileInfo>
          <ProfileImg
            src={userPhoto}
            alt="Profile"
            onError={(e) => {
              e.target.src = imgmouna;
              console.error(`Failed to load image: ${userPhoto}`);
            }}
          />
          <ProfileText>{request.recipient?.name || 'Unknown Recipient'}</ProfileText>
          <ProfileText>{request.recipient?.role || 'Role Not Specified'}</ProfileText>
        </ProfileInfo>
        <RequestDetails>
          <RequestDetail><strong>Title:</strong> {request.title || 'Untitled'}</RequestDetail>
          <RequestDetail><strong>Status:</strong> {request.status || 'pending'}</RequestDetail>
          <RequestDetail><strong>Location:</strong> {request.location || 'Not specified'}</RequestDetail>
          <RequestDetail><strong>Description:</strong> {request.description || 'No description'}</RequestDetail>
          {donation?.category === 'prepared_meals' && (
            <RequestDetail><strong>Number of Meals:</strong> {request.numberOfMeals || 'Not specified'}</RequestDetail>
          )}
        </RequestDetails>
        <ItemSection>
          {donation?.category === 'prepared_meals' && request.requestedMeals?.length > 0 ? (
            <>
              <ItemsTitle>Requested Meals:</ItemsTitle>
              <ItemList>
                {request.requestedMeals.map((item, index) => (
                  <Item key={index}>
                    <ItemDetails>
                      <span><strong>Name:</strong> {item.meal?.mealName || 'Not specified'}</span>
                      <span><strong>Type:</strong> {item.meal?.mealType || 'Unknown'}</span>
                      <span><strong>Description:</strong> {item.meal?.mealDescription || 'None'}</span>
                    </ItemDetails>
                    <ItemQuantity>{item.quantity || 0}</ItemQuantity>
                  </Item>
                ))}
              </ItemList>
            </>
          ) : donation?.category === 'packaged_products' && request.requestedProducts?.length > 0 ? (
            <>
              <ItemsTitle>Requested Products:</ItemsTitle>
              <ItemList>
                {request.requestedProducts.map((item, index) => (
                  <Item key={index}>
                    <ItemDetails>
                   
                <div style={{display:"flex"}}>
                <p> <strong>Name:</strong>{item.product?.name || item.product?.productType || 'Unknown Product'}</p>
                <p> 📦 <strong>Type:</strong> {item.product?.productType || 'Not specified'}</p>
                        <p> ⚖️ <strong>Weight:</strong> {item.product?.weightPerUnit || 0} {item.product?.weightUnit || ''}</p>
                        <p> 🔢 <strong>Quantity:</strong> {item.quantity || 0} {item.product?.weightUnitTotale || ''}</p>
                        <p> 🟢 <strong>Status:</strong> {item.product?.status || 'Unknown'}</p>
            </div>  
                    </ItemDetails>
                    <ItemQuantity>{item.quantity || 0}</ItemQuantity>
                  </Item>
                ))}
              </ItemList>
            </>
          ) : (
            <p>No items requested</p>
          )}
        </ItemSection>
     
      </RequestCard>
    );
  };

  if (loading) return <div className="loading-message">Loading...</div>;

  if (error) return (
    <>
      <Navbar />
      <Sidebar />
      <ErrorContainer>
        {error}<br />
        <Button variant="back" onClick={() => window.history.back()}>🔙 Go Back</Button>
      </ErrorContainer>
    </>
  );

  return (
    <div className="request-detail-container">
      <Sidebar />
      <div className="request-detail-content">
        <Navbar />
        <div className="container my-5">
          <h1>Requests for Donation: {donation?.title || 'Loading...'}</h1>
          <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '20px', padding: '10px' }}>
            <Button variant="back" onClick={() => window.history.back()}>🔙 Go Back</Button>
          </div>

          {currentItems.length > 0 ? (
            currentItems.map(request => (
              <RequestCardComponent
                key={request._id}
                request={request}
              />
            ))
          ) : (
            <p>No requests match the current filters</p>
          )}

          <PaginationControls>
            <button
              onClick={() => handlePageChange(currentPage - 1)}
              disabled={currentPage === 1}
            >
              Previous
            </button>
            <span>Page {currentPage} of {totalPages}</span>
            <button
              onClick={() => handlePageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
            >
              Next
            </button>
          </PaginationControls>
        </div>
      </div>
    </div>
  );
};

export default DonationsRequestList;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/RestaurantList.jsx">
import React, { useEffect, useState } from "react";
import axios from "axios";
import { Link } from "react-router-dom";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "/src/assets/styles/backoffcss/restaurantList.css";
import { FaEye, FaTrash, FaBan, FaUnlock, FaFilePdf, FaSort } from "react-icons/fa";
import ReactPaginate from "react-paginate";
import logo from '../../assets/images/logooo.png';  // Import the logo

import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";

const RestaurantList = () => {
    const [restaurants, setRestaurants] = useState([]); // Liste complète des restaurants
    const [currentPage, setCurrentPage] = useState(0);
    const [searchQuery, setSearchQuery] = useState(""); // State to store the search query
    const [sortField, setSortField] = useState("name"); // State to store the sorting field
    const [sortOrder, setSortOrder] = useState("asc"); // State to store the sorting order
    const restaurantsPerPage = 5; // Nombre de restaurants par page

    // Calculate pagesVisited
    const pagesVisited = currentPage * restaurantsPerPage;

    // Récupération des restaurants depuis le backend
    useEffect(() => {
        axios.get("http://localhost:3000/users/list")
            .then(response => {
                const restaurantUsers = response.data.filter(user => user.role === "restaurant");
                setRestaurants(restaurantUsers);
            })
            .catch(error => console.error("Error fetching restaurants:", error));
    }, []);

    // Fonction pour bloquer/débloquer un restaurant
    const handleBlockRestaurant = async (restaurantId, isBlocked) => {
        try {
            const response = await axios.put(`http://localhost:3000/users/toggle-block/${restaurantId}`, {
                isBlocked: !isBlocked
            });

            if (response.status === 200) {
                alert(`Restaurant has been ${response.data.isBlocked ? "blocked" : "unblocked"} successfully.`);
                // Update the UI after blocking/unblocking
                setRestaurants(restaurants.map(restaurant =>
                    restaurant._id === restaurantId ? { ...restaurant, isBlocked: response.data.isBlocked } : restaurant
                ));
            } else {
                alert(response.data.error || "Error toggling block status.");
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Failed to update block status.");
        }
    };

    // Fonction pour supprimer un restaurant
    const deleteRestaurant = async (restaurantId) => {
        if (!window.confirm("Are you sure you want to delete this restaurant?")) return;

        try {
            await axios.delete(`http://localhost:3000/users/delete/${restaurantId}`);
            alert("Restaurant deleted!");
            setRestaurants(restaurants.filter(restaurant => restaurant._id !== restaurantId));
        } catch (error) {
            console.error("Error deleting restaurant:", error);
        }
    };

    // Fonction pour exporter la liste en PDF
    const exportToPDF = () => {
        const doc = new jsPDF({
            orientation: "landscape",
            unit: "mm",
            format: "a4",
        });
    
        // Header background - changed to a neutral light gray
        doc.setFillColor(245, 245, 245); // Light gray instead of green
        doc.rect(0, 0, doc.internal.pageSize.width, 40, "F");
    
        // Decorative bottom line - keeping main color as accent
        doc.setDrawColor(144, 196, 60); // Main color #90C43C
        doc.setLineWidth(1.5);
        doc.line(0, 40, doc.internal.pageSize.width, 40);
    
        // Logo
        const imgWidth = 30, imgHeight = 30;
        doc.addImage(logo, "PNG", 5, 5, imgWidth, imgHeight);
    
        // Title - changed to dark slate blue
        const title = "RESTAURANTS LIST";
        doc.setFontSize(28);
        doc.setTextColor(50, 62, 72); // Dark slate blue instead of green
        doc.setFont("helvetica", "bold");
        doc.text(title, doc.internal.pageSize.width / 2, 20, { align: "center" });
    
        // Date
        const today = new Date();
        const dateStr = today.toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
        });
        doc.setFontSize(10);
        doc.setTextColor(80, 80, 80); // Dark gray
        doc.text(`Generated: ${dateStr}`, doc.internal.pageSize.width - 50, 38);
    
        // Table
        autoTable(doc, {
            head: [["ID", "Name", "Email", "Phone", "Tax Reference", "Status"]],
            body: restaurants.map((restaurant, index) => [
                (index + 1).toString(),
                restaurant.name,
                restaurant.email,
                restaurant.phone || "N/A",
                restaurant.taxReference || "N/A",
                restaurant.isActive ? "Active" : "Inactive",
            ]),
            startY: 50,
            theme: "grid",
            styles: {
                fontSize: 9,
                cellPadding: 6,
                lineColor: [200, 200, 200], // Light gray borders
                lineWidth: 0.2,
                valign: "middle",
                textColor: [45, 45, 45], // Dark gray text
            },
            headStyles: {
                fillColor: [70, 80, 95], // Dark blue-gray instead of green
                textColor: [255, 255, 255],
                fontStyle: "bold",
                halign: "center",
                fontSize: 10,
            },
            alternateRowStyles: {
                fillColor: [250, 250, 250], // Very light gray instead of light green
            },
            didDrawCell: (data) => {
                if (data.section === "body" && data.column.index === 5) {
                    const status = data.cell.text[0];
                    if (status === "Active") {
                        doc.setFillColor(144, 196, 60); // Main green for active status only
                        doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F");
                        doc.setTextColor(255, 255, 255); // White text
                    } else if (status === "Inactive") {
                        doc.setFillColor(220, 220, 220); // Light gray for inactive
                        doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F");
                        doc.setTextColor(100, 100, 100); // Dark gray text
                    }
                }
            },
            didDrawPage: (data) => {
                // Footer line
                doc.setDrawColor(200, 200, 200); // Light gray line
                doc.setLineWidth(0.5);
                doc.line(15, doc.internal.pageSize.height - 20, doc.internal.pageSize.width - 15, doc.internal.pageSize.height - 20);
    
                // Page numbers - using main color as accent
                doc.setFillColor(144, 196, 60); // Main green #90C43C
                doc.roundedRect(doc.internal.pageSize.width / 2 - 15, doc.internal.pageSize.height - 18, 30, 12, 3, 3, "F");
                doc.setTextColor(255, 255, 255);
                doc.setFontSize(9);
                doc.text(`Page ${data.pageNumber} of ${doc.internal.getNumberOfPages()}`, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 10, { align: "center" });
    
                // Confidentiality notice
                doc.setTextColor(120, 120, 120);
                doc.setFontSize(8);
                doc.setFont("helvetica", "italic");
                doc.text("Confidential - For internal use only", 15, doc.internal.pageSize.height - 10);
    
                // Institution info
                doc.text("© SustainaFood", doc.internal.pageSize.width - 45, doc.internal.pageSize.height - 10);
            },
        });
    
        doc.save(`Restaurant_Directory_${today.toISOString().split("T")[0]}.pdf`);
    };

    // Filtering the restaurants based on the search query
    const filteredRestaurants = restaurants.filter(restaurant => {
        const phoneString = restaurant.phone.toString(); // Convert phone number to string for searching
        return (
            restaurant.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
            restaurant.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
            phoneString.includes(searchQuery) // Search in the phone number as a string
        );
    });

    // Sorting the restaurants based on the selected field and order
    const sortedRestaurants = filteredRestaurants.sort((a, b) => {
        if (sortField === "name") {
            return sortOrder === "asc" ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name);
        } else if (sortField === "email") {
            return sortOrder === "asc" ? a.email.localeCompare(b.email) : b.email.localeCompare(a.email);
        } else if (sortField === "phone") {
            return sortOrder === "asc" ? a.phone - b.phone : b.phone - a.phone;
        } else if (sortField === "taxReference") {
            return sortOrder === "asc" ? (a.taxReference || "").localeCompare(b.taxReference || "") : (b.taxReference || "").localeCompare(a.taxReference || "");
        } else if (sortField === "isActive") {
            return sortOrder === "asc" ? (a.isActive ? 1 : -1) - (b.isActive ? 1 : -1) : (b.isActive ? 1 : -1) - (a.isActive ? 1 : -1);
        }
        return 0;
    });

    const displayRestaurants = sortedRestaurants.slice(pagesVisited, pagesVisited + restaurantsPerPage);

    const pageCount = Math.ceil(filteredRestaurants.length / restaurantsPerPage);

    const changePage = ({ selected }) => {
        setCurrentPage(selected);
    };

    return (
        <div className="dashboard-container">
            <Sidebar />
            <div className="dashboard-content">
                <Navbar setSearchQuery={setSearchQuery} /> {/* Pass search setter to Navbar */}
                <div className="restaurant-list">
                    <div className="header-container">
                        <h2>Restaurant Management</h2>
                        <button className="export-pdf-btn" onClick={exportToPDF}>
                            <FaFilePdf /> Export to PDF
                        </button>
                    </div>
                    <div className="sort-container">
                        <label>Sort by:</label>
                        <select value={sortField} onChange={(e) => setSortField(e.target.value)}>
                            <option value="name">Name</option>
                            <option value="email">Email</option>
                            <option value="phone">Phone</option>
                            <option value="taxReference">Tax Reference</option>
                            <option value="isActive">Active Status</option>
                        </select>
                        <select value={sortOrder} onChange={(e) => setSortOrder(e.target.value)}>
                            <option value="asc">Ascending</option>
                            <option value="desc">Descending</option>
                        </select>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Photo</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Phone</th>
                                <th>Tax Reference</th>
                                <th>Active</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {displayRestaurants.map((restaurant, index) => (
                                <tr key={restaurant._id}>
                                    <td>{pagesVisited + index + 1}</td>
                                    <td>
                                        <img
                                            src={restaurant.photo ? `http://localhost:3000/${restaurant.photo}` : "/src/assets/User_icon_2.svg.png"}
                                            alt="restaurant"
                                            className="restaurant-photoList"
                                        />
                                    </td>
                                    <td>{restaurant.name}</td>
                                    <td>{restaurant.email}</td>
                                    <td>{restaurant.phone}</td>
                                    <td>{restaurant.taxReference || "N/A"}</td>
                                    <td>{restaurant.isActive ? "Yes" : "No"}</td>
                                    <td className="action-buttons">
                                        <button className="view-btn">
                                            <Link to={`/restaurants/view/${restaurant._id}`} className="view-btn">
                                                <FaEye />
                                            </Link>
                                        </button>
                                        <button
                                            className="block-btn"
                                            onClick={() => handleBlockRestaurant(restaurant._id, restaurant.isBlocked)}
                                            style={{ color: restaurant.isBlocked ? "green" : "red" }}
                                        >
                                            {restaurant.isBlocked ? <FaUnlock /> : <FaBan />}
                                        </button>
                                        <button className="delete-btn" onClick={() => deleteRestaurant(restaurant._id)}>
                                            <FaTrash />
                                        </button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>

                    {/* Pagination */}
                    <ReactPaginate
                        previousLabel={"Previous"}
                        nextLabel={"Next"}
                        pageCount={pageCount}
                        onPageChange={changePage}
                        containerClassName={"pagination"}
                        previousLinkClassName={"previousBttn"}
                        nextLinkClassName={"nextBttn"}
                        disabledClassName={"paginationDisabled"}
                        activeClassName={"paginationActive"}
                    />
                </div>
            </div>
        </div>
    );
};

export default RestaurantList;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/view-ngo.jsx">
import React, { useEffect, useState } from "react";
import axios from "axios";
import { useParams } from "react-router-dom";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "/src/assets/styles/backoffcss/viewNgo.css"; // Assurez-vous d'avoir le bon fichier CSS
import { FaBan, FaUnlock } from "react-icons/fa";

const ViewNGO = () => {
    const { id } = useParams();
    const [ngo, setNgo] = useState(null);

    useEffect(() => {
        axios.get(`http://localhost:3000/users/view/${id}`)
            .then(response => {
                setNgo(response.data);
            })
            .catch(error => {
                console.error("Error fetching NGO details:", error);
            });
    }, [id]);

    if (!ngo) {
        return <div className="loading">Loading...</div>;
    }

    const handleBlockNgo = async (ngoId, isBlocked) => {
        try {
            const response = await axios.put(`http://localhost:3000/ngos/toggle-block/${ngoId}`, {
                isBlocked: !isBlocked
            });

            if (response.status === 200) {
                alert(`NGO has been ${response.data.isBlocked ? "blocked" : "unblocked"} successfully.`);
                setNgo({ ...ngo, isBlocked: response.data.isBlocked });
            } else {
                alert(response.data.error || "Error toggling block status.");
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Failed to update block status.");
        }
    };

    return (
        <div className="view-ngo-container">
            <Sidebar />
            <div className="view-ngo-content">
                <Navbar />
                <div className="ngo-card">
                    <div className="ngo-header">
                    <img 
                                            src={ngo.photo ? `http://localhost:3000/${ngo.photo}` : "/src/assets/User_icon_2.svg.png"} 
                                            alt="ong" 
                                            className="ong-photo" 
                                        />
                        <div className="ngo-info">
                            <h2>{ngo.name}</h2>
                            <p className="email">{ngo.email}</p>
                            <p className="id">ID: {ngo.id}</p>
                            <div className="ngo-actions">
                                <button
                                    className="block-btn"
                                    onClick={() => handleBlockNgo(ngo._id, ngo.isBlocked)}
                                    style={{ color: ngo.isBlocked ? "green" : "red" }}
                                >
                                    {ngo.isBlocked ? <FaUnlock /> : <FaBan />}
                                    {ngo.isBlocked ? " Unblock" : " Block"}
                                </button>
                            </div>
                        </div>
                    </div>
                    <div className="ngo-details">
                        <table className="details-table">
                            <tbody>
                                <tr>
                                    <td><strong>Type:</strong></td>
                                    <td>{ngo.type || "N/A"}</td>
                                </tr>
                                <tr>
                                    <td><strong>Phone:</strong></td>
                                    <td>{ngo.phone}</td>
                                </tr>
                                
                                <tr>
                                    <td><strong>Address:</strong></td>
                                    <td>{ngo.address || "N/A"}</td>
                                </tr>
                                
                                <tr>
                                    <td><strong>Tax ID:</strong></td>
                                    <td>{ngo.id_fiscale || "N/A"}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ViewNGO;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/view-restaurant.jsx">
import React, { useEffect, useState } from "react";
import axios from "axios";
import { useParams } from "react-router-dom";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "/src/assets/styles/backoffcss/viewRestaurant.css"; // Ensure you have the correct CSS
import { FaBan, FaUnlock } from "react-icons/fa";

const ViewRestaurant = () => {
    const { id } = useParams();
    const [restaurant, setRestaurant] = useState(null);

    useEffect(() => {
        axios.get(`http://localhost:3000/users/view/${id}`)
            .then(response => {
                setRestaurant(response.data);
            })
            .catch(error => {
                console.error("Error fetching restaurant details:", error);
            });
    }, [id]);

    if (!restaurant) {
        return <div className="loading">Loading...</div>;
    }

    const handleBlockRestaurant = async (restaurantId, isBlocked) => {
        try {
            const response = await axios.put(`http://localhost:3000/users/toggle-block/${restaurantId}`, {
                isBlocked: !isBlocked
            });

            if (response.status === 200) {
                alert(`Restaurant has been ${response.data.isBlocked ? "blocked" : "unblocked"} successfully.`);
                setRestaurant({ ...restaurant, isBlocked: response.data.isBlocked });
            } else {
                alert(response.data.error || "Error toggling block status.");
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Failed to update block status.");
        }
    };

    return (
        <div className="view-restaurant-container">
            <Sidebar />
            <div className="view-restaurant-content">
                <Navbar />
                <div className="restaurant-card">
                    <div className="restaurant-header">
                    <img 
                                            src={restaurant.photo ? `http://localhost:3000/${restaurant.photo}` : "/src/assets/User_icon_2.svg.png"} 
                                            alt="restaurant" 
                                            className="restaurant-photo" 
                                        />
                        <div className="restaurant-info">
                            <h2>{restaurant.name}</h2>
                            <p className="email">{restaurant.email}</p>
                            <p className="id">ID: {restaurant.id}</p>
                            <div className="restaurant-actions">
                                <button
                                    className="block-btn"
                                    onClick={() => handleBlockRestaurant(restaurant._id, restaurant.isBlocked)}
                                    style={{ color: restaurant.isBlocked ? "green" : "red" }}
                                >
                                    {restaurant.isBlocked ? <FaUnlock /> : <FaBan />}
                                    {restaurant.isBlocked ? " Unblock" : " Block"}
                                </button>
                            </div>
                        </div>
                    </div>
                    <div className="restaurant-details">
                        <table className="details-table">
                            <tbody>
                                <tr>
                                    <td><strong>Phone:</strong></td>
                                    <td>{restaurant.phone}</td>
                                </tr>
                                <tr>
                                    <td><strong>Tax Referecence:</strong></td>
                                    <td>{restaurant.taxReference || "N/A"}</td>
                                </tr>
                                <tr>
                                    <td><strong>Address:</strong></td>
                                    <td>{restaurant.address || "N/A"}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ViewRestaurant;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/view-student.jsx">
import React, { useEffect, useState } from "react";
import axios from "axios";
import { useParams } from "react-router-dom";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "/src/assets/styles/backoffcss/viewStudent.css"; 
import { FaBan, FaUnlock } from "react-icons/fa";

const ViewStudent = () => {
    const { id } = useParams();
    const [student, setStudent] = useState(null);

    useEffect(() => {
        axios.get(`http://localhost:3000/users/view/${id}`)
            .then(response => {
                setStudent(response.data);
            })
            .catch(error => {
                console.error("Error fetching student details:", error);
            });
    }, [id]);

    if (!student) {
        return <div className="loading">Loading...</div>;
    }

    const handleBlockUser = async (userId, isBlocked) => {
        try {
            const response = await axios.put(`http://localhost:3000/users/toggle-block/${userId}`, {
                isBlocked: !isBlocked
            });

            if (response.status === 200) {
                alert(`User has been ${response.data.isBlocked ? "blocked" : "unblocked"} successfully.`);
                setStudent({ ...student, isBlocked: response.data.isBlocked });
            } else {
                alert(response.data.error || "Error toggling block status.");
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Failed to update block status.");
        }
    };

    return (
        <div className="view-student-container">
            <Sidebar />
            <div className="view-student-content">
                <Navbar />
                <div className="student-card">
                    <div className="student-header">
                    <img 
                                            src={student.photo ? `http://localhost:3000/${student.photo}` : "/src/assets/User_icon_2.svg.png"} 
                                            alt="Student" 
                                            className="student-photo" 
                                        />
                        <div className="student-info">
                            <h2>{student.name}</h2>
                            <p className="email">{student.email}</p>
                            <p className="id">ID: {student.id}</p>
                            <div className="student-actions">
                                <button
                                    className="block-btn"
                                    onClick={() => handleBlockUser(student._id, student.isBlocked)}
                                    style={{ color: student.isBlocked ? "green" : "red" }}
                                >
                                    {student.isBlocked ? <FaUnlock /> : <FaBan />}
                                    
                                </button>
                            </div>
                        </div>
                    </div>
                    <div className="student-details">
                        <table className="details-table">
                            <tbody>
                                <tr>
                                    <td><strong>Phone:</strong></td>
                                    <td>{student.phone}</td>
                                </tr>
                                <tr>
                                    <td><strong>Age:</strong></td>
                                    <td>{student.age || "N/A"}</td>
                                </tr>
                                <tr>
                                    <td><strong>Sex:</strong></td>
                                    <td>{student.sexe}</td>
                                </tr>
                                <tr>
                                    <td><strong>Address:</strong></td>
                                    <td>{student.address || "N/A"}</td>
                                </tr>
                                <tr>
                                    <td><strong>Student Card:</strong></td>
                                    <td>{student.studentCard || "N/A"}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ViewStudent;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/view-supermarket.jsx">
import React, { useEffect, useState } from "react";
import axios from "axios";
import { useParams } from "react-router-dom";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "/src/assets/styles/backoffcss/viewSupermarket.css"; 
import { FaBan, FaUnlock } from "react-icons/fa";

const ViewSupermarket = () => {
    const { id } = useParams();
    const [supermarket, setSupermarket] = useState(null);

    useEffect(() => {
        axios.get(`http://localhost:3000/users/view/${id}`)
            .then(response => {
                setSupermarket(response.data);
            })
            .catch(error => {
                console.error("Error fetching supermarket details:", error);
            });
    }, [id]);

    if (!supermarket) {
        return <div className="loading">Loading...</div>;
    }

    const handleBlockUser = async (userId, isBlocked) => {
        try {
            const response = await axios.put(`http://localhost:3000/users/toggle-block/${userId}`, {
                isBlocked: !isBlocked
            });

            if (response.status === 200) {
                alert(`Supermarket has been ${response.data.isBlocked ? "blocked" : "unblocked"} successfully.`);
                setSupermarket({ ...supermarket, isBlocked: response.data.isBlocked });
            } else {
                alert(response.data.error || "Error toggling block status.");
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Failed to update block status.");
        }
    };

    return (
        <div className="view-supermarket-container">
            <Sidebar />
            <div className="view-supermarket-content">
                <Navbar />
                <div className="supermarket-card">
                    <div className="supermarket-header">
                    <img 
                                            src={supermarket.photo ? `http://localhost:3000/${supermarket.photo}` : "/src/assets/User_icon_2.svg.png"} 
                                            alt="supermarket" 
                                            className="supermarket-photo" 
                                        />
                        <div className="supermarket-info">
                            <h2>{supermarket.name}</h2>
                            <p className="email">{supermarket.email}</p>
                            <p className="id">ID: {supermarket.id}</p>
                            <div className="supermarket-actions">
                                <button
                                    className="block-btn"
                                    onClick={() => handleBlockUser(supermarket._id, supermarket.isBlocked)}
                                    style={{ color: supermarket.isBlocked ? "green" : "red" }}
                                >
                                    {supermarket.isBlocked ? <FaUnlock /> : <FaBan />}
                                    {supermarket.isBlocked ? " Unblock" : " Block"}
                                </button>
                            </div>
                        </div>
                    </div>
                    <div className="supermarket-details">
                        <table className="details-table">
                            <tbody>
                                <tr>
                                    <td><strong>Phone:</strong></td>
                                    <td>{supermarket.phone}</td>
                                </tr>
                                <tr>
                                    <td><strong>Tax Registration Number:</strong></td>
                                    <td>{supermarket.taxReference || "N/A"}</td>
                                </tr>
                                <tr>
                                    <td><strong>Address:</strong></td>
                                    <td>{supermarket.address || "N/A"}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ViewSupermarket;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/view-transporter.jsx">
import React, { useEffect, useState } from "react";
import axios from "axios";
import { useParams } from "react-router-dom";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "/src/assets/styles/backoffcss/viewTransporter.css";
import { FaBan, FaUnlock } from "react-icons/fa";

const ViewTransporter = () => {
    const { id } = useParams();
    const [transporter, setTransporter] = useState(null);

    useEffect(() => {
        axios.get(`http://localhost:3000/users/view/${id}`)
            .then(response => {
                setTransporter(response.data);
            })
            .catch(error => {
                console.error("Error fetching transporter details:", error);
            });
    }, [id]);

    if (!transporter) {
        return <div className="loading">Loading...</div>;
    }

    const handleBlockUser = async (userId, isBlocked) => {
        try {
            const response = await axios.put(`http://localhost:3000/users/toggle-block/${userId}`, {
                isBlocked: !isBlocked
            });

            if (response.status === 200) {
                alert(`Transporter has been ${response.data.isBlocked ? "blocked" : "unblocked"} successfully.`);
                setTransporter({ ...transporter, isBlocked: response.data.isBlocked });
            } else {
                alert(response.data.error || "Error toggling block status.");
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Failed to update block status.");
        }
    };

    return (
        <div className="view-transporter-container">
            <Sidebar />
            <div className="view-transporter-content">
                <Navbar />
                <div className="transporter-card">
                    <div className="transporter-header">
                       <img 
                                            src={transporter.photo ? `http://localhost:3000/${transporter.photo}` : "/src/assets/User_icon_2.svg.png"} 
                                            alt="transporter" 
                                            className="transporter-photo" 
                                        />
                        <div className="transporter-info">
                            <h2>{transporter.name}</h2>
                            <p className="email">{transporter.email}</p>
                            <p className="id">ID: {transporter.id}</p>
                            <div className="transporter-actions">
                                <button
                                    className="block-btn"
                                    onClick={() => handleBlockUser(transporter._id, transporter.isBlocked)}
                                    style={{ color: transporter.isBlocked ? "green" : "red" }}
                                >
                                    {transporter.isBlocked ? <FaUnlock /> : <FaBan />}
                                    {transporter.isBlocked ? " Unblock" : " Block"}
                                </button>
                            </div>
                        </div>
                    </div>
                    <div className="transporter-details">
                        <table className="details-table">
                            <tbody>
                                <tr>
                                    <td><strong>Phone:</strong></td>
                                    <td>{transporter.phone}</td>
                                </tr>
                                <tr>
                                    <td><strong>Vehicle Type:</strong></td>
                                    <td>{transporter.vehiculeType || "N/A"}</td>
                                </tr>
                                <tr>
                                    <td><strong>Address:</strong></td>
                                    <td>{transporter.address || "N/A"}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ViewTransporter;
</file>

<file path="sustainafood-frontend/src/pages/ConfirmationModal.jsx">
import React from "react";

const ConfirmationModal = ({ message, onConfirm, onCancel }) => {
  return (
    <div className="confirmation-modal-overlay">
      <div className="confirmation-modal">
        <div className="confirmation-modal-content">
          <p>{message}</p>
          <div className="confirmation-modal-buttons">
            <button className="confirmation-modal-button confirm" onClick={onConfirm}>
              Yes
            </button>
            <button className="confirmation-modal-button cancel" onClick={onCancel}>
              No
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ConfirmationModal;
</file>

<file path="sustainafood-frontend/src/pages/Continueinfo.jsx">
"use client"

import { useState, useContext } from "react"
import { AuthContext } from "../contexts/AuthContext"
import { useNavigate } from "react-router-dom"
import ReCAPTCHA from "react-google-recaptcha"
import { getUserById, updateUserwithemail } from "../api/userService"
import { useAuth } from "../contexts/AuthContext"
import { FaCamera } from "react-icons/fa"
import "../assets/styles/ContinueInfo.css"

const ContinueInfo = () => {
  const { user, token } = useAuth();
  const { login } = useContext(AuthContext);
  const navigate = useNavigate();
  const [error, setError] = useState(null);
  const [fileName, setFileName] = useState("");
  const [imagePreview, setImagePreview] = useState(null);
  const [profilePhotoFile, setProfilePhotoFile] = useState(null);
  const [formData, setFormData] = useState({
    phone: "",
    name: "",
    address: "",
    role: "ong", // Default to ONG
  });
  const [captchaValue, setCaptchaValue] = useState(null);
  const [errors, setErrors] = useState({});

  const validateName = (name) => /^[a-zA-Z\s]+$/.test(name);
  const validatePhone = (phone) => /^\d{8,15}$/.test(phone);
  const validateCIN = (cin) => /^\d{8}$/.test(cin);
  const validateFiscalID = (id) => /^TN\d{8}$/.test(id);
  const validateTaxReference = (ref) => /^VAT-\d{8}$/.test(ref);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));

    // Validate field immediately
    const newErrors = { ...errors };
    switch (name) {
      case "name":
        if (value && !validateName(value)) {
          newErrors[name] = "Invalid name format";
        } else {
          delete newErrors[name];
        }
        break;
      case "phone":
        if (value && !validatePhone(value)) {
          newErrors[name] = "Invalid phone number format";
        } else {
          delete newErrors[name];
        }
        break;
      case "num_cin":
        if (value && !validateCIN(value)) {
          newErrors[name] = "CIN must be exactly 8 digits";
        } else {
          delete newErrors[name];
        }
        break;
      case "id_fiscale":
        if (value && !validateFiscalID(value)) {
          newErrors[name] = "Invalid fiscal ID format (must be TN followed by 8 digits)";
        } else {
          delete newErrors[name];
        }
        break;
      case "taxReference":
        if (value && !validateTaxReference(value)) {
          newErrors[name] = "Invalid Tax Reference format (must be like VAT-12345678)";
        } else {
          delete newErrors[name];
        }
        break;
    }
    setErrors(newErrors);
  };

  const handleRoleChange = (e) => {
    const { value } = e.target;

    // Define role-specific fields
    let roleSpecificFields = {};
    switch (value) {
      case "student":
        roleSpecificFields = { sexe: "male", age: "", num_cin: "" };
        break;
      case "ong":
        roleSpecificFields = { id_fiscale: "", type: "charitable" };
        break;
      case "transporter":
        roleSpecificFields = { vehiculeType: "car" };
        break;
      case "restaurant":
      case "supermarket":
        roleSpecificFields = { taxReference: "" };
        break;
      default:
        roleSpecificFields = {};
    }

    // Remove irrelevant fields when role changes
    const { vehiculeType, ...rest } = formData; // Remove vehiculeType for non-transporter roles

    // Update formData with the new role and role-specific fields
    setFormData({
      ...rest,
      role: value,
      ...roleSpecificFields,
    });
  };

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      setFileName(file.name);
      setProfilePhotoFile(file);
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    if (!captchaValue) {
      setError("Please complete the reCAPTCHA.");
      return;
    }

    if (!formData.phone || !formData.role || !formData.address || !formData.name) {
      setError("Please fill in all required fields.");
      return;
    }

    if (Object.keys(errors).length > 0) {
      setError("Please fix the errors in the form.");
      return;
    }

    const email = localStorage.getItem("email from google");
    const id = localStorage.getItem("user_id");

    if (!id || !email) {
      setError("Error: User not found.");
      return;
    }

    const data = new FormData();

    // Append common fields
    data.append("phone", formData.phone);
    data.append("name", formData.name);
    data.append("address", formData.address);
    data.append("role", formData.role);

    // Append role-specific fields
    switch (formData.role) {
      case "student":
        data.append("sexe", formData.sexe);
        data.append("age", formData.age);
        data.append("num_cin", formData.num_cin);
        break;
      case "ong":
        data.append("id_fiscale", formData.id_fiscale);
        data.append("type", formData.type);
        break;
      case "transporter":
        data.append("vehiculeType", formData.vehiculeType);
        break;
      case "restaurant":
      case "supermarket":
        data.append("taxReference", formData.taxReference);
        break;
    }

    data.append("email", email);

    if (profilePhotoFile) {
      data.append("photo", profilePhotoFile);
    }

    try {
      const response = await updateUserwithemail(id, data);
      const userResponse = await getUserById(id);
      const user = userResponse.data;

      if (!user) {
        setError("Error: User data not retrieved.");
        return;
      }

      login(user, token);

      const authData = JSON.parse(localStorage.getItem("authData") || "{}");
      localStorage.setItem("user", JSON.stringify(user));
      localStorage.setItem("authData", JSON.stringify({ ...authData, email: user.email }));

      navigate(user.role === "admin" ? "/dashboard" : "/profile");
    } catch (err) {
      console.error("Error during registration:", err);
      setError(err.response?.data?.error || "Registration error.");
    }
  };

  return (
    <div className="continueinfo-container">
      <div className="continueinfo-card">
        <h2 className="continueinfo-title">Complete Your Profile</h2>
        <p className="continueinfo-description">Please provide additional information to complete your registration.</p>
        <form onSubmit={handleSubmit} className="continueinfo-form">
          {/* Common Fields */}
          <div className="continueinfo-form-group">
            <label htmlFor="name" className="continueinfo-label">
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={formData.name}
              onChange={handleChange}
              required
              className={`continueinfo-input ${errors.name ? "continueinfo-input-error" : ""}`}
            />
            {errors.name && <p className="continueinfo-error-message">{errors.name}</p>}
          </div>

          <div className="continueinfo-form-group">
            <label htmlFor="role" className="continueinfo-label">
              Role
            </label>
            <select
              id="role"
              name="role"
              value={formData.role}
              onChange={handleRoleChange}
              className="continueinfo-select"
            >
              <option value="ong">ONG</option>
              <option value="restaurant">Restaurant</option>
              <option value="supermarket">Supermarket</option>
              <option value="student">Student</option>
              <option value="transporter">Transporter</option>
            </select>
          </div>

          <div className="continueinfo-form-group">
            <label htmlFor="phone" className="continueinfo-label">
              Phone Number
            </label>
            <input
              type="tel"
              id="phone"
              name="phone"
              value={formData.phone}
              onChange={handleChange}
              required
              className={`continueinfo-input ${errors.phone ? "continueinfo-input-error" : ""}`}
            />
            {errors.phone && <p className="continueinfo-error-message">{errors.phone}</p>}
          </div>

          <div className="continueinfo-form-group">
            <label htmlFor="address" className="continueinfo-label">
              Address
            </label>
            <input
              type="text"
              id="address"
              name="address"
              value={formData.address}
              onChange={handleChange}
              required
              className="continueinfo-input"
            />
          </div>

          {/* Role-Specific Fields */}
          {formData.role === "student" && (
            <>
              <div className="continueinfo-form-group">
                <label htmlFor="sexe" className="continueinfo-label">
                  Gender
                </label>
                <select
                  id="sexe"
                  name="sexe"
                  value={formData.sexe}
                  onChange={handleChange}
                  className="continueinfo-select"
                >
                  <option value="male">Male</option>
                  <option value="female">Female</option>
                  <option value="other">Other</option>
                </select>
              </div>
              <div className="continueinfo-form-group">
                <label htmlFor="age" className="continueinfo-label">
                  Age
                </label>
                <input
                  type="number"
                  id="age"
                  name="age"
                  value={formData.age}
                  onChange={handleChange}
                  required
                  className="continueinfo-input"
                />
              </div>
              <div className="continueinfo-form-group">
                <label htmlFor="num_cin" className="continueinfo-label">
                  CIN Number
                </label>
                <input
                  type="text"
                  id="num_cin"
                  name="num_cin"
                  value={formData.num_cin}
                  onChange={handleChange}
                  required
                  className={`continueinfo-input ${errors.num_cin ? "continueinfo-input-error" : ""}`}
                />
                {errors.num_cin && <p className="continueinfo-error-message">{errors.num_cin}</p>}
              </div>
            </>
          )}

          {formData.role === "ong" && (
            <>
              <div className="continueinfo-form-group">
                <label htmlFor="id_fiscale" className="continueinfo-label">
                  Fiscal ID
                </label>
                <input
                  type="text"
                  id="id_fiscale"
                  name="id_fiscale"
                  value={formData.id_fiscale}
                  onChange={handleChange}
                  required
                  className={`continueinfo-input ${errors.id_fiscale ? "continueinfo-input-error" : ""}`}
                />
                {errors.id_fiscale && <p className="continueinfo-error-message">{errors.id_fiscale}</p>}
              </div>
              <div className="continueinfo-form-group">
                <label htmlFor="type" className="continueinfo-label">
                  ONG Type
                </label>
                <select
                  id="type"
                  name="type"
                  value={formData.type}
                  onChange={handleChange}
                  className="continueinfo-select"
                >
                  <option value="advocacy">Advocacy</option>
                  <option value="operational">Operational</option>
                  <option value="charitable">Charitable</option>
                  <option value="development">Development</option>
                  <option value="environmental">Environmental</option>
                  <option value="human-rights">Human Rights</option>
                  <option value="relief">Relief</option>
                  <option value="research">Research</option>
                  <option value="philanthropic">Philanthropic</option>
                  <option value="social_welfare">Social Welfare</option>
                  <option value="cultural">Cultural</option>
                  <option value="faith_based">Faith Based</option>
                </select>
              </div>
            </>
          )}

          {formData.role === "transporter" && (
            <div className="continueinfo-form-group">
              <label htmlFor="vehiculeType" className="continueinfo-label">
                Vehicle Type
              </label>
              <select
                id="vehiculeType"
                name="vehiculeType"
                value={formData.vehiculeType}
                onChange={handleChange}
                className="continueinfo-select"
              >
                <option value="car">Car</option>
                <option value="motorbike">Motorbike</option>
                <option value="bicycle">Bicycle</option>
                <option value="van">Van</option>
                <option value="truck">Truck</option>
                <option value="scooter">Scooter</option>
              </select>
            </div>
          )}

          {(formData.role === "restaurant" || formData.role === "supermarket") && (
            <div className="continueinfo-form-group">
              <label htmlFor="taxReference" className="continueinfo-label">
                Tax Reference
              </label>
              <input
                type="text"
                id="taxReference"
                name="taxReference"
                value={formData.taxReference}
                onChange={handleChange}
                required
                className={`continueinfo-input ${errors.taxReference ? "continueinfo-input-error" : ""}`}
              />
              {errors.taxReference && <p className="continueinfo-error-message">{errors.taxReference}</p>}
            </div>
          )}

          {/* Profile Photo Upload */}
          <div className="continueinfo-form-group">
            <label htmlFor="file" className="continueinfo-label">
              Profile Photo
            </label>
            <div className="continueinfo-file-input">
              <button
                type="button"
                className="continueinfo-file-button"
                onClick={() => document.getElementById("file").click()}
              >
                <FaCamera className="continueinfo-camera-icon" />
                <span>Upload photo</span>
              </button>
              <input id="file" type="file" onChange={handleFileChange} className="continueinfo-hidden-input" />
              {imagePreview && (
                <img
                  src={imagePreview || "/placeholder.svg"}
                  alt="Profile Preview"
                  className="continueinfo-image-preview"
                />
              )}
              {fileName && <span className="continueinfo-file-name">{fileName}</span>}
            </div>
          </div>

          {/* reCAPTCHA */}
          <div className="continueinfo-recaptcha">
            <ReCAPTCHA
              sitekey="6LeXoN8qAAAAAHnZcOwetBZ9TfyOl8K_wg7j97hq"
              onChange={(value) => setCaptchaValue(value)}
            />
          </div>

          {/* Error Message */}
          {error && <p className="continueinfo-error">{error}</p>}

          {/* Submit Button */}
          <button type="submit" className="continueinfo-submit-button">
            Complete Registration
          </button>
        </form>
      </div>
    </div>
  );
};

export default ContinueInfo;
</file>

<file path="sustainafood-frontend/src/pages/DonationRecommendations.jsx">
"use client";

import { useState, useEffect } from "react";
import Navbar from "../components/Navbar";
import Footer from "../components/Footer";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../contexts/AuthContext";
import { useAlert } from "../contexts/AlertContext";
import { getDonationsByUserId } from "../api/donationService";
import axios from "axios";
import styled, { createGlobalStyle } from "styled-components";
import { FaSearch, FaFilter } from "react-icons/fa";
import { Link } from "react-router-dom";

const API_BASE_URL = "http://localhost:3000"; // Ensure this matches your backend port

// Global styles for the page
const GlobalStyle = createGlobalStyle`
  body {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    background: #f0f8f0;
    box-sizing: border-box;
  }
`;

const Container = styled.div`
  padding: 40px 60px;
  text-align: center;
`;

const Title = styled.h1`
  color: #228b22;
  font-size: 40px;
  margin-bottom: 20px;
`;

const TopControls = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 15px;
  margin-bottom: 20px;
  flex-wrap: wrap;
`;

const SearchContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  background: white;
  padding: 8px;
  border-radius: 25px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  width: 320px;
  margin-right: 39%;
  transition: all 0.3s ease-in-out;

  &:hover {
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }
`;

const SearchIcon = styled(FaSearch)`
  color: #555;
  margin-right: 8px;
`;

const SearchInput = styled.input`
  border: none;
  outline: none;
  font-size: 16px;
  width: 100%;
  padding: 8px;
  background: transparent;
`;

const Controls = styled.div`
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 15px;
  margin: 20px 0;
`;

const FilterIcon = styled(FaFilter)`
  margin-right: 8px;
`;

const Select = styled.select`
  padding: 10px;
  font-size: 16px;
  border-radius: 25px;
  border: 1px solid #ccc;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  transition: 0.3s;
  cursor: pointer;
  background: white;
  color: #333;
  font-weight: bold;

  &:hover {
    border-color: #228b22;
    transform: scale(1.05);
  }
`;

const DonationSection = styled.div`
  margin-bottom: 30px;
  padding: 20px;
  border: 1px solid #ddd;
  border-radius: 8px;
  background-color: #fff;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
`;

const DonationTable = styled.table`
  width: 100%;
  border-collapse: collapse;
  margin-top: 10px;

  th, td {
    padding: 10px;
    border: 1px solid #ddd;
    text-align: left;
  }

  th {
    background-color: #228b22;
    color: white;
  }
`;

const RecommendationTable = styled.table`
  width: 100%;
  border-collapse: collapse;
  margin-top: 10px;

  th, td {
    padding: 10px;
    border: 1px solid #ddd;
    text-align: left;
  }

  th {
    background-color: #228b22;
    color: white;
  }
`;

const Warning = styled.p`
  color: red;
  font-weight: bold;
`;

const LoadingMessage = styled.div`
  font-size: 18px;
  color: #555;
`;

const NoDonations = styled.p`
  font-size: 18px;
  color: #888;
`;

const PaginationControls = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  gap: 10px;

  button {
    padding: 10px 20px;
    font-size: 16px;
    background: #228b22;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s;

    &:hover {
      background: #56ab2f;
    }

    &:disabled {
      background: #ccc;
      cursor: not-allowed;
    }
  }

  span {
    font-size: 16px;
    color: #333;
  }
`;

const AddDonationButton = styled(Link)`
  text-decoration: none;
  background: #228b22;
  color: white;
  transition: background 0.3s;
  font-size: 18px;
  font-weight: bold;
  padding: 12px 24px;
  border: none;
  border-radius: 30px;
  cursor: pointer;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  margin-bottom: 20px;

  &:hover {
    background: #1e7a1e;
  }
`;

const ActionButton = styled.button`
  padding: 8px 16px;
  background: ${(props) => (props.disabled ? "#ccc" : "#228b22")};
  color: white;
  border: none;
  border-radius: 5px;
  cursor: ${(props) => (props.disabled ? "not-allowed" : "pointer")};
  transition: background 0.3s;

  &:hover:not(:disabled) {
    background: #56ab2f;
  }
`;

const AssignedNote = styled.span`
  color: #888;
  font-style: italic;
`;

const DonationRecommendations = () => {
    const { user: authUser } = useAuth();
    const { showAlert } = useAlert();
    const navigate = useNavigate();

    const [donations, setDonations] = useState([]);
    const [filteredDonations, setFilteredDonations] = useState([]);
    const [recommendations, setRecommendations] = useState({});
    const [loading, setLoading] = useState(true);
    const [assignedRequests, setAssignedRequests] = useState({}); // Track assigned requests per donation

    // Search, Filter, and Pagination States
    const [searchTerm, setSearchTerm] = useState("");
    const [categoryFilter, setCategoryFilter] = useState("");
    const [statusFilter, setStatusFilter] = useState("");
    const [expirationFilter, setExpirationFilter] = useState("");
    const [currentPage, setCurrentPage] = useState(1);
    const donationsPerPage = 3;

    useEffect(() => {
        const fetchData = async () => {
            if (!authUser || (!authUser.id && !authUser._id)) {
                showAlert("error", "Please log in to view your donations.");
                navigate("/login");
                return;
            }

            try {
                setLoading(true);
                const userId = authUser._id || authUser.id;
                if (!userId) {
                    throw new Error("User ID not found");
                }

                console.log("Fetching data for userId:", userId);
                const donationsResponse = await getDonationsByUserId(userId);
                const fetchedDonations = donationsResponse.data || [];
                setDonations(fetchedDonations);
                setFilteredDonations(fetchedDonations);

                const recs = {};
                const assigned = {};
                for (const donation of fetchedDonations) {
                    console.log(`Fetching recommendations for donation: ${donation._id}`);
                    try {
                        const response = await axios.get(`${API_BASE_URL}/donation/donation/${donation._id}/recommendations`);
                        recs[donation._id] = response.data;

                        // Initialize assigned requests for this donation
                        assigned[donation._id] = new Set(donation.linkedRequests || []);
                    } catch (error) {
                        console.error(`Error fetching recommendations for donation ${donation._id}:`, error.message);
                        recs[donation._id] = [];
                        assigned[donation._id] = new Set();
                    }
                }
                setRecommendations(recs);
                setAssignedRequests(assigned);
            } catch (error) {
                console.error("Error fetching data:", error.message);
                showAlert("error", "Failed to load your donations and recommendations: " + error.message);
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, [authUser, navigate, showAlert]);

    // Handle Search and Filters
    useEffect(() => {
        let filtered = donations;

        // Search by donation title
        if (searchTerm) {
            filtered = filtered.filter((donation) =>
                donation.title.toLowerCase().includes(searchTerm.toLowerCase())
            );
        }

        // Filter by category
        if (categoryFilter) {
            filtered = filtered.filter((donation) => donation.category === categoryFilter);
        }

        // Filter by status
        if (statusFilter) {
            filtered = filtered.filter((donation) => donation.status === statusFilter);
        }

        // Filter by expiration date
        if (expirationFilter) {
            const now = new Date();
            if (expirationFilter === "expiring-soon") {
                filtered = filtered.filter(
                    (donation) =>
                        new Date(donation.expirationDate) < new Date(now.getTime() + 3 * 24 * 60 * 60 * 1000)
                );
            } else if (expirationFilter === "valid") {
                filtered = filtered.filter(
                    (donation) =>
                        new Date(donation.expirationDate) >= new Date(now.getTime() + 3 * 24 * 60 * 60 * 1000)
                );
            }
        }

        setFilteredDonations(filtered);
        setCurrentPage(1);
    }, [searchTerm, categoryFilter, statusFilter, expirationFilter, donations]);

    // Pagination Logic
    const indexOfLastDonation = currentPage * donationsPerPage;
    const indexOfFirstDonation = indexOfLastDonation - donationsPerPage;
    const currentDonations = filteredDonations.slice(indexOfFirstDonation, indexOfLastDonation);
    const totalPages = Math.ceil(filteredDonations.length / donationsPerPage);

    const handlePageChange = (pageNumber) => {
        setCurrentPage(pageNumber);
    };

    const handleAcceptRecommendation = async (donationId, requestId, fulfilledItems) => {
        try {
            const donation = donations.find((d) => d._id === donationId);
            if (!donation) {
                throw new Error("Donation not found");
            }

            // Prepare the request body for the UpdateAddDonationToRequest endpoint
            const requestBody = {
                donationId: donationId,
                donor: authUser._id || authUser.id, // The logged-in user is the donor
                expirationDate: donation.expirationDate,
                fulfilledItems: fulfilledItems, // Pass fulfilled items for status calculation
            };

            if (donation.category === "packaged_products") {
                // Map fulfilledItems to the format expected by UpdateAddDonationToRequest
                requestBody.products = fulfilledItems.map((item) => ({
                    product: item.product, // Assuming fulfilledItems contains product IDs
                    quantity: item.quantity,
                }));
            } else if (donation.category === "prepared_meals") {
                // Map fulfilledItems to the format expected by UpdateAddDonationToRequest
                requestBody.meals = donation.meals.map((meal) => ({
                    mealName: meal.meal?.mealName || "Unknown Meal",
                    mealDescription: meal.meal?.mealDescription || "No description",
                    mealType: meal.meal?.mealType || "Unknown Type",
                    quantity: meal.quantity,
                }));
                requestBody.numberOfMeals = fulfilledItems.reduce((total, item) => total + item.quantity, 0);
            }

            // Call the UpdateAddDonationToRequest endpoint
            const response = await axios.put(
                `${API_BASE_URL}/request/UpdateAddDonationToRequest/${requestId}/donations`,
                requestBody
            );

            // Update the assignedRequests state to mark this request as assigned for the donation
            setAssignedRequests((prev) => {
                const updated = { ...prev };
                if (!updated[donationId]) {
                    updated[donationId] = new Set();
                }
                updated[donationId].add(requestId);
                return updated;
            });

            showAlert("success", "Donation assigned to request successfully!");

            // Refresh donations to reflect the updated donation
            const donationsResponse = await getDonationsByUserId(authUser._id || authUser.id);
            setDonations(donationsResponse.data || []);

            // Refresh recommendations for the current donation
            const recResponse = await axios.get(`${API_BASE_URL}/donation/donation/${donationId}/recommendations`);
            setRecommendations((prev) => ({ ...prev, [donationId]: recResponse.data }));
        } catch (error) {
            console.error("Error assigning donation:", error.message);
            showAlert("error", "Failed to assign donation to request: " + error.message);
        }
    };

    return (
        <>
            <GlobalStyle />
            <Navbar />
            <Container>
                <Title>Donation Matching Recommendations</Title>

                {/* Search Bar and Add Donation Button */}
                <TopControls>
                    <AddDonationButton to="/AddDonation">
                        ✚ Add New Donation
                    </AddDonationButton>
                    <SearchContainer>
                        <SearchIcon />
                        <SearchInput
                            type="text"
                            placeholder="Search donations..."
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                        />
                    </SearchContainer>
                </TopControls>

                {/* Filters */}
                <Controls>
                    <Select value={categoryFilter} onChange={(e) => setCategoryFilter(e.target.value)}>
                        <option value="">📦 All Categories</option>
                        <option value="packaged_products">🛒 Packaged Products</option>
                        <option value="prepared_meals">🍽️ Prepared Meals</option>
                    </Select>

                    <Select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>
                        <option value="">🟢 All Statuses</option>
                        <option value="pending">🕒 Pending</option>
                        <option value="partially_fulfilled">🔄 Partially Fulfilled</option>
                        <option value="fulfilled">✅ Fulfilled</option>
                    </Select>

                    <Select value={expirationFilter} onChange={(e) => setExpirationFilter(e.target.value)}>
                        <option value="">📅 All Expiration Dates</option>
                        <option value="expiring-soon">⏳ Expiring Soon (within 3 days)</option>
                        <option value="valid">✅ Valid (more than 3 days)</option>
                    </Select>
                </Controls>

                {/* Donations List */}
                {loading ? (
                    <LoadingMessage>Loading...</LoadingMessage>
                ) : currentDonations.length > 0 ? (
                    <>
                        {currentDonations.map((donation) => (
                            <DonationSection key={donation._id}>
                                <h2>Donation Title: {donation.title}</h2>
                                <p>
                                    Category:{" "}
                                    {donation.category === "packaged_products"
                                        ? "Packaged Products"
                                        : "Prepared Meals"}
                                </p>
                                <p>Status: {donation.status}</p>
                                <p>
                                    Expiration Date: {new Date(donation.expirationDate).toLocaleDateString()}
                                </p>
                                {donation.expirationDate &&
                                    new Date(donation.expirationDate) <
                                        new Date(Date.now() + 3 * 24 * 60 * 60 * 1000) && (
                                        <Warning>Expiring Soon!</Warning>
                                    )}
                                <h3>Items:</h3>
                                <DonationTable>
                                    <thead>
                                        <tr>
                                            <th>Name</th>
                                            <th>Description</th>
                                            <th>Quantity</th>
                                            <th>Type</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {donation.category === "packaged_products" ? (
                                            donation.products?.map((item, index) => (
                                                <tr key={index}>
                                                    <td>{item.product?.name || "N/A"}</td>
                                                    <td>{item.product?.productDescription || "N/A"}</td>
                                                    <td>{item.quantity || "N/A"}</td>
                                                    <td>{item.product?.productType || "N/A"}</td>
                                                </tr>
                                            ))
                                        ) : (
                                            donation.meals?.map((item, index) => (
                                                <tr key={index}>
                                                    <td>{item.meal?.mealName || "N/A"}</td>
                                                    <td>{item.meal?.mealDescription || "N/A"}</td>
                                                    <td>{item.quantity || "N/A"}</td>
                                                    <td>{item.meal?.mealType || "N/A"}</td>
                                                </tr>
                                            ))
                                        )}
                                    </tbody>
                                </DonationTable>

                                <h3>Recommended Requests:</h3>
                                {recommendations[donation._id]?.length > 0 ? (
                                    <RecommendationTable>
                                        <thead>
                                            <tr>
                                                <th>Recipient Name</th>
                                                <th>Recipient Type</th>
                                                <th>Request Title</th>
                                                <th>Meals Fulfilled</th>
                                                <th>Match Score</th>
                                                <th>Action</th>
                                                <th>Status</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {recommendations[donation._id].map(
                                                ({ request, fulfilledItems, matchScore }) => {
                                                    const isAssigned = assignedRequests[donation._id]?.has(request._id);
                                                    return (
                                                        <tr key={request._id}>
                                                            <td>{request.recipient?.name || "N/A"}</td>
                                                            <td>{request.recipient?.type || "N/A"}</td>
                                                            <td>{request.title || "N/A"}</td>
                                                            <td>
                                                                {fulfilledItems.reduce(
                                                                    (total, item) => total + item.quantity,
                                                                    0
                                                                )}{" "}
                                                                / {request.numberOfMeals || 0}
                                                            </td>
                                                            <td>{matchScore || "N/A"}</td>
                                                            <td>
                                                                <ActionButton
                                                                    onClick={() =>
                                                                        handleAcceptRecommendation(
                                                                            donation._id,
                                                                            request._id,
                                                                            fulfilledItems
                                                                        )
                                                                    }
                                                                    disabled={donation.status !== "pending" || isAssigned}
                                                                >
                                                                    {donation.status === "pending" && !isAssigned
                                                                        ? "Assign"
                                                                        : "Assigned"}
                                                                </ActionButton>
                                                            </td>
                                                            <td>
                                                                {isAssigned && (
                                                                    <AssignedNote>Already Assigned</AssignedNote>
                                                                )}
                                                            </td>
                                                        </tr>
                                                    );
                                                }
                                            )}
                                        </tbody>
                                    </RecommendationTable>
                                ) : (
                                    <p>No matching requests found for this donation.</p>
                                )}
                            </DonationSection>
                        ))}

                        {/* Pagination Controls */}
                        <PaginationControls>
                            <button
                                onClick={() => handlePageChange(currentPage - 1)}
                                disabled={currentPage === 1}
                            >
                                Previous
                            </button>
                            <span>Page {currentPage} of {totalPages}</span>
                            <button
                                onClick={() => handlePageChange(currentPage + 1)}
                                disabled={currentPage === totalPages}
                            >
                                Next
                            </button>
                        </PaginationControls>
                    </>
                ) : (
                    <NoDonations>
                        No donations found. <Link to="/AddDonation">Add a donation now</Link> to get started!
                    </NoDonations>
                )}
            </Container>
            <Footer />
        </>
    );
};

export default DonationRecommendations;
</file>

<file path="sustainafood-frontend/src/pages/ForgetPass.jsx">
import React, { useState } from "react";
import { useNavigate } from 'react-router-dom';
import axios from "axios";  // ✅ Import Axios
import '../assets/styles/ForgetPass.css';

const ForgetPass = () => {
  const [email, setEmail] = useState("");
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post("http://localhost:3000/users/forgot-password", { email });

      if (response.headers["content-type"].includes("application/json")) {
        console.log("Reset code sent:", response.data);

        // ✅ Redirect to ResetCode page with email as a query parameter
        navigate(`/reset-code?email=${encodeURIComponent(email)}`);
      } else {
        throw new Error("Unexpected response type");
      }
    } catch (err) {
      console.error("Error sending reset code", err);
      alert("Error: Unable to send reset code. Please try again.");
    }
  };

  return (
    <div className="forget-pass-container">
      <div className="forget-pass-card">
        <h2>Forgot Password?</h2>
        <p>Enter your email to receive a password reset link.</p>
        <form onSubmit={handleSubmit}>
          <input
            type="email"
            placeholder="Enter your email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
          <button type="submit">Send Reset Link</button>
        </form>
      </div>
    </div>
  );
};

export default ForgetPass;
</file>

<file path="sustainafood-frontend/src/pages/log.jsx">
import { useState, useContext } from "react";
import { useNavigate } from "react-router-dom";
import { AuthContext } from "../contexts/AuthContext";
import { loginUser } from "../api/userService"; // Ensure this is correctly imported
import { useGoogleLogin } from "@react-oauth/google";
import { createuser,getUserById } from '../api/userService'; // Exemple d'import

import "../assets/styles/log.css";
import logo from "../assets/images/LogoCh.png";
import loginImg from "../assets/images/Login-PNG-HD-Image.png";
import gglimg from "../assets/images/ggl.jpg";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowLeft } from "@fortawesome/free-solid-svg-icons";
import { FaEye, FaEyeSlash } from "react-icons/fa";




const Login = () => {
    const { login } = useContext(AuthContext);
    const navigate = useNavigate();
    const [error, setError] = useState(null);
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [isRightPanelActive, setIsRightPanelActive] = useState(false);
    const [showPassword, setShowPassword] = useState(false);

    const handleLogin = async (e) => {
        e.preventDefault();
        setError("");

        if (!email || !password) {
            setError("Please fill in all fields.");
            return;
        }

        try {
            const response = await loginUser({ email, password });

            if (response?.data?.requires2FA) {
                navigate(`/two-fa-verification?email=${encodeURIComponent(email)}`);
            } else if (response?.data?.token) {
                const userData = {
                    id: response.data.id,
                    role: response.data.role,
                    email,
                    welcomeMessage: response.data.message,
                };
                login(userData, response.data.token);

                if (userData.role === "admin") {
                    navigate("/dashboard");
                } else {
                    navigate("/profile");
                }
            } else {
                setError("Authentication failed. Please check your credentials.");
            }
        } catch (err) {
            console.error("Backend error:", err.response?.data || err.message);
            setError(err.response?.data?.error || "Login error.");
        }
    };

    const handleGoogleLogin = useGoogleLogin({
        flow: "implicit", // Au lieu de "implicit"
        onSuccess: async (tokenResponse) => {
            try {
                if (!tokenResponse || !tokenResponse.access_token) {
                    setError("Google login error.");
                    console.error("Token Response Error:", error);
                    return;
                }
                

                const userInfoResponse = await fetch("https://www.googleapis.com/oauth2/v3/userinfo", {
                    headers: { Authorization: `Bearer ${tokenResponse.access_token}` },
                });
                const userInfo = await userInfoResponse.json();

                localStorage.setItem("email from google", userInfo.email);
                localStorage.setItem("id from google", userInfo.sub);

                const userData = {
                    email: userInfo.email,
                    name: userInfo.name,
                    photo: userInfo.picture,
                };

                const response = await createuser(userData);
                const user = await getUserById(response.data.id);
                login(user.data, tokenResponse.access_token);

                localStorage.setItem("user_id", response.data.id);

                if (!user.data.role) {
                    navigate("/Continueinfo");
                } else if (user.data.is2FAEnabled) {
                    navigate(`/two-fa-verification?email=${encodeURIComponent(user.data.email)}`);
                } else {
                    navigate("/profile");
                }
            } catch (error) {
                console.error("API error:", error.response ? error.response.data : error.message);
                setError("Google login error.");
            }
        },
        onError: (error) => {
            console.error("Google login failed", error);
            setError("Google login failed.");
        },
    });

    const handleForgotPassword = () => {
        navigate("/forget-password");
    };

    const togglePanel = () => {
        setIsRightPanelActive(!isRightPanelActive);
    };

    return (
        <div className="aa">
            <div className={`signup-container ${isRightPanelActive ? "right-panel-active" : ""}`} id="container">
                <div className="signup-form-container signup-sign-up-container">
                    <form className="signup-form" onSubmit={handleLogin}>
                        <h1 className="signup-h1">Sign in</h1>
                        <div className="signup-social-container">
                            <a href="#" className="signup-social" onClick={handleGoogleLogin}>
                                <img src={gglimg} alt="Google" />
                            </a>
                        </div>
                        <span>or use your account</span>

                        <input
                            className="signup-input"
                            type="email"
                            placeholder="Email"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            required
                        />
                        <input
                            className="signup-input"
                            type={showPassword ? "text" : "password"}
                            placeholder="Password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            required
                        />
                        <span className="auth-eye-icon" onClick={() => setShowPassword(!showPassword)}>
                            {showPassword ? <FaEyeSlash /> : <FaEye />}
                        </span>

                        {error && <p className="error-message">{error}</p>}

                        <div style={{ display: "flex", alignItems: "center", marginTop: "10px" }}>
                            <label className="ios-checkbox green">
                                <input type="checkbox" />
                                <div className="checkbox-wrapper">
                                    <div className="checkbox-bg"></div>
                                    <svg fill="none" viewBox="0 0 24 24" className="checkbox-icon">
                                        <path
                                            strokeLinejoin="round"
                                            strokeLinecap="round"
                                            strokeWidth="3"
                                            stroke="currentColor"
                                            d="M4 12L10 18L20 6"
                                            className="check-path"
                                        />
                                    </svg>
                                </div>
                            </label>
                            <span style={{ fontSize: "14px", marginLeft: "5px" }}>Remember me</span>
                            <a href="#" className="signup-a" onClick={handleForgotPassword} style={{ marginLeft: "190px" }}>
                                Forgot your password?
                            </a>
                        </div>

                        <button type="submit" className="signup-button">
                            Sign In
                        </button>
                        <div>
                            <span style={{ fontSize: "14px" }}>
                                Don't have an account? <a href="/signup">Sign Up</a>
                            </span>
                        </div>
                    </form>
                </div>

                <div className="signup-form-container signup-sign-in-container">
                    <form className="signup-form">
                        <img src={logo} alt="Logo" className="signup-logo" />
                        <p className="signup-p">
                            Thank you for joining us on a mission to reduce food waste and make a positive impact.
                        </p>
                    </form>
                </div>

                <div className="signup-overlay-container">
                    <div className="signup-overlay">
                        <div className="signup-overlay-panel signup-overlay-left">
                            <img src={loginImg} alt="Login" className="signup-logo" />
                            <button className="signbtn" onClick={togglePanel}>
                                <FontAwesomeIcon icon={faArrowLeft} />
                            </button>
                        </div>
                        <div className="signup-overlay-panel signup-overlay-right">
                            <h1>Welcome Back!</h1>
                            <p>To keep connected with us please login with your personal info</p>
                            <button className="signbtn" onClick={togglePanel}>
                                Sign In
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Login;
</file>

<file path="sustainafood-frontend/src/pages/Not-Found.jsx">
import { Link } from "react-router-dom"
import Navbar from "../components/Navbar" // Import the Navbar component
import Footer from "../components/Footer" // Import the Footer component
import "../assets/styles/Notfound.css" // Import the styles for the NotFound page

const NotFound = () => {
    return (
      <div className="notfound-container">
  
        <div className="notfound-content">
          <div className="notfound-card">
            <div className="notfound-icon-container">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="notfound-icon"
              >
                <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path>
                <path d="M12 8v4"></path>
                <path d="M12 16h.01"></path>
              </svg>
            </div>
  
            <h1 className="notfound-title">404</h1>
            <h2 className="notfound-subtitle">Page Not Found</h2>
  
            <p className="notfound-message">
              We couldn't find the page you're looking for. The page might have been moved, deleted, or never existed.
            </p>
  
            <div className="notfound-actions">
              <Link to="/" className="notfound-btn notfound-btn-primary">
                Return Home
              </Link>
              <Link to="/contact" className="notfound-btn notfound-btn-secondary">
                Contact Support
              </Link>
            </div>
          </div>
        </div>
  
      </div>
    )
  }
  
  export default NotFound
</file>

<file path="sustainafood-frontend/src/pages/ResetCode.jsx">
import React, { useState } from "react";
import { useNavigate } from 'react-router-dom';
import '../assets/styles/ForgetPass.css';

const ResetCode = () => {
  const [resetCode, setResetCode] = useState("");
  const navigate = useNavigate();
  const searchParams = new URLSearchParams(window.location.search);
  const email = searchParams.get('email');

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch('http://localhost:3000/users/reset-code', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, resetCode }),
      });

      const data = await response.json();
      if (response.ok) {
        alert('Reset code verified');
        navigate(`/reset-password?email=${encodeURIComponent(email)}`);
      } else {
        alert(data.error || 'Invalid reset code');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error verifying reset code');
    }
  };

  return (
    <div className="forget-pass-container">
      <div className="forget-pass-card">
        <h2>Enter Reset Code</h2>
        <p>Check your email for the reset code and enter it below.</p>
        <form onSubmit={handleSubmit}>
          <input
            type="text"
            placeholder="Enter the reset code"
            value={resetCode}
            onChange={(e) => setResetCode(e.target.value)}
            required
          />
          <button type="submit">Verify Code</button>
        </form>
      </div>
    </div>
  );
};

export default ResetCode;
</file>

<file path="sustainafood-frontend/src/pages/ResetPassword.jsx">
import React, { useState } from "react";
import { useNavigate } from 'react-router-dom';
import '../assets/styles/ForgetPass.css';

const ResetPassword = () => {
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const navigate = useNavigate();
  const searchParams = new URLSearchParams(window.location.search);
  const email = searchParams.get('email');

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (newPassword !== confirmPassword) {
      alert("Passwords do not match!");
      return;
    }

    try {
      const response = await fetch('http://localhost:3000/users/reset-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, newPassword }),
      });

      const data = await response.json();
      if (response.ok) {
        alert('Password reset successfully');
        navigate('/login');
      } else {
        alert(data.error || 'Error resetting password');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error resetting password');
    }
  };

  return (
    <div className="forget-pass-container">
      <div className="forget-pass-card">
        <h2>Reset Your Password</h2>
        <form onSubmit={handleSubmit}>
          <input
            type="password"
            placeholder="New Password"
            value={newPassword}
            onChange={(e) => setNewPassword(e.target.value)}
            required
          />
          <input
            type="password"
            placeholder="Confirm Password"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            required
          />
          <button type="submit">Reset Password</button>
        </form>
      </div>
    </div>
  );
};

export default ResetPassword;
</file>

<file path="sustainafood-frontend/src/pages/style.css">
@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;700&display=swap");

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Poppins", sans-serif;
}

a {
  text-decoration: none;
}

.header {
  position: fixed;
  height: 80px;
  width: 100%;
  z-index: 100;
  padding: 0 20px;
}

.nav {
  max-width: 1100px;
  width: 100%;
  margin: 0 auto;
}

.nav, .nav_item {
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
}

.nav_logo, .nav_link, .button {
  color: #fff;
}

.nav_logo {
  font-size: 25px;
}

.nav_item {
  column-gap: 25px;
}

.nav_link:hover {
  color: #d9d9d9;
}

.button {
  padding: 6px 24px;
  border: 2px solid #fff;
  background: transparent;
  border-radius: 6px;
  cursor: pointer;
}

.button:active {
  transform: scale(0.98);
}

/* Home */
.home {
  position: relative;
  height: 100vh;
  width: 100%;
  background-image: url("website-forms-bg.jpg");
  background-size: cover;
  background-position: center;
}

.home::before {
  content: "";
  position: absolute;
  height: 100%;
  width: 100%;
  background-color: rgba(0, 0, 0, 0.6);
  z-index: 100;
  opacity: 0;
  pointer-events: none;
  transition: all 0.5s ease-out;
}

.home.show::before {
  opacity: 1;
  pointer-events: auto;
}

/* Form Styling */
.form_container {
  position: fixed;
  max-width: 320px;
  width: 100%;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) scale(1.2);
  z-index: 101;
  background: #fff;
  padding: 25px;
  border-radius: 12px;
  box-shadow: rgba(0, 0, 0, 0.1);
  opacity: 0;
  pointer-events: none;
  transition: all 0.4s ease-out;
}

.home.show .form_container {
  opacity: 1;
  pointer-events: auto;
  transform: translate(-50%, -50%) scale(1);
}

.signup_form {
  display: none;
}

.form_container.active .signup_form {
  display: block;
}

.form_container.active .login_form {
  display: none;
}

.form_close {
  position: absolute;
  top: 10px;
  right: 20px;
  color: #0b0217;
  font-size: 22px;
  opacity: 0.7;
  cursor: pointer;
}

.form_container h2 {
  font-size: 22px;
  color: #0b0217;
  text-align: center;
}

.input_box {
  position: relative;
  margin-top: 30px;
  width: 100%;
  height: 40px;
}

.input_box input {
  height: 100%;
  width: 100%;
  border: none;
  outline: none;
  padding: 0 30px;
  color: #333;
  transition: all 0.2s ease;
  border-bottom: 1.5px solid #aaaaaa;
}

.input_box input:focus {
  border-color: #7d2ae8;
}

.input_box i {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  font-size: 20px;
  color: #707070;
}

.input_box i.email, .input_box i.password {
  left: 0;
}

.input_box input:focus ~ i.email,
.input_box input:focus ~ i.password {
  color: #7d2ae8;
}

.input_box i.pw_hide {
  right: 0;
  font-size: 18px;
  cursor: pointer;
}

.option_field {
  margin-top: 14px;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.form_container a {
  color: #7d2ae8;
  font-size: 12px;
}

.form_container a:hover {
  text-decoration: underline;
}

.checkbox {
  display: flex;
  column-gap: 8px;
  white-space: nowrap;
}

.checkbox input {
  accent-color: #7d2ae8;
}

.checkbox label {
  font-size: 12px;
  cursor: pointer;
  user-select: none;
  color: #0b0217;
}

.form_container .button {
  background: #7d2ae8;
  margin-top: 30px;
  width: 100%;
  padding: 10px 0;
  border-radius: 10px;
}

.login_signup {
  font-size: 12px;
  text-align: center;
  margin-top: 15px;
}
</file>

<file path="sustainafood-frontend/src/pages/TwoFAVerification.jsx">
import React, { useState } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { useAuth } from "../contexts/AuthContext";
import { validate2FACode } from "../api/userService";

const TwoFAVerification = () => {
    const [code, setCode] = useState("");
    const navigate = useNavigate();
    const location = useLocation();
    const email = new URLSearchParams(location.search).get("email");
    const { login } = useAuth();

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const response = await validate2FACode({ email, twoFACode: code.toString() });
            console.log("API Response:", response);
            if (response.status === 200) {
                const { token, role, id } = response.data;
                if (!token || !role || !id) {
                    throw new Error("Missing token, role, or id in response");
                }
                login({ id, role, email }, token, false);
                navigate("/profile");
            } else {
                throw new Error(`Unexpected response status: ${response.status}`);
            }
        } catch (error) {
            console.error("Error verifying 2FA code:", {
                message: error.message,
                response: error.response ? error.response.data : "No response",
                status: error.response ? error.response.status : "No status",
                request: error.request ? error.request : "No request",
            });
            if (error.response && error.response.status === 500) {
                alert("Server error occurred. Please try again later or contact support.");
            } else if (error.response) {
                alert(error.response.data.error || "Invalid 2FA code");
            } else {
                alert("An unexpected error occurred. Check the console for details.");
            }
        }
    };

    return (
        <div className="forget-pass-container">
            <div className="forget-pass-card">
                <h2>2FA Verification</h2>
                <p>Check your phone for the 2FA code and enter it below.</p>
                <form onSubmit={handleSubmit}>
                    <input
                        type="text"
                        placeholder="Enter the 2FA code"
                        value={code}
                        onChange={(e) => setCode(e.target.value)}
                        required
                    />
                    <button type="submit">Verify Code</button>
                </form>
            </div>
        </div>
    );
};

export default TwoFAVerification;
</file>

<file path="sustainafood-frontend/src/PrivateRoute.jsx">
import React from "react";
import { Navigate, Outlet } from "react-router-dom";
import { useAuth } from "./contexts/AuthContext";

const PrivateRoute = ({ roles }) => {
  const { user, token } = useAuth();

  //console.log("User Role:", user?.role || "No user logged in");
  //console.log("Required Roles:", roles);

  // Redirect to login if no JWT token
  if (!token) {
    return <Navigate to="/login" replace />;
  }

  // If roles are required, check if the single user.role is included in that roles array
  if (roles?.length > 0 && !roles.includes(user?.role)) {
    console.warn("Unauthorized access: Redirecting...");
    return <Navigate to="*" replace />;
  }

  return <Outlet />;
};

export default PrivateRoute;
</file>

<file path="sustainafood-frontend/vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})
</file>

<file path="sustainafood-backend/config/database.json">
{
    "url":"mongodb://db:27017/sustainafood"
}
</file>

<file path="sustainafood-backend/controllers/requestNeedController.js">
const RequestNeed = require('../models/RequestNeed');
const Product = require('../models/Product');
const Counter = require('../models/Counter');
const Donation = require('../models/Donation');
const DonationTransaction = require('../models/DonationTransaction');
const nodemailer = require('nodemailer');
const path = require('path');
const mongoose = require('mongoose');
const User = require('../models/User');
const multer = require('multer');
const Meals = require('../models/Meals');
const fs = require('fs');
const upload = multer().none();

const badWords = [
  'damn',
  'hell',
  'idiot',
  'stupid',
  'fuck',
  't**t',
];

const containsBadWords = (text) => {
  if (!text || typeof text !== 'string') return false;
  const lowerText = text.toLowerCase();
  return badWords.some((word) => lowerText.includes(word));
};

const checkBadWords = (text) => {
  if (!text || typeof text !== 'string') return null;
  const lowerText = text.toLowerCase();
  const badWord = badWords.find((word) => lowerText.includes(word));
  return badWord ? { containsBadWords: true, badWord } : null;
};

// ✅ Get all requests
async function getAllRequests(req, res) {
  try {
    const requests = await RequestNeed.find({ isaPost: true , status:{ $ne: 'fulfilled' } })
      .populate('recipient')
      .populate('requestedProducts.product')
      .populate('requestedMeals.meal');
    res.status(200).json(requests);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// ✅ Get all requests for backoffice
async function getAllRequestsbackoffice(req, res) {
  try {
    const requests = await RequestNeed.find()
      .populate('recipient', 'name role photo')
      .populate('requestedProducts.product', 'name')
      .populate('requestedMeals.meal', 'mealName');
    res.status(200).json(requests);
  } catch (error) {
    console.error('Error fetching all requests:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// ✅ Get request by ID
async function getRequestById(req, res) {
  try {
    const { id } = req.params;
    const request = await RequestNeed.findById(id)
      .populate('recipient')
      .populate('requestedProducts.product')
      .populate('requestedMeals.meal');

    if (!request) {
      return res.status(404).json({ message: 'Request not found' });
    }

    res.status(200).json(request);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// ✅ Get requests by Recipient ID
async function getRequestsByRecipientId(req, res) {
  try {
    const { recipientId } = req.params;
    const requests = await RequestNeed.find({ recipient: recipientId, isaPost: true })
      .populate('requestedProducts.product')
      .populate('requestedMeals.meal');

    if (!requests.length) {
      return res.status(404).json({ message: 'No requests found for this recipient' });
    }

    res.status(200).json(requests);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// ✅ Get requests by Status
async function getRequestsByStatus(req, res) {
  try {
    const { status } = req.params;
    const requests = await RequestNeed.find({ status })
      .populate('recipient')
      .populate('requestedProducts.product')
      .populate('requestedMeals.meal');

    if (!requests.length) {
      return res.status(404).json({ message: 'No requests found with this status' });
    }

    res.status(200).json(requests);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// ✅ Create a new request
async function createRequest(req, res) {
    console.log('Request body received:', req.body);
  
    try {
      let {
        title,
        location,
        address, // Add address to request body
        expirationDate,
        description,
        category,
        recipient,
        requestedProducts,
        requestedMeals,
        status,
        linkedDonation,
        numberOfMeals,
      } = req.body;
  
      // Parse location from JSON string
      let parsedLocation;
      try {
        parsedLocation = JSON.parse(location);
        if (
          parsedLocation.type !== 'Point' ||
          !Array.isArray(parsedLocation.coordinates) ||
          parsedLocation.coordinates.length !== 2 ||
          typeof parsedLocation.coordinates[0] !== 'number' ||
          typeof parsedLocation.coordinates[1] !== 'number'
        ) {
          throw new Error('Invalid location format: must be a GeoJSON Point with [longitude, latitude]');
        }
      } catch (error) {
        return res.status(400).json({
          message: 'Invalid location format: must be a valid GeoJSON string',
          error: error.message,
        });
      }
  
      // Validate address if provided
      if (address && (typeof address !== 'string' || address.trim() === '')) {
        return res.status(400).json({ message: 'Address must be a non-empty string' });
      }
  
      // Vérification des "bad words" (skip location and address)
      const badWordChecks = [];
      const titleCheck = checkBadWords(title);
      if (titleCheck) badWordChecks.push({ field: 'title', ...titleCheck });
      const descriptionCheck = checkBadWords(description);
      if (descriptionCheck) badWordChecks.push({ field: 'description', ...descriptionCheck });
  
      for (const product of requestedProducts || []) {
        const nameCheck = checkBadWords(product.name);
        if (nameCheck) badWordChecks.push({ field: `product name "${product.name}"`, ...nameCheck });
        const descCheck = checkBadWords(product.productDescription);
        if (descCheck) badWordChecks.push({ field: `product description for "${product.name}"`, ...descCheck });
      }
      for (const meal of requestedMeals || []) {
        const nameCheck = checkBadWords(meal.mealName);
        if (nameCheck) badWordChecks.push({ field: `meal name "${meal.mealName}"`, ...nameCheck });
        const descCheck = checkBadWords(meal.mealDescription);
        if (descCheck) badWordChecks.push({ field: `meal description for "${meal.mealName}"`, ...descCheck });
      }
  
      if (badWordChecks.length > 0) {
        return res.status(400).json({
          message: 'Inappropriate language detected in submission',
          badWordsDetected: badWordChecks,
        });
      }
  
      // Ensure requestedProducts is parsed correctly
      if (typeof requestedProducts === 'string') {
        try {
          requestedProducts = JSON.parse(requestedProducts);
        } catch (error) {
          return res.status(400).json({ message: 'Invalid requestedProducts format' });
        }
      }
      if (!Array.isArray(requestedProducts)) {
        requestedProducts = [];
      }
  
      // Ensure requestedMeals is parsed correctly
      if (typeof requestedMeals === 'string') {
        try {
          requestedMeals = JSON.parse(requestedMeals);
        } catch (error) {
          return res.status(400).json({ message: 'Invalid requestedMeals format' });
        }
      }
      if (!Array.isArray(requestedMeals)) {
        requestedMeals = [];
      }
  
      // Validate and filter products
      const validProducts = requestedProducts.map((product, index) => {
        if (!product.name || typeof product.name !== 'string' || !product.name.trim()) {
          throw new Error(`Product at index ${index} is missing a valid name`);
        }
        if (!product.productType || typeof product.productType !== 'string') {
          throw new Error(`Product at index ${index} is missing a valid productType`);
        }
        if (!product.productDescription || typeof product.productDescription !== 'string' || !product.productDescription.trim()) {
          throw new Error(`Product at index ${index} is missing a valid productDescription`);
        }
        const weightPerUnit = parseFloat(product.weightPerUnit);
        if (isNaN(weightPerUnit) || weightPerUnit <= 0) {
          throw new Error(`Product at index ${index} has an invalid weightPerUnit: ${product.weightPerUnit}`);
        }
        const totalQuantity = parseInt(product.totalQuantity);
        if (isNaN(totalQuantity) || totalQuantity <= 0) {
          throw new Error(`Product at index ${index} has an invalid totalQuantity: ${product.totalQuantity}`);
        }
        if (!product.status || typeof product.status !== 'string') {
          throw new Error(`Product at index ${index} is missing a valid status`);
        }
        return product;
      });
  
      // Validate and filter meals
      const validMeals = requestedMeals.map((meal, index) => {
        if (!meal.mealName || typeof meal.mealName !== 'string' || !meal.mealName.trim()) {
          throw new Error(`Meal at index ${index} is missing a valid mealName`);
        }
        if (!meal.mealDescription || typeof meal.mealDescription !== 'string' || !meal.mealDescription.trim()) {
          throw new Error(`Meal at index ${index} is missing a valid mealDescription`);
        }
        if (!meal.mealType || typeof meal.mealType !== 'string') {
          throw new Error(`Meal at index ${index} is missing a valid mealType`);
        }
        const quantity = parseInt(meal.quantity);
        if (isNaN(quantity) || quantity <= 0) {
          throw new Error(`Meal at index ${index} has an invalid quantity: ${meal.quantity}`);
        }
        return meal;
      });
  
    
  
      // Validate numberOfMeals for prepared meals
      let totalMeals = 0;
      if (category === 'prepared_meals') {
        const parsedNumberOfMeals = parseInt(numberOfMeals, 10);
        if (isNaN(parsedNumberOfMeals) || parsedNumberOfMeals <= 0) {
          return res.status(400).json({ message: 'numberOfMeals must be a valid positive integer for prepared meals' });
        }
        totalMeals = parsedNumberOfMeals;
        const calculatedMeals = validMeals.reduce((sum, meal) => sum + meal.quantity, 0);
      }
  
      // Create the request without products or meals first
      const newRequest = new RequestNeed({
        title,
        location: parsedLocation,
        address, // Add address to the new request
        expirationDate: new Date(expirationDate),
        description,
        category,
        recipient,
        requestedProducts: [],
        requestedMeals: [],
        status: status || 'pending',
        linkedDonation: linkedDonation || [],
        numberOfMeals: category === 'prepared_meals' ? totalMeals : undefined,
        isaPost: true,
      });
  
      await newRequest.save();
      const requestId = newRequest._id;
  
      // Handle products for packaged_products
      if (category === 'packaged_products' && validProducts.length > 0) {
        const counter = await Counter.findOneAndUpdate(
          { _id: 'ProductId' },
          { $inc: { seq: validProducts.length } },
          { new: true, upsert: true }
        );
  
        const startId = counter.seq - validProducts.length + 1;
  
        const productDocs = validProducts.map((product, index) => ({
          id: startId + index,
          name: product.name,
          productType: product.productType,
          productDescription: product.productDescription,
          weightPerUnit: product.weightPerUnit,
          weightUnit: product.weightUnit || 'kg',
          weightUnitTotale: product.weightUnitTotale || 'kg',
          totalQuantity: product.totalQuantity,
          image: product.image || '',
          status: product.status,
          request: requestId,
        }));
  
        const createdProducts = await Product.insertMany(productDocs);
        newRequest.requestedProducts = createdProducts.map((product) => ({
          product: product._id,
          quantity: parseInt(product.totalQuantity),
        }));
      }
  
      // Handle meals for prepared_meals
      if (category === 'prepared_meals' && validMeals.length > 0) {
        const counter = await Counter.findOneAndUpdate(
          { _id: 'MealId' },
          { $inc: { seq: validMeals.length } },
          { new: true, upsert: true }
        );
  
        const startId = counter.seq - validProducts.length + 1;
  
        const mealDocs = validMeals.map((meal, index) => ({
          id: startId + index,
          mealName: meal.mealName,
          mealDescription: meal.mealDescription,
          mealType: meal.mealType,
          quantity: meal.quantity,
          request: requestId,
        }));
  
        const createdMeals = await Meals.insertMany(mealDocs);
        newRequest.requestedMeals = createdMeals.map((meal) => ({
          meal: meal._id,
          quantity: parseInt(meal.quantity),
        }));
      }
  
      await newRequest.save();
  
      const populatedRequest = await RequestNeed.findById(newRequest._id)
        .populate('recipient')
        .populate('requestedProducts.product')
        .populate('requestedMeals.meal');
  
      console.log('Saved request:', populatedRequest);
      res.status(201).json({ message: 'Request created successfully', newRequest: populatedRequest });
    } catch (error) {
      console.error('Request Creation Error:', error);
      res.status(500).json({
        message: 'Failed to create request',
        error: error.message,
      });
    }
  }
// ✅ Update a request by ID
async function updateRequest(req, res) {
    try {
      const { id } = req.params;
      const { requestedProducts, requestedMeals, numberOfMeals, mealName, mealDescription, mealType, location, address, ...requestData } = req.body;
  
      if (!id || !mongoose.Types.ObjectId.isValid(id)) {
        return res.status(400).json({ message: 'Valid Request ID is required' });
      }
  
      // Parse location if provided
      let parsedLocation;
      if (location) {
        try {
          parsedLocation = JSON.parse(location);
          if (
            parsedLocation.type !== 'Point' ||
            !Array.isArray(parsedLocation.coordinates) ||
            parsedLocation.coordinates.length !== 2 ||
            typeof parsedLocation.coordinates[0] !== 'number' ||
            typeof parsedLocation.coordinates[1] !== 'number'
          ) {
            throw new Error('Invalid location format: must be a GeoJSON Point with [longitude, latitude]');
          }
        } catch (error) {
          return res.status(400).json({
            message: 'Invalid location format: must be a valid GeoJSON string',
            error: error.message,
          });
        }
      }
  
      // Validate address if provided
      if (address && (typeof address !== 'string' || address.trim() === '')) {
        return res.status(400).json({ message: 'Address must be a non-empty string' });
      }
  
      // Vérification des "bad words" (skip location and address)
      const badWordChecks = [];
      if (requestData.title) {
        const titleCheck = checkBadWords(requestData.title);
        if (titleCheck) badWordChecks.push({ field: 'title', ...titleCheck });
      }
      if (requestData.description) {
        const descriptionCheck = checkBadWords(requestData.description);
        if (descriptionCheck) badWordChecks.push({ field: 'description', ...descriptionCheck });
      }
      for (const product of requestedProducts || []) {
        if (product.name) {
          const nameCheck = checkBadWords(product.name);
          if (nameCheck) badWordChecks.push({ field: `product name "${product.name}"`, ...nameCheck });
        }
        if (product.productDescription) {
          const descCheck = checkBadWords(product.productDescription);
          if (descCheck) badWordChecks.push({ field: `product description for "${product.name}"`, ...descCheck });
        }
      }
      if (mealName) {
        const nameCheck = checkBadWords(mealName);
        if (nameCheck) badWordChecks.push({ field: 'meal name', ...nameCheck });
      }
      if (mealDescription) {
        const descCheck = checkBadWords(mealDescription);
        if (descCheck) badWordChecks.push({ field: 'meal description', ...descCheck });
      }
  
      if (badWordChecks.length > 0) {
        return res.status(400).json({
          message: 'Inappropriate language detected in submission',
          badWordsDetected: badWordChecks,
        });
      }
  
      // Validate required fields
      if (requestData.title && (typeof requestData.title !== 'string' || requestData.title.trim() === '')) {
        return res.status(400).json({ message: 'Title must be a non-empty string' });
      }
      if (requestData.category && !['packaged_products', 'prepared_meals'].includes(requestData.category)) {
        return res.status(400).json({ message: 'Category must be either "packaged_products" or "prepared_meals"' });
      }
      if (requestData.expirationDate && isNaN(new Date(requestData.expirationDate).getTime())) {
        return res.status(400).json({ message: 'Expiration Date must be a valid date' });
      }
      if (requestData.status && !['available', 'pending', 'reserved', 'fulfilled', 'partially_fulfilled', 'rejected'].includes(requestData.status)) {
        return res.status(400).json({ message: 'Status must be one of: available, pending, reserved, fulfilled, partially_fulfilled, rejected' });
      }
  
      const existingRequest = await RequestNeed.findById(id);
      if (!existingRequest) {
        return res.status(404).json({ message: 'Request not found' });
      }
  
      let updatedProducts = existingRequest.requestedProducts;
      if (requestData.category === 'packaged_products' && requestedProducts) {
        if (!Array.isArray(requestedProducts)) {
          return res.status(400).json({ message: 'requestedProducts must be an array' });
        }
  
        updatedProducts = [];
        for (const item of requestedProducts) {
          if (!item.product || typeof item.product !== 'object') {
            return res.status(400).json({ message: 'Each requested product must have a product object' });
          }
          if (typeof item.quantity !== 'number' || item.quantity < 0) {
            return res.status(400).json({ message: `Invalid quantity for product: ${item.quantity}` });
          }
  
          const { productType, productDescription, weightPerUnit, weightUnit, status } = item.product;
  
          if (!productType || typeof productType !== 'string' || productType.trim() === '') {
            return res.status(400).json({ message: 'productType is required for each product' });
          }
          if (!productDescription || typeof productDescription !== 'string' || productDescription.trim() === '') {
            return res.status(400).json({ message: 'productDescription is required for each product' });
          }
          if (typeof weightPerUnit !== 'number' || weightPerUnit <= 0) {
            return res.status(400).json({ message: 'weightPerUnit must be a positive number for each product' });
          }
          if (!weightUnit || !['kg', 'g', 'lb', 'oz'].includes(weightUnit)) {
            return res.status(400).json({ message: 'weightUnit must be one of: kg, g, lb, oz' });
          }
          if (status && !['available', 'pending', 'reserved'].includes(status)) {
            return res.status(400).json({ message: 'Product status must be one of: available, pending, reserved' });
          }
  
          let productDoc = await Product.findOne({
            productType,
            productDescription,
          });
  
          if (!productDoc) {
            const counter = await Counter.findOneAndUpdate(
              { _id: 'ProductId' },
              { $inc: { seq: 1 } },
              { new: true, upsert: true }
            );
  
            productDoc = new Product({
              id: counter.seq.toString(),
              name: productType,
              productType,
              productDescription,
              weightPerUnit: Number(weightPerUnit),
              weightUnit,
              weightUnitTotale: weightUnit,
              totalQuantity: Number(item.quantity),
              status: status || 'available',
              request: id,
            });
            await productDoc.save();
          } else {
            productDoc.totalQuantity = (productDoc.totalQuantity || 0) + Number(item.quantity);
            await productDoc.save();
          }
  
          updatedProducts.push({
            product: productDoc._id,
            quantity: Number(item.quantity),
          });
        }
      }
  
      let updatedMeals = existingRequest.requestedMeals;
      if (requestData.category === 'prepared_meals' && requestedMeals) {
        if (!Array.isArray(requestedMeals)) {
          return res.status(400).json({ message: 'requestedMeals must be an array' });
        }
  
        updatedMeals = [];
        for (const meal of requestedMeals) {
          if (!meal.mealName || typeof meal.mealName !== 'string' || meal.mealName.trim() === '') {
            return res.status(400).json({ message: 'Each meal must have a valid mealName' });
          }
          if (!meal.mealDescription || typeof meal.mealDescription !== 'string' || meal.mealDescription.trim() === '') {
            return res.status(400).json({ message: 'Each meal must have a valid mealDescription' });
          }
          if (!meal.mealType || typeof meal.mealType !== 'string') {
            return res.status(400).json({ message: 'Each meal must have a valid mealType' });
          }
          if (typeof meal.quantity !== 'number' || meal.quantity < 1) {
            return res.status(400).json({ message: `Invalid quantity for meal ${meal.mealName}: ${meal.quantity}` });
          }
  
          let mealDoc = await Meals.findOne({
            mealName: meal.mealName,
            mealType: meal.mealType,
          });
  
          if (!mealDoc) {
            const counter = await Counter.findOneAndUpdate(
              { _id: 'MealId' },
              { $inc: { seq: 1 } },
              { new: true, upsert: true }
            );
  
            mealDoc = new Meals({
              id: counter.seq.toString(),
              mealName: meal.mealName,
              mealDescription: meal.mealDescription,
              mealType: meal.mealType,
              quantity: Number(meal.quantity),
              request: id,
            });
            await mealDoc.save();
          } else {
            mealDoc.quantity = (mealDoc.quantity || 0) + Number(meal.quantity);
            await mealDoc.save();
          }
  
          updatedMeals.push({
            meal: mealDoc._id,
            quantity: Number(meal.quantity),
          });
        }
  
        // Validate numberOfMeals if provided
        if (numberOfMeals !== undefined) {
          if (typeof numberOfMeals !== 'number' || numberOfMeals <= 0) {
            return res.status(400).json({ message: 'numberOfMeals must be a positive number for prepared_meals category' });
          }
          const totalMeals = updatedMeals.reduce((sum, m) => sum + m.quantity, 0);
          if (totalMeals !== numberOfMeals) {
            return res.status(400).json({
              message: `Total quantity of meals (${totalMeals}) must match numberOfMeals (${numberOfMeals})`,
            });
          }
        }
      }
  
      const updateData = { ...requestData };
      if (parsedLocation) {
        updateData.location = parsedLocation;
      }
      if (address !== undefined) {
        updateData.address = address;
      }
      if (requestData.category === 'packaged_products') {
        updateData.requestedProducts = updatedProducts;
        updateData.requestedMeals = [];
        updateData.numberOfMeals = undefined;
        updateData.mealName = undefined;
        updateData.mealDescription = undefined;
        updateData.mealType = undefined;
      } else if (requestData.category === 'prepared_meals') {
        updateData.requestedMeals = updatedMeals;
        updateData.requestedProducts = [];
        updateData.numberOfMeals = numberOfMeals !== undefined ? numberOfMeals : existingRequest.numberOfMeals;
        updateData.mealName = mealName !== undefined ? mealName : existingRequest.mealName;
        updateData.mealDescription = mealDescription !== undefined ? mealDescription : existingRequest.mealDescription;
        updateData.mealType = mealType !== undefined ? mealType : existingRequest.mealType;
      }
  
      const updatedRequest = await RequestNeed.findByIdAndUpdate(id, updateData, { new: true })
        .populate('recipient')
        .populate('requestedProducts.product')
        .populate('requestedMeals.meal');
  
      if (!updatedRequest) {
        return res.status(404).json({ message: 'Request not found' });
      }
  
      res.status(200).json({ message: 'Request updated successfully', updatedRequest });
    } catch (error) {
      console.error('Update Request Error:', error);
      res.status(500).json({ message: 'Failed to update request', error: error.message });
    }
  }

// ✅ Delete a request by ID
async function deleteRequest(req, res) {
  try {
    const { id } = req.params;
    const deletedRequest = await RequestNeed.findByIdAndDelete(id);

    if (!deletedRequest) {
      return res.status(404).json({ message: 'Request not found' });
    }

    // Delete associated products and meals
    if (deletedRequest.requestedProducts.length > 0) {
      const productIds = deletedRequest.requestedProducts.map((p) => p.product);
      await Product.deleteMany({ _id: { $in: productIds } });
    }
    if (deletedRequest.requestedMeals.length > 0) {
      const mealIds = deletedRequest.requestedMeals.map((m) => m.meal);
      await Meals.deleteMany({ _id: { $in: mealIds } });
    }

    res.status(200).json({ message: 'Request deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Failed to delete request', error: error.message });
  }
}

// ✅ Create request for existing donation
async function createRequestNeedForExistingDonation(req, res) {
  try {
    const { donationId } = req.params;
    const { recipientId, requestedProducts, requestedMeals, description, numberOfMeals, location, address } = req.body;

    // Validate input
    if (!donationId || !mongoose.Types.ObjectId.isValid(donationId)) {
      return res.status(400).json({ message: 'Invalid donation ID' });
    }
    if (!recipientId || !mongoose.Types.ObjectId.isValid(recipientId)) {
      return res.status(400).json({ message: 'Invalid recipient ID' });
    }

    // Fetch the donation and populate its products and meals
    const donation = await Donation.findById(donationId)
      .populate('products.product')
      .populate('meals.meal')
      .populate('donor');
    if (!donation) {
      return res.status(404).json({ message: 'Donation not found' });
    }

    if (new Date(donation.expirationDate) <= new Date()) {
      return res.status(400).json({ message: 'Donation has expired' });
    }

    // Fetch the recipient to validate their role
    const recipient = await User.findById(recipientId);
    if (!recipient) {
      return res.status(404).json({ message: 'Recipient not found' });
    }
    if (!['ong', 'student'].includes(recipient.role)) {
      return res.status(403).json({ message: 'Only users with role "ong" or "student" can create requests' });
    }

    // Determine the donation type (products or meals)
    const isMealDonation = donation.category === 'prepared_meals';
    let validatedProducts = [];
    let validatedMeals = [];
    let totalMeals = 0;

    if (isMealDonation) {
      if (!requestedMeals || !Array.isArray(requestedMeals)) {
        return res.status(400).json({ message: 'requestedMeals must be an array for meal donations' });
      }

      const donationMealMap = new Map(
        donation.meals.map((mealEntry) => [mealEntry.meal._id.toString(), { quantity: mealEntry.quantity, meal: mealEntry.meal }])
      );

      for (const { meal: mealId, quantity } of requestedMeals) {
        if (!mongoose.Types.ObjectId.isValid(mealId)) {
          return res.status(400).json({ message: `Invalid meal ID: ${mealId}` });
        }
        if (!donationMealMap.has(mealId)) {
          return res.status(400).json({ message: `Meal ${mealId} is not part of this donation` });
        }

        const availableQuantity = donationMealMap.get(mealId).quantity;
        if (!Number.isInteger(quantity) || quantity <= 0) {
          return res.status(400).json({ message: `Quantity for meal ${mealId} must be a positive integer` });
        }
        if (quantity > availableQuantity) {
          return res.status(400).json({
            message: `Requested quantity (${quantity}) for meal ${mealId} exceeds available quantity (${availableQuantity})`,
          });
        }

        validatedMeals.push({ meal: mealId, quantity });
        totalMeals += quantity;
      }

      if (totalMeals !== numberOfMeals) {
        return res.status(400).json({
          message: `Total requested meals (${totalMeals}) do not match provided numberOfMeals (${numberOfMeals})`,
        });
      }
      if (totalMeals > donation.numberOfMeals) {
        return res.status(400).json({
          message: `Total requested meals (${totalMeals}) exceed available number of meals (${donation.numberOfMeals})`,
        });
      }
    } else {
      if (!requestedProducts || !Array.isArray(requestedProducts)) {
        return res.status(400).json({ message: 'requestedProducts must be an array for product donations' });
      }

      const donationProductMap = new Map(
        donation.products.map((p) => [p.product._id.toString(), { quantity: p.quantity, product: p.product }])
      );

      for (const { product: productId, quantity } of requestedProducts) {
        if (!mongoose.Types.ObjectId.isValid(productId)) {
          return res.status(400).json({ message: `Invalid product ID: ${productId}` });
        }
        if (!donationProductMap.has(productId)) {
          return res.status(400).json({ message: `Product ${productId} is not part of this donation` });
        }

        const availableQuantity = donationProductMap.get(productId).quantity;
        if (!Number.isInteger(quantity) || quantity <= 0) {
          return res.status(400).json({ message: `Quantity for product ${productId} must be a positive integer` });
        }
        if (quantity > availableQuantity) {
          return res.status(400).json({
            message: `Requested quantity (${quantity}) for product ${productId} exceeds available quantity (${availableQuantity})`,
          });
        }

        validatedProducts.push({ product: productId, quantity });
      }
    }

    // Create the new RequestNeed
    const newRequest = new RequestNeed({
      title: `Request for ${donation.title}`,
      location: location, // Use donation's GeoJSON location directly
      address:address,
      expirationDate: donation.expirationDate,
      description: description || '',
      category: donation.category,
      recipient: recipientId,
      requestedProducts: isMealDonation ? [] : validatedProducts,
      requestedMeals: isMealDonation ? validatedMeals : [],
      status: 'pending',
      linkedDonation: [donationId],
      isaPost: false,
      numberOfMeals: isMealDonation ? totalMeals : undefined,
    });

    await newRequest.save();

    // Update the Donation to link the new request
    await Donation.findByIdAndUpdate(donationId, { $push: { linkedRequests: newRequest._id } }, { new: true });

    // Create a DonationTransaction with status 'pending'
    const counter = await Counter.findOneAndUpdate(
      { _id: 'DonationTransactionId' },
      { $inc: { seq: 1 } },
      { new: true, upsert: true }
    );
    if (!counter) throw new Error('Failed to increment DonationTransactionId counter');
    const transactionId = counter.seq;

    const transaction = new DonationTransaction({
      id: transactionId,
      donation: donationId,
      requestNeed: newRequest._id,
      donor: donation.donor,
      recipient: recipientId,
      allocatedProducts: validatedProducts,
      allocatedMeals: validatedMeals,
      status: 'pending',
    });

    await transaction.save();

    // Fetch the populated request for the response
    const populatedRequest = await RequestNeed.findById(newRequest._id)
      .populate('recipient')
      .populate('requestedProducts.product')
      .populate('requestedMeals.meal');

    // Send notification to donor (if email exists)
    if (donation.donor && donation.donor.email) {
      const transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS,
        },
        tls: {
          rejectUnauthorized: false,
        },
      });

      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: donation.donor.email,
        subject: `New Request for Your Donation: ${donation.title}`,
        text: `Dear ${donation.donor.name || 'Donor'},

A new request has been made for your donation titled "${donation.title}".

Request Details:
- Title: ${newRequest.title}
- Recipient: ${recipient.name || 'Unknown Recipient'}
${isMealDonation ? 
    `- Requested Meals: ${validatedMeals.map(item => {
        const mealEntry = donation.meals.find(m => m.meal._id.toString() === item.meal.toString());
        return `${mealEntry.meal.mealName} (Quantity: ${item.quantity})`;
    }).join(', ')} (Total: ${totalMeals})` :
    `- Requested Products: ${validatedProducts.map(item => {
        const productEntry = donation.products.find(p => p.product._id.toString() === item.product.toString());
        return `${productEntry.product.name} (Quantity: ${item.quantity})`;
    }).join(', ')}`
}
- Expiration Date: ${newRequest.expirationDate.toLocaleDateString()}

Please review the request in your dashboard and accept or reject it.

Best regards,
Your Platform Team`,
        html: `
          <div style="font-family: Arial, sans-serif; color: black;">
            <div style="text-align: center; margin-bottom: 20px;">
              <img src="cid:logo" alt="Platform Logo" style="max-width: 150px; height: auto;" />
            </div>
            <h2 style="color: #228b22;">New Request for Your Donation</h2>
            <p>Dear ${donation.donor.name || 'Donor'},</p>
            <p>A new request has been made for your donation titled "<strong>${donation.title}</strong>".</p>
            <h3>Request Details:</h3>
            <ul>
              <li><strong>Title:</strong> ${newRequest.title}</li>
              <li><strong>Recipient:</strong> ${recipient.name || 'Unknown Recipient'}</li>
              ${isMealDonation ? 
                  `<li><strong>Requested Meals:</strong> ${validatedMeals.map(item => {
                      const mealEntry = donation.meals.find(m => m.meal._id.toString() === item.meal.toString());
                      return `${mealEntry.meal.mealName} (Quantity: ${item.quantity})`;
                  }).join(', ')} (Total: ${totalMeals})</li>` :
                  `<li><strong>Requested Products:</strong> ${validatedProducts.map(item => {
                      const productEntry = donation.products.find(p => p.product._id.toString() === item.product.toString());
                      return `${productEntry.product.name} (Quantity: ${item.quantity})`;
                  }).join(', ')}</li>`
              }
              <li><strong>Expiration Date:</strong> ${newRequest.expirationDate.toLocaleDateString()}</li>
            </ul>
            <p>Please review the request in your dashboard and accept or reject it.</p>
            <p style="margin-top: 20px;">Best regards,<br>Your Platform Team</p>
          </div>
        `,
        attachments: [
          {
            filename: 'logo.png',
            path: path.join(__dirname, '../Uploads/logo.png'),
            cid: 'logo',
          },
        ],
      };

      await transporter.sendMail(mailOptions);
      console.log(`Email sent to ${donation.donor.email}`);
    }

    res.status(201).json({
      message: 'Request created successfully for the donation',
      request: populatedRequest,
      transactionId: transaction._id,
    });
  } catch (error) {
    console.error('Create Request Error:', error);
    res.status(500).json({
      message: 'Failed to create request for the donation',
      error: error.message,
    });
  }
}

// ✅ Add donation to request
async function addDonationToRequest(req, res) {
  try {
    const { requestId } = req.params;
    const { products, meals, donor, expirationDate, numberOfMeals ,address , location} = req.body;

    // Input Validation
    if (!requestId || !mongoose.Types.ObjectId.isValid(requestId)) {
      return res.status(400).json({ message: 'Valid Request ID is required' });
    }

    if (!donor || !mongoose.Types.ObjectId.isValid(donor)) {
      return res.status(400).json({ message: 'Valid Donor ID is required' });
    }

    // Fetch the request with populated fields
    const request = await RequestNeed.findById(requestId)
      .populate('requestedProducts.product')
      .populate('requestedMeals.meal')
      .populate('recipient');
    if (!request) {
      return res.status(404).json({ message: 'Request not found' });
    }

    // Validate based on category
    let donationProducts = [];
    let donationMeals = [];
    if (request.category === 'packaged_products') {
      if (!products || !Array.isArray(products) || products.length === 0) {
        return res.status(400).json({ message: 'Products array is required for packaged_products category' });
      }

      const productMap = new Map(
        request.requestedProducts.map((p) => [p.product?._id.toString(), p.quantity])
      );

      donationProducts = products.map(({ product, quantity }) => {
        if (!product || !mongoose.Types.ObjectId.isValid(product)) {
          throw new Error(`Invalid product ID: ${product}`);
        }
        if (!productMap.has(product)) {
          throw new Error(`Product ${product} not found in request`);
        }
        const maxQty = productMap.get(product);
        if (typeof quantity !== 'number' || quantity < 0) {
          throw new Error(`Invalid quantity for product ${product}: ${quantity}`);
        }
        return {
          product,
          quantity: Math.min(quantity, maxQty),
        };
      });
    } else if (request.category === 'prepared_meals') {
      if (!meals || !Array.isArray(meals) || meals.length === 0) {
        return res.status(400).json({ message: 'Meals array is required for prepared_meals category' });
      }

      if (typeof numberOfMeals !== 'number' || numberOfMeals <= 0) {
        return res.status(400).json({ message: 'numberOfMeals must be a positive number for prepared_meals category' });
      }

      for (const meal of meals) {
        if (!meal.mealName || typeof meal.mealName !== 'string' || meal.mealName.trim() === '') {
          return res.status(400).json({ message: 'Each meal must have a valid mealName' });
        }
        if (!meal.mealDescription || typeof meal.mealDescription !== 'string' || meal.mealDescription.trim() === '') {
          return res.status(400).json({ message: 'Each meal must have a valid mealDescription' });
        }
        if (!meal.mealType || typeof meal.mealType !== 'string' || meal.mealType.trim() === '') {
          return res.status(400).json({ message: 'Each meal must have a valid mealType' });
        }
        if (typeof meal.quantity !== 'number' || meal.quantity < 1) {
          return res.status(400).json({ message: `Invalid quantity for meal ${meal.mealName}: ${meal.quantity}` });
        }
      }

      donationMeals = [];
      for (const meal of meals) {
        let mealDoc = await Meals.findOne({
          mealName: meal.mealName,
          mealType: meal.mealType,
        });

        if (!mealDoc) {
          const counter = await Counter.findOneAndUpdate(
            { _id: 'MealId' },
            { $inc: { seq: 1 } },
            { new: true, upsert: true }
          );

          mealDoc = new Meals({
            id: counter.seq.toString(),
            mealName: meal.mealName,
            mealDescription: meal.mealDescription,
            mealType: meal.mealType,
            quantity: Number(meal.quantity),
          });
          await mealDoc.save();
        }

        donationMeals.push({
          meal: mealDoc._id,
          quantity: Number(meal.quantity),
        });
      }

      const totalMeals = donationMeals.reduce((sum, m) => sum + m.quantity, 0);
      if (totalMeals !== numberOfMeals) {
        return res.status(400).json({
          message: `Total quantity of meals (${totalMeals}) must match numberOfMeals (${numberOfMeals})`,
        });
      }
    } else {
      return res.status(400).json({ message: 'Invalid request category' });
    }

    // Create New Donation
    const newDonation = new Donation({
      title: request.title,
      donor: donor,
      description: `Donation for request ${request.title}`,
      category: request.category,
      location: location, // Use request's GeoJSON location
      address: address,
      products: donationProducts,
      meals: donationMeals,
      numberOfMeals: request.category === 'prepared_meals' ? numberOfMeals : undefined,
      expirationDate: expirationDate || request.expirationDate,
      isaPost: false,
      linkedRequests: [requestId],
    });

    const savedDonation = await newDonation.save();

    // Update Request's linkedDonation Field
    if (!request.linkedDonation) {
      request.linkedDonation = [];
    }
    request.linkedDonation.push(savedDonation._id);
    await request.save();

    // Create a DonationTransaction with status 'pending'
    const counter = await Counter.findOneAndUpdate(
      { _id: 'DonationTransactionId' },
      { $inc: { seq: 1 } },
      { new: true, upsert: true }
    );
    if (!counter) throw new Error('Failed to increment DonationTransactionId counter');
    const transactionId = counter.seq;

    const transaction = new DonationTransaction({
      id: transactionId,
      donation: savedDonation._id,
      requestNeed: requestId,
      donor: savedDonation.donor,
      recipient: request.recipient,
      allocatedProducts: donationProducts,
      allocatedMeals: donationMeals,
      status: 'pending',
    });

    await transaction.save();

    // Send Notification Email
    const recipient = request.recipient;
    if (recipient && recipient.email) {
      const populatedDonation = await Donation.findById(savedDonation._id)
        .populate('donor')
        .populate('meals.meal')
        .populate('products.product');

      const transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS,
        },
        tls: {
          rejectUnauthorized: false,
        },
      });

      const productList = populatedDonation.products?.length > 0
        ? populatedDonation.products
            .map((p) => `${p.product?.name || 'Unknown Product'} (Quantity: ${p.quantity || 0})`)
            .join(', ')
        : 'None';
      const mealList = populatedDonation.meals?.length > 0
        ? populatedDonation.meals
            .map((m) => `${m.meal?.mealName || 'Unknown Meal'} (Type: ${m.meal?.mealType || 'Unknown Type'}, Quantity: ${m.quantity || 0})`)
            .join(', ')
        : 'None';

      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: recipient.email,
        subject: `New Donation Added to Your Request: ${request.title}`,
        text: `Dear ${recipient.name || 'Recipient'},

A new donation has been added to your request titled "${request.title}".

Donation Details:
- Title: ${populatedDonation.title}
- Donor: ${populatedDonation.donor?.name || 'Unknown Donor'}
${request.category === 'packaged_products' ? `- Products: ${productList}` : `- Meals: ${mealList}`}
- Expiration Date: ${populatedDonation.expirationDate ? new Date(populatedDonation.expirationDate).toLocaleDateString() : 'Not set'}

Thank you for using our platform!

Best regards,
Your Platform Team`,
        html: `
          <div style="font-family: Arial, sans-serif; color: black;">
            <div style="text-align: center; margin-bottom: 20px;">
              <img src="cid:logo" alt="Platform Logo" style="max-width: 150px; height: auto;" />
            </div>
            <h2 style="color: #228b22;">New Donation Added to Your Request</h2>
            <p>Dear ${recipient.name || 'Recipient'},</p>
            <p>A new donation has been added to your request titled "<strong>${request.title}</strong>".</p>
            <h3>Donation Details:</h3>
            <ul>
              <li><strong>Title:</strong> ${populatedDonation.title}</li>
              <li><strong>Donor:</strong> ${populatedDonation.donor?.name || 'Unknown Donor'}</li>
              ${request.category === 'packaged_products' ? `<li><strong>Products:</strong> ${productList}</li>` : `<li><strong>Meals:</strong> ${mealList}</li>`}
              <li><strong>Expiration Date:</strong> ${populatedDonation.expirationDate ? new Date(populatedDonation.expirationDate).toLocaleDateString() : 'Not set'}</li>
            </ul>
            <p>Thank you for using our platform!</p>
            <p style="margin-top: 20px;">Best regards,<br>Your Platform Team</p>
          </div>
        `,
        attachments: [],
      };

      const logoPath = path.join(__dirname, '../Uploads/logo.png');
      if (fs.existsSync(logoPath)) {
        mailOptions.attachments.push({
          filename: 'logo.png',
          path: logoPath,
          cid: 'logo',
        });
      } else {
        console.warn('Logo file not found at:', logoPath);
        mailOptions.html = mailOptions.html.replace(
          '<img src="cid:logo" alt="Platform Logo" style="max-width: 150px; height: auto;" />',
          ''
        );
      }

      try {
        await transporter.sendMail(mailOptions);
        console.log(`Email sent to ${recipient.email}`);
      } catch (emailError) {
        console.error('Failed to send email:', emailError);
      }
    } else {
      console.warn('Recipient email not found for request:', requestId);
    }

    // Response
    res.status(201).json({
      message: 'Donation added to request successfully',
      donation: savedDonation,
      transactionId: transaction._id,
    });
  } catch (error) {
    console.error('Donation Error:', error);
    res.status(500).json({ message: 'Failed to add donation to request', error: error.message });
  }
}

// ✅ Update add donation to request
async function UpdateAddDonationToRequest(req, res) {
  try {
    const { requestId } = req.params;
    const { donationId, products, meals, donor, expirationDate, numberOfMeals, fulfilledItems } = req.body;

    // Input Validation
    if (!requestId || !mongoose.Types.ObjectId.isValid(requestId)) {
      return res.status(400).json({ message: 'Valid Request ID is required' });
    }

    if (!donationId || !mongoose.Types.ObjectId.isValid(donationId)) {
      return res.status(400).json({ message: 'Valid Donation ID is required' });
    }

    if (!donor || !mongoose.Types.ObjectId.isValid(donor)) {
      return res.status(400).json({ message: 'Valid Donor ID is required' });
    }

    // Fetch the request with populated fields
    const request = await RequestNeed.findById(requestId)
      .populate('requestedProducts.product')
      .populate('requestedMeals.meal')
      .populate('recipient');
    if (!request) {
      return res.status(404).json({ message: 'Request not found' });
    }

    // Fetch the existing donation
    const donation = await Donation.findById(donationId);
    if (!donation) {
      return res.status(404).json({ message: 'Donation not found' });
    }

    // Validate donor
    if (donation.donor.toString() !== donor) {
      return res.status(403).json({ message: 'Donor does not match the donation owner' });
    }

    // Check if the donation is already assigned to this request
    if (donation.linkedRequests && donation.linkedRequests.includes(requestId)) {
      return res.status(400).json({ message: 'Donation is already assigned to this request' });
    }

    // Validate based on category
    let donationProducts = [];
    let donationMeals = [];
    if (request.category === 'packaged_products') {
      if (!products || !Array.isArray(products) || products.length === 0) {
        return res.status(400).json({ message: 'Products array is required for packaged_products category' });
      }

      const productMap = new Map(
        request.requestedProducts.map((p) => [p.product?._id.toString(), p.quantity])
      );

      donationProducts = products.map(({ product, quantity }) => {
        if (!product || !mongoose.Types.ObjectId.isValid(product)) {
          throw new Error(`Invalid product ID: ${product}`);
        }
        if (!productMap.has(product)) {
          throw new Error(`Product ${product} not found in request`);
        }
        const maxQty = productMap.get(product);
        if (typeof quantity !== 'number' || quantity < 0) {
          throw new Error(`Invalid quantity for product ${product}: ${quantity}`);
        }
        return {
          product,
          quantity: Math.min(quantity, maxQty),
        };
      });

      donation.products = donationProducts;
    } else if (request.category === 'prepared_meals') {
      if (!meals || !Array.isArray(meals) || meals.length === 0) {
        return res.status(400).json({ message: 'Meals array is required for prepared_meals category' });
      }

      if (typeof numberOfMeals !== 'number' || numberOfMeals <= 0) {
        return res.status(400).json({ message: 'numberOfMeals must be a positive number for prepared_meals category' });
      }

      for (const meal of meals) {
        if (!meal.mealName || typeof meal.mealName !== 'string' || meal.mealName.trim() === '') {
          return res.status(400).json({ message: 'Each meal must have a valid mealName' });
        }
        if (!meal.mealDescription || typeof meal.mealDescription !== 'string' || meal.mealDescription.trim() === '') {
          return res.status(400).json({ message: 'Each meal must have a valid mealDescription' });
        }
        if (!meal.mealType || typeof meal.mealType !== 'string' || meal.mealType.trim() === '') {
          return res.status(400).json({ message: 'Each meal must have a valid mealType' });
        }
        if (typeof meal.quantity !== 'number' || meal.quantity < 1) {
          return res.status(400).json({ message: `Invalid quantity for meal ${meal.mealName}: ${meal.quantity}` });
        }
      }

      donationMeals = [];
      for (const meal of meals) {
        let mealDoc = await Meals.findOne({
          mealName: meal.mealName,
          mealType: meal.mealType,
        });

        if (!mealDoc) {
          const counter = await Counter.findOneAndUpdate(
            { _id: 'MealId' },
            { $inc: { seq: 1 } },
            { new: true, upsert: true }
          );

          mealDoc = new Meals({
            id: counter.seq.toString(),
            mealName: meal.mealName,
            mealDescription: meal.mealDescription,
            mealType: meal.mealType,
            quantity: Number(meal.quantity),
          });
          await mealDoc.save();
        }

        donationMeals.push({
          meal: mealDoc._id,
          quantity: Number(meal.quantity),
        });
      }

      const totalMeals = donationMeals.reduce((sum, m) => sum + m.quantity, 0);
      if (totalMeals !== numberOfMeals) {
        return res.status(400).json({
          message: `Total quantity of meals (${totalMeals}) must match numberOfMeals (${numberOfMeals})`,
        });
      }

      donation.meals = donationMeals;
      donation.numberOfMeals = numberOfMeals;
    } else {
      return res.status(400).json({ message: 'Invalid request category' });
    }

    // Update Donation
    if (!donation.linkedRequests) {
      donation.linkedRequests = [];
    }
    donation.linkedRequests.push(requestId);

    if (expirationDate) {
      donation.expirationDate = expirationDate;
    }

    // Calculate total quantity allocated across all linked requests
    let totalAllocated = 0;
    for (const linkedRequestId of donation.linkedRequests) {
      const linkedRequest = await RequestNeed.findById(linkedRequestId);
      if (linkedRequest) {
        const fulfilledForThisRequest = linkedRequest.linkedDonation
          .filter((d) => d.toString() === donationId)
          .length > 0
          ? fulfilledItems.reduce((sum, item) => sum + item.quantity, 0)
          : 0;
        totalAllocated += fulfilledForThisRequest;
      }
    }

    // Calculate total available quantity in the donation
    const totalAvailable = donation.category === 'packaged_products'
      ? donation.products.reduce((sum, p) => sum + p.quantity, 0)
      : donation.numberOfMeals || 0;

    // Update donation status
    donation.status = totalAllocated >= totalAvailable ? 'fulfilled' : 'partially_fulfilled';

    await donation.save();

    // Update Request's linkedDonation Field
    if (!request.linkedDonation) {
      request.linkedDonation = [];
    }
    if (!request.linkedDonation.includes(donationId)) {
      request.linkedDonation.push(donationId);
    }

    // Calculate and update request status based on fulfilled items
    const totalFulfilledForRequest = fulfilledItems.reduce((total, item) => total + item.quantity, 0);
    request.status = totalFulfilledForRequest >= request.numberOfMeals ? 'fulfilled' : 'partially_fulfilled';

    await request.save();

    // Send Notification Email
    const recipient = request.recipient;
    if (recipient && recipient.email) {
      const populatedDonation = await Donation.findById(donationId)
        .populate('donor')
        .populate('meals.meal')
        .populate('products.product');

      const transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS,
        },
        tls: {
          rejectUnauthorized: false,
        },
      });

      const productList = populatedDonation.products?.length > 0
        ? populatedDonation.products
            .map((p) => `${p.product?.name || 'Unknown Product'} (Quantity: ${p.quantity || 0})`)
            .join(', ')
        : 'None';
      const mealList = populatedDonation.meals?.length > 0
        ? populatedDonation.meals
            .map((m) => `${m.meal?.mealName || 'Unknown Meal'} (Type: ${m.meal?.mealType || 'Unknown Type'}, Quantity: ${m.quantity || 0})`)
            .join(', ')
        : 'None';

      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: recipient.email,
        subject: `Donation Assigned to Your Request: ${request.title}`,
        text: `Dear ${recipient.name || 'Recipient'},

A donation has been assigned to your request titled "${request.title}".

Donation Details:
- Title: ${populatedDonation.title}
- Donor: ${populatedDonation.donor?.name || 'Unknown Donor'}
${request.category === 'packaged_products' ? `- Products: ${productList}` : `- Meals: ${mealList}`}
- Expiration Date: ${populatedDonation.expirationDate ? new Date(populatedDonation.expirationDate).toLocaleDateString() : 'Not set'}

Thank you for using our platform!

Best regards,
Your Platform Team`,
        html: `
          <div style="font-family: Arial, sans-serif; color: black;">
            <div style="text-align: center; margin-bottom: 20px;">
              <img src="cid:logo" alt="Platform Logo" style="max-width: 150px; height: auto;" />
            </div>
            <h2 style="color: #228b22;">Donation Assigned to Your Request</h2>
            <p>Dear ${recipient.name || 'Recipient'},</p>
            <p>A donation has been assigned to your request titled "<strong>${request.title}</strong>".</p>
            <h3>Donation Details:</h3>
            <ul>
              <li><strong>Title:</strong> ${populatedDonation.title}</li>
              <li><strong>Donor:</strong> ${populatedDonation.donor?.name || 'Unknown Donor'}</li>
              ${request.category === 'packaged_products' ? `<li><strong>Products:</strong> ${productList}</li>` : `<li><strong>Meals:</strong> ${mealList}</li>`}
              <li><strong>Expiration Date:</strong> ${populatedDonation.expirationDate ? new Date(populatedDonation.expirationDate).toLocaleDateString() : 'Not set'}</li>
            </ul>
            <p>Thank you for using our platform!</p>
            <p style="margin-top: 20px;">Best regards,<br>Your Platform Team</p>
          </div>
        `,
        attachments: [],
      };

      const logoPath = path.join(__dirname, '../Uploads/logo.png');
      if (fs.existsSync(logoPath)) {
        mailOptions.attachments.push({
          filename: 'logo.png',
          path: logoPath,
          cid: 'logo',
        });
      } else {
        console.warn('Logo file not found at:', logoPath);
        mailOptions.html = mailOptions.html.replace(
          '<img src="cid:logo" alt="Platform Logo" style="max-width: 150px; height: auto;" />',
          ''
        );
      }

      try {
        await transporter.sendMail(mailOptions);
        console.log(`Email sent to ${recipient.email}`);
      } catch (emailError) {
        console.error('Failed to send email:', emailError);
      }
    } else {
      console.warn('Recipient email not found for request:', requestId);
    }

    // Response
    res.status(200).json({
      message: 'Donation assigned to request successfully',
      donation,
    });
  } catch (error) {
    console.error('Donation Assignment Error:', error);
    res.status(500).json({ message: 'Failed to assign donation to request', error: error.message });
  }
}

// ✅ Get request with donations
async function getRequestWithDonations(req, res) {
  try {
    const { requestId } = req.params;

    const request = await RequestNeed.findById(requestId)
      .populate('recipient')
      .populate('requestedProducts.product')
      .populate('requestedMeals.meal')
      .populate('linkedDonation');

    if (!request) {
      return res.status(404).json({ message: 'Request not found' });
    }

    const transactions = await DonationTransaction.find({ requestNeed: requestId })
      .populate('donation')
      .populate('allocatedProducts.product')
      .populate('allocatedMeals.meal')
      .populate('donor');

    res.status(200).json({
      request,
      transactions,
    });
  } catch (error) {
    res.status(500).json({
      message: 'Server error',
      error: error.message,
    });
  }
}

// ✅ Get requests by donation ID
async function getRequestsByDonationId(req, res) {
  try {
    const { donationId } = req.params;
    console.log(`Fetching requests for donationId: ${donationId}`);

    if (!mongoose.Types.ObjectId.isValid(donationId)) {
      return res.status(400).json({ message: 'Invalid donation ID' });
    }

    const requests = await RequestNeed.find({
      $or: [{ linkedDonation: donationId }, { linkedDonation: { $in: [donationId] } }],
    })
      .populate('recipient')
      .populate('requestedProducts.product')
      .populate('requestedMeals.meal');

    console.log(`Found ${requests.length} requests for donationId: ${donationId}`);
    if (!requests.length) {
      return res.status(404).json({ message: 'No requests found for this donation' });
    }

    const cleanedRequests = requests.map((request) => {
      const requestObj = request.toObject();

      if (!requestObj.recipient) {
        console.warn(`Recipient not found for request ${requestObj._id}`);
        requestObj.recipient = { firstName: 'Unknown', lastName: '', role: 'N/A' };
      }

      if (requestObj.category === 'packaged_products') {
        requestObj.requestedProducts = requestObj.requestedProducts?.map((item) => {
          if (!item.product) {
            console.warn(`Product not found for requestedProduct in request ${requestObj._id}`);
            return {
              product: { name: 'N/A', productType: 'N/A', weightPerUnit: 0, weightUnit: 'N/A' },
              quantity: item.quantity || 0,
            };
          }
          return item;
        }) || [];
      }

      if (requestObj.category === 'prepared_meals') {
        requestObj.requestedMeals = requestObj.requestedMeals?.map((item) => {
          if (!item.meal) {
            console.warn(`Meal not found for requestedMeal in request ${requestObj._id}`);
            return {
              meal: { mealName: 'N/A', mealType: 'N/A', mealDescription: 'N/A' },
              quantity: item.quantity || 0,
            };
          }
          return item;
        }) || [];
      }

      return requestObj;
    });

    res.status(200).json(cleanedRequests);
  } catch (error) {
    console.error('Error in getRequestsByDonationId:', error.message, error.stack);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

// ✅ Reject request
async function rejectRequest(req, res) {
  try {
    const { requestId } = req.params;
    const { reason } = req.body;

    const request = await RequestNeed.findById(requestId).populate('recipient');
    if (!request) {
      return res.status(404).json({ message: 'Request not found' });
    }

    if (request.status !== 'pending') {
      return res.status(400).json({
        message: `Request cannot be rejected in its current state (${request.status})`,
      });
    }

    request.status = 'rejected';
    request.rejectionReason = reason || 'No reason provided';
    await request.save();

    const recipient = request.recipient;
    if (recipient && recipient.email) {
      const transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS,
        },
        tls: { rejectUnauthorized: false },
      });

      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: recipient.email,
        subject: `Your Request "${request.title}" Has Been Rejected`,
        text: `Dear ${recipient.name || 'Recipient'},

We regret to inform you that your request titled "${request.title}" has been rejected.

Details:
- Request Title: ${request.title}
- Rejection Reason: ${reason || 'No reason provided'}

If you have any questions, please contact our support team.

Best regards,
Your Platform Team`,
        html: `
          <div style="font-family: Arial, sans-serif; color: black;">
            <h2 style="color: #dc3545;">Your Request Has Been Rejected</h2>
            <p>Dear ${recipient.name || 'Recipient'},</p>
            <p>We regret to inform you that your request titled "<strong>${request.title}</strong>" has been rejected.</p>
            <h3>Details:</h3>
            <ul>
              <li><strong>Request Title:</strong> ${request.title}</li>
              <li><strong>Rejection Reason:</strong> ${reason || 'No reason provided'}</li>
            </ul>
            <p>If you have any questions, please contact our support team.</p>
            <p style="margin-top: 20px;">Best regards,<br>Your Platform Team</p>
          </div>
        `,
      };

      await transporter.sendMail(mailOptions);
      console.log(`Email sent to ${recipient.email}`);
    }

    res.status(200).json({
      message: 'Request rejected successfully',
      request,
    });
  } catch (error) {
    console.error('Error rejecting request:', error);
    res.status(500).json({
      message: 'Failed to reject request',
      error: error.message,
    });
  }
}

module.exports = {
  addDonationToRequest,
  getAllRequests,
  getRequestById,
  getRequestsByRecipientId,
  getRequestsByStatus,
  createRequest,
  updateRequest,
  deleteRequest,
  createRequestNeedForExistingDonation,
  getRequestWithDonations,
  getRequestsByDonationId,
  UpdateAddDonationToRequest,
  rejectRequest,
  getAllRequestsbackoffice,
};
</file>

<file path="sustainafood-backend/Dockerfile">
FROM node:16-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .  
EXPOSE 3000
CMD ["npm", "start"]
</file>

<file path="sustainafood-backend/models/Advertisement.js">
const mongoose = require('mongoose');

const advertisementSchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  imagePath: {
    type: String,
    required: true,
  },
  status: {
    type: String,
    enum: ['pending', 'approved', 'rejected'],
    default: 'pending',
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
  updatedAt: {
    type: Date,
    default: Date.now,
  },
});

// Update `updatedAt` on save
advertisementSchema.pre('save', function (next) {
  this.updatedAt = Date.now();
  next();
});

module.exports = mongoose.model('Advertisement', advertisementSchema);
</file>

<file path="sustainafood-backend/models/ContactSubmission.js">
const mongoose = require('mongoose');

const contactSubmissionSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
    match: [/^\S+@\S+\.\S+$/, 'Please provide a valid email address'],
  },
  comment: {
    type: String,
    required: true,
  },
  submittedAt: {
    type: Date,
    default: Date.now,
  },
  status: {
    type: String,
    enum: ['pending', 'responded'],
    default: 'pending',
  },
});

module.exports = mongoose.model('ContactSubmission', contactSubmissionSchema);
</file>

<file path="sustainafood-backend/models/Feedback.js">
const mongoose = require('mongoose');

const feedbackSchema = new mongoose.Schema({
  reviewer: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  recipient: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  rating: {
    type: Number,
    required: true,
    min: 1,
    max: 5,
  },
  comment: {
    type: String,
    required: true,
    trim: true,
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
});

module.exports = mongoose.model('Feedback', feedbackSchema);
</file>

<file path="sustainafood-backend/routes/feedbackRoutes.js">
const express = require('express');
const router = express.Router();
const Feedback = require('../models/Feedback');

// POST - Create new feedback
router.post('/', async (req, res) => {
  try {
    const { reviewer, recipient, rating, comment } = req.body;
    const authUserId = req.user?._id || req.user?.id; // From auth middleware

    // Verify the reviewer matches the authenticated user
   

    if (!recipient || !rating || !comment || !reviewer) {
      return res.status(400).json({ message: 'All fields are required' });
    }

    if (rating < 1 || rating > 5) {
      return res.status(400).json({ message: 'Rating must be between 1 and 5' });
    }

    const feedback = new Feedback({
      reviewer,
      recipient,
      rating,
      comment,
    });

    await feedback.save();
    res.status(201).json(feedback);
  } catch (error) {
    console.error('Error creating feedback:', error);
    res.status(500).json({ message: 'Server error' });
  }
});
// GET - Get all feedback for a user
router.get('/:userId', async (req, res) => {
  try {
    const feedback = await Feedback.find({ recipient: req.params.userId })
      .populate('reviewer', 'name photo')
      .sort({ createdAt: -1 });

    res.json(feedback);
  } catch (error) {
    console.error('Error fetching feedback:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

// PUT - Update feedback (optional, for future use)
router.put('/:id', async (req, res) => {
  try {
    const feedback = await Feedback.findById(req.params.id);
    if (!feedback) {
      return res.status(404).json({ message: 'Feedback not found' });
    }

    if (feedback.reviewer.toString() !== req.user.id) {
      return res.status(403).json({ message: 'Not authorized to update this feedback' });
    }

    feedback.rating = req.body.rating || feedback.rating;
    feedback.comment = req.body.comment || feedback.comment;

    await feedback.save();
    res.json(feedback);
  } catch (error) {
    console.error('Error updating feedback:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

// DELETE - Delete feedback (optional, for future use)
router.delete('/:id', async (req, res) => {
  try {
    const feedback = await Feedback.findById(req.params.id);
    if (!feedback) {
      return res.status(404).json({ message: 'Feedback not found' });
    }

    if (feedback.reviewer.toString() !== req.user.id) {
      return res.status(403).json({ message: 'Not authorized to delete this feedback' });
    }

    await feedback.remove();
    res.json({ message: 'Feedback deleted' });
  } catch (error) {
    console.error('Error deleting feedback:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

module.exports = router;
</file>

<file path="sustainafood-backend/routes/preductions.js">
const express = require('express');
const axios = require('axios');
const router = express.Router();

const FORECAST_API_URL = 'http://localhost:5000'; // Flask API URL

router.get('/api/forecast/donations', async (req, res) => {
  try {
    const days = req.query.days || 30;
    const response = await axios.get(`${FORECAST_API_URL}/forecast/donations?days=${days}`);
    res.json(response.data);
  } catch (error) {
    console.error('Error fetching donation forecast:', error.message);
    res.status(500).json({ error: 'Failed to fetch donation forecast' });
  }
});

router.get('/api/forecast/requests', async (req, res) => {
  try {
    const days = req.query.days || 30;
    const response = await axios.get(`${FORECAST_API_URL}/forecast/requests?days=${days}`);
    res.json(response.data);
  } catch (error) {
    console.error('Error fetching request forecast:', error.message);
    res.status(500).json({ error: 'Failed to fetch request forecast' });
  }
});

module.exports = router;
</file>

<file path="sustainafood-frontend/.env">
# VITE_API_URL=http://localhost:3000
VITE_API_URL=/api
REACT_APP_GOOGLE_MAPS_API_KEY=your_google_maps_api_key
</file>

<file path="sustainafood-frontend/src/api/contactService.js">
import axios from 'axios';

const API_URL='http://localhost:3000/contact';

export const submitContactForm = async (formData) => {
  try {
    const response = await axios.post(`${API_URL}/contact`, formData, {
      headers: { 'Content-Type': 'application/json' },
    });
    console.log('Submission response:', response.data);
    return response.data;
  } catch (error) {
    console.error('Error submitting contact form:', error.response?.data || error.message);
    throw error.response?.data || { message: 'Failed to submit form' };
  }
};
</file>

<file path="sustainafood-frontend/src/api/feedbackService.js">
import axios from 'axios';

const API_URL = 'http://localhost:3000/api/feedback';

// Create new feedback
export const createFeedback = async (recipientId, rating, comment, reviewerId, token) => {
  const response = await axios.post(
    API_URL,
    { reviewer: reviewerId, recipient: recipientId, rating, comment },
    {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    }
  );
  return response.data;
};

// Get feedback for a user
export const getFeedbackByUserId = async (userId) => {
  const response = await axios.get(`${API_URL}/${userId}`);
  return response.data;
};
</file>

<file path="sustainafood-frontend/src/assets/styles/About.css">
/* Base styles */
.about-container {
    background-color: #f1f9f1;
    min-height: 100vh;
    padding: 80px 20px;
    font-family: "Poppins", "Arial", sans-serif;
    color: #333;
    position: relative;
    overflow: hidden;
}

.about-wrapper {
    max-width: 1200px;
    margin: 0 auto;
    position: relative;
}

/* Decorative elements */
.about-leaf {
    position: absolute;
    opacity: 0.1;
    z-index: 0;
}

.about-leaf-1 {
    top: 100px;
    right: -50px;
    width: 200px;
    height: 200px;
    transform: rotate(-15deg);
}

.about-leaf-2 {
    bottom: 100px;
    left: -50px;
    width: 250px;
    height: 250px;
    transform: rotate(20deg);
}

/* Header section with hero image */
.about-hero {
    display: flex;
    align-items: center;
    margin-bottom: 80px;
    gap: 40px;
    position: relative;
}

.about-hero-content {
    flex: 1;
    z-index: 1;
}

.about-hero-image {
    flex: 1;
    border-radius: 20px;
    overflow: hidden;
    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
    z-index: 1;
    position: relative;
}

.about-hero-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease;
    display: block;
}

.about-hero-image:hover img {
    transform: scale(1.05);
}

.about-title {
    font-size: 3rem;
    font-weight: 800;
    color: #228b22;
    margin-bottom: 20px;
    line-height: 1.2;
}

.about-title span {
    color: #8dc73f;
}

.about-description {
    font-size: 1.1rem;
    line-height: 1.7;
    color: #444;
    margin-bottom: 0;
}

/* Mission & Vision section without images */
.about-mission-vision {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 40px;
    margin-bottom: 80px;
}

.about-card {
    background: white;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    height: 100%;
    display: flex;
    flex-direction: column;
    padding: 30px; /* Added padding to compensate for removed image */
}

.about-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 40px rgba(141, 199, 63, 0.15);
}

.about-card-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center; /* Center content vertically */
}

.about-card-icon {
    font-size: 2.5rem;
    color: #228b22;
    margin-bottom: 15px;
    align-self: center; /* Center icon horizontally */
}

.about-card-title {
    font-size: 1.8rem;
    font-weight: 700;
    color: #228b22;
    margin-bottom: 15px;
    text-align: center; /* Center title */
}

.about-card-text {
    font-size: 1rem;
    line-height: 1.7;
    color: #555;
    text-align: center; /* Center text */
}

/* Section divider */
.about-divider {
    display: flex;
    align-items: center;
    margin: 60px 0;
    opacity: 0.7;
}

.about-divider-line {
    flex-grow: 1;
    height: 2px;
    background: linear-gradient(to right, transparent, #8dc73f, transparent);
}

.about-divider-icon {
    margin: 0 20px;
    color: #8dc73f;
    font-size: 1.5rem;
}

/* Values section with background image */
.about-values {
    margin-bottom: 80px;
    position: relative;
    padding: 60px;
    border-radius: 20px;
    overflow: hidden;
}

.about-values-bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
    background-image: linear-gradient(rgba(255, 255, 255, 0.92), rgba(255, 255, 255, 0.92)),
      url("/images/food-pattern.png");
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
}

.about-section-title {
    font-size: 2.2rem;
    font-weight: 700;
    color: #228b22;
    margin-bottom: 50px;
    text-align: center;
    position: relative;
    z-index: 1;
}

.about-section-title::after {
    content: "";
    display: block;
    width: 80px;
    height: 3px;
    background: #8dc73f;
    margin: 15px auto 0;
    border-radius: 2px;
}

.about-values-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 30px;
    position: relative;
    z-index: 1;
}

.about-value {
    background: white;
    border-radius: 15px;
    padding: 30px 20px;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.05);
    transition: all 0.3s ease;
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
    overflow: hidden;
    text-align: center;
}

.about-value::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, rgba(141, 199, 63, 0.05), transparent);
    z-index: 0;
}

.about-value:hover {
    transform: translateY(-7px);
    box-shadow: 0 12px 30px rgba(141, 199, 63, 0.15);
}

.about-value-icon {
    font-size: 2rem;
    color: #228b22;
    margin-bottom: 20px;
    position: relative;
    z-index: 1;
    transition: transform 0.3s ease;
}

.about-value:hover .about-value-icon {
    transform: scale(1.1);
}

.about-value-title {
    font-size: 1.2rem;
    font-weight: 600;
    color: #228b22;
    margin-bottom: 10px;
    position: relative;
    z-index: 1;
}

.about-value-text {
    font-size: 0.95rem;
    color: #555;
    line-height: 1.6;
    position: relative;
    z-index: 1;
}

/* Solution section with image */
.about-solution {
    display: flex;
    gap: 50px;
    margin-bottom: 80px;
    align-items: center;
}

.about-solution-content {
    flex: 1.2;
    background: white;
    border-radius: 15px;
    padding: 40px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
    position: relative;
    overflow: hidden;
}

.about-solution-content::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, rgba(141, 199, 63, 0.05), transparent);
    z-index: 0;
}

.about-solution-image {
    flex: 0.8;
    border-radius: 15px;
    overflow: hidden;
    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
    position: relative;
}

.about-solution-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
    transition: transform 0.5s ease;
}

.about-solution-image:hover img {
    transform: scale(1.05);
}

.about-solution-title {
    font-size: 2.2rem;
    font-weight: 700;
    color: #228b22;
    margin-bottom: 30px;
    position: relative;
    z-index: 1;
}

.about-solution-title::after {
    content: "";
    display: block;
    width: 60px;
    height: 3px;
    background: #8dc73f;
    margin-top: 15px;
    border-radius: 2px;
}

.about-features {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 25px;
    position: relative;
    z-index: 1;
}

.about-feature {
    display: flex;
    align-items: flex-start;
    gap: 15px;
    transition: transform 0.3s ease;
}

.about-feature:hover {
    transform: translateX(5px);
}

.about-feature-icon-wrapper {
    flex-shrink: 0;
    width: 50px;
    height: 50px;
    background: rgba(141, 199, 63, 0.1);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.3s ease;
}

.about-feature:hover .about-feature-icon-wrapper {
    background: rgba(141, 199, 63, 0.2);
}

.about-feature-icon {
    font-size: 1.2rem;
    color: #228b22;
}

.about-feature-content {
    flex-grow: 1;
}

.about-feature-title {
    font-size: 1.1rem;
    font-weight: 600;
    color: #228b22;
    margin-bottom: 8px;
}

.about-feature-text {
    font-size: 0.95rem;
    color: #555;
    line-height: 1.6;
}

/* Call to action section */
.about-impact {
    padding: 60px;
    text-align: center;
    background: white;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
    position: relative;
    overflow: hidden;
}

.about-impact::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, rgba(141, 199, 63, 0.05), transparent);
    z-index: 0;
}

.about-impact-title {
    font-size: 2rem;
    font-weight: 700;
    color: #228b22;
    margin-bottom: 50px;
    position: relative;
    z-index: 1;
}

.about-impact-title::after {
    content: "";
    display: block;
    width: 80px;
    height: 3px;
    background: #8dc73f;
    margin: 15px auto 0;
    border-radius: 2px;
}

.about-stats {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 30px;
    position: relative;
    z-index: 1;
}

.about-stat {
    padding: 20px;
    border-radius: 10px;
    background: rgba(141, 199, 63, 0.1);
    transition: transform 0.3s ease, background-color 0.3s ease;
}

.about-stat:hover {
    transform: translateY(-5px);
    background: rgba(141, 199, 63, 0.15);
}

.about-stat-number {
    font-size: 2.5rem;
    font-weight: 800;
    color: #228b22;
    margin-bottom: 10px;
}

.about-stat-label {
    font-size: 1rem;
    color: #555;
    font-weight: 500;
}

/* Responsive design */
@media (max-width: 992px) {
    .about-hero {
        flex-direction: column;
    }

    .about-mission-vision {
        grid-template-columns: 1fr;
    }

    .about-values-grid {
        grid-template-columns: repeat(2, 1fr);
    }

    .about-solution {
        flex-direction: column-reverse;
    }

    .about-features {
        grid-template-columns: 1fr;
    }

    .about-stats {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media (max-width: 768px) {
    .about-container {
        padding: 60px 20px;
    }

    .about-title {
        font-size: 2.2rem;
    }

    .about-values {
        padding: 40px 20px;
    }

    .about-impact {
        padding: 40px 20px;
    }
}

@media (max-width: 576px) {
    .about-values-grid {
        grid-template-columns: 1fr;
    }

    .about-stats {
        grid-template-columns: 1fr;
    }

    .about-feature {
        flex-direction: column;
        align-items: center;
        text-align: center;
    }

    .about-feature-content {
        text-align: center;
    }
}

/* Animations */
@keyframes about-fade-in {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.about-animate {
    opacity: 0;
    animation: about-fade-in 0.8s ease forwards;
}

.about-delay-1 {
    animation-delay: 0.1s;
}

.about-delay-2 {
    animation-delay: 0.2s;
}

.about-delay-3 {
    animation-delay: 0.3s;
}

.about-delay-4 {
    animation-delay: 0.4s;
}

.about-delay-5 {
    animation-delay: 0.5s;
}

/* SVG for leaf decoration */
.about-leaf-svg {
    fill: #8dc73f;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/AddDonation.css">
/* AddDonation.css - SustainaFood Theme */

/* Base styles matching home page */
.addDonation {
  font-family: "Poppins", sans-serif;
  background: #f0f8f0;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 40px 20px;
  min-height: 100vh;
}

.addDonation-form {
  width: 100%;
  max-width: 800px;
  background: #ffffff;
  border-radius: 16px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
  padding: 40px;
  margin-bottom: 40px;
  position: relative;
  overflow: hidden;
}

/* Decorative elements matching home page */
.addDonation-form::before {
  content: "";
  position: absolute;
  top: -50px;
  right: -50px;
  width: 200px;
  height: 200px;
  border-radius: 50%;
  background: rgba(34, 139, 34, 0.1);
  z-index: 0;
}

.addDonation-form::after {
  content: "";
  position: absolute;
  bottom: -30px;
  left: 15%;
  width: 120px;
  height: 120px;
  border-radius: 50%;
  background: rgba(34, 139, 34, 0.08);
  z-index: 0;
}

/* Logo and heading */
.addDonation-logo {
  display: block;
  width: 120px;
  height: auto;
  margin: 0 auto 20px;
  position: relative;
  z-index: 1;
}

.addDonation-h1 {
  font-size: 40px;
  font-weight: 700;
  color: #1a7a1a;
  text-align: center;
  margin-bottom: 40px;
  position: relative;
  z-index: 1;
}

.addDonation-h1::after {
  content: "";
  position: absolute;
  bottom: -12px;
  left: 50%;
  transform: translateX(-50%);
  width: 80px;
  height: 4px;
  background: linear-gradient(90deg, #228b22, #56ab2f);
  border-radius: 2px;
}

/* Input styles */
.addDonation-input-container {
  position: relative;
  margin-bottom: 25px;
  z-index: 1;
}
.addDonation-input-Location {
  margin-bottom: 25px;
  z-index: 1;
}


.addDonation-input {
  width: 100%;
  padding: 16px;
  font-size: 16px;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  background-color: #ffffff;
  transition: all 0.3s ease;
  color: #3a5a3a;
  font-family: "Poppins", sans-serif;
}

.addDonation-input:focus {
  outline: none;
  border-color: #228b22;
  box-shadow: 0 0 0 3px rgba(34, 139, 34, 0.1);
}

.addDonation-input-container label {
  position: absolute;
  left: 16px;
  top: 16px;
  color: #6c757d;
  pointer-events: none;
  transition: all 0.3s ease;
  background-color: #ffffff;
  padding: 0 5px;
}
.addDonation-input-Location label {
  position: absolute;
  left: 16px;
  top: -35px;
  color: #6c757d;
  pointer-events: none;
  transition: all 0.3s ease;
  background-color: #ffffff;
  padding: 0 5px;
}

.addDonation-input:focus ~ label,
.addDonation-input:not(:placeholder-shown) ~ label {
  top: -8px;
  left: 12px;
  font-size: 12px;
  color: #228b22;
  font-weight: 600;
}

.addDonation-input[type="date"] {
  color: #3a5a3a;
}

.addDonation-input[type="date"]::-webkit-calendar-picker-indicator {
  cursor: pointer;
  color: #228b22;
}

.addDonation-input[type="date"] ~ label {
  top: -8px;
  left: 12px;
  font-size: 12px;
  background-color: #ffffff;
  padding: 0 5px;
}

textarea.addDonation-input {
  min-height: 120px;
  resize: vertical;
}

select.addDonation-input {
  appearance: none;
  background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23228b22' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: right 16px center;
  background-size: 16px;
  padding-right: 40px;
}

select.addDonation-input ~ label {
  top: -8px;
  left: 12px;
  font-size: 12px;
  background-color: #ffffff;
  padding: 0 5px;
}

.addDonation-char-count {
  font-size: 12px;
  color: #6c757d;
  text-align: right;
  margin-top: 5px;
}

/* Button styles matching home page */
.addDonation-button {
  display: inline-block;
  padding: 16px 36px;
  font-size: 18px;
  font-weight: 600;
  background: linear-gradient(135deg, #228b22, #56ab2f);
  color: white;
  border: none;
  border-radius: 30px;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 6px 15px rgba(34, 139, 34, 0.2);
  position: relative;
  overflow: hidden;
  margin-top: 20px;
  width: auto;
  text-align: center;
}

.addDonation-button:hover {
  transform: translateY(-3px);
  box-shadow: 0 10px 20px rgba(34, 139, 34, 0.3);
}

.addDonation-button::after {
  content: "";
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: linear-gradient(
    to right,
    rgba(255, 255, 255, 0) 0%,
    rgba(255, 255, 255, 0.3) 50%,
    rgba(255, 255, 255, 0) 100%
  );
  transform: rotate(30deg);
  animation: shimmer 3s infinite;
  pointer-events: none;
}

@keyframes shimmer {
  0% {
    background-position: -1000px 0;
  }
  100% {
    background-position: 1000px 0;
  }
}

/* File upload styles */
.addDonation-container-btn-file {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  background: linear-gradient(135deg, #228b22, #56ab2f);
  color: white;
  border: none;
  padding: 14px 24px;
  font-size: 16px;
  font-weight: 600;
  border-radius: 30px;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 20px 0;
  box-shadow: 0 6px 15px rgba(34, 139, 34, 0.2);
  width: 100%;
}

.addDonation-container-btn-file:hover {
  transform: translateY(-3px);
  box-shadow: 0 10px 20px rgba(34, 139, 34, 0.3);
}

.addDonation-container-btn-file svg {
  width: 20px;
  height: 20px;
}

.addDonation-file-name {
  display: block;
  font-size: 14px;
  color: #6c757d;
  margin-bottom: 20px;
  font-style: italic;
  text-align: center;
}

/* Radio button styles */
.addDonation-radio-buttons-container {
  display: flex;
  gap: 30px;
  margin-bottom: 25px;
  z-index: 1;
  position: relative;
}

.addDonation-radio-button {
  display: flex;
  align-items: center;
}

.addDonation-radio-button__input {
  position: absolute;
  opacity: 0;
  width: 0;
  height: 0;
}

.addDonation-radio-button__label {
  display: flex;
  align-items: center;
  gap: 10px;
  cursor: pointer;
  font-size: 16px;
  color: #3a5a3a;
  font-weight: 500;
}

.addDonation-radio-button__custom {
  display: inline-block;
  width: 20px;
  height: 20px;
  border: 2px solid #228b22;
  border-radius: 50%;
  position: relative;
}

.addDonation-radio-button__input:checked + .addDonation-radio-button__label .addDonation-radio-button__custom::after {
  content: "";
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 12px;
  height: 12px;
  background-color: #228b22;
  border-radius: 50%;
  animation: radioScale 0.2s ease-in-out;
}

@keyframes radioScale {
  0% {
    transform: translate(-50%, -50%) scale(0);
  }
  100% {
    transform: translate(-50%, -50%) scale(1);
  }
}

/* Table styles - FIXED to prevent cutting off */
.addDonation-product-table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
  margin: 20px 0;
  background-color: #ffffff;
  border-radius: 16px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
  position: relative;
  z-index: 1;
  table-layout: fixed; /* Fixed table layout to prevent column resizing */
}

/* Table container to enable horizontal scrolling */
.addDonation-table-container {
  width: 100%;
  overflow-x: auto;
  margin: 20px 0;
  border-radius: 16px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
}

.addDonation-product-table thead {
  background: linear-gradient(135deg, #228b22, #56ab2f);
  color: white;
}

.addDonation-product-table th {
  padding: 16px;
  text-align: left;
  font-weight: 600;
  text-transform: capitalize;
  font-size: 16px;
  white-space: nowrap; /* Prevent header text from wrapping */
}

.addDonation-product-table td {
  padding: 16px;
  border-top: 1px solid #f0f0f0;
  font-size: 14px;
  color: #3a5a3a;
  word-break: break-word; /* Allow text to break to prevent overflow */
}

.addDonation-product-table tr:nth-child(even) {
  background-color: #f9f9f9;
}

.addDonation-product-table tr:hover {
  background-color: #f0f8f0;
}

/* Make sure all columns have equal width */
.addDonation-product-table th,
.addDonation-product-table td {
  width: auto;
  min-width: 100px; /* Minimum width for columns */
}

/* Add horizontal scrolling for the table */
.addDonation-product-table {
  display: block;
  overflow-x: auto;
  white-space: nowrap;
  -webkit-overflow-scrolling: touch;
}

/* Custom scrollbar for tables */
.addDonation-product-table::-webkit-scrollbar {
  height: 8px;
}

.addDonation-product-table::-webkit-scrollbar-track {
  background: #f0f0f0;
  border-radius: 4px;
}

.addDonation-product-table::-webkit-scrollbar-thumb {
  background: #228b22;
  border-radius: 4px;
}

.addDonation-product-table::-webkit-scrollbar-thumb:hover {
  background: #1a7a1a;
}

/* Edit input styles */
.addDonation-edit-input {
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #e0e0e0;
  border-radius: 6px;
  font-size: 14px;
  color: #3a5a3a;
}

.addDonation-edit-input:focus {
  outline: none;
  border-color: #228b22;
  box-shadow: 0 0 0 2px rgba(34, 139, 34, 0.1);
}

/* Icon styles */
.addDonation-fa-edit {
  color: #3a5a3a;
  cursor: pointer;
  font-size: 20px;
  transition: color 0.2s ease;
}

.addDonation-fa-edit:hover {
  color: #228b22;
}

.addDonation-fa-trash {
  color: #e74c3c;
  cursor: pointer;
  font-size: 20px;
  transition: color 0.2s ease;
  margin-left: 15px;
}

.addDonation-fa-trash:hover {
  color: #c0392b;
}

.addDonation-fa-save {
  color: #228b22;
  cursor: pointer;
  font-size: 20px;
  transition: color 0.2s ease;
}

.addDonation-fa-save:hover {
  color: #1a7a1a;
}

.addDonation-file-actions {
  display: flex;
  justify-content: flex-end;
  gap: 15px;
  margin-bottom: 10px;
}

/* Manual entry styles */
.addDonation-manual-product-entry {
  background-color: #f9f9f9;
  border-radius: 16px;
  padding: 30px;
  margin-bottom: 30px;
  border: 1px dashed #228b22;
  position: relative;
  z-index: 1;
}

.addDonation-manual-product-row {
  position: relative;
  padding: 25px;
  background-color: #ffffff;
  border-radius: 12px;
  margin-bottom: 20px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
  transition: all 0.3s ease;
}

.addDonation-manual-product-row:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 25px rgba(34, 139, 34, 0.1);
}

.addDonation-manual-product-row button {
  position: absolute;
  top: 15px;
  right: 15px;
  background-color: #e74c3c;
  color: white;
  border: none;
  padding: 8px 16px;
  font-size: 14px;
  border-radius: 20px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.addDonation-manual-product-row button:hover {
  background-color: #c0392b;
  transform: translateY(-2px);
}

/* Error message styles */
.addDonation-error-message {
  color: #e74c3c;
  font-size: 14px;
  margin-top: 5px;
  display: block;
}

/* Map styles */
.addDonation-map-backdrop {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 100;
  backdrop-filter: blur(5px);
}

/* Animation for form elements */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.addDonation-input-container {
  animation: fadeIn 0.5s ease-out forwards;
}

.addDonation-input-container:nth-child(2) {
  animation-delay: 0.1s;
}

.addDonation-input-container:nth-child(3) {
  animation-delay: 0.2s;
}

.addDonation-input-container:nth-child(4) {
  animation-delay: 0.3s;
}

.addDonation-input-container:nth-child(5) {
  animation-delay: 0.4s;
}

/* Success message styling */
.addDonation-success-message {
  background-color: rgba(34, 139, 34, 0.1);
  border-left: 4px solid #228b22;
  padding: 16px;
  margin-bottom: 25px;
  border-radius: 8px;
  color: #1a7a1a;
  font-weight: 500;
}

/* Responsive styles */
@media (max-width: 768px) {
  .addDonation {
    padding: 20px;
  }

  .addDonation-form {
    padding: 30px 20px;
  }

  .addDonation-h1 {
    font-size: 32px;
  }

  .addDonation-radio-buttons-container {
    flex-direction: column;
    gap: 15px;
  }

  .addDonation-product-table {
    display: block;
    overflow-x: auto;
  }

  .addDonation-manual-product-row {
    padding: 20px;
    padding-top: 50px;
  }

  .addDonation-button {
    width: 100%;
  }
}

/* Food-themed loading indicator */
.addDonation-loading {
  display: inline-block;
  position: relative;
  width: 80px;
  height: 80px;
}

.addDonation-loading:after {
  content: " ";
  display: block;
  border-radius: 50%;
  width: 0;
  height: 0;
  margin: 8px;
  box-sizing: border-box;
  border: 32px solid #228b22;
  border-color: #228b22 transparent #56ab2f transparent;
  animation: addDonation-loading 1.2s infinite;
}

@keyframes addDonation-loading {
  0% {
    transform: rotate(0);
    animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
  }
  50% {
    transform: rotate(180deg);
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }
  100% {
    transform: rotate(360deg);
  }
}

/* Food-themed icons for categories */
.addDonation-category-icon {
  display: inline-block;
  width: 24px;
  height: 24px;
  margin-right: 8px;
  vertical-align: middle;
}

/* Style for the list of products uploaded text */
p {
  color: #228b22;
  font-size: 18px;
  font-weight: 500;
  margin-bottom: 10px;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/assigned-deliveries.css">
/* Global Styles */
body {
    margin: 0;
    font-family: "Poppins", sans-serif;
    background: #f0f8f0;
    box-sizing: border-box;
  }
  
  /* Main Container */
  .assigneddel-container {
    padding: 20px;
    max-width: 1200px;
    margin: 0 auto;
  }
  
  /* Enhanced Header Section */
  .assigneddel-header-section {
    background: linear-gradient(135deg, #f0f8f0 0%, #e0f0e0 100%);
    padding: 30px 20px;
    border-radius: 15px;
    margin-bottom: 30px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
    position: relative;
    overflow: hidden;
  }
  
  .assigneddel-header-section::before {
    content: "";
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%23228b22' fill-opacity='0.05' fill-rule='evenodd'/%3E%3C/svg%3E");
    opacity: 0.5;
    z-index: 0;
  }
  
  .assigneddel-title-container {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 25px;
    position: relative;
    z-index: 1;
  }
  
  .assigneddel-title {
    color: #228b22;
    font-size: 42px;
    font-weight: 700;
    margin: 0;
    text-align: center;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
    position: relative;
  }
  
  .assigneddel-title-icon {
    font-size: 40px;
    margin-right: 15px;
    color: #228b22;
    filter: drop-shadow(2px 2px 3px rgba(0, 0, 0, 0.1));
  }
  
  /* Controls Section */
  .assigneddel-controls-container {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    justify-content: center;
    align-items: center;
    position: relative;
    z-index: 1;
  }
  
  /* Search */
  .assigneddel-search-container {
    flex: 1;
    min-width: 300px;
    max-width: 500px;
    background: white;
    padding: 12px 15px;
    border-radius: 30px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    transition: all 0.3s ease;
    border: 2px solid transparent;
    display: flex;
    align-items: center;
  }
  
  .assigneddel-search-container:hover,
  .assigneddel-search-container:focus-within {
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);
    border-color: rgba(34, 139, 34, 0.3);
    transform: translateY(-2px);
  }
  
  .assigneddel-search-icon {
    color: #228b22;
    font-size: 18px;
    margin-right: 10px;
  }
  
  .assigneddel-search-input {
    border: none;
    outline: none;
    font-size: 16px;
    width: 100%;
    padding: 0;
    background: transparent;
    color: #333;
  }
  
  .assigneddel-search-input::placeholder {
    color: #aaa;
    font-style: italic;
  }
  
  .assigneddel-filter-container {
    display: flex;
    gap: 15px;
    flex-wrap: wrap;
  }
  
  .assigneddel-select-wrapper {
    position: relative;
    min-width: 200px;
  }
  
  .assigneddel-select {
    appearance: none;
    width: 100%;
    font-size: 16px;
    padding: 12px 40px 12px 15px;
    border-radius: 30px;
    border: 2px solid transparent;
    background-color: white;
    color: #333;
    font-weight: 500;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .assigneddel-select:hover,
  .assigneddel-select:focus {
    border-color: rgba(34, 139, 34, 0.3);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);
    transform: translateY(-2px);
  }
  
  .assigneddel-select-icon {
    position: absolute;
    right: 15px;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: none;
    color: #228b22;
    font-size: 18px;
  }
  
  .assigneddel-status-dot {
    display: inline-block;
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: #28a745;
    margin-right: 8px;
  }
  
  .assigneddel-calendar-icon {
    color: #228b22;
    margin-right: 8px;
  }
  
  /* Delivery Card - Enhanced */
  .assigneddel-card {
    background: #ffffff;
    border-left: 5px solid #228b22;
    border-radius: 12px;
    padding: 25px;
    margin-bottom: 30px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
    transition: all 0.3s ease-in-out;
    position: relative;
    overflow: hidden;
  }
  
  .assigneddel-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
  }
  
  .assigneddel-card::after {
    content: "";
    position: absolute;
    top: 0;
    right: 0;
    width: 10px;
    height: 100%;
    background: linear-gradient(to bottom, #228b22, #56ab2f);
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .assigneddel-card:hover::after {
    opacity: 0.7;
  }
  
  @media (max-width: 768px) {
    .assigneddel-card {
      padding: 20px;
      margin-bottom: 20px;
    }
  }
  
  /* Profile Section - Enhanced */
  .assigneddel-profile-info {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 1px solid #f0f0f0;
  }
  
  .assigneddel-profile-img {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    object-fit: cover;
    border: 3px solid #228b22;
    box-shadow: 0 3px 8px rgba(34, 139, 34, 0.2);
    transition: transform 0.3s ease;
  }
  
  .assigneddel-profile-info:hover .assigneddel-profile-img {
    transform: scale(1.1);
  }
  
  .assigneddel-profile-text {
    margin: 0;
    font-size: 17px;
    font-weight: bold;
    color: #333;
  }
  
  .assigneddel-profile-link {
    font-size: 17px;
    font-weight: bold;
    color: #228b22;
    text-decoration: none;
    cursor: pointer;
    transition: color 0.2s ease;
  }
  
  .assigneddel-profile-link:hover {
    color: #56ab2f;
    text-decoration: underline;
  }
  
  /* Availability Section - Enhanced */
  .assigneddel-availability-section {
    background: #f9fff9;
    padding: 18px;
    border-radius: 10px;
    border-left: 4px solid #228b22;
    margin-bottom: 20px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  }
  
  .assigneddel-availability-title {
    color: #228b22;
    font-size: 18px;
    margin: 0 0 12px;
    font-weight: 600;
  }
  
  .assigneddel-availability-status {
    display: flex;
    align-items: center;
    gap: 10px;
    font-size: 15px;
    color: #666;
    margin: 8px 0;
    padding: 8px 12px;
    border-radius: 6px;
    transition: background-color 0.2s ease;
  }
  
  .assigneddel-availability-status:hover {
    background-color: rgba(0, 0, 0, 0.03);
  }
  
  .assigneddel-availability-status svg {
    font-size: 18px;
  }
  
  .assigneddel-availability-status.available {
    color: #155724;
    background-color: rgba(21, 87, 36, 0.05);
  }
  
  .assigneddel-availability-status.available svg {
    color: #28a745;
  }
  
  .assigneddel-availability-status.unavailable {
    color: #721c24;
    background-color: rgba(114, 28, 36, 0.05);
  }
  
  .assigneddel-availability-status.unavailable svg {
    color: #dc3545;
  }
  
  /* Delivery Details - Enhanced */
  .assigneddel-delivery-details {
    margin-bottom: 20px;
    padding: 15px;
    background-color: #f8f9fa;
    border-radius: 8px;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 10px;
  }
  
  .assigneddel-delivery-detail {
    font-size: 15px;
    color: #495057;
    margin: 5px 0;
    padding: 5px 0;
  }
  
  .assigneddel-delivery-detail strong {
    color: #222;
    font-weight: 600;
    display: inline-block;
    min-width: 120px;
  }
  
  /* Status Badge - Enhanced */
  .assigneddel-status-badge {
    display: inline-block;
    padding: 5px 10px;
    border-radius: 20px;
    font-size: 13px;
    font-weight: bold;
    margin-left: 8px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    text-transform: capitalize;
  }
  
  .assigneddel-status-badge.pending {
    background-color: #fff3cd;
    color: #856404;
    border: 1px solid #ffeeba;
  }
  
  .assigneddel-status-badge.accepted {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }
  
  .assigneddel-status-badge.in_progress {
    background-color: #d1ecf1;
    color: #0c5460;
    border: 1px solid #bee5eb;
  }
  
  .assigneddel-status-badge.picked_up {
    background-color: #fff3cd;
    color: #856404;
    border: 1px solid #ffeeba;
  }
  
  .assigneddel-status-badge.delivered {
    background-color: #cce5ff;
    color: #004085;
    border: 1px solid #b8daff;
  }
  
  .assigneddel-status-badge.failed {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }
  
  /* Item Section - Enhanced */
  .assigneddel-item-section {
    margin-bottom: 20px;
  }
  
  .assigneddel-items-title {
    font-size: 18px;
    color: #228b22;
    margin: 0 0 15px;
    font-weight: 600;
  }
  
  .assigneddel-item-list {
    list-style: none;
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-top: 10px;
  }
  
  .assigneddel-item {
    background: #ffffff;
    padding: 15px;
    border-left: 4px solid #228b22;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
    font-size: 15px;
    transition: transform 0.2s ease;
  }
  
  .assigneddel-item:hover {
    transform: translateX(5px);
  }
  
  .assigneddel-item-details {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    gap: 5px;
  }
  
  .assigneddel-item-details span {
    display: block;
    font-size: 14px;
    color: #333;
    padding: 3px 0;
  }
  
  .assigneddel-item-quantity {
    font-size: 15px;
    font-weight: bold;
    color: #fff;
    background-color: #d9534f;
    padding: 6px 12px;
    border-radius: 20px;
    box-shadow: 0 2px 5px rgba(217, 83, 79, 0.3);
  }
  
  @media (max-width: 768px) {
    .assigneddel-item {
      flex-direction: column;
      align-items: flex-start;
    }
  
    .assigneddel-item-quantity {
      font-size: 13px;
      padding: 6px;
    }
  }
  
  /* Button Container - Enhanced */
  .assigneddel-button-container {
    display: flex;
    justify-content: center;
    margin-top: 20px;
    flex-wrap: wrap;
    gap: 12px;
    padding-top: 15px;
    border-top: 1px solid #f0f0f0;
  }
  
  /* Action Buttons - Enhanced */
  .assigneddel-action-button {
    padding: 10px 20px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 15px;
    font-weight: 600;
    transition: all 0.3s ease;
    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 120px;
  }
  
  .assigneddel-action-button:hover:not(:disabled) {
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);
  }
  
  .assigneddel-action-button:active:not(:disabled) {
    transform: translateY(1px);
  }
  
  .assigneddel-action-button.accept-btn {
    background-color: #28a745;
    color: white;
  }
  
  .assigneddel-action-button.accept-btn:hover {
    background-color: #218838;
  }
  
  .assigneddel-action-button.refuse-btn {
    background-color: #dc3545;
    color: white;
  }
  
  .assigneddel-action-button.refuse-btn:hover {
    background-color: #c82333;
  }
  
  .assigneddel-action-button.start-btn {
    background-color: #007bff;
    color: white;
  }
  
  .assigneddel-action-button.start-btn:hover {
    background-color: #0056b3;
  }
  
  .assigneddel-action-button.picked-up-btn {
    background-color: #ffc107;
    color: white;
  }
  
  .assigneddel-action-button.picked-up-btn:hover {
    background-color: #e0a800;
  }
  
  .assigneddel-action-button.delivered-btn {
    background-color: #17a2b8;
    color: white;
  }
  
  .assigneddel-action-button.delivered-btn:hover {
    background-color: #138496;
  }
  
  .assigneddel-action-button.map-btn {
    background-color: #6c757d;
    color: white;
  }
  
  .assigneddel-action-button.map-btn:hover {
    background-color: #5a6268;
  }
  
  .assigneddel-action-button.feedback-btn {
    background-color: #228b22;
    color: white;
  }
  
  .assigneddel-action-button.feedback-btn:hover {
    background-color: #56ab2f;
  }
  
  .assigneddel-action-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
  
  /* Spinner */
  .assigneddel-spinner {
    display: inline-block;
    width: 16px;
    height: 16px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: white;
    animation: spin 1s ease-in-out infinite;
    margin-right: 5px;
  }
  
  .assigneddel-spinner.sm {
    width: 12px;
    height: 12px;
  }
  
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
  
  /* Modal */
  .assigneddel-modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }
  
  .assigneddel-modal-content {
    background: #fff;
    padding: 20px;
    border-radius: 8px;
    width: 90%;
    max-width: 500px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    position: relative;
  }
  
  .assigneddel-close-button {
    position: absolute;
    top: 10px;
    right: 10px;
    background: none;
    border: none;
    font-size: 18px;
    cursor: pointer;
    color: #333;
  }
  
  /* Feedback Form */
  .assigneddel-feedback-form {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }
  
  .assigneddel-form-group {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }
  
  .assigneddel-form-label {
    font-size: 14px;
    color: #333;
    font-weight: bold;
  }
  
  .assigneddel-feedback-textarea {
    width: 100%;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 5px;
    resize: vertical;
    font-size: 14px;
    font-family: "Poppins", sans-serif;
    min-height: 80px;
  }
  
  .assigneddel-submit-button {
    padding: 8px 16px;
    background: #228b22;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 14px;
    align-self: flex-start;
  }
  
  .assigneddel-submit-button:hover:not(:disabled) {
    background: #56ab2f;
  }
  
  .assigneddel-submit-button:disabled {
    background: #ccc;
    cursor: not-allowed;
  }
  
  .assigneddel-feedback-message {
    font-size: 14px;
    color: #155724;
    margin: 5px 0;
  }
  
  .assigneddel-feedback-message.error {
    color: #721c24;
  }
  
  /* Pagination */
  .assigneddel-pagination-controls {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 20px;
    gap: 10px;
  }
  
  .assigneddel-pagination-controls button {
    padding: 10px 20px;
    font-size: 14px;
    background: #228b22;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s;
  }
  
  .assigneddel-pagination-controls button:hover:not(:disabled) {
    background: #56ab2f;
  }
  
  .assigneddel-pagination-controls button:disabled {
    background: #ccc;
    cursor: not-allowed;
  }
  
  .assigneddel-pagination-controls span {
    font-size: 14px;
    color: #333;
  }
  
  /* Loading and Error States */
  .assigneddel-loading-message {
    font-size: 18px;
    color: #555;
    text-align: center;
    padding: 40px;
  }
  
  .assigneddel-error-container {
    text-align: center;
    padding: 40px;
  }
  
  .assigneddel-no-deliveries {
    font-size: 18px;
    color: #888;
    text-align: center;
    padding: 20px;
  }
  
  @media (max-width: 768px) {
    .assigneddel-header-section {
      padding: 20px 15px;
    }
    
    .assigneddel-title {
      font-size: 32px;
    }
    
    .assigneddel-title-icon {
      font-size: 30px;
      margin-right: 10px;
    }
    
    .assigneddel-controls-container {
      flex-direction: column;
      align-items: stretch;
    }
    
    .assigneddel-search-container {
      max-width: 100%;
      margin-bottom: 10px;
    }
    
    .assigneddel-filter-container {
      width: 100%;
      justify-content: space-between;
    }
    
    .assigneddel-select-wrapper {
      flex: 1;
      min-width: 0;
    }
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/backlist.css">
/* Backoffice List Container Styles */
.backlist-container {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    margin: 20px;
  }
  
  /* Header Container: Title and action button */
  .backlist-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 1px solid #f0f0f0;
  }
  
  .backlist-title {
    font-size: 22px;
    margin: 0;
    color: #333;
    font-weight: 600;
  }
  
  /* Export/Action Button */
  .backlist-action-button {
    background-color: #4caf50;
    color: white;
    padding: 10px 16px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    display: flex;
    align-items: center;
    gap: 8px;
    transition: all 0.2s ease;
    font-weight: 500;
    box-shadow: 0 2px 4px rgba(76, 175, 80, 0.2);
  }
  
  .backlist-action-button:hover {
    background-color: #45a049;
    transform: translateY(-1px);
    box-shadow: 0 3px 6px rgba(76, 175, 80, 0.3);
  }
  
  /* Search Container */
  .backlist-search {
    margin-bottom: 20px;
    display: flex;
    justify-content: flex-end;
  }
  
  .sort-container {
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .sort-container label {
    font-size: 14px;
    color: #555;
  }
  
  .sort-container select {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 14px;
    background-color: #f9f9f9;
    cursor: pointer;
    outline: none;
  }
  
  .sort-container select:focus {
    border-color: #4caf50;
    box-shadow: 0 0 4px rgba(76, 175, 80, 0.2);
  }
  
  /* Table Styles */
  .backlist-table {
    width: 100%;
    border-collapse: collapse;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 0 0 1px #f0f0f0;
  }
  
  .backlist-table-head {
    background-color: #f8f9fa;
  }
  
  .backlist-table-header,
  .backlist-table-cell {
    padding: 14px 15px;
    text-align: left;
    border-bottom: 1px solid #eee;
  }
  
  .backlist-table-header {
    font-weight: 600;
    color: #444;
    font-size: 14px;
  }
  
  .backlist-table-cell {
    font-size: 14px;
    color: #555;
  }
  
  .backlist-table-row:hover {
    background-color: #f5f5f5;
  }
  
  .backlist-table-row:last-child .backlist-table-cell {
    border-bottom: none;
  }
  
  /* Row Action Buttons */
  .backlist-row-action {
    background-color: #4caf50;
    color: white;
    padding: 6px 12px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-right: 5px;
    font-size: 13px;
    transition: all 0.2s ease;
    display: inline-flex;
    align-items: center;
    gap: 5px;
    text-decoration: none;
  }
  
  .backlist-row-action:hover {
    background-color: #45a049;
    transform: translateY(-1px);
  }
  
  .backlist-actions-cell {
    white-space: nowrap;
  }
  
  /* Pagination Styles */
  .backlist-pagination {
    display: flex;
    justify-content: center;
    list-style: none;
    padding: 0;
    margin-top: 25px;
    gap: 5px;
  }
  
  .backlist-pagination-item {
    margin: 0;
  }
  
  .backlist-pagination-link {
    color: #555;
    padding: 8px 12px;
    text-decoration: none;
    border: 1px solid #eee;
    border-radius: 4px;
    background-color: white;
    transition: all 0.2s ease;
    font-size: 14px;
  }
  
  .backlist-pagination-link:hover,
  .backlist-pagination-link:focus {
    background-color: #f9f9f9;
    border-color: #ddd;
  }
  
  .backlist-pagination-active .backlist-pagination-link {
    background-color: #4caf50;
    color: white;
    border-color: #4caf50;
    font-weight: 500;
  }
  
  .backlist-pagination-disabled .backlist-pagination-link {
    color: #ccc;
    cursor: not-allowed;
    background-color: #f9f9f9;
    border-color: #eee;
  }
  
  /* Loading and Error States */
  .backlist-loading,
  .backlist-error {
    padding: 20px;
    text-align: center;
    font-size: 15px;
    color: #666;
  }
  
  /* Empty State */
  .backlist-empty {
    padding: 30px;
    text-align: center;
    color: #666;
    font-size: 15px;
    background-color: #f9f9f9;
    border-radius: 5px;
    margin: 20px 0;
  }
  
  /* Responsive Design */
  @media (max-width: 768px) {
    .backlist-container {
      margin: 10px;
      padding: 15px;
    }
  
    .backlist-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 10px;
    }
  
    .backlist-title {
      margin-bottom: 10px;
    }
  
    .backlist-search {
      flex-direction: column;
      align-items: flex-start;
    }
  
    .sort-container {
      flex-wrap: wrap;
    }
  
    .backlist-table-header,
    .backlist-table-cell {
      padding: 10px 8px;
      font-size: 13px;
    }
  
    .backlist-row-action {
      padding: 5px 8px;
      font-size: 12px;
    }
  
    /* Stack buttons on mobile */
    .backlist-actions-cell {
      display: flex;
      flex-direction: column;
      gap: 5px;
    }
  
    .backlist-row-action {
      margin-right: 0;
      margin-bottom: 5px;
    }
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/card.css">
.card {
    background: white;
    padding: 16px;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    transition: all 0.3s ease;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: 100%;
    min-height: 120px;
    position: relative;
    overflow: hidden;
  }
  
  .card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.08);
  }
  
  .card::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 4px;
    height: 100%;
    background-color: var(--card-accent-color, #34495e);
    opacity: 0.8;
  }
  
  .card-header {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 16px;
  }
  
  .card .icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 10px;
    background-color: var(--card-accent-color, #4caf50);
    color: white;
    font-size: 18px;
    opacity: 0.9;
  }
  
  .card-info {
    flex: 1;
  }
  
  .card h3 {
    font-size: 14px;
    font-weight: 500;
    color: #666;
    margin: 0 0 4px 0;
  }
  
  .card .value {
    font-size: 20px;
    font-weight: 700;
    color: #333;
    margin: 0;
  }
  
  .card .percentage {
    font-size: 13px;
    font-weight: 600;
    color: var(--percentage-color, #4caf50);
    display: flex;
    align-items: center;
    gap: 4px;
  }
  
  .progress-bar {
    width: 100%;
    height: 8px;
    background-color: #f0f0f0;
    border-radius: 4px;
    overflow: hidden;
    margin-top: auto;
  }
  
  .progress {
    height: 100%;
    border-radius: 4px;
    transition: width 0.5s ease-in-out;
    background-color: var(--card-accent-color, #4caf50);
    opacity: 0.8;
  }
  
  /* Card color variations with updated colors */
  .card[data-color="blue"] {
    --card-accent-color: #3498db;
  }
  
  .card[data-color="green"] {
    --card-accent-color: #27ae60;
  }
  
  .card[data-color="orange"] {
    --card-accent-color: #d35400;
  }
  
  .card[data-color="purple"] {
    --card-accent-color: #8e44ad;
  }
  
  .card[data-color="teal"] {
    --card-accent-color: #16a085;
  }
  
  .card[data-color="yellow"] {
    --card-accent-color: #f39c12;
  }
  
  .card[data-color="pink"] {
    --card-accent-color: #2c3e50;
  }
  
  .card[data-color="cyan"] {
    --card-accent-color: #2980b9;
  }
  
  .card[data-color="indigo"] {
    --card-accent-color: #5b4de0; /* Added for Total Deliveries */
  }
  
  .card[data-color="gold"] {
    --card-accent-color: #f1c40f; /* Added for Average Rating */
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .card {
      padding: 12px;
      min-height: 100px;
    }
  
    .card .icon {
      width: 32px;
      height: 32px;
      font-size: 16px;
    }
  
    .card .value {
      font-size: 18px;
    }
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/detailspage.css">
/* Detail Page Container Styles */
.detailspage-container {
    background: white;
    padding: 25px;
    border-radius: 10px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    margin: 20px;
  }
  
  /* Header Styles */
  .detailspage-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 25px;
    padding-bottom: 15px;
    border-bottom: 1px solid #f0f0f0;
  }
  
  .detailspage-title {
    font-size: 24px;
    margin: 0;
    color: #333;
    font-weight: 600;
  }
  
  /* Content Section */
  .detailspage-content {
    background-color: #f9f9f9;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
  }
  
  /* Field Groups */
  .detailspage-field-group {
    margin-bottom: 25px;
  }
  
  .detailspage-field-group:last-child {
    margin-bottom: 0;
  }
  
  .detailspage-field-group-title {
    font-size: 18px;
    color: #4caf50;
    margin-bottom: 15px;
    font-weight: 600;
    padding-bottom: 8px;
    border-bottom: 2px solid #e8f5e9;
  }
  
  /* Individual Field Styles */
  .detailspage-field {
    display: flex;
    margin-bottom: 15px;
    border-bottom: 1px solid #eee;
    padding-bottom: 15px;
  }
  
  .detailspage-field:last-child {
    margin-bottom: 0;
    border-bottom: none;
    padding-bottom: 0;
  }
  
  .detailspage-field-label {
    font-weight: 600;
    color: #555;
    width: 150px;
    flex-shrink: 0;
    font-size: 15px;
  }
  
  .detailspage-field-value {
    color: #333;
    flex: 1;
    font-size: 15px;
    line-height: 1.5;
  }
  
  /* Status Badge */
  .detailspage-status {
    display: inline-block;
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 500;
    text-transform: capitalize;
  }
  
  .detailspage-status-pending {
    background-color: #fff8e1;
    color: #ffa000;
  }
  
  .detailspage-status-responded {
    background-color: #e8f5e9;
    color: #4caf50;
  }
  
  .detailspage-status-rejected {
    background-color: #ffebee;
    color: #e53935;
  }
  
  /* Long Text Content */
  .detailspage-long-text {
    background-color: white;
    padding: 15px;
    border-radius: 6px;
    border: 1px solid #eee;
    margin-top: 5px;
    white-space: pre-wrap;
    line-height: 1.6;
  }
  
  /* Action Buttons */
  .detailspage-actions {
    display: flex;
    gap: 10px;
    margin-top: 25px;
  }
  
  .detailspage-button {
    padding: 10px 16px;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    display: inline-flex;
    align-items: center;
    gap: 8px;
    text-decoration: none;
    border: none;
  }
  
  .detailspage-button:hover {
    transform: translateY(-1px);
  }
  
  .detailspage-button-primary {
    background-color: #4caf50;
    color: white;
    box-shadow: 0 2px 4px rgba(76, 175, 80, 0.2);
  }
  
  .detailspage-button-primary:hover {
    background-color: #45a049;
    box-shadow: 0 3px 6px rgba(76, 175, 80, 0.3);
  }
  
  .detailspage-button-secondary {
    background-color: #f5f5f5;
    color: #555;
    border: 1px solid #ddd;
  }
  
  .detailspage-button-secondary:hover {
    background-color: #eeeeee;
  }
  
  .detailspage-button-danger {
    background-color: #f44336;
    color: white;
    box-shadow: 0 2px 4px rgba(244, 67, 54, 0.2);
  }
  
  .detailspage-button-danger:hover {
    background-color: #e53935;
    box-shadow: 0 3px 6px rgba(244, 67, 54, 0.3);
  }
  
  /* Metadata Section */
  .detailspage-metadata {
    display: flex;
    justify-content: space-between;
    font-size: 13px;
    color: #777;
    margin-top: 30px;
    padding-top: 15px;
    border-top: 1px solid #eee;
  }
  
  .detailspage-metadata-item {
    display: flex;
    align-items: center;
    gap: 5px;
  }
  
  /* Responsive Design */
  @media (max-width: 768px) {
    .detailspage-container {
      margin: 10px;
      padding: 15px;
    }
  
    .detailspage-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 10px;
    }
  
    .detailspage-field {
      flex-direction: column;
    }
  
    .detailspage-field-label {
      width: 100%;
      margin-bottom: 5px;
    }
  
    .detailspage-actions {
      flex-direction: column;
    }
  
    .detailspage-button {
      width: 100%;
      justify-content: center;
    }
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/PredictionsDashboard.css">
.prdd-admin-dashboard {
    display: flex;
    background-color: #f4f6f9;
    height: 100vh;
  }
  
  .prdd-profile-container {
    flex: 1;
    padding: 50px;
    overflow-y: auto;
  }
  
  .prdd-chart-container {
    background: #ffffff;
    padding: 25px;
    border-radius: 10px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);
    margin-bottom: 30px;
  }
  
  .prdd-download-button {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    background-color: #28a745;
    color: white;
    padding: 10px 18px;
    border: none;
    border-radius: 6px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin-top: 10px;
  }
  
  .prdd-download-button:hover {
    background-color: #218838;
  }
  
  .prdd-week-section,
  .prdd-resolution-section {
    background: #ffffff;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 25px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  }
  
  .prdd-week-section h4,
  .prdd-resolution-section h4 {
    font-size: 18px;
    color: #333;
    margin-bottom: 10px;
    border-bottom: 2px solid #28a745;
    padding-bottom: 5px;
  }
  
  .prdd-ul-predactions {
    list-style: none;
    padding-left: 0;
    margin: 0;
  }
  
  .prdd-li-predactions {
    background-color: rgba(40, 167, 69, 0.1);
    border-left: 5px solid #28a745;
    padding: 10px 15px;
    margin: 6px 0;
    border-radius: 5px;
    font-size: 14px;
    color: #222;
    line-height: 1.5;
    display: flex;
    align-items: center;
    gap: 8px;
  }
  
  @media (max-width: 768px) {
    .prdd-chart-container {
      padding: 15px;
    }
  
    .prdd-download-button {
      width: 100%;
      justify-content: center;
    }
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/sidebar.css">
/* Refined Sidebar Styling - Classy Edition with Prefixes */

:root {
    --primary-green: #8dc73f;
    --primary-green-dark: #71a63f;
    --sidebar-bg: #71a63f;
    --white: #ffffff;
    --light-hover: rgba(255, 255, 255, 0.15);
    --active-item: rgba(255, 255, 255, 0.2);
    --sidebar-width: 250px;
    --transition-speed: 0.2s;
  }
  
  /* Style de base de la sidebar */
  .admin-sidebar {
    background: var(--sidebar-bg);
    color: var(--white);
    width: var(--sidebar-width);
    min-height: 100vh;
    padding: 0;
    box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
    position: relative;
  }
  
  /* Sidebar header with logo */
  .admin-sidebar-header {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 25px 15px 20px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    margin-bottom: 15px;
    text-align: center;
  }
  
  /* Logo container with enhanced styling */
  .admin-sidebar-logo-container {
    position: relative;
    margin-bottom: 12px;
  }
  
  /* Appliquer un cercle au logo avec effet élégant */
  .admin-sidebar-logo {
    width: 65px;
    height: 65px;
    border-radius: 50%;
    object-fit: cover;
    border: 3px solid rgba(255, 255, 255, 0.9);
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.15);
    transition: all 0.3s ease;
  }
  
  /* Subtle glow effect on hover */
  .admin-sidebar-logo:hover {
    border-color: #fff;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2), 0 0 20px rgba(255, 255, 255, 0.2);
    transform: scale(1.05);
  }
  
  /* Decorative circle behind logo */
  .admin-sidebar-logo-container::before {
    content: "";
    position: absolute;
    top: -5px;
    left: -5px;
    right: -5px;
    bottom: -5px;
    border-radius: 50%;
    background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0) 70%);
    z-index: -1;
  }
  
  /* Titre de la sidebar */
  .admin-sidebar h2 {
    font-size: 18px;
    font-weight: 600;
    margin: 0 0 3px 0;
    color: var(--white);
    letter-spacing: 0.5px;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }
  
  /* Subtitle for admin */
  .admin-sidebar-subtitle {
    font-size: 14px;
    color: rgba(255, 255, 255, 0.85);
    font-weight: 400;
    letter-spacing: 0.5px;
  }
  
  /* Liens de la sidebar */
  .admin-sidebar nav {
    display: flex;
    flex-direction: column;
    padding: 0 15px;
  }
  
  .admin-sidebar a,
  .admin-sidebar .admin-sidebar-dropdown button {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px 15px;
    margin: 3px 0;
    font-size: 14px;
    font-weight: 500;
    text-decoration: none;
    color: var(--white);
    background: transparent;
    border: none;
    width: 100%;
    text-align: left;
    cursor: pointer;
    transition: all var(--transition-speed);
    border-radius: 6px;
  }
  
  /* Hover effect */
  .admin-sidebar a:hover,
  .admin-sidebar .admin-sidebar-dropdown button:hover {
    background: var(--light-hover);
  }
  
  /* Active state */
  .admin-sidebar a.active {
    background: var(--active-item);
    font-weight: 600;
  }
  
  /* Icônes de la sidebar */
  .admin-sidebar .icon {
    font-size: 18px;
    min-width: 20px;
    transition: transform 0.2s ease;
  }
  
  /* Subtle icon animation on hover */
  .admin-sidebar a:hover .icon,
  .admin-sidebar .admin-sidebar-dropdown button:hover .icon {
    transform: translateX(2px);
  }
  
  /* Dropdown menu */
  .admin-sidebar-dropdown-content {
    display: flex;
    flex-direction: column;
    padding-left: 25px;
    margin-left: 5px;
    border-left: 1px solid rgba(255, 255, 255, 0.2);
  }
  
  /* Sous-menu Recipients & Donors */
  .admin-sidebar-sub-dropdown {
    background: transparent;
    border: none;
    color: var(--white);
    font-size: 14px;
    padding: 10px 15px;
    display: flex;
    align-items: center;
    gap: 10px;
    cursor: pointer;
    transition: all var(--transition-speed);
    border-radius: 6px;
  }
  
  .admin-sidebar-sub-dropdown:hover {
    background: var(--light-hover);
  }
  
  /* Contenu du sous-menu Recipients & Donors */
  .admin-sidebar-sub-dropdown-content {
    display: flex;
    flex-direction: column;
    padding-left: 25px;
    list-style-type: none;
    margin: 0;
  }
  
  .admin-sidebar-sub-dropdown-content a {
    padding: 8px 15px;
    font-size: 13px;
    color: rgba(255, 255, 255, 0.9);
  }
  
  .admin-sidebar-sub-dropdown-content a:hover {
    background: var(--light-hover);
  }
  
  .admin-sidebar-sub-dropdown-content a.active {
    background: var(--active-item);
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .admin-sidebar {
      width: 60px;
      overflow: hidden;
    }
  
    .admin-sidebar:hover {
      width: var(--sidebar-width);
    }
  
    .admin-sidebar h2,
    .admin-sidebar-subtitle,
    .admin-sidebar a span,
    .admin-sidebar .admin-sidebar-dropdown button span {
      display: none;
    }
  
    .admin-sidebar:hover h2,
    .admin-sidebar:hover .admin-sidebar-subtitle,
    .admin-sidebar:hover a span,
    .admin-sidebar:hover .admin-sidebar-dropdown button span {
      display: inline;
    }
  
    .admin-sidebar-header {
      padding: 15px 0;
    }
  
    .admin-sidebar:hover .admin-sidebar-header {
      padding: 25px 15px 20px;
    }
  
    .admin-sidebar-logo {
      width: 40px;
      height: 40px;
      margin-bottom: 0;
    }
  
    .admin-sidebar:hover .admin-sidebar-logo {
      width: 65px;
      height: 65px;
      margin-bottom: 12px;
    }
  
    .admin-sidebar a,
    .admin-sidebar .admin-sidebar-dropdown button {
      justify-content: center;
      padding: 15px 0;
    }
  
    .admin-sidebar:hover a,
    .admin-sidebar:hover .admin-sidebar-dropdown button {
      justify-content: flex-start;
      padding: 12px 15px;
    }
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/Composantdonation.css">
.donation-details {
  font-family: "Poppins", sans-serif;
  background: #f0f8f0;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 40px 20px;
  min-height: 100vh;
  }
  
  .donation-card-content-details {
    width: 100%;
    max-width: 900px;
    background: #ffffff;
    border-radius: 16px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
    padding: 40px;
    margin-bottom: 40px;
    position: relative;
    overflow: hidden;

  }
  .donation-card-content-details::before {
    content: "";
    position: absolute;
    top: -50px;
    right: -50px;
    width: 200px;
    height: 200px;
    border-radius: 50%;
    background: rgba(34, 139, 34, 0.1);
    z-index: 0;

  }
  
  .donation-title {
    margin-top: 0;
    color: #228b22;
    display: flex;
    align-items: center;
    gap: 5px;
  }
  
  .donation-ul {
    padding-left: 0;
    list-style-type: none;
    margin-bottom: 10px;
  }
  
  .donation-li-list {
    background: #dcebda83;
    padding: 8px;
    border-radius: 5px;
    margin: 5px 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  /* Card footer with button */
  .donation-card-footer {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    padding: 0 20px;
    background: linear-gradient(to bottom, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 1) 20%);
  }
  
  .btnseemorelist,
  .btnseelist {
    height: 35px;
    font-size: 15px;
    padding: 5px 20px;
    background-color: #228b22;
    color: white;
    border-radius: 5px;
    border: none;
    text-decoration: none;
    display: inline-block;
    transition: all 0.2s;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .btnseemorelist:hover,
  .btnseelist:hover {
    background-color: #1a6b1a;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }
  
  /* Status colors */
  .status.available {
    color: #228b22;
    font-weight: bold;
  }
  
  .status.pending {
    color: #ffa500;
    font-weight: bold;
    background-color: #fff3cd;
    padding: 2px 8px;
    border-radius: 4px;
  }
  
  .status.reserved {
    color: #ff4500;
    font-weight: bold;
  }
  
  /* Product icon */
  .product-icon {
    margin-right: 5px;
  }
  
  .donation-cardlist {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px;
  }
  
  .donation-card-content {
    background: #fff;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    width: 80%;
    max-width: 975px;
  }
  
  .donation-title {
    font-size: 1.8rem;
    font-weight: bold;
    color: #333;
    text-align: center;
    margin-bottom: 10px;
  }
  
  .donation-ul {
    list-style: none;
    padding: 0;
  }
  
  .donation-li-list {
    background: #f9f9f9;
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 10px;
  }
  
  .donation-li-list strong {
    color: #228b22;

  }
  
  /* Buttons */
  button {
    cursor: pointer;
    padding: 8px 12px;
    border-radius: 5px;
    border: none;
    font-size: 14px;
    font-weight: bold;
    transition: 0.3s;
  }
  
  button:hover {
    opacity: 0.8;
  }
  
  /* Specific Buttons */
  .btnseelist {
    display: block;
    width: 100%;
    text-align: center;
    background-color: #28a745;
    color: white;
    margin-top: 10px;
  }
  
  .btnseelist:hover {
    background-color: #218838;
  }
  
  /* Action Icons */
  .fa-trash {
    color: #c30010;
    cursor: pointer;
    font-size: 20px;
  }
  
  .fa-trash:hover {
    color: red;
  }
  
  .fa-edit {
    color: black;
    cursor: pointer;
    font-size: 20px;
  }
  
 
  
  .fa-save {
    color: green;
    cursor: pointer;
    font-size: 20px;
  }
  
  .fa-save:hover {
    color: #28a745;
  }
  
  .fa-times {
    color: red;
    cursor: pointer;
    font-size: 18px;
    margin-left: 10px;
  }
  
  .fa-times:hover {
    color: darkred;
  }
  
  /* Input Fields */
  input,
  textarea {
    width: 100%;
    padding: 8px;
    margin-top: 5px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 14px;
  }
  
  textarea {
    resize: vertical;
  }
  
  /* Product Edit Section */
  .donation-card-content ul li {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    align-items: center;
  }
  
  .donation-card-content ul li input {
    flex: 1;
    min-width: 100px;
  }
  
  /* Add Product Button */
  button[onClick="handleAddProduct"] {
    background-color: #228b22;
    
    color: white;
  }
  
  button[onClick="handleAddProduct"]:hover {
    background-color: #228b22;
  }
  
  /* Loader */
  div[children="Loading..."] {
    text-align: center;
    font-size: 18px;
    color: #555;
    margin-top: 20px;
  }
  .donation-cardlist {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px;
  }

  
  .donation-title {
    font-size: 1.8rem;
    font-weight: bold;
    color: #333;
    text-align: center;
    margin-bottom: 10px;
  }
  
  .donation-ul {
    list-style: none;
    padding: 0;
  }
  
  .donation-li-list {
    background: #f9f9f9;
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 10px;
  }
  
  .donation-li-list strong {
    color: #228b22;
  }
  
  /* 🛠 BUTTON STYLES */
  button {
    cursor: pointer;
    padding: 10px 15px;
    border-radius: 5px;
    border: none;
    font-size: 14px;
    font-weight: bold;
    transition: transform 0.2s ease, background-color 0.3s ease, box-shadow 0.3s ease;
  }
  
  /* 🟢 General Hover Effect */
  button:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }
  
  /* ✅ Edit Button */
  .edit-btn {
    background-color: #007bff;
    color: white;
  }
  
  .edit-btn:hover {
    background-color: #0056b3;
  }
  
  /* 💾 Save Button */
  .save-btn {
    background-color: green;
    color: white;
  }
  
  .save-btn:hover {
    background-color: #218838;
  }
  
  /* ❌ Delete Button */
  .delete-btn {
    background-color: #c30010;
    color: white;
  }
  
  .delete-btn:hover {
    background-color: red;
  }
  
  /* ➕ Add Request Button */
  .add-request-btn {
    background-color: #ff9800;
    color: white;
  }
  
  .add-request-btn:hover {
    background-color: #e68900;
  }
  
  /* 🔙 Go Back Button */
  .go-back-btn {
    background-color: #6c757d;
    color: white;
  }
  
  .go-back-btn:hover {
    background-color: #5a6268;
  }
  
  /* 👀 View Request Button */
  .view-request-btn {
    background-color: #28a745;
    color: white;
  }
  
  .view-request-btn:hover {
    background-color: #218838;
  }
  
  /* ➕ Add Product Button */
  .add-product-btn {
    background-color: #228b22;
    color: white;
    display: inline-block;
    padding: 10px 16px;
    font-size: 16px;
    font-weight: bold;
    text-align: center;
    border-radius: 30px;  
  margin-right: 10px;}
  
  .add-product-btn:hover {
    background-color: #1e571e;
  }
  
  /* 🛑 Hide View Request When Editing */
  .hide {
    display: none;
  }
  
  /* Icons (Edit, Save, Delete) */
  
  .fa-times {
    cursor: pointer;
    transition: transform 0.2s ease, color 0.2s ease;
  }
  
  /* 🔥 Animation when hovering over icons */
  .fa-trash:hover {
    color: red;
    transform: scale(1.2);
  }
  

  .fa-save:hover {
    color: green;
    transform: scale(1.2);
  }
  
  .fa-times:hover {
    color: darkred;
    transform: scale(1.2);
  }
  
  /* Input Fields */
  input,
  textarea {
    width: 100%;
    padding: 8px;
    margin-top: 5px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 14px;
  }
  
  textarea {
    resize: vertical;
  }
  

  .donation-card-content ul li input {
    flex: 1;
    min-width: 100px;
  }
  
  /* Loader */
  div[children="Loading..."] {
    text-align: center;
    font-size: 18px;
    color: #555;
    margin-top: 20px;
  }
  /* 🔧 Fixing Edit & Delete Icons */
.icon-container {
  display: flex;
  align-items: center;
  gap: 10px; /* Space between icons */
  margin-top: 10px; /* Add spacing from other elements */
}

/* 🎨 Icons Styling */


/* ❌ Delete Icon */
.fa-trash {
  color: red;
}

.fa-trash:hover {
  color: darkred;
  transform: scale(1.2);
}

/* ✏️ Edit Icon */
.fa-edit {
  color: #218838;

}

.fa-edit:hover {
  color: black;
  transform: scale(1.2);
}
</file>

<file path="sustainafood-frontend/src/assets/styles/Contact.css">
/* Base styles */
.contact-page {
    padding: 40px 20px;
    text-align: center;
    max-width: 1200px;
    margin: 0 auto;
    font-family: "Poppins", sans-serif;
  }
  
  .contact-title {
    font-size: 2.5rem;
    margin-bottom: 20px;
    color: #228b22;
    font-weight: 700;
    position: relative;
    display: inline-block;
    padding-bottom: 10px;
  }
  
  .contact-title::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 80px;
    height: 3px;
    background: #8dc73f;
    border-radius: 2px;
  }
  
  .contact-message {
    display: block;
    max-width: 800px;
    margin: 30px auto;
    padding: 25px 30px;
    text-align: center;
    font-size: 1.1rem;
    line-height: 1.6;
    font-weight: 400;
    color: #ffffff !important;
    background: linear-gradient(135deg, #8dc73f, #228b22);
    border-radius: 12px;
    box-shadow: 0 6px 20px rgba(141, 199, 63, 0.3);
    text-decoration: none;
    transition: all 0.3s ease;
  }
  
  .contact-message:hover {
    box-shadow: 0 8px 25px rgba(141, 199, 63, 0.4);
    transform: translateY(-3px);
  }
  
  /* Container layout */
  .contact-container {
    display: flex;
    justify-content: space-between;
    align-items: stretch;
    gap: 30px;
    margin: 40px 0;
  }
  
  /* Contact info section */
  .contact-info {
    width: 48%;
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
  }
  
  .contact-box {
    height: auto;
    min-height: 150px;
    background-color: #ffffff;
    border-radius: 12px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
    transition: all 0.3s ease;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 25px 15px;
    position: relative;
    overflow: hidden;
    border: 1px solid rgba(141, 199, 63, 0.1);
  }
  
  .contact-box:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(141, 199, 63, 0.2);
    border-color: rgba(141, 199, 63, 0.3);
  }
  
  .contact-box svg {
    margin-bottom: 15px;
    transition: all 0.3s ease;
    color: #8dc73f;
  }
  
  .contact-box:hover svg {
    transform: scale(1.1);
    color: #228b22;
  }
  
  .contact-box .content {
    display: flex;
    flex-direction: column;
    align-items: center;
    transition: all 0.3s ease;
    opacity: 1;
    position: relative;
    width: 100%;
  }
  
  .contact-box .content h4 {
    font-size: 1.2rem;
    font-weight: 600;
    margin: 0 0 8px 0;
    color: #333;
    transition: all 0.3s ease;
  }
  
  .contact-box .content p {
    margin: 0;
    font-size: 0.95rem;
    color: #666;
    transition: all 0.3s ease;
    line-height: 1.4;
  }
  
  .contact-box:hover .content h4 {
    color: #228b22;
  }
  
  .contact-box:hover .content p {
    color: #444;
  }
  
  /* Form section */
  .feedback-form-container {
    width: 48%;
    background-color: #ffffff;
    padding: 30px;
    border-radius: 12px;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.05);
    transition: all 0.3s ease;
    border: 1px solid rgba(141, 199, 63, 0.1);
  }
  
  .feedback-form-container:hover {
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.08);
  }
  
  .feedback-form-container h3 {
    font-size: 1.8rem;
    margin-bottom: 25px;
    color: #228b22;
    font-weight: 600;
    text-align: left;
    position: relative;
    padding-bottom: 10px;
  }
  
  .feedback-form-container h3::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    width: 60px;
    height: 3px;
    background: #8dc73f;
    border-radius: 2px;
  }
  
  .feedback-form {
    display: flex;
    flex-direction: column;
    gap: 20px;
    text-align: left;
  }
  
  .feedback-form input,
  .feedback-form textarea {
    padding: 14px 16px;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    font-size: 1rem;
    transition: all 0.3s ease;
    background-color: #f9f9f9;
    color: #333;
    width: 100%;
    box-sizing: border-box;
  }
  
  .feedback-form input:focus,
  .feedback-form textarea:focus {
    outline: none;
    border-color: #8dc73f;
    box-shadow: 0 0 0 3px rgba(141, 199, 63, 0.2);
    background-color: #fff;
  }
  
  .feedback-form textarea {
    min-height: 150px;
    resize: vertical;
  }
  
  .feedback-form button {
    padding: 14px 20px;
    background: linear-gradient(135deg, #8dc73f, #228b22);
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 600;
    transition: all 0.3s ease;
    box-shadow: 0 4px 10px rgba(141, 199, 63, 0.3);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }
  
  .feedback-form button:hover {
    background: linear-gradient(135deg, #228b22, #8dc73f);
    box-shadow: 0 6px 15px rgba(141, 199, 63, 0.4);
    transform: translateY(-2px);
  }
  
  .feedback-form button:active {
    transform: translateY(0);
    box-shadow: 0 2px 5px rgba(141, 199, 63, 0.3);
  }
  
  /* Success and error messages */
  .feedback-success {
    margin-top: 25px;
    background-color: rgba(141, 199, 63, 0.1);
    padding: 20px;
    border-radius: 8px;
    border-left: 4px solid #8dc73f;
    text-align: left;
    animation: fadeIn 0.5s ease;
  }
  
  .feedback-success p {
    margin: 0 0 15px 0;
    font-size: 1.1rem;
    color: #228b22;
    font-weight: 500;
  }
  
  .feedback-success button {
    background: #8dc73f;
    border: none;
    color: white;
    padding: 10px 20px;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 600;
    transition: all 0.3s ease;
  }
  
  .feedback-success button:hover {
    background: #228b22;
    transform: translateY(-2px);
  }
  
  .error-message {
    color: #d32f2f;
    background-color: rgba(211, 47, 47, 0.1);
    padding: 12px 16px;
    border-radius: 6px;
    margin-top: 15px;
    text-align: left;
    border-left: 4px solid #d32f2f;
    font-size: 0.95rem;
    animation: fadeIn 0.3s ease;
  }
  
  /* Map section */
  .contact-map {
    margin-top: 50px;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
    height: 450px;
    position: relative;
  }
  
  .contact-map iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: none;
  }
  
  /* Animations */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Responsive design */
  @media (max-width: 992px) {
    .contact-container {
      flex-direction: column;
      align-items: center;
    }
  
    .contact-info,
    .feedback-form-container {
      width: 100%;
      max-width: 600px;
    }
  
    .contact-info {
      margin-bottom: 30px;
    }
  }
  
  @media (max-width: 768px) {
    .contact-title {
      font-size: 2rem;
    }
  
    .contact-message {
      font-size: 1rem;
      padding: 20px;
    }
  
    .contact-info {
      grid-template-columns: 1fr;
    }
  
    .contact-box {
      min-height: 120px;
    }
  
    .feedback-form-container {
      padding: 20px;
    }
  
    .feedback-form-container h3 {
      font-size: 1.5rem;
    }
  
    .contact-map {
      height: 350px;
    }
  }
  
  @media (max-width: 480px) {
    .contact-page {
      padding: 30px 15px;
    }
  
    .contact-title {
      font-size: 1.8rem;
    }
  
    .feedback-form input,
    .feedback-form textarea {
      padding: 12px;
    }
  
    .feedback-form button {
      padding: 12px 16px;
    }
  
    .contact-map {
      height: 300px;
    }
  }
  
  /* Accessibility improvements */
  .feedback-form input:focus-visible,
  .feedback-form textarea:focus-visible,
  .feedback-form button:focus-visible,
  .feedback-success button:focus-visible {
    outline: 2px solid #228b22;
    outline-offset: 2px;
  }
  
  /* Additional hover effects */
  .contact-box::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background: linear-gradient(90deg, transparent, #8dc73f, transparent);
    transform: scaleX(0);
    transition: transform 0.5s ease;
  }
  
  .contact-box:hover::before {
    transform: scaleX(1);
  }
  
  /* Loading indicator for form submission */
  .loading-spinner {
    display: inline-block;
    width: 20px;
    height: 20px;
    margin-right: 10px;
    border: 3px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: #fff;
    animation: spin 1s ease-in-out infinite;
  }
  
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
  
  /* Improve form placeholder styling */
  .feedback-form input::placeholder,
  .feedback-form textarea::placeholder {
    color: #999;
    opacity: 0.8;
    transition: opacity 0.3s ease;
  }
  
  .feedback-form input:focus::placeholder,
  .feedback-form textarea:focus::placeholder {
    opacity: 0.5;
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/EditProfile.css">
/* EditProfile.css - Royal Edition with Decorative Elements */

:root {
  --royal-green: #8dc73f;
  --royal-green-dark: #71a63f;
  --royal-green-light: rgba(141, 199, 63, 0.1);
  --royal-gold: #f0c14b;
  --royal-gold-light: rgba(240, 193, 75, 0.1);
  --royal-white: #ffffff;
  --royal-off-white: #f8f9fa;
  --royal-gray-light: #e9ecef;
  --royal-gray: #ced4da;
  --royal-text: #2c3e50;
  --royal-text-light: #6c757d;
  --royal-shadow: rgba(0, 0, 0, 0.08);
  --royal-shadow-hover: rgba(0, 0, 0, 0.15);
  --royal-error: #e74c3c;
  --bg-mint: #f0f5f0;
}

body {
  background-color: var(--bg-mint);
  font-family: "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
  position: relative;
  overflow-x: hidden;
}

/* Decorative background circles */
body::before {
  content: "";
  position: fixed;
  top: -150px;
  right: -150px;
  width: 300px;
  height: 300px;
  border-radius: 50%;
  background-color: rgba(141, 199, 63, 0.1);
  z-index: -1;
}

body::after {
  content: "";
  position: fixed;
  bottom: -100px;
  left: -100px;
  width: 200px;
  height: 200px;
  border-radius: 50%;
  background-color: rgba(141, 199, 63, 0.08);
  z-index: -1;
}

.editprofile-container {
  display: flex;
  flex-direction: column;
  width: 100%;
  max-width: 900px;
  position: relative;
  background: var(--royal-white);
  border-radius: 16px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
  border: 1px solid rgba(141, 199, 63, 0.15);
  margin: 30px auto;
  padding: 40px;
  overflow: visible;
  transition: all 0.3s ease;
}

/* Card shape with curved corner */
.editprofile-container::before {
  content: "";
  position: absolute;
  top: 0;
  right: 0;
  width: 100px;
  height: 100px;
  background-color: var(--bg-mint);
  border-radius: 0 0 0 100%;
  z-index: 0;
}

.editprofile-container::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  width: 70px;
  height: 70px;
  background-color: var(--bg-mint);
  border-radius: 0 100% 0 0;
  z-index: 0;
}

.editprofile-container > * {
  position: relative;
  z-index: 1;
}

.editprofile-container:hover {
  box-shadow: 0 15px 40px rgba(0, 0, 0, 0.08);
  transform: translateY(-2px);
}

.editprofile-header {
  display: flex;
  align-items: center;
  margin-bottom: 40px;
  position: relative;
}

.editprofile-header::after {
  content: "";
  position: absolute;
  bottom: -20px;
  left: 0;
  width: 100%;
  height: 1px;
  background: linear-gradient(90deg, rgba(141, 199, 63, 0.5), rgba(141, 199, 63, 0.1), transparent);
}

.editprofile-profile-section {
  flex: 1;
  max-width: 450px;
}

.editprofile-profile-image-container {
  position: relative;
  width: 110px;
  height: 110px;
  margin: 0;
  border-radius: 50%;
  background: var(--royal-white);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
  border: 4px solid var(--royal-green);
  overflow: hidden;
  transition: all 0.3s ease;
}

.editprofile-profile-image-container:hover {
  transform: scale(1.03);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
  border-color: var(--royal-gold);
}

.editprofile-profile-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: all 0.5s ease;
}

.editprofile-profile-image:hover {
  transform: scale(1.08);
}

.editprofile-photo-icon {
  position: absolute;
  bottom: 5px;
  right: 5px;
  width: 32px;
  height: 32px;
  background: var(--royal-green);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.2);
  transition: all 0.3s ease;
  border: 2px solid var(--royal-white);
  z-index: 2;
}

.editprofile-photo-icon:hover {
  background: var(--royal-gold);
  transform: scale(1.1) rotate(5deg);
}

.editprofile-row {
  margin: 0;
  display: contents;
}

.editprofile-col-md-3,
.editprofile-col-md-5,
.editprofile-col-md-4 {
  padding: 20px;
  width: 100%;
}

.editprofile-col-md-3 {
  background-color: rgba(248, 252, 248, 0.8);
  border-radius: 16px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
  text-align: center;
}

.editprofile-col-md-5,
.editprofile-col-md-4 {
  background-color: rgba(248, 252, 248, 0.8);
  border-radius: 16px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
  width: 100%;
  max-width: 500px;
}

.editprofile-d-flex {
  display: flex;
  flex-wrap: wrap;
}

.editprofile-align-items-center {
  align-items: center;
}

.editprofile-text-center {
  text-align: center;
}

.editprofile-font-weight-bold {
  font-weight: 600;
  color: var(--royal-text);
  font-size: 1.4rem;
  margin: 0;
  letter-spacing: -0.5px;
}

.editprofile-text-black-50 {
  color: var(--royal-text-light);
  font-size: 0.95rem;
  margin: 5px 0 0 0;
}

.editprofile-labels {
  font-size: 14px;
  color: #3a5a3a;
  margin-bottom: 5px;
}

.login-input {
  background: var(--royal-off-white);
  outline: none;
  border: 1px solid var(--royal-gray-light);
  border-radius: 10px;
  padding: 14px 16px;
  margin: 0;
  display: block;
  color: var(--royal-text);
  font-weight: 500;
  font-size: 0.95em;
  width: 100%;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.02);
  transition: all 0.3s ease;
}

.login-input:focus {
  border-color: var(--royal-green);
  background: var(--royal-white);
  box-shadow: 0 0 0 3px rgba(141, 199, 63, 0.15);
}

.login-input:hover {
  border-color: var(--royal-green-dark);
  background: var(--royal-white);
}

.login-input.error {
  border-color: var(--royal-error);
  box-shadow: 0 0 0 2px rgba(231, 76, 60, 0.1);
}

select.login-input {
  appearance: none;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%238dc73f' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M6 9l6 6 6-6'/%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: right 12px center;
  padding-right: 40px;
}

.editprofile-profile-button {
  background: linear-gradient(135deg, #8dc73f, #71a63f);
  color: white;
  border: none;
  padding: 14px 28px;
  font-size: 16px;
  border-radius: 30px;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(141, 199, 63, 0.3);
}

.editprofile-profile-button:hover {
  background: linear-gradient(135deg, #71a63f, #5a8a2f);
  transform: translateY(-2px);
  box-shadow: 0 6px 18px rgba(141, 199, 63, 0.4);
}

.editprofile-experience {
  font-size: 18px;
  font-weight: 600;
  color: #1a7a1a;
}

img.editprofile-rounded-circle {
  object-fit: cover;
  border: 4px solid #fff;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

/* Label styles */
.login-label {
  position: absolute;
  left: 0;
  top: -22px;
  color: var(--royal-green);
  font-size: 0.9em;
  font-weight: 600;
  transition: all 0.2s ease;
  letter-spacing: 0.3px;
}

.login-input-block {
  position: relative;
  margin: 0;
}

/* Transitions when input is focused or filled */
.login-input:focus + .login-label,
.login-input:valid + .login-label,
.login-input:not(:placeholder-shown) + .login-label {
  transform: none;
  color: #71a63f;
  font-weight: 500;
}

/* Hide default file input */
.login-input[type="file"] {
  display: none;
}

.custom-file-upload {
  background: linear-gradient(to right, var(--royal-green-light), rgba(141, 199, 63, 0.05));
  color: var(--royal-green-dark);
  padding: 12px 20px;
  cursor: pointer;
  border-radius: 10px;
  display: inline-flex;
  align-items: center;
  gap: 10px;
  transition: all 0.3s ease;
  border: 1px solid rgba(141, 199, 63, 0.2);
  font-weight: 500;
  font-size: 0.9em;
  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.03);
}

.custom-file-upload:hover {
  background: linear-gradient(to right, rgba(141, 199, 63, 0.15), rgba(141, 199, 63, 0.1));
  transform: translateY(-2px);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
}

.custom-file-upload img {
  width: 18px;
  height: 18px;
  margin-right: 5px;
}

.file-name {
  margin-top: 10px;
  font-size: 0.9em;
  color: #3a5a3a;
  background: rgba(141, 199, 63, 0.1);
  padding: 8px 12px;
  border-radius: 8px;
  display: inline-block;
}

/* From Uiverse.io by sameer2malik */
.loginsignup-container {
  background-color: #f5f5f5;
  padding: 20px;
}

.login-container {
  display: flex;
  width: 100%;
  max-width: 720px;
  height: 500px;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.95), rgba(248, 252, 248, 0.9));
  border-radius: 20px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(141, 199, 63, 0.2);
  margin: 120px auto;
}

.login-left {
  width: 66%;
  height: 100%;
}

.login-form {
  display: flex;
  flex-direction: column;
  height: 100%;
  width: 100%;
  left: 0;
  backdrop-filter: blur(20px);
  position: relative;
}

.login-form::before {
  position: absolute;
  content: "";
  width: 40%;
  height: 40%;
  right: 1%;
  z-index: -1;
  background: radial-gradient(circle, #71a63f, rgba(141, 199, 63, 0.37) 60%, rgba(113, 166, 63, 0.2) 100%);
  filter: blur(70px);
  border-radius: 50%;
}

.login-right {
  width: 34%;
  height: 100%;
}

.login-img {
  width: 100%;
  max-width: 270px;
  height: auto;
  max-height: 300px;
  margin-top: 100px;
}

.login-logo {
  width: 100px;
  height: 100px;
  margin-left: 15px;
}

.login-container::after {
  position: absolute;
  content: "";
  width: 80%;
  height: 80%;
  right: -40%;
  background: rgb(151, 209, 162);
  background: radial-gradient(circle, #71a63f 100%, #71a63f 100%);
  border-radius: 50%;
  z-index: -1;
}

.editprofile-text-right {
  color: var(--royal-green);
  font-size: 1.8rem;
  font-weight: 700;
  margin-left: auto;
  position: relative;
  letter-spacing: -0.5px;
}

.editprofile-text-right::after {
  content: "";
  position: absolute;
  bottom: -8px;
  left: 0;
  width: 40px;
  height: 3px;
  background: var(--royal-gold);
  border-radius: 2px;
}

.editprofile-user-info {
  display: flex;
  flex-direction: column;
  margin-left: 25px;
}

.login-button {
  background: linear-gradient(135deg, var(--royal-green), var(--royal-green-dark));
  border: none;
  border-radius: 30px;
  padding: 14px 30px;
  margin: 40px auto 0;
  display: block;
  color: white;
  font-weight: 600;
  font-size: 1em;
  width: 100%;
  max-width: 250px;
  box-shadow: 0 5px 15px rgba(141, 199, 63, 0.3);
  transition: all 0.3s ease;
  cursor: pointer;
  text-transform: uppercase;
  letter-spacing: 1px;
  grid-column: span 2;
  position: relative;
  overflow: hidden;
}

.login-button::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: all 0.6s ease;
}

.login-button:hover {
  background: linear-gradient(135deg, var(--royal-green-dark), #5a8a2f);
  transform: translateY(-3px);
  box-shadow: 0 8px 25px rgba(141, 199, 63, 0.4);
}

.login-button:hover::before {
  left: 100%;
}

.login-button:active {
  transform: translateY(-1px);
  box-shadow: 0 3px 10px rgba(141, 199, 63, 0.3);
}

.login-input-block {
  position: relative;
  margin-top: 0;
}

.login-forgot {
  display: block;
  margin: 5px 0 10px 0;
  margin-left: 35px;
  color: #71a63f;
  font-size: 0.9em;
  transition: all 0.3s ease;
}

.login-forgot:hover {
  color: #5a8a2f;
  text-decoration: underline;
}

.login-a {
  color: #8dc73f;
  transition: all 0.3s ease;
}

.login-a:hover {
  color: #5a8a2f;
  text-decoration: underline;
}

.editprofile-form {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 25px;
  margin-top: 20px;
}

/* Position the camera icon within the container */
/* Make the image fill the container */
/* Ensure the container has the same width/height as the image */
/* Position the camera icon within the container */
.editprofile-photo-icon i {
  font-size: 16px;
  color: white;
}

/* Hide the file input by default */
#file-upload-photo,
#file-upload-student {
  display: none;
}

/* Error message styling */
.error-field {
  color: var(--royal-error);
  font-size: 0.75em;
  margin-top: 5px;
  font-weight: 500;
  padding-left: 5px;
}

/* Student card image preview */
.student-card-preview {
  margin-top: 15px;
  text-align: center;
  grid-column: span 2;
}

.student-card-preview img {
  max-width: 300px;
  height: auto;
  border-radius: 10px;
  border: 1px solid var(--royal-gray-light);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
  transition: all 0.3s ease;
}

.student-card-preview img:hover {
  transform: scale(1.02);
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
}

/* For student card upload section - span full width */
.row3 {
  grid-column: span 2;
}

/* Additional decorative circles */
.decorative-circles {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  overflow: hidden;
  pointer-events: none;
  z-index: -1;
}

.circle {
  position: absolute;
  border-radius: 50%;
  background-color: rgba(141, 199, 63, 0.05);
  z-index: -1;
}

.circle-1 {
  width: 150px;
  height: 150px;
  top: -75px;
  right: 10%;
  background-color: rgba(141, 199, 63, 0.07);
}

.circle-2 {
  width: 80px;
  height: 80px;
  bottom: 10%;
  right: 5%;
  background-color: rgba(141, 199, 63, 0.05);
}

.circle-3 {
  width: 120px;
  height: 120px;
  top: 20%;
  left: -60px;
  background-color: rgba(240, 193, 75, 0.05);
}

.circle-4 {
  width: 60px;
  height: 60px;
  bottom: 15%;
  left: 10%;
  background-color: rgba(141, 199, 63, 0.07);
}

/* Media Queries for Responsiveness */
@media (max-width: 768px) {
  .editprofile-container {
    padding: 30px 20px;
  }

  .editprofile-header {
    flex-direction: column;
    align-items: center;
    text-align: center;
    margin-bottom: 50px;
  }

  .editprofile-user-info {
    margin: 15px 0 0;
    align-items: center;
  }

  .editprofile-text-right {
    margin: 20px 0 0;
    text-align: center;
  }

  .editprofile-text-right::after {
    left: 50%;
    transform: translateX(-50%);
    width: 60px;
  }

  .editprofile-form {
    grid-template-columns: 1fr;
    gap: 30px;
  }

  .row3,
  .login-button {
    grid-column: span 1;
  }

  .student-card-preview {
    grid-column: span 1;
  }
}

@media (max-width: 480px) {
  .editprofile-container {
    padding: 25px 15px;
  }

  .editprofile-profile-image-container {
    width: 90px;
    height: 90px;
  }

  .editprofile-font-weight-bold {
    font-size: 1.2rem;
  }

  .editprofile-text-right {
    font-size: 1.5rem;
  }

  .login-input {
    padding: 12px 14px;
  }

  .custom-file-upload {
    padding: 10px 15px;
    font-size: 0.85em;
  }
}

/* Animation for profile image */
@keyframes subtle-pulse {
  0% {
    box-shadow: 0 5px 15px rgba(141, 199, 63, 0.3);
  }
  50% {
    box-shadow: 0 5px 20px rgba(141, 199, 63, 0.5);
  }
  100% {
    box-shadow: 0 5px 15px rgba(141, 199, 63, 0.3);
  }
}

.editprofile-profile-image-container {
  animation: subtle-pulse 3s infinite ease-in-out;
}

/* Elegant focus styles */
.login-input:focus {
  border-color: var(--royal-green);
  box-shadow: 0 0 0 3px rgba(141, 199, 63, 0.15);
  transition: all 0.2s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

/* Elegant hover styles for inputs */
.login-input:hover:not(:focus) {
  border-color: rgba(141, 199, 63, 0.5);
}

/* Add a subtle shine effect to the profile image */
.editprofile-profile-image-container::after {
  content: "";
  position: absolute;
  top: -30%;
  left: -100%;
  width: 50%;
  height: 200%;
  background: linear-gradient(
    to right,
    rgba(255, 255, 255, 0) 0%,
    rgba(255, 255, 255, 0.3) 50%,
    rgba(255, 255, 255, 0) 100%
  );
  transform: rotate(25deg);
  animation: shine 3s infinite;
}

@keyframes shine {
  0% {
    left: -100%;
  }
  20% {
    left: 100%;
  }
  100% {
    left: 100%;
  }
}

/* Add a subtle gold accent to the save button */
.login-button::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 2px;
  background: var(--royal-gold);
  opacity: 0.5;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/Game.css">
body {
    font-family: sans-serif;
    /* Ajustez ou supprimez ces styles s'ils entrent en conflit avec votre projet global */
    /* display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background-color: #f0f0f0; */
  }
  
  .app-container {
    text-align: center;
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    /* Ajoutez des styles pour s'intégrer à votre mise en page si nécessaire */
     margin: 20px auto; /* Exemple pour centrer la boîte de jeu */
     max-width: 700px; /* Limiter la largeur */
  }
  
  /* Pour s'assurer que le conteneur spécifique à la page du jeu prend de la place */
  .game-page-container {
      padding-top: 80px; /* Ajustez si vous avez une navbar fixe */
      padding-bottom: 40px;
  }
  
  
  /* --- Fruit Selector --- */
  .fruit-selector h2 {
    margin-bottom: 15px;
    color: #388e3c; /* Thème SustainaFood */
  }
  
  .fruit-options button {
    font-size: 2rem; /* Make emojis bigger */
    margin: 0 10px;
    padding: 10px;
    border: 2px solid transparent;
    background: none;
    cursor: pointer;
    transition: transform 0.2s ease, border-color 0.2s ease;
  }
  
  .fruit-options button:hover {
    transform: scale(1.2);
  }
  
  .fruit-options button.selected {
    border: 2px solid #4caf50; /* Thème SustainaFood */
    border-radius: 5px;
  }
  
  .start-button {
    margin-top: 20px;
    padding: 10px 20px;
    font-size: 1rem;
    cursor: pointer;
    background-color: #4caf50; /* Thème SustainaFood */
    color: white;
    border: none;
    border-radius: 5px;
    transition: background-color 0.3s;
  }
  .start-button:hover:not(:disabled) {
    background-color: #388e3c;
  }
  
  .start-button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }
  
  /* --- Game Area --- */
  .game-area {
    width: 100%; /* Prend toute la largeur du conteneur parent */
    max-width: 600px; /* Limite maximale */
    height: 300px; /* Adjust as needed */
    border: 2px solid #a5d6a7; /* Thème SustainaFood */
    margin: 20px auto;
    position: relative; /* Crucial for positioning elements inside */
    overflow: hidden; /* Hide elements that go outside */
    background-color: #e8f5e9; /* Thème SustainaFood - vert très pâle */
  }
  
  .score-display {
    position: absolute;
    top: 10px;
    right: 10px;
    font-size: 1.2rem;
    font-weight: bold;
    color: #2e7d32; /* Thème SustainaFood */
  }
  
  .fruit {
    position: absolute;
    bottom: 10px; /* Initial ground position */
    left: 50px;   /* Fixed horizontal position */
    font-size: 2rem;
    transition: bottom 0.2s ease-out; /* Smooth jump */
    user-select: none; /* Prevent text selection */
    z-index: 10;
  }
  
  .trash {
    position: absolute;
    bottom: 10px; /* Ground position */
    font-size: 2rem;
    user-select: none; /* Prevent text selection */
    z-index: 5;
    color: #795548; /* Marron pour la poubelle */
  }
  
  /* --- Game Over --- */
  .game-over {
    margin-top: 20px;
  }
  
  .game-over h2 {
    color: #d32f2f; /* Rouge pour Game Over */
  }
  
  .game-over p {
    font-size: 1.2rem;
    margin: 10px 0;
    color: #333;
  }
  
  .restart-button {
    padding: 10px 20px;
    font-size: 1rem;
    cursor: pointer;
    background-color: #007bff; /* Bleu pour redémarrer */
    color: white;
    border: none;
    border-radius: 5px;
     transition: background-color 0.3s;
  }
  .restart-button:hover {
      background-color: #0056b3;
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/TransporterProfile.css">
.transporter-profile {
  padding: 2rem;
  background: #ffffff;
  border-radius: 12px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  margin-bottom: 2rem;
  max-width: 600px;
  margin: 0 auto;
}

.transporter-profile h3 {
  color: #1e293b;
  font-size: 1.75rem;
  margin-bottom: 1.5rem;
  font-weight: 600;
  position: relative;
  padding-bottom: 0.5rem;
}

.transporter-profile h3::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  width: 60px;
  height: 3px;
  background: #65a30d;
  border-radius: 3px;
}

.transporter-card {
  background: #ffffff;
  padding: 1.5rem;
  border-radius: 10px;
  margin-bottom: 1.5rem;
  border-left: 4px solid #65a30d;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
  position: relative;
}

.transporter-card h4 {
  color: #1e293b;
  font-size: 1.25rem;
  margin: 0 0 1.25rem;
  font-weight: 600;
  display: flex;
  align-items: center;
}

.transporter-card h4::before {
  content: "";
  display: inline-block;
  width: 8px;
  height: 8px;
  background-color: #65a30d;
  border-radius: 50%;
  margin-right: 10px;
}

.transporter-card p {
  color: #475569;
  margin: 0.75rem 0;
  line-height: 1.5;
  font-size: 1rem;
}

.transporter-card label {
  display: block;
  margin-bottom: 0.5rem;
  color: #475569;
  font-size: 0.95rem;
}

.transporter-card input[type="text"] {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #e2e8f0;
  border-radius: 6px;
  font-size: 0.95rem;
  margin-bottom: 1rem;
}

.availability-btn {
  width: 100%;
  padding: 0.85rem;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.2s ease;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.availability-btn.available {
  background-color: #65a30d;
  color: white;
}

.availability-btn.unavailable {
  background-color: #ef4444;
  color: white;
}

.availability-btn:hover {
  opacity: 0.9;
}

.map-placeholder {
  margin-top: 1.5rem;
  padding: 2rem;
  background-color: #f8fafc;
  border-radius: 8px;
  text-align: center;
  color: #64748b;
  font-style: italic;
  border: 1px dashed #cbd5e0;
}

.error-message {
  color: #ef4444;
  font-size: 0.95rem;
  margin-bottom: 1rem;
  padding: 0.75rem;
  background-color: rgba(239, 68, 68, 0.1);
  border-radius: 6px;
  border-left: 3px solid #ef4444;
}

.loading-message {
  color: #3b82f6;
  font-size: 0.95rem;
  margin-bottom: 1rem;
  padding: 0.75rem;
  background-color: rgba(59, 130, 246, 0.1);
  border-radius: 6px;
  border-left: 3px solid #3b82f6;
  display: flex;
  align-items: center;
}

.loading-message::before {
  content: "";
  display: inline-block;
  width: 12px;
  height: 12px;
  border: 2px solid #3b82f6;
  border-radius: 50%;
  border-top-color: transparent;
  margin-right: 10px;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

/* Status label styling */
.transporter-card p strong {
  display: inline-block;
  min-width: 70px;
  font-weight: 500;
  color: #64748b;
}

/* Location label styling */
.transporter-card label {
  display: flex;
  align-items: center;
  color: #cc124a;
  font-weight: 500;
}

/* Latitude/Longitude styling */
.transporter-card p:has(+ p) {
  margin-bottom: 0.5rem;
}

/* Responsive Design */
@media (max-width: 768px) {
  .transporter-profile {
    padding: 1.5rem;
  }
  
  .transporter-card {
    padding: 1.25rem;
  }
}

@media (max-width: 480px) {
  .transporter-profile {
    padding: 1.25rem;
  }
  
  .transporter-card {
    padding: 1rem;
  }
  
  .transporter-profile h3 {
    font-size: 1.5rem;
  }
  
  .transporter-card h4 {
    font-size: 1.15rem;
  }
}
</file>

<file path="sustainafood-frontend/src/components/backoffcom/Chart.jsx">
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
  PieChart,
  Pie,
  Cell,
} from "recharts"
import "/src/assets/styles/backoffcss/chart.css"

// Custom color palette
const COLORS = {
  // Primary colors
  primary: "#34495e", // Dark slate blue
  secondary: "#3498db", // Soft blue
  tertiary: "#1abc9c", // Teal

  // Status colors
  success: "#27ae60", // Green
  warning: "#f39c12", // Amber
  danger: "#e74c3c", // Red
  info: "#2980b9", // Blue

  // Neutral colors
  neutral1: "#7f8c8d", // Gray
  neutral2: "#95a5a6", // Light gray

  // Chart colors - softer, more professional palette
  chart1: "#2c3e50", // Dark blue
  chart2: "#16a085", // Green
  chart3: "#8e44ad", // Purple
  chart4: "#d35400", // Orange
  chart5: "#2980b9", // Blue
  chart6: "#27ae60", // Green
}

// Sample data for pie charts
const pieData = [
  { name: "Category A", value: 60 },
  { name: "Category B", value: 40 },
]

const lineData = [
  { name: "Jan", sales: 4000 },
  { name: "Feb", sales: 3000 },
  { name: "Mar", sales: 5000 },
  { name: "Apr", sales: 7000 },
]

const Chart = ({ type = "line", title = "Chart Title", data = lineData }) => {
  // Use our custom colors for the charts
  const chartColors = [COLORS.chart1, COLORS.chart2, COLORS.chart3, COLORS.chart4, COLORS.chart5, COLORS.chart6]

  return (
    <div className="charts-container">
      <div className="chart">
        <h3>{title}</h3>
        {type === "line" && (
          <ResponsiveContainer width="100%" height={250}>
            <LineChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
              <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
              <XAxis
                dataKey="name"
                tick={{ fill: "#666" }}
                axisLine={{ stroke: "#e0e0e0" }}
                tickLine={{ stroke: "#e0e0e0" }}
              />
              <YAxis tick={{ fill: "#666" }} axisLine={{ stroke: "#e0e0e0" }} tickLine={{ stroke: "#e0e0e0" }} />
              <Tooltip
                contentStyle={{
                  backgroundColor: "white",
                  border: "none",
                  borderRadius: "8px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                }}
              />
              <Legend wrapperStyle={{ paddingTop: "10px" }} />
              <Line
                type="monotone"
                dataKey="sales"
                stroke={COLORS.tertiary}
                strokeWidth={3}
                dot={{ stroke: COLORS.tertiary, strokeWidth: 2, r: 4, fill: "white" }}
                activeDot={{ stroke: COLORS.tertiary, strokeWidth: 2, r: 6, fill: "white" }}
              />
            </LineChart>
          </ResponsiveContainer>
        )}

        {type === "pie" && (
          <ResponsiveContainer width="100%" height={250}>
            <PieChart>
              <Pie data={data} cx="50%" cy="50%" labelLine={false} outerRadius={80} fill="#8884d8" dataKey="value">
                {data.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={chartColors[index % chartColors.length]} />
                ))}
              </Pie>
              <Tooltip
                contentStyle={{
                  backgroundColor: "white",
                  border: "none",
                  borderRadius: "8px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                }}
              />
              <Legend wrapperStyle={{ paddingTop: "10px" }} />
            </PieChart>
          </ResponsiveContainer>
        )}
      </div>
    </div>
  )
}

export default Chart
</file>

<file path="sustainafood-frontend/src/components/Composantdonation.jsx">
import React from 'react';
import { Link } from 'react-router-dom';
import styled, { keyframes } from 'styled-components';

const float = keyframes`
  0% { transform: translateY(0px); }
  50% { transform: translateY(-15px); }
  100% { transform: translateY(0px); }
`;

const shimmer = keyframes`
  0% { background-position: -1000px 0; }
  100% { background-position: 1000px 0; }
`;

const Card = styled.div`
  background: #ffffff;
  border-radius: 16px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
  padding: 30px;
  flex: 1 1 250px;
  max-width: 300px;
  min-height: 400px;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  animation: ${float} 6s ease-in-out infinite;

  &:hover {
    transform: translateY(-10px);
    box-shadow: 0 15px 35px rgba(34, 139, 34, 0.1);
  }

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 5px;
    height: 0;
    background: linear-gradient(to bottom, #228b22, #56ab2f);
    transition: height 0.3s ease;
  }

  &:hover::before {
    height: 100%;
  }
`;

const Title = styled.h3`
  font-size: 24px;
  font-weight: 600;
  color: #1a7a1a;
  margin-bottom: 15px;
  display: flex;
  align-items: center;
  gap: 8px;
  transition: color 0.3s ease;
`;

const Details = styled.p`
  font-size: 16px;
  color: #3a5a3a;
  margin: 5px 0;
  line-height: 1.6;
  display: flex;
  align-items: center;
  gap: 6px;
  flex-wrap: wrap;
`;

const StatusBadge = styled.span`
  display: inline-block;
  padding: 5px 12px;
  border-radius: 20px;
  font-size: 14px;
  font-weight: bold;
  color: white;
  background: ${({ status }) => {
    switch (status) {
      case 'pending':
        return '#f0ad4e';
      case 'fulfilled':
        return '#28a745';
      case 'partially_fulfilled':
        return '#6c757d';
      case 'approved':
        return '#228b22';
      case 'rejected':
        return '#dc3545';
      default:
        return '#888';
    }
  }};
`;

const ItemList = styled.ul`
  list-style: none;
  padding: 0;
  margin-top: 10px;
`;

const Item = styled.li`
  background: #f5f5f5;
  padding: 10px;
  border-radius: 8px;
  margin-bottom: 6px;
  font-size: 14px;
  color: #3a5a3a;
  display: flex;
  flex-direction: column;
  gap: 4px;
`;

const SeeMoreButton = styled(Link)`
  display: inline-block;
  padding: 12px 24px;
  font-size: 16px;
  font-weight: 600;
  background: linear-gradient(135deg, #228b22, #56ab2f);
  color: white;
  border-radius: 30px;
  text-decoration: none;
  transition: all 0.3s ease;
  box-shadow: 0 6px 15px rgba(34, 139, 34, 0.2);
  position: relative;
  overflow: hidden;
  text-align: center;

  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(34, 139, 34, 0.3);
  }

  &::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.3) 50%, rgba(255, 255, 255, 0) 100%);
    transform: rotate(30deg);
    animation: ${shimmer} 3s infinite;
    pointer-events: none;
  }
`;

export const Composantdonation = ({ donation }) => {
  if (!donation || typeof donation !== 'object' || !donation._id) {
    return <div>Invalid donation data.</div>;
  }

  const {
    _id,
    title,
    address,
    expirationDate,
    numberOfMeals = 0,
    products = [],
    meals = [],
    status,
  } = donation;

  return (
    <Card>
      <div>
        <Title>🛒 {title || 'Untitled Donation'}</Title>
        <Details>📍 <strong>Location:</strong> {address || 'Not specified'}</Details>
        <Details>
          📆 <strong>Expiration:</strong>{' '}
          {expirationDate ? new Date(expirationDate).toLocaleDateString() : 'Not defined'}
        </Details>
        <Details>
          🔄 <strong>Status:</strong>{' '}
          <StatusBadge status={status}>{status || 'Unknown'}</StatusBadge>
        </Details>

        {Array.isArray(products) && products.length > 0 ? (
          <>
            <h4>📦 Available Products:</h4>
            <ItemList>
              {products.slice(0, 2).map((product, index) => (
                <Item key={index}>
                  {product.product && typeof product.product === 'object' ? (
                    <>
                      <span><strong>Name:</strong> {product.product.name || 'N/A'}</span>
                      <span><strong>Type:</strong> {product.product.productType || 'N/A'}</span>
                      <span>
                        <strong>Weight:</strong>{' '}
                        {product.product.weightPerUnit
                          ? `${product.product.weightPerUnit} ${product.product.weightUnit || ''}`
                          : 'N/A'}
                      </span>
                      <span><strong>Status:</strong> {product.product.status || 'N/A'}</span>
                      <span><strong>Quantity:</strong> {product.quantity || 0}</span>
                    </>
                  ) : (
                    <span>No product data available</span>
                  )}
                </Item>
              ))}
              {products.length === 0 && <Item>No products available</Item>}
            </ItemList>
          </>
        ) : Array.isArray(meals) && meals.length > 0 ? (
          <>
            <h4>🍽️ Available Meals:</h4>
            <Details><strong>Total Quantity:</strong> {numberOfMeals}</Details>
            <ItemList>
              {meals.slice(0, 2).map((meale, index) => (
                <Item key={index}>
                  {meale.meal && typeof meale.meal === 'object' ? (
                    <>
                      <span><strong>Name:</strong> {meale.meal.mealName || 'Not specified'}</span>
                      <span><strong>Description:</strong> {meale.meal.mealDescription || 'Not specified'}</span>
                      <span><strong>Type:</strong> {meale.meal.mealType || 'Not specified'}</span>
                      <span><strong>Quantity:</strong> {meale.quantity || 0}</span>
                    </>
                  ) : (
                    <span>Invalid meal data</span>
                  )}
                </Item>
              ))}
              {meals.length === 0 && <Item>No meals available</Item>}
            </ItemList>
          </>
        ) : (
          <Item>No products or meals available</Item>
        )}
      </div>

      <SeeMoreButton to={`/DetailsDonations/${_id}`}>See More</SeeMoreButton>
    </Card>
  );
};

export default Composantdonation;
</file>

<file path="sustainafood-frontend/src/components/Composantrequest.jsx">
import React from 'react';
import { Link } from 'react-router-dom';
import styled, { keyframes } from 'styled-components';

const float = keyframes`
  0% { transform: translateY(0px); }
  50% { transform: translateY(-15px); }
  100% { transform: translateY(0px); }
`;

const shimmer = keyframes`
  0% { background-position: -1000px 0; }
  100% { background-position: 1000px 0; }
`;

const Card = styled.div`
  background: #ffffff;
  border-radius: 16px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
  padding: 30px;
  flex: 1 1 250px;
  max-width: 300px;
  min-height: 400px;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  animation: ${float} 6s ease-in-out infinite;

  &:hover {
    transform: translateY(-10px);
    box-shadow: 0 15px 35px rgba(34, 139, 34, 0.1);
  }

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 5px;
    height: 0;
    background: linear-gradient(to bottom, #228b22, #56ab2f);
    transition: height 0.3s ease;
  }

  &:hover::before {
    height: 100%;
  }
`;

const Title = styled.h3`
  font-size: 24px;
  font-weight: 600;
  color: #1a7a1a;
  margin-bottom: 15px;
  display: flex;
  align-items: center;
  gap: 8px;
  transition: color 0.3s ease;
`;

const Details = styled.p`
  font-size: 16px;
  color: #3a5a3a;
  margin: 5px 0;
  line-height: 1.6;
  display: flex;
  align-items: center;
  gap: 6px;
  flex-wrap: wrap;
`;

const StatusBadge = styled.span`
  display: inline-block;
  padding: 5px 12px;
  border-radius: 20px;
  font-size: 14px;
  font-weight: bold;
  color: white;
  background: ${({ status }) => {
    switch (status) {
      case 'pending':
        return '#f0ad4e';
      case 'fulfilled':
        return '#28a745';
      case 'partially_fulfilled':
        return '#6c757d';
      case 'approved':
        return '#228b22';
      case 'rejected':
        return '#dc3545';
      default:
        return '#888';
    }
  }};
`;

const ProductList = styled.ul`
  list-style: none;
  padding: 0;
  margin-top: 10px;
`;

const ProductItem = styled.li`
  background: #f5f5f5;
  padding: 10px;
  border-radius: 8px;
  margin-bottom: 6px;
  font-size: 14px;
  color: #3a5a3a;
  display: flex;
  flex-direction: column;
  gap: 4px;
`;

const SeeMoreButton = styled(Link)`
  display: inline-block;
  padding: 12px 24px;
  font-size: 16px;
  font-weight: 600;
  background: linear-gradient(135deg, #228b22, #56ab2f);
  color: white;
  border-radius: 30px;
  text-decoration: none;
  transition: all 0.3s ease;
  box-shadow: 0 6px 15px rgba(34, 139, 34, 0.2);
  position: relative;
  overflow: hidden;
  text-align: center;

  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(34, 139, 34, 0.3);
  }

  &::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.3) 50%, rgba(255, 255, 255, 0) 100%);
    transform: rotate(30deg);
    animation: ${shimmer} 3s infinite;
    pointer-events: none;
  }
`;

export const Composantrequest = ({ request }) => {
  if (!request || typeof request !== 'object' || !request._id) {
    return <div>Invalid request data.</div>;
  }

  const {
    _id,
    title,
    address,
    expirationDate,
    description,
    category,
    status,
    requestedProducts,
    numberOfMeals,
    mealName,
    mealDescription,
    mealType,
  } = request;

  return (
    <Card>
      <div>
        <Title>🛒 {title || 'Untitled Request'}</Title>
        <Details>📍 <strong>Location:</strong> {address || 'Not specified'}</Details>
        <Details>📆 <strong>Expiration:</strong> {expirationDate ? new Date(expirationDate).toLocaleDateString() : 'Not defined'}</Details>
        <Details>📝 <strong>Description:</strong> {description || 'No description'}</Details>
        <Details>📂 <strong>Category:</strong> {category || 'Not specified'}</Details>
        <Details>🔄 <strong>Status:</strong> <StatusBadge status={status}>{status || 'Unknown'}</StatusBadge></Details>

        <h4>{category === 'prepared_meals' ? '🍽️ Prepared Meals' : '📦 Requested Products:'}</h4>
        <ProductList>
          {category === 'prepared_meals' ? (
            <>
              {mealName || mealDescription || mealType ? (
                <ProductItem>
                  {mealName && (
                    <span>
                      <strong>Meal Name:</strong> {mealName}
                    </span>
                  )}
                  {mealDescription && (
                    <span>
                      <strong>Description:</strong> {mealDescription}
                    </span>
                  )}
                  {mealType && (
                    <span>
                      <strong>Type:</strong> {mealType}
                    </span>
                  )}
                  <span>
                    <strong>Number of Meals:</strong> {numberOfMeals || 'Not specified'}
                  </span>
                </ProductItem>
              ) : (
                <ProductItem>
                  <span>
                    <strong>Number of Meals:</strong> {numberOfMeals || 'Not specified'}
                  </span>
                </ProductItem>
              )}
            </>
          ) : requestedProducts && requestedProducts.length > 0 ? (
            requestedProducts.map((item, index) => (
              <ProductItem key={index}>
                <span>
                  <strong>Type:</strong> {item.product?.productType || 'Not specified'}
                </span>
                <span>
                  <strong>Weight:</strong> {item.product?.weightPerUnit || 0} {item.product?.weightUnit || ''}
                </span>
                <span>
                  <strong>Quantity:</strong> {item.quantity || 0} {item.product?.weightUnitTotale || ''}
                </span>
                <span>
                  <strong>Status:</strong> {item.product?.status || 'Unknown'}
                </span>
              </ProductItem>
            ))
          ) : (
            <ProductItem>No requested products</ProductItem>
          )}
        </ProductList>
      </div>

      <SeeMoreButton to={`/DetailsRequest/${_id}`}>See more</SeeMoreButton>
    </Card>
  );
};

export default Composantrequest;
</file>

<file path="sustainafood-frontend/src/components/ContactInfoBox.jsx">
const ContactInfoBox = ({ icon: Icon, title, content }) => {
    return (
      <div className="contact-box">
        <Icon size={30} color="#8dc73f" />
        <div className="content">
          <h4>{title}</h4>
          <p>{content}</p>
        </div>
      </div>
    )
  }
  
  export default ContactInfoBox
</file>

<file path="sustainafood-frontend/src/components/ForecastDashboard.jsx">
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const ForecastDashboard = () => {
  const [donationForecast, setDonationForecast] = useState([]);
  const [requestForecast, setRequestForecast] = useState([]);

  useEffect(() => {
    axios.get('http://localhost:3000/api/api/forecast/donations?days=7')
      .then(response => setDonationForecast(response.data))
      .catch(error => console.error('Error fetching donation forecast:', error));

    axios.get('http://localhost:3000/api/api/forecast/requests?days=7')
      .then(response => setRequestForecast(response.data))
      .catch(error => console.error('Error fetching request forecast:', error));
  }, []);

  return (
    <div>
      <h2>Prévision des Dons</h2>
      <ul>
        {donationForecast.map((entry, index) => (
          <li key={index}>
            {entry.ds}: Dons Prévu: {entry.yhat.toFixed(2)} (Plage: {entry.yhat_lower.toFixed(2)} - {entry.yhat_upper.toFixed(2)})
          </li>
        ))}
      </ul>

      <h2>Prévision des Demandes</h2>
      <ul>
        {requestForecast.map((entry, index) => (
          <li key={index}>
            {entry.ds}: Demandes Prévu: {entry.yhat.toFixed(2)} (Plage: {entry.yhat_lower.toFixed(2)} - {entry.yhat_upper.toFixed(2)})
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ForecastDashboard;
</file>

<file path="sustainafood-frontend/src/components/game/FruitSelector.jsx">
import PropTypes from 'prop-types'; // <-- Importer PropTypes

const FRUITS = ['🍎', '🍌', '🍓', '🍊', '🍇']; // Available fruits

function FruitSelector({ selectedFruit, onSelectFruit, onStartGame }) {
  return (
    <div className="fruit-selector">
      <h2>Choisis ton fruit :</h2>
      <div className="fruit-options">
        {FRUITS.map((fruit) => (
          <button
            key={fruit}
            onClick={() => onSelectFruit(fruit)}
            className={selectedFruit === fruit ? 'selected' : ''}
            aria-label={`Choisir ${fruit}`} // For accessibility
          >
            {fruit}
          </button>
        ))}
      </div>
      <button
        className="start-button"
        onClick={onStartGame}
        disabled={!selectedFruit} // Disable if no fruit is selected
      >
        Commencer à jouer
      </button>
    </div>
  );
}

// --- PropTypes Validation ---
FruitSelector.propTypes = {
  selectedFruit: PropTypes.string,
  onSelectFruit: PropTypes.func.isRequired,
  onStartGame: PropTypes.func.isRequired,
};
// --- Fin PropTypes ---

export default FruitSelector;
</file>

<file path="sustainafood-frontend/src/components/game/GameArea.jsx">
import React, { useState, useEffect, useRef, useCallback } from 'react';
import PropTypes from 'prop-types';

// --- Constantes ---
const GAME_WIDTH = 600;
const GAME_HEIGHT = 300;
const FRUIT_SIZE = 32;
const TRASH_SIZE = 32;
const GROUND_HEIGHT = 10;
const FRUIT_X_POSITION = 50;
const JUMP_HEIGHT = 250; // Hauteur de saut
const JUMP_DURATION = 320;//ms pour monter
const GRAVITY_DURATION = 350; // ms pour descendre
const TRASH_SPEED = 5;
const TRASH_SPAWN_INTERVAL_MIN = 1500;
const TRASH_SPAWN_INTERVAL_MAX = 3000;
const GAME_LOOP_INTERVAL = 50; // ~20 FPS

function GameArea({ fruitType, onGameOver }) {
  const [fruitY, setFruitY] = useState(GROUND_HEIGHT);
  const [isJumping, setIsJumping] = useState(false);
  const [trashItems, setTrashItems] = useState([]);
  const [score, setScore] = useState(0);
  const gameAreaRef = useRef(null);
  const gameLoopIntervalRef = useRef(null);
  const trashSpawnTimeoutRef = useRef(null);
  const nextTrashId = useRef(0);
  const jumpTimeoutRef = useRef(null);
  const fallTimeoutRef = useRef(null);

  // --- Logique du jeu ---

  // Fonction pour faire apparaître une poubelle (mémorisée)
  const spawnTrash = useCallback(() => {
    const newTrash = {
      id: nextTrashId.current++,
      x: GAME_WIDTH,
    };
    // Utilisation de la forme fonctionnelle pour garantir l'accès à l'état le plus récent
    setTrashItems((prevTrash) => [...prevTrash, newTrash]);

    const nextSpawnTime =
      Math.random() * (TRASH_SPAWN_INTERVAL_MAX - TRASH_SPAWN_INTERVAL_MIN) +
      TRASH_SPAWN_INTERVAL_MIN;
    trashSpawnTimeoutRef.current = setTimeout(spawnTrash, nextSpawnTime);
  }, []); // Aucune dépendance externe qui change

  // Fonction pour le saut (mémorisée)
  const jump = useCallback(() => {
    // Vérifie si déjà en train de sauter *avant* de faire quoi que ce soit
    if (isJumping) {
        // console.log("Already jumping, ignoring jump request");
        return;
    }

    // console.log("Jump initiated");
    setIsJumping(true);
    setFruitY(GROUND_HEIGHT + JUMP_HEIGHT);

    // Nettoie les timers précédents pour éviter les conflits
    if (fallTimeoutRef.current) clearTimeout(fallTimeoutRef.current);
    if (jumpTimeoutRef.current) clearTimeout(jumpTimeoutRef.current);

    // Timeout pour commencer à tomber
    jumpTimeoutRef.current = setTimeout(() => {
        // console.log("Starting fall - setting Y to GROUND_HEIGHT");
      setFruitY(GROUND_HEIGHT);
      // Timeout pour marquer la fin du saut APRES le début de la chute
      fallTimeoutRef.current = setTimeout(() => {
        // console.log("Fall finished - setting isJumping to false");
        setIsJumping(false); // Permet de sauter à nouveau
        fallTimeoutRef.current = null;
      }, GRAVITY_DURATION);
      jumpTimeoutRef.current = null;
    }, JUMP_DURATION);
  }, [isJumping]); // Dépend de l'état isJumping

  // --- Boucle de jeu principale ---
  useEffect(() => {
    // Démarre l'apparition des poubelles au montage
    trashSpawnTimeoutRef.current = setTimeout(spawnTrash, TRASH_SPAWN_INTERVAL_MIN);

    // Démarre la boucle de jeu
    gameLoopIntervalRef.current = setInterval(() => {
      // 1. Déplacer les poubelles & mettre à jour le score
      setTrashItems((prevTrash) =>
        prevTrash
          .map((trash) => ({ ...trash, x: trash.x - TRASH_SPEED }))
          .filter((trash) => {
            if (trash.x < -TRASH_SIZE) {
              setScore((s) => s + 1); // Utiliser la forme fonctionnelle
              return false; // Supprime la poubelle
            }
            return true;
          })
      );

      // 2. Détection de collision (avec l'état le plus récent)
      // Utilise la forme fonctionnelle de setState pour accéder à l'état le plus récent
      // de fruitY et trashItems au moment de l'exécution de l'intervalle.
      // Note: isJumping est lu depuis la portée extérieure, mais comme il n'est plus
      // une dépendance de ce useEffect, sa valeur capturée ici peut être légèrement
      // décalée, mais c'est généralement acceptable pour cette logique. Si ce n'est pas
      // le cas, des refs pourraient être utilisées pour isJumping aussi.
      setFruitY(currentFruitY => {
            const fruitRect = {
                x: FRUIT_X_POSITION,
                y: GAME_HEIGHT - (currentFruitY + FRUIT_SIZE), // Y depuis le haut
                width: FRUIT_SIZE,
                height: FRUIT_SIZE,
            };

            setTrashItems(currentTrashItems => {
                for (const trash of currentTrashItems) {
                    const trashRect = {
                        x: trash.x,
                        y: GAME_HEIGHT - (GROUND_HEIGHT + TRASH_SIZE), // Y depuis le haut
                        width: TRASH_SIZE,
                        height: TRASH_SIZE,
                    };

                    // --- MODIFICATION CLÉ ---
                    // Vérifie la collision SEULEMENT si le fruit n'est PAS en train de sauter
                    if (
                        !isJumping && // <-- AJOUT DE CETTE CONDITION
                        fruitRect.x < trashRect.x + trashRect.width &&
                        fruitRect.x + fruitRect.width > trashRect.x &&
                        fruitRect.y < trashRect.y + trashRect.height &&
                        fruitRect.y + fruitRect.height > trashRect.y
                    ) {
                        console.log("Collision detected!");
                        // Arrêter tous les timers et intervalles
                        clearInterval(gameLoopIntervalRef.current);
                        clearTimeout(trashSpawnTimeoutRef.current);
                        clearTimeout(jumpTimeoutRef.current);
                        clearTimeout(fallTimeoutRef.current);
                        // Appeler onGameOver avec le score actuel
                        onGameOver(score);
                        // Pas besoin de retourner ici car onGameOver change l'état du jeu
                        return currentTrashItems; // Retourner l'état actuel pour setState
                    }
                    // --- FIN DE LA MODIFICATION ---
                }
                return currentTrashItems; // Retourner l'état si pas de collision
            });
            return currentFruitY; // Retourner l'état courant pour setFruitY
        });
    }, GAME_LOOP_INTERVAL);

    // --- Nettoyage au démontage ---
    return () => {
      clearInterval(gameLoopIntervalRef.current);
      if (trashSpawnTimeoutRef.current) clearTimeout(trashSpawnTimeoutRef.current);
      if (jumpTimeoutRef.current) clearTimeout(jumpTimeoutRef.current);
      if (fallTimeoutRef.current) clearTimeout(fallTimeoutRef.current);
    };
    // --- MODIFICATION DES DÉPENDANCES ---
    // On ne dépend que de ce qui est nécessaire pour que la boucle *fonctionne*
    // et des callbacks externes. 'isJumping' et 'score' sont lus à l'intérieur
    // mais ne nécessitent pas de recréer l'intervalle à chaque changement.
  }, [onGameOver, score, spawnTrash]); // Retiré : jump, isJumping
  // --- FIN DE LA MODIFICATION DES DÉPENDANCES ---

  // --- Écouteur d'événement pour le saut ---
  useEffect(() => {
    const handleKeyDown = (event) => {
      if (event.code === 'Space' || event.key === ' ') {
        event.preventDefault();
        jump();
      }
    };
    window.addEventListener('keydown', handleKeyDown);
    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, [jump]); // Dépend de la fonction jump

  // --- Rendu du composant ---
  return (
    <div
      ref={gameAreaRef}
      className="game-area"
      style={{ width: `${GAME_WIDTH}px`, height: `${GAME_HEIGHT}px` }}
      tabIndex={0}
    >
      <div className="score-display">Score: {score}</div>

      <div
        className="fruit"
        style={{
          left: `${FRUIT_X_POSITION}px`,
          bottom: `${fruitY}px`,
          width: `${FRUIT_SIZE}px`,
          height: `${FRUIT_SIZE}px`,
        }}
      >
        {fruitType}
      </div>

      {trashItems.map((trash) => (
        <div
          key={trash.id}
          className="trash"
          style={{
            left: `${trash.x}px`,
            bottom: `${GROUND_HEIGHT}px`,
            width: `${TRASH_SIZE}px`,
            height: `${TRASH_SIZE}px`,
          }}
        >
          🗑️
        </div>
      ))}
    </div>
  );
}

// --- Définition des PropTypes ---
GameArea.propTypes = {
  fruitType: PropTypes.string.isRequired,
  onGameOver: PropTypes.func.isRequired,
};
// --- Fin des PropTypes ---

export default GameArea;
</file>

<file path="sustainafood-frontend/src/components/game/GameOver.jsx">
import PropTypes from 'prop-types'; // <-- Importer PropTypes

function GameOver({ score, onRestart }) {
  return (
    <div className="game-over">
      <h2>😭 Game Over! 😭</h2>
      <p>Ton score final : {score}</p>
      <button className="restart-button" onClick={onRestart}>
        Rejouer
      </button>
    </div>
  );
}

// --- PropTypes Validation ---
GameOver.propTypes = {
  score: PropTypes.number.isRequired,
  onRestart: PropTypes.func.isRequired,
};
// --- Fin PropTypes ---

export default GameOver;
</file>

<file path="sustainafood-frontend/src/components/LoadingButton.jsx">
"use client"

const LoadingButton = ({ isLoading, onClick, children, className, type = "button" }) => {
  return (
    <button type={type} onClick={onClick} disabled={isLoading} className={className || "submit-button"}>
      {isLoading ? (
        <>
          <span className="loading-spinner"></span>
          Sending...
        </>
      ) : (
        children
      )}
    </button>
  )
}

export default LoadingButton
</file>

<file path="sustainafood-frontend/src/components/StarRating.jsx">
import React, { useState } from 'react';
import { FaStar } from 'react-icons/fa';
import styled from 'styled-components';

const StarContainer = styled.div`
  display: flex;
  gap: 5px;
`;

const Star = styled(FaStar)`
  color: ${props => (props.filled ? '#f5c518' : '#ccc')};
  cursor: ${props => (props.interactive ? 'pointer' : 'default')};
  transition: color 0.2s ease-in-out;

  &:hover {
    color: ${props => (props.interactive ? '#f5c518' : '#ccc')};
  }
`;

const StarRating = ({ rating, setRating, interactive = false }) => {
  const [hover, setHover] = useState(null);

  return (
    <StarContainer>
      {[...Array(5)].map((_, index) => {
        const ratingValue = index + 1;
        return (
          <Star
            key={index}
            size={20}
            filled={ratingValue <= (hover || rating)}
            interactive={interactive}
            onClick={() => interactive && setRating(ratingValue)}
            onMouseEnter={() => interactive && setHover(ratingValue)}
            onMouseLeave={() => interactive && setHover(null)}
          />
        );
      })}
    </StarContainer>
  );
};

export default StarRating;
</file>

<file path="sustainafood-frontend/src/pages/About.jsx">
import {
  FaUtensils,
  FaLink,
  FaBox,
  FaGlobe,
  FaChartLine,
  FaHandsHelping,
  FaRocket,
  FaUsers,
  FaLeaf,
} from "react-icons/fa"
import Navbar from "../components/Navbar"
import Footer from "../components/Footer"
import "../assets/styles/About.css"
import fooddist from "../assets/images/fooddist.png"
import solution from "../assets/images/solution.jpg"

const About = () => {
  return (
    <>
      <Navbar />
      <div className="about-container">
        {/* Decorative elements */}
        <div className="about-leaf about-leaf-1">
          <svg className="about-leaf-svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
            <path d="M17,8C8,10,5.9,16.17,3.82,21.34L5.71,22l1-2.3A4.49,4.49,0,0,0,8,20a4,4,0,0,0,4-4,4,4,0,0,0-4-4,4.12,4.12,0,0,0-1,.14l2.9-2.9A7,7,0,0,1,17,8Z" />
          </svg>
        </div>
        <div className="about-leaf about-leaf-2">
          <svg className="about-leaf-svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
            <path d="M17,8C8,10,5.9,16.17,3.82,21.34L5.71,22l1-2.3A4.49,4.49,0,0,0,8,20a4,4,0,0,0,4-4,4,4,0,0,0-4-4,4.12,4.12,0,0,0-1,.14l2.9-2.9A7,7,0,0,1,17,8Z" />
          </svg>
        </div>

        <div className="about-wrapper">
          {/* Hero Section with Image */}
          <div className="about-hero">
            <div className="about-hero-content about-animate">
              <h1 className="about-title">
                Welcome to <span>SustainaFood</span>
              </h1>
              <p className="about-description">
                Connecting donors, recipients, and transporters to minimize food waste and optimize distribution.
                Together, we're building a more sustainable future where no food goes to waste and no one goes hungry.
              </p>
            </div>
            <div className="about-hero-image about-animate about-delay-1">
              <img src={fooddist} alt="Food donation and distribution" />
            </div>
          </div>

          {/* Mission & Vision Section without Images */}
          <div className="about-mission-vision">
            <div className="about-card about-animate about-delay-1">
              <div className="about-card-content">
                <div className="about-card-icon">🌍</div>
                <h2 className="about-card-title">Our Vision</h2>
                <p className="about-card-text">
                  To build a world where food surplus is efficiently redistributed, minimizing waste and ensuring that
                  quality food reaches those who need it most. We envision communities where no edible food goes to
                  waste while people go hungry.
                </p>
              </div>
            </div>

            <div className="about-card about-animate about-delay-2">
              <div className="about-card-content">
                <div className="about-card-icon">🚀</div>
                <h2 className="about-card-title">Our Mission</h2>
                <p className="about-card-text">
                  To provide an intelligent platform that optimizes food distribution, fosters community engagement, and
                  promotes environmental sustainability. We connect donors with recipients through efficient
                  transportation networks, creating a seamless ecosystem for food redistribution.
                </p>
              </div>
            </div>
          </div>

          {/* Section Divider */}
          <div className="about-divider">
            <div className="about-divider-line"></div>
            <div className="about-divider-icon">
              <FaLeaf />
            </div>
            <div className="about-divider-line"></div>
          </div>

          {/* Values Section with Background Image */}
          <div className="about-values">
            <div className="about-values-bg"></div>
            <h2 className="about-section-title about-animate">Our Core Values</h2>
            <div className="about-values-grid">
              <div className="about-value about-animate about-delay-1">
                <FaUtensils className="about-value-icon" />
                <h3 className="about-value-title">Less Waste</h3>
                <p className="about-value-text">
                  We're committed to reducing food waste by creating efficient redistribution channels.
                </p>
              </div>

              <div className="about-value about-animate about-delay-2">
                <FaLink className="about-value-icon" />
                <h3 className="about-value-title">Stronger Links</h3>
                <p className="about-value-text">
                  Building robust connections between donors, transporters, and recipients.
                </p>
              </div>

              <div className="about-value about-animate about-delay-3">
                <FaBox className="about-value-icon" />
                <h3 className="about-value-title">Smart Sharing</h3>
                <p className="about-value-text">
                  Using technology to optimize the distribution of surplus food resources.
                </p>
              </div>

              <div className="about-value about-animate about-delay-4">
                <FaGlobe className="about-value-icon" />
                <h3 className="about-value-title">Green Future</h3>
                <p className="about-value-text">Contributing to environmental sustainability by reducing food waste.</p>
              </div>
            </div>
          </div>

          {/* Section Divider */}
          <div className="about-divider">
            <div className="about-divider-line"></div>
            <div className="about-divider-icon">
              <FaLeaf />
            </div>
            <div className="about-divider-line"></div>
          </div>

          {/* Solution Section with Image */}
          <div className="about-solution">
            <div className="about-solution-content about-animate">
              <h2 className="about-solution-title">Our Proposed Solution</h2>
              <div className="about-features">
                <div className="about-feature about-animate about-delay-1">
                  <div className="about-feature-icon-wrapper">
                    <FaChartLine className="about-feature-icon" />
                  </div>
                  <div className="about-feature-content">
                    <h3 className="about-feature-title">Real-time Analytics</h3>
                    <p className="about-feature-text">
                      Track the impact of actions and adjust strategies as needed with our comprehensive analytics
                      dashboard.
                    </p>
                  </div>
                </div>

                <div className="about-feature about-animate about-delay-2">
                  <div className="about-feature-icon-wrapper">
                    <FaHandsHelping className="about-feature-icon" />
                  </div>
                  <div className="about-feature-content">
                    <h3 className="about-feature-title">Free Services</h3>
                    <p className="about-feature-text">
                      Completely free services for NGOs, partner companies, and all other stakeholders in our ecosystem.
                    </p>
                  </div>
                </div>

                <div className="about-feature about-animate about-delay-3">
                  <div className="about-feature-icon-wrapper">
                    <FaRocket className="about-feature-icon" />
                  </div>
                  <div className="about-feature-content">
                    <h3 className="about-feature-title">Artificial Intelligence</h3>
                    <p className="about-feature-text">
                      Optimize routes and stock management to reduce logistics costs and improve overall efficiency.
                    </p>
                  </div>
                </div>

                <div className="about-feature about-animate about-delay-4">
                  <div className="about-feature-icon-wrapper">
                    <FaUsers className="about-feature-icon" />
                  </div>
                  <div className="about-feature-content">
                    <h3 className="about-feature-title">Awareness Campaign</h3>
                    <p className="about-feature-text">
                      Collaborate with local associations to expand the partner network and maximize national impact.
                    </p>
                  </div>
                </div>
              </div>
            </div>
            <div className="about-solution-image about-animate about-delay-2">
              <img src={solution} alt="Our Solution" />
            </div>
          </div>

          {/* Impact Statistics Section */}
          <div className="about-impact about-animate about-delay-1">
            <h2 className="about-impact-title">Our Impact</h2>
            <div className="about-stats">
              <div className="about-stat about-animate about-delay-2">
                <div className="about-stat-number">500+</div>
                <div className="about-stat-label">Food Donors</div>
              </div>
              <div className="about-stat about-animate about-delay-3">
                <div className="about-stat-number">1,200+</div>
                <div className="about-stat-label">Recipients Served</div>
              </div>
              <div className="about-stat about-animate about-delay-4">
                <div className="about-stat-number">8,500+</div>
                <div className="about-stat-label">Meals Delivered</div>
              </div>
              <div className="about-stat about-animate about-delay-5">
                <div className="about-stat-number">120+</div>
                <div className="about-stat-label">Volunteer Transporters</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <Footer />
    </>
  )
}

export default About
</file>

<file path="sustainafood-frontend/src/pages/backoffice/AnomaliesDashbord.jsx">
import React, { useState, useEffect } from "react";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import axios from "axios";
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";
import { FaFilePdf } from "react-icons/fa";
import styled from "styled-components";
import imgmouna from '../../assets/images/imgmouna.png';
import logo from '../../assets/images/logooo.png';
import "../../assets/styles/backoffcss/AnomaliesDashbord.css";
import { useAlert } from '../../contexts/AlertContext';

// Styled component for profile image
const ProfileImg = styled.img`
  width: 50px;
  height: 50px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #228b22;
`;

// Styled component for pagination controls
const PaginationControls = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  gap: 10px;

  button {
    padding: 10px 20px;
    font-size: 16px;
    background: #228b22;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s;

    &:hover {
      background: #56ab2f;
    }

    &:disabled {
      background: #ccc;
      cursor: not-allowed;
    }
  }

  span {
    font-size: 16px;
    color: #333;
  }
`;

// Styled component for action status
const ActionStatus = styled.span`
  font-weight: bold;
  color: ${props => (props.isapprovedfromadmin === "approved" ? "#228b22" : props.isapprovedfromadmin === "rejected" ? "#ff4444" : "#333")};
`;

const AnomaliesDashboard = () => {
  const { showAlert } = useAlert(); // Ajout de useAlert

  const [anomalies, setAnomalies] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [currentPage, setCurrentPage] = useState(0);
  const [sortField, setSortField] = useState("title");
  const [sortOrder, setSortOrder] = useState("asc");
  const [roleFilter, setRoleFilter] = useState("");
  const anomaliesPerPage = 4;

  // Fetch anomalies on component mount
  useEffect(() => {
    const fetchAnomalies = async () => {
      try {
        const response = await axios.get('http://localhost:3000/donation/donations/anomalies');
        console.log('Anomalies fetched:', response.data);
        setAnomalies(response.data);
        setError(null);
      } catch (error) {
        console.error('Error fetching anomalies:', error);
        setError('Unable to load anomalies. Please check the server.');
      } finally {
        setLoading(false);
      }
    };
    fetchAnomalies();
  }, []);

  // Approve donation
  const handleApprove = async (donationId) => {
    try {
      await axios.post(`http://localhost:3000/donation/donations/${donationId}/approve`);
      setAnomalies(anomalies.map(anomaly =>
        anomaly.donationId === donationId ? { ...anomaly, isapprovedfromadmin: "approved" } : anomaly
      ));
      showAlert('success', `Donation ${donationId} approved successfully!`); // Remplacement de alert()
    } catch (error) {
      console.error('Error approving donation:', error);
      showAlert('error', 'Failed to approve donation'); // Remplacement de setError
    }
  };

  // Reject donation
  const handleReject = async (donationId) => {
    try {
      await axios.post(`http://localhost:3000/donation/donations/${donationId}/reject`);
      setAnomalies(anomalies.map(anomaly =>
        anomaly.donationId === donationId ? { ...anomaly, isapprovedfromadmin: "rejected" } : anomaly
      ));
      showAlert('success', `Donation ${donationId} rejected successfully!`); // Remplacement de alert()
    } catch (error) {
      console.error('Error rejecting donation:', error);
      showAlert('error', 'Failed to reject donation'); // Remplacement de setError
    }
  };

  // Filter anomalies by donor role
  const filteredAnomalies = anomalies.filter((anomaly) =>
    roleFilter === "" || (anomaly.donor && anomaly.donor.role === roleFilter)
  );

  // Sort anomalies
  const sortedAnomalies = [...filteredAnomalies].sort((a, b) => {
    let comparison = 0;
    if (sortField === "title") {
      comparison = (a.title || "").localeCompare(b.title || "");
    } else if (sortField === "donorName") {
      comparison = (a.donor?.name || "").localeCompare(b.donor?.name || "");
    } else if (sortField === "quantity") {
      comparison = (a.quantity || 0) - (b.quantity || 0);
    } else if (sortField === "daysToExpiry") {
      comparison = (a.daysToExpiry || 0) - (b.daysToExpiry || 0);
    } else if (sortField === "anomalyScore") {
      comparison = (a.anomalyScore || 0) - (b.anomalyScore || 0);
    }
    return sortOrder === "asc" ? comparison : -comparison;
  });

  // Pagination logic
  const pagesVisited = currentPage * anomaliesPerPage;
  const displayAnomalies = sortedAnomalies.slice(pagesVisited, pagesVisited + anomaliesPerPage);
  const pageCount = Math.ceil(filteredAnomalies.length / anomaliesPerPage);

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  const handleSortChange = (e) => {
    setSortField(e.target.value);
  };

  const handleSortOrderChange = (e) => {
    setSortOrder(e.target.value);
  };

  // Export to PDF
  const exportToPDF = () => {
    const doc = new jsPDF({
      orientation: "landscape",
      unit: "mm",
      format: "a4",
    });

    doc.setFillColor(50, 62, 72);
    doc.rect(0, 0, doc.internal.pageSize.width, 40, "F");
    doc.setDrawColor(144, 196, 60);
    doc.setLineWidth(1.5);
    doc.line(0, 40, doc.internal.pageSize.width, 40);

    const imgWidth = 30, imgHeight = 30;
    doc.addImage(logo, "PNG", 5, 5, imgWidth, imgHeight);

    doc.setFontSize(24);
    doc.setTextColor(255, 255, 255);
    doc.setFont("helvetica", "bold");
    doc.text("Anomalies Report", doc.internal.pageSize.width / 2, 20, { align: "center" });

    const today = new Date();
    const dateStr = today.toLocaleDateString("en-US", { year: "numeric", month: "long", day: "numeric" });
    doc.setFontSize(10);
    doc.setTextColor(200, 200, 200);
    doc.text(`Generated: ${dateStr}`, doc.internal.pageSize.width - 50, 35);

    const tableColumn = ["Title", "Donor", "Quantity", "Days to Expiry", "Linked Requests", "Score", "Reason", "Status"];
    const tableRows = sortedAnomalies.map((anomaly) => [
      anomaly.title || "N/A",
      anomaly.donor ? `${anomaly.donor.name} (${anomaly.donor.role})` : "Unknown",
      anomaly.quantity || "N/A",
      anomaly.daysToExpiry !== "N/A" ? anomaly.daysToExpiry : "N/A",
      anomaly.linkedRequests || 0,
      anomaly.anomalyScore.toFixed(3),
      anomaly.reason || "N/A",
      anomaly.isapprovedfromadmin.charAt(0).toUpperCase() + anomaly.isapprovedfromadmin.slice(1) || "Pending"
    ]);

    autoTable(doc, {
      head: [tableColumn],
      body: tableRows,
      startY: 50,
      theme: "grid",
      styles: { fontSize: 9, cellPadding: 5, textColor: [45, 45, 45], lineColor: [220, 220, 220], lineWidth: 0.3 },
      headStyles: { fillColor: [70, 80, 95], textColor: [255, 255, 255], fontStyle: "bold", fontSize: 10 },
      alternateRowStyles: { fillColor: [245, 245, 245] },
      didDrawPage: (data) => {
        doc.setDrawColor(200, 200, 200);
        doc.setLineWidth(0.5);
        doc.line(15, doc.internal.pageSize.height - 20, doc.internal.pageSize.width - 15, doc.internal.pageSize.height - 20);
        doc.setFillColor(144, 196, 60);
        doc.roundedRect(doc.internal.pageSize.width / 2 - 15, doc.internal.pageSize.height - 18, 30, 12, 3, 3, "F");
        doc.setTextColor(255, 255, 255);
        doc.setFontSize(9);
        doc.text(`Page ${data.pageNumber} of ${doc.internal.getNumberOfPages()}`, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 10, { align: "center" });
        doc.setTextColor(120, 120, 120);
        doc.setFontSize(8);
        doc.setFont("helvetica", "italic");
        doc.text("Confidential - For internal use only", 15, doc.internal.pageSize.height - 10);
        doc.text("© SustainaFood", doc.internal.pageSize.width - 45, doc.internal.pageSize.height - 10);
      },
    });

    doc.save(`Anomalies_Report_${today.toISOString().split("T")[0]}.pdf`);
  };

  return (
    <div className="dashboard-container">
      <Sidebar />
      <div className="dashboard-content">
        <Navbar />
        <div className="request-list">
          <div className="header-container">
            <h2 style={{ color: "green" }}>Anomaly Management</h2>
            <button className="export-pdf-btn" onClick={exportToPDF}>
              <FaFilePdf /> Export to PDF
            </button>
          </div>

          <div className="filter-container">
            <label htmlFor="roleFilter">Filter by Donor Role:</label>
            <select id="roleFilter" value={roleFilter} onChange={(e) => setRoleFilter(e.target.value)}>
              <option value="">All</option>
              <option value="supermarket">Supermarket</option>
              <option value="restaurant">Restaurant</option>
              <option value="individual">Individual</option>
            </select>

            <label htmlFor="sortField">Sort by:</label>
            <select id="sortField" value={sortField} onChange={handleSortChange}>
              <option value="title">Title</option>
              <option value="donorName">Donor Name</option>
              <option value="quantity">Quantity</option>
              <option value="daysToExpiry">Days to Expiry</option>
              <option value="anomalyScore">Anomaly Score</option>
            </select>

            <label htmlFor="sortOrder">Order:</label>
            <select id="sortOrder" value={sortOrder} onChange={handleSortOrderChange}>
              <option value="asc">Ascending</option>
              <option value="desc">Descending</option>
            </select>
          </div>

          {loading ? (
            <p>Loading anomalies...</p>
          ) : error ? (
            <p className="error">{error}</p>
          ) : anomalies.length === 0 ? (
            <p>No anomalies detected.</p>
          ) : (
            <>
              <table className="anomalies-table">
                <thead>
                  <tr>
                    <th>Donor</th>
                    <th>Title</th>
                    <th>Quantity</th>
                    <th>Days to Expiry</th>
                    <th>Linked Requests</th>
                    <th>Anomaly Score</th>
                    <th>Reason</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {displayAnomalies.map((anomaly) => {
                    const donorPhoto = anomaly.donor?.photo && anomaly.donor.photo !== ''
                      ? `http://localhost:3000/${anomaly.donor.photo}`
                      : imgmouna;
                    return (
                      <tr key={anomaly.donationId}>
                        <td>
                          <ProfileImg
                            src={donorPhoto}
                            alt="Donor Profile"
                            onError={(e) => {
                              e.target.src = imgmouna;
                              console.error(`Failed to load image: ${donorPhoto}`);
                            }}
                          />
                          <br />
                          <span style={{ fontWeight: "bold" }}>
                            {anomaly.donor?.name || "Unknown Donor"}
                          </span>
                          <br />
                          <span style={{ color: "#228b22" }}>
                            {anomaly.donor?.role || "Role Not Specified"}
                          </span>
                        </td>
                        <td>{anomaly.title || "N/A"}</td>
                        <td>{anomaly.quantity || "N/A"}</td>
                        <td>{anomaly.daysToExpiry !== "N/A" ? anomaly.daysToExpiry : "N/A"}</td>
                        <td>{anomaly.linkedRequests || 0}</td>
                        <td>{anomaly.anomalyScore.toFixed(3)}</td>
                        <td>{anomaly.reason || "N/A"}</td>
                        <td>
                          {anomaly.isapprovedfromadmin === "approved" || anomaly.isapprovedfromadmin === "rejected" ? (
                            <ActionStatus isapprovedfromadmin={anomaly.isapprovedfromadmin}>
                              {anomaly.isapprovedfromadmin.charAt(0).toUpperCase() + anomaly.isapprovedfromadmin.slice(1)}
                            </ActionStatus>
                          ) : (
                            <>
                              <button
                                className="approve-btn"
                                onClick={() => handleApprove(anomaly.donationId)}
                              >
                                Approve
                              </button>
                              <button
                                className="reject-btn"
                                onClick={() => handleReject(anomaly.donationId)}
                              >
                                Reject
                              </button>
                            </>
                          )}
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>

              <PaginationControls>
                <button
                  onClick={() => handlePageChange(Math.max(currentPage - 1, 0))}
                  disabled={currentPage === 0}
                >
                  Previous
                </button>
                <span>
                  Page {currentPage + 1} of {pageCount}
                </span>
                <button
                  onClick={() => handlePageChange(Math.min(currentPage + 1, pageCount - 1))}
                  disabled={currentPage === pageCount - 1}
                >
                  Next
                </button>
              </PaginationControls>
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default AnomaliesDashboard;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/ContactSubmissionList.jsx">
// src/components/backoffcom/ContactSubmissionList.jsx
import React, { useEffect, useState } from "react";
import axios from "axios";
import { Link } from "react-router-dom";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "/src/assets/styles/backoffcss/backlist.css"; // Updated to use our new CSS
import { FaEye, FaFilePdf, FaSort } from "react-icons/fa";
import ReactPaginate from "react-paginate";
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";
import logo from "../../assets/images/logooo.png";

const ContactSubmissionList = () => {
  const [submissions, setSubmissions] = useState([]);
  const [currentPage, setCurrentPage] = useState(0);
  const [searchQuery, setSearchQuery] = useState("");
  const [sortField, setSortField] = useState("submittedAt");
  const [sortOrder, setSortOrder] = useState("desc");
  const submissionsPerPage = 5;
  const pagesVisited = currentPage * submissionsPerPage;

  // Fetch submissions from backend
  useEffect(() => {
    axios
      .get("http://localhost:3000/contact/contact/submissions") // Fixed endpoint
      .then((response) => {
        setSubmissions(response.data.data);
      })
      .catch((error) => {
        console.error("Error fetching submissions:", error);
        alert("Failed to load submissions.");
      });
  }, []);

  // Mark submission as responded
  const handleMarkAsResponded = async (submissionId) => {
    try {
      const response = await axios.put(`http://localhost:3000/contact/contact/submissions/${submissionId}/respond`, {
        status: "responded",
      });
      if (response.status === 200) {
        setSubmissions(
          submissions.map((submission) =>
            submission._id === submissionId ? { ...submission, status: "responded" } : submission
          )
        );
        alert("Submission marked as responded.");
      }
    } catch (error) {
      console.error("Error marking submission as responded:", error);
      alert("Failed to update status.");
    }
  };

  // Export to PDF
  const exportToPDF = () => {
    const doc = new jsPDF({
      orientation: "landscape",
      unit: "mm",
      format: "a4",
    });

    // Header background
    doc.setFillColor(245, 245, 245);
    doc.rect(0, 0, doc.internal.pageSize.width, 40, "F");

    // Decorative bottom line
    doc.setDrawColor(144, 196, 60);
    doc.setLineWidth(1.5);
    doc.line(0, 40, doc.internal.pageSize.width, 40);

    // Logo
    const imgWidth = 30,
      imgHeight = 30;
    doc.addImage(logo, "PNG", 5, 5, imgWidth, imgHeight);

    // Title
    const title = "CONTACT SUBMISSIONS LIST";
    doc.setFontSize(28);
    doc.setTextColor(50, 62, 72);
    doc.setFont("helvetica", "bold");
    doc.text(title, doc.internal.pageSize.width / 2, 20, { align: "center" });

    // Date
    const today = new Date();
    const dateStr = today.toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
    doc.setFontSize(10);
    doc.setTextColor(80, 80, 80);
    doc.text(`Generated: ${dateStr}`, doc.internal.pageSize.width - 50, 38);

    // Table
    autoTable(doc, {
      head: [["ID", "Name", "Email", "Comment", "Submitted At", "Status"]],
      body: submissions.map((submission, index) => [
        (index + 1).toString(),
        submission.name,
        submission.email,
        submission.comment.substring(0, 50) + (submission.comment.length > 50 ? "..." : ""),
        new Date(submission.submittedAt).toLocaleString(),
        submission.status.charAt(0).toUpperCase() + submission.status.slice(1),
      ]),
      startY: 50,
      theme: "grid",
      styles: {
        fontSize: 9,
        cellPadding: 6,
        lineColor: [200, 200, 200],
        lineWidth: 0.2,
        valign: "middle",
        textColor: [45, 45, 45],
      },
      headStyles: {
        fillColor: [70, 80, 95],
        textColor: [255, 255, 255],
        fontStyle: "bold",
        halign: "center",
        fontSize: 10,
      },
      alternateRowStyles: {
        fillColor: [250, 250, 250],
      },
      didDrawCell: (data) => {
        if (data.section === "body" && data.column.index === 5) {
          const status = data.cell.text[0];
          if (status === "Responded") {
            doc.setFillColor(144, 196, 60);
            doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F");
            doc.setTextColor(255, 255, 255);
          } else if (status === "Pending") {
            doc.setFillColor(220, 220, 220);
            doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F");
            doc.setTextColor(100, 100, 100);
          }
        }
      },
      didDrawPage: (data) => {
        // Footer line
        doc.setDrawColor(200, 200, 200);
        doc.setLineWidth(0.5);
        doc.line(15, doc.internal.pageSize.height - 20, doc.internal.pageSize.width - 15, doc.internal.pageSize.height - 20);

        // Page numbers
        doc.setFillColor(144, 196, 60);
        doc.roundedRect(doc.internal.pageSize.width / 2 - 15, doc.internal.pageSize.height - 18, 30, 12, 3, 3, "F");
        doc.setTextColor(255, 255, 255);
        doc.setFontSize(9);
        doc.text(`Page ${data.pageNumber} of ${doc.internal.getNumberOfPages()}`, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 10, {
          align: "center",
        });

        // Confidentiality notice
        doc.setTextColor(120, 120, 120);
        doc.setFontSize(8);
        doc.setFont("helvetica", "italic");
        doc.text("Confidential - For internal use only", 15, doc.internal.pageSize.height - 10);

        // Institution info
        doc.text("© SustainaFood", doc.internal.pageSize.width - 45, doc.internal.pageSize.height - 10);
      },
    });

    doc.save(`Contact_Submissions_${today.toISOString().split("T")[0]}.pdf`);
  };

  // Filter submissions based on search query
  const filteredSubmissions = submissions.filter((submission) =>
    submission.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    submission.email.toLowerCase().includes(searchQuery.toLowerCase())
  );

  // Sort submissions
  const sortedSubmissions = filteredSubmissions.sort((a, b) => {
    if (sortField === "name") {
      return sortOrder === "asc" ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name);
    } else if (sortField === "email") {
      return sortOrder === "asc" ? a.email.localeCompare(b.email) : b.email.localeCompare(a.email);
    } else if (sortField === "submittedAt") {
      return sortOrder === "asc"
        ? new Date(a.submittedAt) - new Date(b.submittedAt)
        : new Date(b.submittedAt) - new Date(a.submittedAt);
    } else if (sortField === "status") {
      return sortOrder === "asc" ? a.status.localeCompare(b.status) : b.status.localeCompare(a.status);
    }
    return 0;
  });

  const displaySubmissions = sortedSubmissions.slice(pagesVisited, pagesVisited + submissionsPerPage);
  const pageCount = Math.ceil(filteredSubmissions.length / submissionsPerPage);

  const changePage = ({ selected }) => {
    setCurrentPage(selected);
  };

  return (
    <div className="dashboard-container">
      <style>
        {`
          .respond-btn {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
            border-radius: 4px;
            font-size: 0.9rem;
            margin-left: 5px;
          }
          .respond-btn:hover {
            background-color: #0056b3;
          }
        `}
      </style>
      <Sidebar />
      <div className="dashboard-content">
        <Navbar setSearchQuery={setSearchQuery} />
        <div className="backlist-container">
          <div className="backlist-header">
            <h2 className="backlist-title">Contact Submissions</h2>
            <button className="backlist-action-button" onClick={exportToPDF}>
              <FaFilePdf /> Export to PDF
            </button>
          </div>
          
          <div className="backlist-search">
            <div className="sort-container">
              <label>Sort by:</label>
              <select value={sortField} onChange={(e) => setSortField(e.target.value)}>
                <option value="name">Name</option>
                <option value="email">Email</option>
                <option value="submittedAt">Submitted At</option>
                <option value="status">Status</option>
              </select>
              <select value={sortOrder} onChange={(e) => setSortOrder(e.target.value)}>
                <option value="asc">Ascending</option>
                <option value="desc">Descending</option>
              </select>
            </div>
          </div>
          
          <table className="backlist-table">
            <thead className="backlist-table-head">
              <tr>
                <th className="backlist-table-header">ID</th>
                <th className="backlist-table-header">Name</th>
                <th className="backlist-table-header">Email</th>
                <th className="backlist-table-header">Comment</th>
                <th className="backlist-table-header">Submitted At</th>
                <th className="backlist-table-header">Status</th>
                <th className="backlist-table-header">Actions</th>
              </tr>
            </thead>
            <tbody>
              {displaySubmissions.map((submission, index) => (
                <tr key={submission._id} className="backlist-table-row">
                  <td className="backlist-table-cell">{pagesVisited + index + 1}</td>
                  <td className="backlist-table-cell">{submission.name}</td>
                  <td className="backlist-table-cell">{submission.email}</td>
                  <td className="backlist-table-cell">{submission.comment.substring(0, 50) + (submission.comment.length > 50 ? "..." : "")}</td>
                  <td className="backlist-table-cell">{new Date(submission.submittedAt).toLocaleString()}</td>
                  <td className="backlist-table-cell">{submission.status.charAt(0).toUpperCase() + submission.status.slice(1)}</td>
                  <td className="backlist-table-cell backlist-actions-cell">
                    <Link to={`/contact/submissions/view/${submission._id}`} className="backlist-row-action">
                      <FaEye />
                    </Link>
                    {submission.status === "pending" && (
                      <button
                        className="backlist-row-action"
                        onClick={() => handleMarkAsResponded(submission._id)}
                        aria-label="Mark as responded"
                      >
                        Mark Responded
                      </button>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          {/* Pagination */}
          <ReactPaginate
            previousLabel={"Previous"}
            nextLabel={"Next"}
            pageCount={pageCount}
            onPageChange={changePage}
            containerClassName={"backlist-pagination"}
            pageClassName={"backlist-pagination-item"}
            previousClassName={"backlist-pagination-item"}
            nextClassName={"backlist-pagination-item"}
            pageLinkClassName={"backlist-pagination-link"}
            previousLinkClassName={"backlist-pagination-link"}
            nextLinkClassName={"backlist-pagination-link"}
            disabledClassName={"backlist-pagination-disabled"}
            activeClassName={"backlist-pagination-active"}
          />
        </div>
      </div>
    </div>
  );
};

export default ContactSubmissionList;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/DonationDetails.jsx">
import React, { useEffect, useState } from "react";
import { useParams, Link } from "react-router-dom";
import { getDonationById } from "../../api/donationService";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "../../assets/styles/backoffcss/RequestTable.css";
import styled from 'styled-components';
import imgmouna from '../../assets/images/imgmouna.png';

// Styled Components
const DonationCard = styled.div`
    background-color: #fff;
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(0, 128, 0, 0.2);
    padding: 20px;
    margin: 50px auto;
    border-left: 6px solid #228b22;
`;

const DonationHeader = styled.h2`
  color: #228b22;
  font-size: 24px;
  margin-bottom: 20px;
  text-align: center;
`;

const DonorInfo = styled.div`
  display: flex;
  align-items: center;
  margin-bottom: 20px;
`;

const ProfileImg = styled.img`
  width: 60px;
  height: 60px;
  border-radius: 50%;
  object-fit: cover;
  margin-right: 15px;
  border: 2px solid #228b22;
`;

const DonorText = styled.div`
  h3 {
    margin: 0;
    color: #333;
    font-size: 18px;
  }
  p.role {
    margin: 5px 0 0;
    color: #666;
    font-size: 14px;
  }
`;

const ItemsList = styled.ul`
  list-style: none;
  padding: 0;
  margin: 0 0 20px 0;
`;

const ItemCard = styled.li`
  background: #f8f9fa;
  padding: 10px 15px;
  margin-bottom: 10px;
  border-radius: 4px;
  display: flex;
  flex-direction: column;
  
  span {
    margin: 2px 0;
    color: #495057;
  }
  
  strong {
    color: #222;
  }
`;

const ProductsSection = styled.div`
  margin-top: 20px;
`;

const ProductsGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 15px;
`;

const ProductCard = styled.div`
  background: #f8f9fa;
  border-left: 4px solid #228b22;
  padding: 10px;
  border-radius: 4px;
  
  p {
    margin: 5px 0;
    color: #495057;
  }
  
  strong {
    color: #222;
  }
`;

const Button = styled.button`
  display: inline-block;
  padding: 12px 20px;
  font-size: 16px;
  font-weight: 600;
  text-align: center;
  border-radius: 8px;
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 8px;
  color: white;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);

  ${({ variant }) => variant === 'back' && `
    background: #6c757d;
    &:hover { background: #5a6268; transform: translateY(-2px); }
  `}

  ${({ variant }) => variant === 'submit' && `
    background: #28a745;
    &:hover { background: #218838; transform: translateY(-2px); }
  `}

  &:active {
    transform: translateY(1px);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }
`;

const DonationDetails = () => {
    const { id } = useParams();
    const [donation, setDonation] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchDonation = async () => {
            try {
                const response = await getDonationById(id);
                console.log("Fetched donation:", response.data); // Debug log
                setDonation(response.data);
            } catch (err) {
                console.error("Fetch error:", err); // Debug log
                setError(err.response?.data?.message || '❌ Error fetching donation details');
            } finally {
                setLoading(false);
            }
        };

        fetchDonation();
    }, [id]);

    if (loading) {
        return <div className="loading">⏳ Loading donation details...</div>;
    }

    if (error) {
        return <div className="error">{error}</div>;
    }

    if (!donation) {
        return <div className="error">⚠️ Donation not found.</div>;
    }

    return (
        <div className="product-detail-container">
            <Sidebar />
            <div className="product-detail-content">
                <Navbar />
                <DonationCard>
                    <DonationHeader>📦 Donation Details</DonationHeader>
                    
                    <DonorInfo>
                        <ProfileImg
                            src={donation.donor?.photo ? `http://localhost:3000/${donation.donor.photo}` : imgmouna}
                            alt="Donor Profile"
                            onError={(e) => (e.target.src = imgmouna)}
                        />
                        <DonorText>
                            <h3>{donation.donor?.name || "Unknown Donor"}</h3>
                            <p className="role">{donation.donor?.role || "Role Not Specified"}</p>
                        </DonorText>
                    </DonorInfo>

                    <ItemsList>
                        <ItemCard>
                            <span><strong>📝 Title:</strong> {donation.title || "N/A"}</span>
                        </ItemCard>
                        <ItemCard>
                            <span><strong>📂 Category:</strong> {donation.category || "N/A"}</span>
                        </ItemCard>
                        <ItemCard>
                            <span><strong>🔄 Status:</strong> {donation.status || "N/A"}</span>
                        </ItemCard>
                        <ItemCard>
                            <span><strong>📍 Address:</strong> {donation.address || "N/A"}</span>
                        </ItemCard>
                        <ItemCard>
                            <span><strong>📅 Expiration Date:</strong> {donation.expirationDate ? new Date(donation.expirationDate).toLocaleDateString() : "N/A"}</span>
                        </ItemCard>
                        <ItemCard>
                            <span><strong>🕒 Created At:</strong> {donation.createdAt ? new Date(donation.createdAt).toLocaleDateString() : "N/A"}</span>
                        </ItemCard>
                        <ItemCard>
                            <span><strong>🔄 Updated At:</strong> {donation.updatedAt ? new Date(donation.updatedAt).toLocaleDateString() : "N/A"}</span>
                        </ItemCard>
                    </ItemsList>

                    {/* Products or Meals Section */}
                    {donation.category === "packaged_products" && donation.products && donation.products.length > 0 ? (
                        <ProductsSection>
                            <h3 style={{ color: "#228b22", marginBottom: "15px" }}>🛒 Donated Products</h3>
                            <ProductsGrid>
                                {donation.products.map((item, index) => (
                                    <ProductCard key={index}>
                                        <p><strong>Name:</strong> {item.product?.name || "Unknown Product"}</p>
                                        <p>📦 <strong>Type:</strong> {item.product?.productType || "Not specified"}</p>
                                        <p>⚖️ <strong>Weight:</strong> {item.product?.weightPerUnit || 0} {item.product?.weightUnit || ""}</p>
                                        <p>🔢 <strong>Quantity:</strong> {item.quantity || 0}</p>
                                        <p>🟢 <strong>Status:</strong> {item.product?.status || "Unknown"}</p>
                                    </ProductCard>
                                ))}
                            </ProductsGrid>
                        </ProductsSection>
                    ) : null}

                    {donation.category === "prepared_meals" && donation.meals && donation.meals.length > 0 ? (
                        <ProductsSection>
                            <h3 style={{ color: "#228b22", marginBottom: "15px" }}>🍽️ Donated Meals</h3>
                            {donation.numberOfMeals && (
                                <ItemCard>
                                    <span><strong>🍴 Total Number of Meals:</strong> {donation.numberOfMeals}</span>
                                </ItemCard>
                            )}
                            <ProductsGrid>
                                {donation.meals.map((item, index) => (
                                    <ProductCard key={index}>
                                        <p><strong>🍽️ Name:</strong> {item.meal?.mealName || "Not specified"}</p>
                                        <p>📝 <strong>Description:</strong> {item.meal?.mealDescription || "None"}</p>
                                        <p>🍴 <strong>Type:</strong> {item.meal?.mealType || "Unknown"}</p>
                                        <p>🔢 <strong>Quantity:</strong> {item.quantity || 0}</p>
                                    </ProductCard>
                                ))}
                            </ProductsGrid>
                        </ProductsSection>
                    ) : null}

                    {((donation.category === "packaged_products" && (!donation.products || donation.products.length === 0)) ||
                      (donation.category === "prepared_meals" && (!donation.meals || donation.meals.length === 0))) && (
                        <p>🚫 No items specified for this donation.</p>
                    )}

                    <Button variant="back" onClick={() => window.history.back()}>🔙 Go Back</Button>
                    <Button
                        variant="submit"
                        as={Link}
                        to={`/RequestDonationsList/${id}`}
                        style={{ textDecoration: 'none' }}
                    >
                        👀 View Requests
                    </Button>
                </DonationCard>
            </div>
        </div>
    );
};

export default DonationDetails;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/DonationList.jsx">
import React, { useState, useEffect } from "react";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "../../assets/styles/backoffcss/studentList.css";
import { FaEye, FaFilePdf } from "react-icons/fa";
import { Link } from "react-router-dom";
import logo from '../../assets/images/logooo.png';
import imgmouna from '../../assets/images/imgmouna.png';
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";
import { getDonations } from "../../api/donationService";
import styled from "styled-components";

// Styled Components
const PaginationControls = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  gap: 10px;

  button {
    padding: 10px 20px;
    font-size: 16px;
    background: #228b22;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s;

    &:hover {
      background: #56ab2f;
    }

    &:disabled {
      background: #ccc;
      cursor: not-allowed;
    }
  }

  span {
    font-size: 16px;
    color: #333;
  }
`;

const ProfileImg = styled.img`
  width: 50px;
  height: 50px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #228b22;
`;

const FilterContainer = styled.div`
  display: flex;
  gap: 20px;
  margin: 20px 0;
  flex-wrap: wrap;

  label {
    margin-right: 5px;
    font-weight: 500;
  }

  select {
    padding: 5px 10px;
    border-radius: 5px;
    border: 1px solid #ccc;
    min-width: 150px;
  }
`;

const DonationList = () => {
  const [donations, setDonations] = useState([]);
  const [currentPage, setCurrentPage] = useState(0);
  const [searchQuery, setSearchQuery] = useState("");
  const [sortField, setSortField] = useState("title");
  const [sortOrder, setSortOrder] = useState("asc");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [categoryFilter, setCategoryFilter] = useState("");
  const [statusFilter, setStatusFilter] = useState("");
  const donationsPerPage = 3;

  // Sanitize donation data
  const sanitizeDonation = (donation) => ({
    ...donation,
    title: donation.title ? donation.title.trim() : "",
    category: donation.category ? donation.category.trim() : "",
    status: donation.status ? donation.status.trim() : "",
   
  });

  useEffect(() => {
    const fetchDonations = async () => {
      try {
        setLoading(true);
        const response = await getDonations();
        const sanitizedData = (response.data || []).map(sanitizeDonation);
        setDonations(sanitizedData);
      } catch (error) {
        setError("Error fetching donations. Please try again later.");
        console.error("Error fetching donations:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchDonations();
  }, []);

  // Filter and sort logic
  const filteredDonations = donations.filter((donation) => {
    const categoryMatch = categoryFilter === "" || donation.category === categoryFilter;
    const statusMatch = statusFilter === "" || donation.status === statusFilter;
    const searchMatch = (
      (donation.title || "").toLowerCase().includes(searchQuery.toLowerCase()) ||
      (donation.category || "").toLowerCase().includes(searchQuery.toLowerCase()) ||
      (donation.status || "").toLowerCase().includes(searchQuery.toLowerCase()) ||
      (donation.expirationDate ? new Date(donation.expirationDate).toLocaleDateString() : "").includes(searchQuery)
    );
    return categoryMatch && statusMatch && searchMatch;
  });

  const sortedDonations = [...filteredDonations].sort((a, b) => {
    let comparison = 0;
    switch (sortField) {
      case "title":
        comparison = (a.title || "").localeCompare(b.title || "");
        break;
      case "category":
        comparison = (a.category || "").localeCompare(b.category || "");
        break;
      case "status":
        comparison = (a.status || "").localeCompare(b.status || "");
        break;
      
      case "expirationDate":
        comparison = (new Date(a.expirationDate) || 0) - (new Date(b.expirationDate) || 0);
        break;
      case "createdAt":
        comparison = (new Date(a.createdAt) || 0) - (new Date(b.createdAt) || 0);
        break;
      case "updatedAt":
        comparison = (new Date(a.updatedAt) || 0) - (new Date(b.updatedAt) || 0);
        break;
      default:
        comparison = 0;
    }
    return sortOrder === "asc" ? comparison : -comparison;
  });

  const pagesVisited = currentPage * donationsPerPage;
  const displayDonations = sortedDonations.slice(pagesVisited, pagesVisited + donationsPerPage);
  const pageCount = Math.ceil(filteredDonations.length / donationsPerPage);

  const handlePageChange = (page) => {
    if (page >= 0 && page < pageCount) {
      setCurrentPage(page);
    }
  };

  const exportToPDF = () => {
    const doc = new jsPDF({
      orientation: "landscape",
      unit: "mm",
      format: "a4",
    });

    // Header
    doc.setFillColor(50, 62, 72);
    doc.rect(0, 0, doc.internal.pageSize.width, 40, "F");
    doc.setDrawColor(144, 196, 60);
    doc.setLineWidth(1.5);
    doc.line(0, 40, doc.internal.pageSize.width, 40);

    // Logo
    const imgWidth = 30, imgHeight = 30;
    doc.addImage(logo, "PNG", 5, 5, imgWidth, imgHeight);

    // Title
    doc.setFontSize(24);
    doc.setTextColor(255, 255, 255);
    doc.setFont("helvetica", "bold");
    doc.text("Donations List", doc.internal.pageSize.width / 2, 20, { align: "center" });

    // Date
    const today = new Date();
    const dateStr = today.toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
    doc.setFontSize(10);
    doc.setTextColor(200, 200, 200);
    doc.text(`Generated: ${dateStr}`, doc.internal.pageSize.width - 50, 35);

    // Table
    const tableColumn = [
      "Donor",
      "Title",
      "Category",
      "Status",
      
      "Expiration Date",
      "Created At",
      "Updated At",
    ];

    const tableRows = sortedDonations.map((donation) => [
      donation.donor?.name || "Unknown",
      donation.title || "N/A",
      donation.category || "N/A",
      donation.status || "N/A",
      donation.location || "N/A",
      donation.expirationDate ? new Date(donation.expirationDate).toLocaleDateString() : "N/A",
      donation.createdAt ? new Date(donation.createdAt).toLocaleDateString() : "N/A",
      donation.updatedAt ? new Date(donation.updatedAt).toLocaleDateString() : "N/A",
    ]);

    autoTable(doc, {
      head: [tableColumn],
      body: tableRows,
      startY: 50,
      theme: "grid",
      styles: {
        fontSize: 9,
        cellPadding: 5,
        textColor: [45, 45, 45],
        lineColor: [220, 220, 220],
        lineWidth: 0.3,
      },
      headStyles: {
        fillColor: [70, 80, 95],
        textColor: [255, 255, 255],
        fontStyle: "bold",
        fontSize: 10,
      },
      alternateRowStyles: {
        fillColor: [245, 245, 245],
      },
      didDrawPage: (data) => {
        doc.setDrawColor(200, 200, 200);
        doc.setLineWidth(0.5);
        doc.line(15, doc.internal.pageSize.height - 20, doc.internal.pageSize.width - 15, doc.internal.pageSize.height - 20);

        doc.setFillColor(144, 196, 60);
        doc.roundedRect(doc.internal.pageSize.width / 2 - 15, doc.internal.pageSize.height - 18, 30, 12, 3, 3, "F");
        doc.setTextColor(255, 255, 255);
        doc.setFontSize(9);
        doc.text(`Page ${data.pageNumber} of ${doc.internal.getNumberOfPages()}`, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 10, { align: "center" });

        doc.setTextColor(120, 120, 120);
        doc.setFontSize(8);
        doc.setFont("helvetica", "italic");
        doc.text("Confidential - For internal use only", 15, doc.internal.pageSize.height - 10);
        doc.text("© SustainaFood", doc.internal.pageSize.width - 45, doc.internal.pageSize.height - 10);
      },
    });

    doc.save(`Donations_List_${today.toISOString().split("T")[0]}.pdf`);
  };

  if (loading) return <div className="loading-message">Loading donations...</div>;
  if (error) return <div className="error-message">{error}</div>;

  return (
    <div className="dashboard-container">
      <Sidebar />
      <div className="dashboard-content">
        <Navbar setSearchQuery={setSearchQuery} />
        <div className="request-list">
          <div className="header-container">
            <h2 style={{ color: "green" }}>Donation Management</h2>
            <button className="export-pdf-btn" onClick={exportToPDF}>
              <FaFilePdf /> Export to PDF
            </button>
          </div>

          <FilterContainer>
            <div>
              <label htmlFor="categoryFilter">Filter by Category:</label>
              <select
                id="categoryFilter"
                value={categoryFilter}
                onChange={(e) => setCategoryFilter(e.target.value)}
              >
                <option value="">All</option>
                <option value="packaged_products">Packaged Products</option>
                <option value="prepared_meals">Prepared Meals</option>
              </select>
            </div>
            <div>
              <label htmlFor="statusFilter">Filter by Status:</label>
              <select
                id="statusFilter"
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
              >
                <option value="">All</option>
                <option value="pending">Pending</option>
                <option value="approved">Approved</option>
                <option value="rejected">Rejected</option>
                <option value="fulfilled">Fulfilled</option>
              </select>
            </div>
            <div>
              <label htmlFor="sortField">Sort by:</label>
              <select
                id="sortField"
                value={sortField}
                onChange={(e) => setSortField(e.target.value)}
              >
                <option value="title">Title</option>
                <option value="category">Category</option>
                <option value="status">Status</option>
                <option value="location">Location</option>
                <option value="expirationDate">Expiration Date</option>
                <option value="createdAt">Created At</option>
                <option value="updatedAt">Updated At</option>
              </select>
              <select
                value={sortOrder}
                onChange={(e) => setSortOrder(e.target.value)}
              >
                <option value="asc">Ascending</option>
                <option value="desc">Descending</option>
              </select>
            </div>
          </FilterContainer>

          <table>
            <thead>
              <tr>
                <th>Donor</th>
                <th>Title</th>
                <th>Category</th>
                <th>Status</th>
              
                <th>Expiration Date</th>
                <th>Created At</th>
                <th>Updated At</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {displayDonations.map((donation) => (
                <tr key={donation._id}>
                  <td>
                    <ProfileImg
                      src={donation.donor?.photo ? `http://localhost:3000/${donation.donor.photo}` : imgmouna}
                      alt="Donor"
                      onError={(e) => { e.target.src = imgmouna; }}
                    />
                    <br />
                    <span style={{ fontWeight: "bold" }}>
                      {donation.donor?.name || "Unknown Donor"}
                    </span>
                  </td>
                  <td>{donation.title || "N/A"}</td>
                  <td>{donation.category || "N/A"}</td>
                  <td>{donation.status || "N/A"}</td>
                 
                  <td>{donation.expirationDate ? new Date(donation.expirationDate).toLocaleDateString() : "N/A"}</td>
                  <td>{donation.createdAt ? new Date(donation.createdAt).toLocaleDateString() : "N/A"}</td>
                  <td>{donation.updatedAt ? new Date(donation.updatedAt).toLocaleDateString() : "N/A"}</td>
                  <td className="action-buttons">
                    <button className="view-btn">
                      <Link to={`/donations/view/${donation._id}`}>
                        <FaEye />
                      </Link>
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          {displayDonations.length === 0 && (
            <div style={{ textAlign: "center", margin: "20px 0" }}>
              No donations match the current filters
            </div>
          )}

          <PaginationControls>
            <button
              onClick={() => handlePageChange(currentPage - 1)}
              disabled={currentPage === 0}
            >
              Previous
            </button>
            <span>Page {currentPage + 1} of {pageCount}</span>
            <button
              onClick={() => handlePageChange(currentPage + 1)}
              disabled={currentPage === pageCount - 1}
            >
              Next
            </button>
          </PaginationControls>
        </div>
      </div>
    </div>
  );
};

export default DonationList;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/ONGList.jsx">
"use client"

import { useEffect, useState } from "react"
import axios from "axios"
import Sidebar from "../../components/backoffcom/Sidebar"
import Navbar from "../../components/backoffcom/Navbar"
import "/src/assets/styles/backoffcss/backlist.css" // Changed from ngoList.css to backlist.css
import { FaEye, FaTrash, FaBan, FaUnlock, FaFilePdf } from "react-icons/fa"
import ReactPaginate from "react-paginate"
import { Link } from "react-router-dom"
import logo from "../../assets/images/logooo.png"

import { jsPDF } from "jspdf"
import autoTable from "jspdf-autotable"

const ONGList = () => {
  const [ongs, setONGs] = useState([])
  const [currentPage, setCurrentPage] = useState(0)
  const [searchQuery, setSearchQuery] = useState("")
  const [sortField, setSortField] = useState("name")
  const [sortOrder, setSortOrder] = useState("asc")
  const ongsPerPage = 5

  const pagesVisited = currentPage * ongsPerPage

  useEffect(() => {
    axios
      .get("http://localhost:3000/users/list")
      .then((response) => {
        const ongUsers = response.data.filter((user) => user.role === "ong")
        setONGs(ongUsers)
      })
      .catch((error) => console.error("Error fetching ONGs:", error))
  }, [])

  const handleBlockONG = async (ongId, isBlocked) => {
    try {
      const response = await axios.put(`http://localhost:3000/users/toggle-block/${ongId}`, {
        isBlocked: !isBlocked,
      })

      if (response.status === 200) {
        alert(`ONG has been ${response.data.isBlocked ? "blocked" : "unblocked"} successfully.`)
        setONGs(ongs.map((ong) => (ong._id === ongId ? { ...ong, isBlocked: response.data.isBlocked } : ong)))
      } else {
        alert(response.data.error || "Error toggling block status.")
      }
    } catch (error) {
      console.error("Error:", error)
      alert("Failed to update block status.")
    }
  }

  const deleteONG = async (ongId) => {
    if (!window.confirm("Are you sure you want to delete this ONG?")) return

    try {
      await axios.delete(`http://localhost:3000/users/delete/${ongId}`)
      alert("ONG deleted!")
      setONGs(ongs.filter((ong) => ong._id !== ongId))
    } catch (error) {
      console.error("Error deleting ONG:", error)
    }
  }

  const exportToPDF = () => {
    const doc = new jsPDF({
      orientation: "landscape",
      unit: "mm",
      format: "a4",
    })

    // Header background
    doc.setFillColor(245, 245, 245)
    doc.rect(0, 0, doc.internal.pageSize.width, 40, "F")

    // Decorative bottom line
    doc.setDrawColor(144, 196, 60)
    doc.setLineWidth(1.5)
    doc.line(0, 40, doc.internal.pageSize.width, 40)

    // Logo
    const imgWidth = 30,
      imgHeight = 30
    doc.addImage(logo, "PNG", 5, 5, imgWidth, imgHeight)

    // Title
    const title = "ONG LIST"
    doc.setFontSize(28)
    doc.setTextColor(50, 62, 72)
    doc.setFont("helvetica", "bold")
    doc.text(title, doc.internal.pageSize.width / 2, 20, { align: "center" })

    // Date
    const today = new Date()
    const dateStr = today.toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    })
    doc.setFontSize(10)
    doc.setTextColor(80, 80, 80)
    doc.text(`Generated: ${dateStr}`, doc.internal.pageSize.width - 50, 38)

    // Table
    autoTable(doc, {
      head: [["ID", "Name", "Email", "Phone", "Tax Reference", "Status"]],
      body: ongs.map((ong, index) => [
        (index + 1).toString(),
        ong.name,
        ong.email,
        ong.phone || "N/A",
        ong.id_fiscale || "N/A",
        ong.isActive ? "Active" : "Inactive",
      ]),
      startY: 50,
      theme: "grid",
      styles: {
        fontSize: 9,
        cellPadding: 6,
        lineColor: [200, 200, 200],
        lineWidth: 0.2,
        valign: "middle",
        textColor: [45, 45, 45],
      },
      headStyles: {
        fillColor: [70, 80, 95],
        textColor: [255, 255, 255],
        fontStyle: "bold",
        halign: "center",
        fontSize: 10,
      },
      alternateRowStyles: {
        fillColor: [250, 250, 250],
      },
      didDrawCell: (data) => {
        if (data.section === "body" && data.column.index === 5) {
          const status = data.cell.text[0]
          if (status === "Active") {
            doc.setFillColor(144, 196, 60)
            doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F")
            doc.setTextColor(255, 255, 255)
          } else if (status === "Inactive") {
            doc.setFillColor(220, 220, 220)
            doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F")
            doc.setTextColor(100, 100, 100)
          }
        }
      },
      didDrawPage: (data) => {
        // Footer line
        doc.setDrawColor(200, 200, 200)
        doc.setLineWidth(0.5)
        doc.line(
          15,
          doc.internal.pageSize.height - 20,
          doc.internal.pageSize.width - 15,
          doc.internal.pageSize.height - 20,
        )

        // Page numbers
        doc.setFillColor(144, 196, 60)
        doc.roundedRect(doc.internal.pageSize.width / 2 - 15, doc.internal.pageSize.height - 18, 30, 12, 3, 3, "F")
        doc.setTextColor(255, 255, 255)
        doc.setFontSize(9)
        doc.text(
          `Page ${data.pageNumber} of ${doc.internal.getNumberOfPages()}`,
          doc.internal.pageSize.width / 2,
          doc.internal.pageSize.height - 10,
          { align: "center" },
        )

        // Confidentiality notice
        doc.setTextColor(120, 120, 120)
        doc.setFontSize(8)
        doc.setFont("helvetica", "italic")
        doc.text("Confidential - For internal use only", 15, doc.internal.pageSize.height - 10)

        // Institution info
        doc.text("© SustainaFood", doc.internal.pageSize.width - 45, doc.internal.pageSize.height - 10)
      },
    })

    doc.save(`ONG_Directory_${today.toISOString().split("T")[0]}.pdf`)
  }

  const filteredONGs = ongs.filter((ong) => {
    const phoneString = ong.phone ? ong.phone.toString() : ""
    return (
      ong.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      ong.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
      phoneString.includes(searchQuery)
    )
  })

  const sortedONGs = filteredONGs.sort((a, b) => {
    if (sortField === "name") {
      return sortOrder === "asc" ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name)
    } else if (sortField === "email") {
      return sortOrder === "asc" ? a.email.localeCompare(b.email) : b.email.localeCompare(a.email)
    } else if (sortField === "phone") {
      return sortOrder === "asc" ? a.phone - b.phone : b.phone - a.phone
    } else if (sortField === "id_fiscale") {
      return sortOrder === "asc"
        ? (a.id_fiscale || "").localeCompare(b.id_fiscale || "")
        : (b.id_fiscale || "").localeCompare(a.id_fiscale || "")
    } else if (sortField === "isActive") {
      return sortOrder === "asc"
        ? (a.isActive ? 1 : -1) - (b.isActive ? 1 : -1)
        : (b.isActive ? 1 : -1) - (a.isActive ? 1 : -1)
    }
    return 0
  })

  const displayONGs = sortedONGs.slice(pagesVisited, pagesVisited + ongsPerPage)
  const pageCount = Math.ceil(filteredONGs.length / ongsPerPage)

  const changePage = ({ selected }) => {
    setCurrentPage(selected)
  }

  return (
    <div className="dashboard-container">
      <Sidebar />
      <div className="dashboard-content">
        <Navbar setSearchQuery={setSearchQuery} />
        <div className="backlist-container">
          {/* Changed from ong-list to backlist-container */}
          <div className="backlist-header">
            {/* Changed from header-container to backlist-header */}
            <h2 className="backlist-title">ONG Management</h2>
            {/* Added backlist-title class */}
            <button className="backlist-action-button" onClick={exportToPDF}>
              {/* Changed from export-pdf-btn to backlist-action-button */}
              <FaFilePdf /> Export to PDF
            </button>
          </div>

          <div className="backlist-search">
            {/* Added backlist-search wrapper */}
            <div className="sort-container">
              <label>Sort by:</label>
              <select value={sortField} onChange={(e) => setSortField(e.target.value)}>
                <option value="name">Name</option>
                <option value="email">Email</option>
                <option value="phone">Phone</option>
                <option value="id_fiscale">Tax Reference</option>
                <option value="isActive">Active Status</option>
              </select>
              <select value={sortOrder} onChange={(e) => setSortOrder(e.target.value)}>
                <option value="asc">Ascending</option>
                <option value="desc">Descending</option>
              </select>
            </div>
          </div>

          <table className="backlist-table">
            {/* Added backlist-table class */}
            <thead className="backlist-table-head">
              {/* Added backlist-table-head class */}
              <tr>
                <th className="backlist-table-header">ID</th>
                <th className="backlist-table-header">Photo</th>
                <th className="backlist-table-header">Name</th>
                <th className="backlist-table-header">Email</th>
                <th className="backlist-table-header">Phone</th>
                <th className="backlist-table-header">Tax Reference</th>
                <th className="backlist-table-header">Active</th>
                <th className="backlist-table-header">Actions</th>
              </tr>
            </thead>
            <tbody>
              {displayONGs.map((ong, index) => (
                <tr key={ong._id} className="backlist-table-row">
                  {/* Added backlist-table-row class */}
                  <td className="backlist-table-cell">{pagesVisited + index + 1}</td>
                  <td className="backlist-table-cell">
                    <img
                      src={ong.photo ? `http://localhost:3000/${ong.photo}` : "/src/assets/User_icon_2.svg.png"}
                      alt="ong"
                      style={{ width: "40px", height: "40px", borderRadius: "50%" }}
                    />
                  </td>
                  <td className="backlist-table-cell">{ong.name}</td>
                  <td className="backlist-table-cell">{ong.email}</td>
                  <td className="backlist-table-cell">{ong.phone}</td>
                  <td className="backlist-table-cell">{ong.id_fiscale || "N/A"}</td>
                  <td className="backlist-table-cell">{ong.isActive ? "Yes" : "No"}</td>
                  <td className="backlist-table-cell backlist-actions-cell">
                    {/* Added backlist-actions-cell class */}
                    <Link to={`/ongs/view/${ong._id}`} className="backlist-row-action">
                      {/* Changed from view-btn to backlist-row-action */}
                      <FaEye />
                    </Link>
                    <button
                      className="backlist-row-action"
                      onClick={() => handleBlockONG(ong._id, ong.isBlocked)}
                      style={{ color: ong.isBlocked ? "green" : "red" }}
                    >
                      {/* Changed from block-btn to backlist-row-action */}
                      {ong.isBlocked ? <FaUnlock /> : <FaBan />}
                    </button>
                    <button className="backlist-row-action" onClick={() => deleteONG(ong._id)}>
                      {/* Changed from delete-btn to backlist-row-action */}
                      <FaTrash />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          {/* Pagination */}
          <ReactPaginate
            previousLabel={"Previous"}
            nextLabel={"Next"}
            pageCount={pageCount}
            onPageChange={changePage}
            containerClassName={"backlist-pagination"}
            pageClassName={"backlist-pagination-item"}
            previousClassName={"backlist-pagination-item"}
            nextClassName={"backlist-pagination-item"}
            pageLinkClassName={"backlist-pagination-link"}
            previousLinkClassName={"backlist-pagination-link"}
            nextLinkClassName={"backlist-pagination-link"}
            disabledClassName={"backlist-pagination-disabled"}
            activeClassName={"backlist-pagination-active"}
          />
        </div>
      </div>
    </div>
  )
}

export default ONGList
</file>

<file path="sustainafood-frontend/src/pages/backoffice/PredictionsDashboard.jsx">
import React, { useEffect, useState, useRef } from 'react';
import axios from 'axios';
import { Line } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import { FaFilePdf } from "react-icons/fa";
import '../../assets/styles/backoffcss/PredictionsDashboard.css';
import logo from '../../assets/images/logooo.png';

ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);

const PredictionsDashboard = () => {
  const [predictions, setPredictions] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const chartRef = useRef(null);

  useEffect(() => {
    const fetchPredictions = async () => {
      try {
        const response = await axios.get('http://localhost:3000/donation/donations/predict-supply-demand?period=week');
        console.log('API Response:', response.data);
        setPredictions(response.data);
        setLoading(false);
      } catch (err) {
        console.error('Prediction Fetch Error:', err.response || err.message);
        setError('Failed to load predictions: ' + (err.response?.data?.message || err.message));
        setLoading(false);
      }
    };

    fetchPredictions();
  }, []);

  if (loading) {
    return (
      <div className="admin-dashboard">
        <Sidebar />
        <div className="profile-container">
          <Navbar />
          <div>Loading predictions...</div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="admin-dashboard">
        <Sidebar />
        <div className="profile-container">
          <Navbar />
          <div>{error}</div>
        </div>
      </div>
    );
  }

  const hasValidData = predictions && predictions.supply && predictions.demand && 
    Object.keys(predictions.supply).length > 0 && Object.keys(predictions.demand).length > 0;

  if (!hasValidData) {
    console.log('Predictions State:', predictions);
    return (
      <div className="admin-dashboard">
        <Sidebar />
        <div className="profile-container">
          <Navbar />
          <div>No prediction data available</div>
        </div>
      </div>
    );
  }

  const allWeeks = [...new Set([...Object.keys(predictions.supply), ...Object.keys(predictions.demand)])].sort();

  const chartData = {
    labels: allWeeks,
    datasets: [
      {
        label: 'Supply (Products)',
        data: allWeeks.map(week => predictions.supply[week]?.products || 0),
        borderColor: 'blue',
        fill: false,
      },
      {
        label: 'Supply (Meals)',
        data: allWeeks.map(week => predictions.supply[week]?.meals || 0),
        borderColor: 'green',
        fill: false,
      },
      {
        label: 'Demand (Products)',
        data: allWeeks.map(week => predictions.demand[week]?.products || 0),
        borderColor: 'red',
        fill: false,
      },
      {
        label: 'Demand (Meals)',
        data: allWeeks.map(week => predictions.demand[week]?.meals || 0),
        borderColor: 'orange',
        fill: false,
      },
    ],
  };

  const options = {
    responsive: true,
    plugins: {
      legend: { position: 'top' },
      title: { display: true, text: 'Weekly Supply and Demand Predictions (Next Two Weeks)' },
    },
  };

  const generateReport = () => {
    let report = '<div class="report-container" style="font-family: Poppins, sans-serif; color: #333;">';
    report += '<h1 style="font-size: 26px; text-align: center; font-weight: bold;">Prediction Analysis Report</h1>';
  
    allWeeks.forEach(week => {
      report += `<div class="week-section" style="background: #f9f9f9; padding: 15px; border-radius: 8px; margin-bottom: 20px;">`;
      report += `<h4 style="font-size: 20px; color: #444; border-bottom: 2px solid #28a745; padding-bottom: 5px; margin-bottom: 15px;">Week ${week}</h4>`;
      report += `<p style="font-size: 14px;"><strong>Predicted Supply:</strong> ${predictions.supply[week]?.products || 0} products, ${predictions.supply[week]?.meals || 0} meals</p>`;
      report += `<p style="font-size: 14px;"><strong>Predicted Demand:</strong> ${predictions.demand[week]?.products || 0} products, ${predictions.demand[week]?.meals || 0} meals</p>`;
      
      report += `<p style="font-size: 14px; font-weight: bold;"><strong>Balance Analysis:</strong></p><ul class="ul-predactions" style="padding-left: 0; margin: 10px 0; list-style: none;">`;
      const productBalance = (predictions.supply[week]?.products || 0) - (predictions.demand[week]?.products || 0);
      const mealBalance = (predictions.supply[week]?.meals || 0) - (predictions.demand[week]?.meals || 0);
  
      if (productBalance > 0) {
        report += `<li class="li-predactions" style="display: flex; align-items: center; padding: 8px 12px; margin: 5px 0; background: rgba(40, 167, 69, 0.1); border-left: 5px solid #28a745; border-radius: 5px; font-size: 14px; line-height: 1.5;">✅ Surplus of ${productBalance} products. Supply exceeds demand.</li>`;
      } else if (productBalance < 0) {
        report += `<li class="li-predactions" style="display: flex; align-items: center; padding: 8px 12px; margin: 5px 0; background: rgba(40, 167, 69, 0.1); border-left: 5px solid #28a745; border-radius: 5px; font-size: 14px; line-height: 1.5;">⚠️ Shortage of ${Math.abs(productBalance)} products. Demand exceeds supply.</li>`;
      } else {
        report += `<li class="li-predactions" style="display: flex; align-items: center; padding: 8px 12px; margin: 5px 0; background: rgba(40, 167, 69, 0.1); border-left: 5px solid #28a745; border-radius: 5px; font-size: 14px; line-height: 1.5;">⚖️ Products: Balanced.</li>`;
      }
  
      if (mealBalance > 0) {
        report += `<li class="li-predactions" style="display: flex; align-items: center; padding: 8px 12px; margin: 5px 0; background: rgba(40, 167, 69, 0.1); border-left: 5px solid #28a745; border-radius: 5px; font-size: 14px; line-height: 1.5;">✅ Surplus of ${mealBalance} meals. Supply exceeds demand.</li>`;
      } else if (mealBalance < 0) {
        report += `<li class="li-predactions" style="display: flex; align-items: center; padding: 8px 12px; margin: 5px 0; background: rgba(40, 167, 69, 0.1); border-left: 5px solid #28a745; border-radius: 5px; font-size: 14px; line-height: 1.5;">⚠️ Shortage of ${Math.abs(mealBalance)} meals. Demand exceeds supply.</li>`;
      } else {
        report += `<li class="li-predactions" style="display: flex; align-items: center; padding: 8px 12px; margin: 5px 0; background: rgba(40, 167, 69, 0.1); border-left: 5px solid #28a745; border-radius: 5px; font-size: 14px; line-height: 1.5;">⚖️ Meals: Balanced.</li>`;
      }
  
      report += `</ul></div>`;
    });
  
    report += `<div class="resolution-section" style="padding: 15px; background: #eafbea; border-left: 5px solid #28a745; border-radius: 8px; margin-top: 20px;"><h4 style="font-size: 20px; color: #444; border-bottom: 2px solid #28a745; padding-bottom: 5px; margin-bottom: 15px;">Resolution</h4><p style="font-size: 14px;">Recommended actions to address supply-demand balance:</p><ul class="ul-predactions" style="padding-left: 0; margin: 10px 0; list-style: none;">`;
  
    allWeeks.forEach(week => {
      const productBalance = (predictions.supply[week]?.products || 0) - (predictions.demand[week]?.products || 0);
      const mealBalance = (predictions.supply[week]?.meals || 0) - (predictions.demand[week]?.meals || 0);
  
      if (productBalance > 0) {
        report += `<li class="li-predactions" style="display: flex; align-items: center; padding: 8px 12px; margin: 5px 0; background: rgba(40, 167, 69, 0.1); border-left: 5px solid #28a745; border-radius: 5px; font-size: 14px; line-height: 1.5;">📦 For ${week} (Products): Surplus of ${productBalance}. Redistribute excess products.</li>`;
      } else if (productBalance < 0) {
        report += `<li class="li-predactions" style="display: flex; align-items: center; padding: 8px 12px; margin: 5px 0; background: rgba(40, 167, 69, 0.1); border-left: 5px solid #28a745; border-radius: 5px; font-size: 14px; line-height: 1.5;">🛒 For ${week} (Products): Shortage of ${Math.abs(productBalance)}. Increase donations.</li>`;
      }
  
      if (mealBalance > 0) {
        report += `<li class="li-predactions" style="display: flex; align-items: center; padding: 8px 12px; margin: 5px 0; background: rgba(40, 167, 69, 0.1); border-left: 5px solid #28a745; border-radius: 5px; font-size: 14px; line-height: 1.5;">🍽️ For ${week} (Meals): Surplus of ${mealBalance}. Coordinate distribution.</li>`;
      } else if (mealBalance < 0) {
        report += `<li class="li-predactions" style="display: flex; align-items: center; padding: 8px 12px; margin: 5px 0; background: rgba(40, 167, 69, 0.1); border-left: 5px solid #28a745; border-radius: 5px; font-size: 14px; line-height: 1.5;">🍽️ For ${week} (Meals): Shortage of ${Math.abs(mealBalance)}. Encourage donations.</li>`;
      }
    });
  
    report += `</ul></div>`;
    report += `</div>`;
  
    return report;
  };

  const downloadPDF = () => {
    const doc = new jsPDF({
      orientation: "portrait",
      unit: "mm",
      format: "a4",
    });
  
    // Header setup
    const addHeader = () => {
      doc.setFillColor(245, 245, 245);
      doc.rect(0, 0, doc.internal.pageSize.width, 40, "F");
      doc.setDrawColor(144, 196, 60);
      doc.setLineWidth(1.5);
      doc.line(0, 40, doc.internal.pageSize.width, 40);
      const imgWidth = 30, imgHeight = 30;
      doc.addImage(logo, "PNG", 5, 5, imgWidth, imgHeight);
      const title = "Supply and Demand Predictions";
      doc.setFontSize(28);
      doc.setTextColor(50, 62, 72);
      doc.setFont("helvetica", "bold");
      doc.text(title, doc.internal.pageSize.width / 2, 20, { align: "center" });
      const today = new Date();
      const dateStr = today.toLocaleDateString("en-US", {
        year: "numeric",
        month: "long",
        day: "numeric",
      });
      doc.setFontSize(10);
      doc.setTextColor(80, 80, 80);
      doc.text(`Generated: ${dateStr}`, doc.internal.pageSize.width - 50, 38);
    };
  
    // Footer setup
    const addFooter = (page, pageCount) => {
      doc.setDrawColor(200, 200, 200);
      doc.setLineWidth(0.5);
      doc.line(15, doc.internal.pageSize.height - 20, doc.internal.pageSize.width - 15, doc.internal.pageSize.height - 20);
      doc.setFillColor(144, 196, 60);
      doc.roundedRect(doc.internal.pageSize.width / 2 - 15, doc.internal.pageSize.height - 18, 30, 12, 3, 3, "F");
      doc.setTextColor(255, 255, 255);
      doc.setFontSize(9);
      doc.text(`Page ${page} of ${pageCount}`, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 10, { align: "center" });
      doc.setTextColor(120, 120, 120);
      doc.setFontSize(8);
      doc.setFont("helvetica", "italic");
      doc.text("Confidential - For internal use only", 15, doc.internal.pageSize.height - 10);
      doc.text("© SustainaFood", doc.internal.pageSize.width - 45, doc.internal.pageSize.height - 10);
    };
  
    // Add the first page header
    addHeader();
  
    // Capture the chart as an image
    const chartCanvas = chartRef.current.querySelector('canvas');
    html2canvas(chartCanvas, { scale: 2 }).then(chartCanvas => {
      const chartImgData = chartCanvas.toDataURL('image/png');
      const imgWidth = 190;
      const chartImgHeight = (chartCanvas.height * imgWidth) / chartCanvas.width;
  
      // Add the chart to the PDF
      let position = 50;
      doc.addImage(chartImgData, 'PNG', 10, position, imgWidth, chartImgHeight);
  
      // Add the report as text
      position += chartImgHeight + 10; // Space after the chart
  
      // Report content
      doc.setFontSize(16);
      doc.setTextColor(50, 62, 72);
      doc.setFont("helvetica", "bold");
      doc.text("Prediction Analysis Report", 10, position);
      position += 10;
  
      allWeeks.forEach(week => {
        // Check if we need a new page
        if (position > 250) { // Leave space for footer
          doc.addPage();
          addHeader();
          position = 50;
        }
  
        doc.setFontSize(12);
        doc.setTextColor(50, 62, 72);
        doc.setFont("helvetica", "bold");
        doc.text(`Week ${week}`, 10, position);
        position += 7;
  
        doc.setFontSize(10);
        doc.setTextColor(80, 80, 80);
        doc.setFont("helvetica", "normal");
        doc.text(`Predicted Supply: ${predictions.supply[week]?.products || 0} products, ${predictions.supply[week]?.meals || 0} meals`, 10, position);
        position += 5;
        doc.text(`Predicted Demand: ${predictions.demand[week]?.products || 0} products, ${predictions.demand[week]?.meals || 0} meals`, 10, position);
        position += 7;
  
        doc.setFont("helvetica", "bold");
        doc.text("Balance Analysis:", 10, position);
        position += 5;
  
        const productBalance = (predictions.supply[week]?.products || 0) - (predictions.demand[week]?.products || 0);
        const mealBalance = (predictions.supply[week]?.meals || 0) - (predictions.demand[week]?.meals || 0);
  
        doc.setFont("helvetica", "normal");
        // Add bullet point for product balance
        doc.text("•", 15, position); // Custom bullet
        if (productBalance > 0) {
          doc.text(`Surplus of ${productBalance} products. Supply exceeds demand.`, 20, position);
        } else if (productBalance < 0) {
          doc.text(`Shortage of ${Math.abs(productBalance)} products. Demand exceeds supply.`, 20, position);
        } else {
          doc.text(`Products: Balanced.`, 20, position);
        }
        position += 5;
  
        // Add bullet point for meal balance
        doc.text("•", 15, position); // Custom bullet
        if (mealBalance > 0) {
          doc.text(`Surplus of ${mealBalance} meals. Supply exceeds demand.`, 20, position);
        } else if (mealBalance < 0) {
          doc.text(`Shortage of ${Math.abs(mealBalance)} meals. Demand exceeds supply.`, 20, position);
        } else {
          doc.text(`Meals: Balanced.`, 20, position);
        }
        position += 10;
      });
  
      // Resolution section
      if (position > 250) {
        doc.addPage();
        addHeader();
        position = 50;
      }
  
      doc.setFontSize(12);
      doc.setTextColor(50, 62, 72);
      doc.setFont("helvetica", "bold");
      doc.text("Resolution", 10, position);
      position += 5;
  
      doc.setFontSize(10);
      doc.setFont("helvetica", "normal");
      doc.text("Recommended actions to address supply-demand balance:", 10, position);
      position += 7;
  
      allWeeks.forEach(week => {
        const productBalance = (predictions.supply[week]?.products || 0) - (predictions.demand[week]?.products || 0);
        const mealBalance = (predictions.supply[week]?.meals || 0) - (predictions.demand[week]?.meals || 0);
  
        if (productBalance > 0) {
          if (position > 250) {
            doc.addPage();
            addHeader();
            position = 50;
          }
          doc.text("•", 15, position); // Custom bullet
          doc.text(`For ${week} (Products): Surplus of ${productBalance}. Redistribute excess products.`, 20, position);
          position += 5;
        } else if (productBalance < 0) {
          if (position > 250) {
            doc.addPage();
            addHeader();
            position = 50;
          }
          doc.text("•", 15, position); // Custom bullet
          doc.text(`For ${week} (Products): Shortage of ${Math.abs(productBalance)}. Increase donations.`, 20, position);
          position += 5;
        }
  
        if (mealBalance > 0) {
          if (position > 250) {
            doc.addPage();
            addHeader();
            position = 50;
          }
          doc.text("•", 15, position); // Custom bullet
          doc.text(`For ${week} (Meals): Surplus of ${mealBalance}. Coordinate distribution.`, 20, position);
          position += 5;
        } else if (mealBalance < 0) {
          if (position > 250) {
            doc.addPage();
            addHeader();
            position = 50;
          }
          doc.text("•", 15, position); // Custom bullet
          doc.text(`For ${week} (Meals): Shortage of ${Math.abs(mealBalance)}. Encourage donations.`, 20, position);
          position += 5;
        }
      });
  
      // Add footer to all pages
      const pageCount = doc.internal.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        addFooter(i, pageCount);
      }
  
      const today = new Date();
      doc.save(`Supply_Demand_Predictions_${today.toISOString().split("T")[0]}.pdf`);
    });
  };

  return (
    <div className="prdd-admin-dashboard">
      <Sidebar />
      <div className="prdd-profile-container">
        <Navbar />
        <div className="prdd-chart-container">
          <h1 style={{ marginTop: '0px', color: '#28a745' }}>
            Weekly Supply and Demand Predictions (Next Two Weeks)
          </h1>
          <button className="prdd-download-button" onClick={downloadPDF}>
            <FaFilePdf /> Export to PDF
          </button>
          <div ref={chartRef}>
            <Line data={chartData} options={options} />
          </div>
        </div>
  
        <div className="prdd-week-section">
          <h4>Prediction Details</h4>
          <div dangerouslySetInnerHTML={{ __html: generateReport() }} />
        </div>
      </div>
    </div>
  );
  
};

export default PredictionsDashboard;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/RequestTable.jsx">
import React, { useState, useEffect } from "react";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";
import { FaFilePdf, FaEye } from "react-icons/fa";
import "../../assets/styles/backoffcss/RequestTable.css";
import { Link } from "react-router-dom";
import axios from "axios";
import styled from "styled-components";
import imgmouna from '../../assets/images/imgmouna.png';
import logo from '../../assets/images/logooo.png';  // Import the logo

// Styled component for pagination controls
const PaginationControls = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  gap: 10px;

  button {
    padding: 10px 20px;
    font-size: 16px;
    background: #228b22;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s;

    &:hover {
      background: #56ab2f;
    }

    &:disabled {
      background: #ccc;
      cursor: not-allowed;
    }
  }

  span {
    font-size: 16px;
    color: #333;
  }
`;

const ProfileImg = styled.img`
  width: 50px;
  height: 50px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #228b22;
`;

const RequestTable = () => {
  const [requests, setRequests] = useState([]);
  const [currentPage, setCurrentPage] = useState(0);
  const [searchQuery, setSearchQuery] = useState("");
  const [sortField, setSortField] = useState("title");
  const [sortOrder, setSortOrder] = useState("asc");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [categoryFilter, setCategoryFilter] = useState("");
const [roleFilter, setRoleFilter] = useState("");
const [statusFilter, setStatusFilter] = useState("");
  const requestsPerPage = 4;

  // Sanitize data function
  const sanitizeRequest = (request) => {
    return {
      ...request,
      title: request.title ? request.title.trim() : "",
      category: request.category ? request.category.trim() : "",
      description: request.description ? request.description.trim() : "",
    };
  };

  useEffect(() => {
    const fetchRequests = async () => {
      try {
        setLoading(true);
        const response = await axios.get("http://localhost:3000/request/requests");
        const sanitizedData = response.data.map(sanitizeRequest);
        setRequests(sanitizedData);
        setLoading(false);
      } catch (error) {
        setLoading(false);
        setError("Error fetching requests. Please try again later.");
        console.error("Error fetching requests:", error);
      }
    };
    fetchRequests();
  }, []);

   // Filter requests based on category, role, and status
   const filteredRequests = requests.filter((request) => {
    const categoryMatch = categoryFilter === "" || request.category === categoryFilter;
    const roleMatch = roleFilter === "" || (request.recipient && request.recipient.role === roleFilter);
    const statusMatch = statusFilter === "" || request.status === statusFilter;
    return categoryMatch && roleMatch && statusMatch;
  });

  // Sort filtered requests
  const sortedRequests = [...filteredRequests].sort((a, b) => {
    let comparison = 0;
    if (sortField === "title") {
      comparison = (a.title || "").localeCompare(b.title || "");
    } else if (sortField === "category") {
      comparison = (a.category || "").localeCompare(b.category || "");
    } else if (sortField === "expirationDate") {
      const dateA = a.expirationDate ? new Date(a.expirationDate) : null;
      const dateB = b.expirationDate ? new Date(b.expirationDate) : null;
      if (dateA && dateB) {
        comparison = dateA.getTime() - dateB.getTime();
      } else if (dateA) {
        comparison = -1;
      } else if (dateB) {
        comparison = 1;
      } else {
        comparison = 0;
      }
    } else if (sortField === "status") {
      comparison = (a.status || "").localeCompare(b.status || "");
    } else if (sortField === "_id") {
      comparison = (a._id || "").localeCompare(b._id || "");
    } else if (sortField === "role") {
      comparison = (a.recipient?.role || "").localeCompare(b.recipient?.role || "");
    }
    return sortOrder === "asc" ? comparison : comparison * -1;
  });

  const pagesVisited = currentPage * requestsPerPage;
  const displayRequests = sortedRequests.slice(pagesVisited, pagesVisited + requestsPerPage);
  const pageCount = Math.ceil(filteredRequests.length / requestsPerPage);

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  const handleSortChange = (e) => {
    setSortField(e.target.value);
  };

  const handleSortOrderChange = (e) => {
    setSortOrder(e.target.value);
  };



  const exportToPDF = () => {
    const doc = new jsPDF({
        orientation: "landscape",
        unit: "mm",
        format: "a4",
    });

    // 🎨 Header Background
    doc.setFillColor(50, 62, 72); // Dark Slate Blue
    doc.rect(0, 0, doc.internal.pageSize.width, 40, "F");

    // 🏆 Decorative Bottom Line

    doc.setDrawColor(144, 196, 60); // Accent Green
    doc.setLineWidth(1.5);
    doc.line(0, 40, doc.internal.pageSize.width, 40);

    // 🖼️ Add Logo
    const imgWidth = 30, imgHeight = 30;
    doc.addImage(logo, "PNG", 5, 5, imgWidth, imgHeight);

    // 🏷️ Title
    doc.setFontSize(24);
    doc.setTextColor(255, 255, 255); // White
    doc.setFont("helvetica", "bold");
    doc.text("Request List", doc.internal.pageSize.width / 2, 20, { align: "center" });

    // 📅 Date
    const today = new Date();
    const dateStr = today.toLocaleDateString("en-US", {
        year: "numeric",
        month: "long",
        day: "numeric",
    });
    doc.setFontSize(10);
    doc.setTextColor(200, 200, 200);
    doc.text(`Generated: ${dateStr}`, doc.internal.pageSize.width - 50, 35);

    // 📊 Table Headers
    const tableColumn = [
        "User",
        "Title",
        "Category",
        "Expiration Date",
        "Status",
        "Description",
        "Products",
        "Location",
    ];

    // 🔄 Data Processing
    const tableRows = sortedRequests.map((request) => {
        const username = request.recipient ? request.recipient.name : "Unknown";
        const role = request.recipient ? request.recipient.role : "Role Not Specified";

        const products =
            request.category === "prepared_meals"
                ? ` number Of Meals: ${request.numberOfMeals || "N/A"}\n `
                : request.category === "packaged_products" && request.requestedProducts?.length
                ? request.requestedProducts
                      .map((p) => ` ${p.product?.productType || "N/A"}\n ${p.product?.productDescription?.trim() || "N/A"}\n Qty: ${p.quantity || 0}`)
                      .join("\n\n")
                : " No Products";

        return [
            `${username} (${role})`,
            request.title?.trim() || "N/A",
            request.category?.trim() || "N/A",
            request.expirationDate ? new Date(request.expirationDate).toLocaleDateString() : "N/A",
            request.status || "N/A",
            request.description?.trim() || "N/A",
            products,
            request.address || "N/A",
        ];
    });

    // 🏆 Styled Table
    autoTable(doc, {
        head: [tableColumn],
        body: tableRows,
        startY: 50,
        theme: "grid",
        styles: {
            fontSize: 9,
            cellPadding: 5,
            textColor: [45, 45, 45], // Dark Gray Text
            lineColor: [220, 220, 220], // Light Borders
            lineWidth: 0.3,
            valign: "middle",
        },
        headStyles: {
            fillColor: [70, 80, 95], // Dark Blue Headers
            textColor: [255, 255, 255], // White Text
            fontStyle: "bold",
            fontSize: 10,
        },
        alternateRowStyles: {
            fillColor: [245, 245, 245], // Light Gray Background for Alternating Rows
        },
        columnStyles: {
            6: { cellWidth: 50 }, // Wider Product Column
        },
        didDrawPage: (data) => {
            // 🔻 Footer Line
            doc.setDrawColor(200, 200, 200);
            doc.setLineWidth(0.5);
            doc.line(15, doc.internal.pageSize.height - 20, doc.internal.pageSize.width - 15, doc.internal.pageSize.height - 20);

            // 📄 Page Numbers
            doc.setFillColor(144, 196, 60);
            doc.roundedRect(doc.internal.pageSize.width / 2 - 15, doc.internal.pageSize.height - 18, 30, 12, 3, 3, "F");
            doc.setTextColor(255, 255, 255);
            doc.setFontSize(9);
            doc.text(`Page ${data.pageNumber} of ${doc.internal.getNumberOfPages()}`, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 10, { align: "center" });

            // 🔒 Confidentiality Notice
            doc.setTextColor(120, 120, 120);
            doc.setFontSize(8);
            doc.setFont("helvetica", "italic");
            doc.text("Confidential - For internal use only", 15, doc.internal.pageSize.height - 10);

            // 🔗 Branding
            doc.text("© SustainaFood", doc.internal.pageSize.width - 45, doc.internal.pageSize.height - 10);
        },
    });

    // 📥 Save PDF
    doc.save(`Request_List_${today.toISOString().split("T")[0]}.pdf`);
};

  
  

  return (
    <div className="dashboard-container">
      <Sidebar />
      <div className="dashboard-content">
        <Navbar setSearchQuery={setSearchQuery} />

        <div className="request-list">
          <div className="header-container">
            <h2 style={{ color:"green"}}>Request Management</h2>
            <button className="export-pdf-btn" onClick={exportToPDF}>
              <FaFilePdf />
              Export to PDF
            </button>
          </div>
          <div className="filter-container">
            <label htmlFor="categoryFilter">Filter by Category:</label>
            <select
              id="categoryFilter"
              value={categoryFilter}
              onChange={(e) => setCategoryFilter(e.target.value)}
            >
              <option value="">All</option>
              <option value="packaged_products">Packaged Products</option>
              <option value="prepared_meals">Prepared Meals</option>
            </select>

            <label htmlFor="roleFilter">Filter by Role:</label>
            <select
              id="roleFilter"
              value={roleFilter}
              onChange={(e) => setRoleFilter(e.target.value)}
            >
              <option value="">All</option>
              <option value="ong">ONG</option>
              <option value="student">Student</option>
            </select>

            <label htmlFor="statusFilter">Filter by Status:</label>
            <select
              id="statusFilter"
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
            >
              <option value="">All</option>
              <option value="pending">Pending</option>
              <option value="approved">Approved</option>
              <option value="rejected">Rejected</option>
              <option value="fulfilled">Fulfilled</option>
              <option value="partially_fulfilled">Partially Fulfilled</option>
            </select>
          </div>

        

          {loading ? (
            <div>Loading requests...</div>
          ) : error ? (
            <div>{error}</div>
          ) : (
            <>
              <table>
                <thead>
                  <tr>
                    <th>User</th>
                    <th>Title</th>
                    <th>Category</th>
                    <th>Expiration Date</th>
                    <th>Status</th>
                    <th>Products</th>
                    <th>Location</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {displayRequests.map((request) => {
                    const userPhoto = request.recipient?.photo
                      ? `http://localhost:3000/${request.recipient.photo}`
                      : imgmouna;
                    return (
                      <tr key={request._id}>
                      <td>
                        <ProfileImg
                          src={userPhoto}
                          alt="Profile"
                          onError={(e) => {
                            e.target.src = imgmouna;
                            console.error(`Failed to load image: ${userPhoto}`);
                          }}
                        />
                        <br />
                        <span style={{ fontWeight: "bold" }}>
                          {request.recipient
                            ? `${request.recipient.name || "Unknown"}`.trim() || "Unknown User"
                            : "Unknown User"}
                        </span>
                        <br />
                        <span style={{ color: "#228b22" }}>
                          {request.recipient?.role || "Role Not Specified"}
                        </span>
                      </td>
                        <td>{request.title}</td>
                        <td>{request.category}</td>
                        <td>
                          {new Date(request.expirationDate).toLocaleDateString()}
                        </td>
                        <td>{request.status}</td>
                        <td>
                          {request.category === "prepared_meals" ? (
                            <div>
                              number Of Meals: {request.numberOfMeals || "N/A"}
                            </div>
                          ) : (
                            <div>
                              requsted product: {request.requestedProducts.length}
                            </div>
                          )}
                        </td>
                        <td>{request.address || "N/A"}</td>
                        <td >
                          <button className="view-btn">
                            <Link to={`/requests/view/${request._id}`}>
                              <FaEye />
                            </Link>
                          </button>
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
              <PaginationControls>
                <button
                  onClick={() => handlePageChange(Math.max(currentPage - 1, 0))}
                  disabled={currentPage === 0}
                >
                  Previous
                </button>
                <span>
                  Page {currentPage + 1} of {pageCount}
                </span>
                <button
                  onClick={() =>
                    handlePageChange(Math.min(currentPage + 1, pageCount - 1))
                  }
                  disabled={currentPage === pageCount - 1}
                >
                  Next
                </button>
              </PaginationControls>
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default RequestTable;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/StudentList.jsx">
"use client"

import { useEffect, useState } from "react"
import axios from "axios"
import Sidebar from "../../components/backoffcom/Sidebar"
import Navbar from "../../components/backoffcom/Navbar"
import "/src/assets/styles/backoffcss/backlist.css" // Changed from studentList.css to backlist.css
import { FaEye, FaTrash, FaBan, FaUnlock, FaFilePdf } from "react-icons/fa"
import ReactPaginate from "react-paginate"
import { Link } from "react-router-dom"
import logo from "../../assets/images/logooo.png"

import { jsPDF } from "jspdf"
import autoTable from "jspdf-autotable"

const StudentList = () => {
  const [students, setStudents] = useState([])
  const [currentPage, setCurrentPage] = useState(0)
  const [searchQuery, setSearchQuery] = useState("")
  const [sortField, setSortField] = useState("name")
  const [sortOrder, setSortOrder] = useState("asc")
  const studentsPerPage = 3

  const pagesVisited = currentPage * studentsPerPage

  useEffect(() => {
    axios
      .get("http://localhost:3000/users/list")
      .then((response) => {
        const studentUsers = response.data.filter((user) => user.role === "student")
        setStudents(studentUsers)
      })
      .catch((error) => console.error("Error fetching students:", error))
  }, [])

  const handleBlockUser = async (userId, isBlocked) => {
    try {
      const response = await axios.put(`http://localhost:3000/users/toggle-block/${userId}`, {
        isBlocked: !isBlocked,
      })

      if (response.status === 200) {
        alert(`User has been ${response.data.isBlocked ? "blocked" : "unblocked"} successfully.`)
        setStudents(
          students.map((student) =>
            student._id === userId ? { ...student, isBlocked: response.data.isBlocked } : student,
          ),
        )
      } else {
        alert(response.data.error || "Error toggling block status.")
      }
    } catch (error) {
      console.error("Error:", error)
      alert("Failed to update block status.")
    }
  }

  const deleteUser = async (userId) => {
    if (!window.confirm("Are you sure you want to delete this student?")) return

    try {
      await axios.delete(`http://localhost:3000/users/delete/${userId}`)
      alert("Student deleted!")
      setStudents(students.filter((user) => user._id !== userId))
    } catch (error) {
      console.error("Error deleting student:", error)
    }
  }

  const exportToPDF = () => {
    const doc = new jsPDF({
      orientation: "landscape",
      unit: "mm",
      format: "a4",
    })

    // Header background
    doc.setFillColor(245, 245, 245)
    doc.rect(0, 0, doc.internal.pageSize.width, 40, "F")

    // Decorative bottom line
    doc.setDrawColor(144, 196, 60)
    doc.setLineWidth(1.5)
    doc.line(0, 40, doc.internal.pageSize.width, 40)

    // Logo
    const imgWidth = 30,
      imgHeight = 30
    doc.addImage(logo, "PNG", 5, 5, imgWidth, imgHeight)

    // Title
    const title = "STUDENTS LIST"
    doc.setFontSize(28)
    doc.setTextColor(50, 62, 72)
    doc.setFont("helvetica", "bold")
    doc.text(title, doc.internal.pageSize.width / 2, 20, { align: "center" })

    // Date
    const today = new Date()
    const dateStr = today.toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    })
    doc.setFontSize(10)
    doc.setTextColor(80, 80, 80)
    doc.text(`Generated: ${dateStr}`, doc.internal.pageSize.width - 50, 38)

    // Table
    autoTable(doc, {
      head: [["ID", "Name", "Email", "Phone", "CIN", "Age", "Sex", "Status"]],
      body: students.map((student, index) => [
        (index + 1).toString(),
        student.name,
        student.email,
        student.phone || "N/A",
        student.num_cin || "N/A",
        student.age ? student.age.toString() : "N/A",
        student.sexe || "N/A",
        student.isActive ? "Active" : "Inactive",
      ]),
      startY: 50,
      theme: "grid",
      styles: {
        fontSize: 9,
        cellPadding: 6,
        lineColor: [200, 200, 200],
        lineWidth: 0.2,
        valign: "middle",
        textColor: [45, 45, 45],
      },
      headStyles: {
        fillColor: [70, 80, 95],
        textColor: [255, 255, 255],
        fontStyle: "bold",
        halign: "center",
        fontSize: 10,
      },
      alternateRowStyles: {
        fillColor: [250, 250, 250],
      },
      didDrawCell: (data) => {
        if (data.section === "body" && data.column.index === 7) {
          const status = data.cell.text[0]
          if (status === "Active") {
            doc.setFillColor(144, 196, 60)
            doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F")
            doc.setTextColor(255, 255, 255)
          } else if (status === "Inactive") {
            doc.setFillColor(220, 220, 220)
            doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F")
            doc.setTextColor(100, 100, 100)
          }
        }
      },
      didDrawPage: (data) => {
        // Footer line
        doc.setDrawColor(200, 200, 200)
        doc.setLineWidth(0.5)
        doc.line(
          15,
          doc.internal.pageSize.height - 20,
          doc.internal.pageSize.width - 15,
          doc.internal.pageSize.height - 20,
        )

        // Page numbers
        doc.setFillColor(144, 196, 60)
        doc.roundedRect(doc.internal.pageSize.width / 2 - 15, doc.internal.pageSize.height - 18, 30, 12, 3, 3, "F")
        doc.setTextColor(255, 255, 255)
        doc.setFontSize(9)
        doc.text(
          `Page ${data.pageNumber} of ${doc.internal.getNumberOfPages()}`,
          doc.internal.pageSize.width / 2,
          doc.internal.pageSize.height - 10,
          { align: "center" },
        )

        // Confidentiality notice
        doc.setTextColor(120, 120, 120)
        doc.setFontSize(8)
        doc.setFont("helvetica", "italic")
        doc.text("Confidential - For internal use only", 15, doc.internal.pageSize.height - 10)

        // Institution info
        doc.text("©SustainaFood", doc.internal.pageSize.width - 45, doc.internal.pageSize.height - 10)
      },
    })

    doc.save(`Student_Directory_${today.toISOString().split("T")[0]}.pdf`)
  }

  const filteredStudents = students.filter((student) => {
    const phoneString = student.phone ? student.phone.toString() : ""
    const ageString = student.age ? student.age.toString() : ""
    const numCinString = student.num_cin ? student.num_cin.toString() : ""
    const sexeString = student.sexe ? student.sexe.toString().toLowerCase() : ""
    return (
      student.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      student.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
      phoneString.includes(searchQuery) ||
      ageString.includes(searchQuery) ||
      numCinString.includes(searchQuery) ||
      sexeString.includes(searchQuery)
    )
  })

  const sortedStudents = filteredStudents.sort((a, b) => {
    if (sortField === "name") {
      return sortOrder === "asc" ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name)
    } else if (sortField === "email") {
      return sortOrder === "asc" ? a.email.localeCompare(b.email) : b.email.localeCompare(a.email)
    } else if (sortField === "phone") {
      return sortOrder === "asc" ? a.phone - b.phone : b.phone - a.phone
    } else if (sortField === "num_cin") {
      return sortOrder === "asc"
        ? (a.num_cin || "").localeCompare(b.num_cin || "")
        : (b.num_cin || "").localeCompare(a.num_cin || "")
    } else if (sortField === "age") {
      return sortOrder === "asc" ? a.age - b.age : b.age - a.age
    } else if (sortField === "sexe") {
      return sortOrder === "asc" ? a.sexe.localeCompare(b.sexe) : b.sexe.localeCompare(a.sexe)
    } else if (sortField === "isActive") {
      return sortOrder === "asc"
        ? (a.isActive ? 1 : -1) - (b.isActive ? 1 : -1)
        : (b.isActive ? 1 : -1) - (a.isActive ? 1 : -1)
    }
    return 0
  })

  const displayStudents = sortedStudents.slice(pagesVisited, pagesVisited + studentsPerPage)
  const pageCount = Math.ceil(filteredStudents.length / studentsPerPage)

  const changePage = ({ selected }) => {
    setCurrentPage(selected)
  }

  return (
    <div className="dashboard-container">
      <Sidebar />
      <div className="dashboard-content">
        <Navbar setSearchQuery={setSearchQuery} />
        <div className="backlist-container">
          {/* Changed from student-list to backlist-container */}
          <div className="backlist-header">
            {/* Changed from header-container to backlist-header */}
            <h2 className="backlist-title">Student Management</h2>
            {/* Added backlist-title class */}
            <button className="backlist-action-button" onClick={exportToPDF}>
              {/* Changed from export-pdf-btn to backlist-action-button */}
              <FaFilePdf /> Export to PDF
            </button>
          </div>

          <div className="backlist-search">
            {/* Changed to backlist-search */}
            <div className="sort-container">
              <label>Sort by:</label>
              <select value={sortField} onChange={(e) => setSortField(e.target.value)}>
                <option value="name">Name</option>
                <option value="email">Email</option>
                <option value="phone">Phone</option>
                <option value="num_cin">CIN</option>
                <option value="age">Age</option>
                <option value="sexe">Sex</option>
                <option value="isActive">Active Status</option>
              </select>
              <select value={sortOrder} onChange={(e) => setSortOrder(e.target.value)}>
                <option value="asc">Ascending</option>
                <option value="desc">Descending</option>
              </select>
            </div>
          </div>

          <table className="backlist-table">
            {/* Added backlist-table class */}
            <thead className="backlist-table-head">
              {/* Added backlist-table-head class */}
              <tr>
                <th className="backlist-table-header">ID</th>
                <th className="backlist-table-header">Photo</th>
                <th className="backlist-table-header">Name</th>
                <th className="backlist-table-header">Email</th>
                <th className="backlist-table-header">Phone</th>
                <th className="backlist-table-header">CIN</th>
                <th className="backlist-table-header">Age</th>
                <th className="backlist-table-header">Sex</th>
                <th className="backlist-table-header">Active</th>
                <th className="backlist-table-header">Actions</th>
              </tr>
            </thead>
            <tbody>
              {displayStudents.map((student, index) => (
                <tr key={student._id} className="backlist-table-row">
                  {/* Added backlist-table-row class */}
                  <td className="backlist-table-cell">{pagesVisited + index + 1}</td>
                  <td className="backlist-table-cell">
                    <img
                      src={student.photo ? `http://localhost:3000/${student.photo}` : "/src/assets/User_icon_2.svg.png"}
                      alt="Student"
                      className="student-photoList"
                      style={{ width: "40px", height: "40px", borderRadius: "50%" }}
                    />
                  </td>
                  <td className="backlist-table-cell">{student.name}</td>
                  <td className="backlist-table-cell">{student.email}</td>
                  <td className="backlist-table-cell">{student.phone}</td>
                  <td className="backlist-table-cell">{student.num_cin || "N/A"}</td>
                  <td className="backlist-table-cell">{student.age || "N/A"}</td>
                  <td className="backlist-table-cell">{student.sexe}</td>
                  <td className="backlist-table-cell">{student.isActive ? "Yes" : "No"}</td>
                  <td className="backlist-table-cell backlist-actions-cell">
                    {/* Added backlist-actions-cell class */}
                    <Link to={`/students/view/${student._id}`} className="backlist-row-action">
                      {/* Changed from view-btn to backlist-row-action */}
                      <FaEye />
                    </Link>
                    <button
                      className="backlist-row-action"
                      onClick={() => handleBlockUser(student._id, student.isBlocked)}
                      style={{ color: student.isBlocked ? "green" : "red" }}
                    >
                      {/* Changed from block-btn to backlist-row-action */}
                      {student.isBlocked ? <FaUnlock /> : <FaBan />}
                    </button>
                    <button className="backlist-row-action" onClick={() => deleteUser(student._id)}>
                      {/* Changed from delete-btn to backlist-row-action */}
                      <FaTrash />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          {/* Pagination */}
          <ReactPaginate
            previousLabel={"Previous"}
            nextLabel={"Next"}
            pageCount={pageCount}
            onPageChange={changePage}
            containerClassName={"backlist-pagination"}
            pageClassName={"backlist-pagination-item"}
            previousClassName={"backlist-pagination-item"}
            nextClassName={"backlist-pagination-item"}
            pageLinkClassName={"backlist-pagination-link"}
            previousLinkClassName={"backlist-pagination-link"}
            nextLinkClassName={"backlist-pagination-link"}
            disabledClassName={"backlist-pagination-disabled"}
            activeClassName={"backlist-pagination-active"}
          />
        </div>
      </div>
    </div>
  )
}

export default StudentList
</file>

<file path="sustainafood-frontend/src/pages/backoffice/SubmissionDetails.jsx">
"use client"

import { useEffect, useState } from "react"
import axios from "axios"
import { useParams, Link } from "react-router-dom"
import Sidebar from "../../components/backoffcom/Sidebar"
import Navbar from "../../components/backoffcom/Navbar"
import "/src/assets/styles/backoffcss/detailspage.css"

const SubmissionDetails = () => {
  const { id } = useParams()
  const [submission, setSubmission] = useState(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)

  useEffect(() => {
    axios
      .get(`http://localhost:3000/contact/contact/submissions/${id}`)
      .then((response) => {
        setSubmission(response.data)
        setLoading(false)
      })
      .catch((error) => {
        console.error("Error fetching submission:", error)
        setError("Failed to load submission.")
        setLoading(false)
      })
  }, [id])

  if (loading) return <div>Loading...</div>
  if (error) return <div>{error}</div>
  if (!submission) return <div>Submission not found.</div>

  return (
    <div className="dashboard-container">
      <Sidebar />
      <div className="dashboard-content">
        <Navbar />
        <div className="detailspage-container">
          <div className="detailspage-header">
            <h2 className="detailspage-title">Submission Details</h2>
            <Link to="/contact/submissions" className="detailspage-button detailspage-button-secondary">
              Back to List
            </Link>
          </div>

          <div className="detailspage-content">
            <div className="detailspage-field-group">
              <div className="detailspage-field">
                <div className="detailspage-field-label">ID:</div>
                <div className="detailspage-field-value">{submission._id}</div>
              </div>

              <div className="detailspage-field">
                <div className="detailspage-field-label">Name:</div>
                <div className="detailspage-field-value">{submission.name}</div>
              </div>

              <div className="detailspage-field">
                <div className="detailspage-field-label">Email:</div>
                <div className="detailspage-field-value">{submission.email}</div>
              </div>

              <div className="detailspage-field">
                <div className="detailspage-field-label">Status:</div>
                <div className="detailspage-field-value">
                  <span className={`detailspage-status detailspage-status-${submission.status}`}>
                    {submission.status.charAt(0).toUpperCase() + submission.status.slice(1)}
                  </span>
                </div>
              </div>

              <div className="detailspage-field">
                <div className="detailspage-field-label">Submitted At:</div>
                <div className="detailspage-field-value">{new Date(submission.submittedAt).toLocaleString()}</div>
              </div>

              <div className="detailspage-field">
                <div className="detailspage-field-label">Comment:</div>
                <div className="detailspage-field-value">
                  <div className="detailspage-long-text">{submission.comment}</div>
                </div>
              </div>
            </div>
          </div>

          <div className="detailspage-actions">
            {submission.status === "pending" && (
              <button className="detailspage-button detailspage-button-primary">Mark as Responded</button>
            )}
            <Link to="/contact/submissions" className="detailspage-button detailspage-button-secondary">
              Back to List
            </Link>
          </div>
        </div>
      </div>
    </div>
  )
}

export default SubmissionDetails
</file>

<file path="sustainafood-frontend/src/pages/backoffice/SupermarketList.jsx">
"use client"

import { useEffect, useState } from "react"
import axios from "axios"
import Sidebar from "../../components/backoffcom/Sidebar"
import Navbar from "../../components/backoffcom/Navbar"
import "/src/assets/styles/backoffcss/backlist.css" // Changed from supermarketList.css to backlist.css
import { FaEye, FaTrash, FaBan, FaUnlock, FaFilePdf } from "react-icons/fa"
import ReactPaginate from "react-paginate"
import { Link } from "react-router-dom"
import logo from "../../assets/images/logooo.png"

import { jsPDF } from "jspdf"
import autoTable from "jspdf-autotable"

const SupermarketList = () => {
  const [supermarkets, setSupermarkets] = useState([])
  const [currentPage, setCurrentPage] = useState(0)
  const [searchQuery, setSearchQuery] = useState("")
  const [sortField, setSortField] = useState("name")
  const [sortOrder, setSortOrder] = useState("asc")
  const supermarketsPerPage = 5

  const pagesVisited = currentPage * supermarketsPerPage

  useEffect(() => {
    axios
      .get("http://localhost:3000/users/list")
      .then((response) => {
        const supermarketUsers = response.data.filter((user) => user.role === "supermarket")
        setSupermarkets(supermarketUsers)
      })
      .catch((error) => console.error("Error fetching supermarkets:", error))
  }, [])

  const handleBlockUser = async (userId, isBlocked) => {
    try {
      const response = await axios.put(`http://localhost:3000/users/toggle-block/${userId}`, {
        isBlocked: !isBlocked,
      })

      if (response.status === 200) {
        alert(`User has been ${response.data.isBlocked ? "blocked" : "unblocked"} successfully.`)
        setSupermarkets(
          supermarkets.map((supermarket) =>
            supermarket._id === userId ? { ...supermarket, isBlocked: response.data.isBlocked } : supermarket,
          ),
        )
      } else {
        alert(response.data.error || "Error toggling block status.")
      }
    } catch (error) {
      console.error("Error:", error)
      alert("Failed to update block status.")
    }
  }

  const deleteSupermarket = async (supermarketId) => {
    if (!window.confirm("Are you sure you want to delete this supermarket?")) return

    try {
      await axios.delete(`http://localhost:3000/users/delete/${supermarketId}`)
      alert("Supermarket deleted!")
      setSupermarkets(supermarkets.filter((supermarket) => supermarket._id !== supermarketId))
    } catch (error) {
      console.error("Error deleting supermarket:", error)
    }
  }

  const exportToPDF = () => {
    const doc = new jsPDF({
      orientation: "landscape",
      unit: "mm",
      format: "a4",
    })

    // Header background
    doc.setFillColor(245, 245, 245)
    doc.rect(0, 0, doc.internal.pageSize.width, 40, "F")

    // Decorative bottom line
    doc.setDrawColor(144, 196, 60)
    doc.setLineWidth(1.5)
    doc.line(0, 40, doc.internal.pageSize.width, 40)

    // Logo
    const imgWidth = 30,
      imgHeight = 30
    doc.addImage(logo, "PNG", 5, 5, imgWidth, imgHeight)

    // Title
    const title = "SUPERMARKET LIST"
    doc.setFontSize(28)
    doc.setTextColor(50, 62, 72)
    doc.setFont("helvetica", "bold")
    doc.text(title, doc.internal.pageSize.width / 2, 20, { align: "center" })

    // Date
    const today = new Date()
    const dateStr = today.toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    })
    doc.setFontSize(10)
    doc.setTextColor(80, 80, 80)
    doc.text(`Generated: ${dateStr}`, doc.internal.pageSize.width - 50, 38)

    // Table
    autoTable(doc, {
      head: [["ID", "Name", "Email", "Phone", "Tax Reference", "Status"]],
      body: supermarkets.map((supermarket, index) => [
        (index + 1).toString(),
        supermarket.name,
        supermarket.email,
        supermarket.phone || "N/A",
        supermarket.taxReference || "N/A",
        supermarket.isActive ? "Active" : "Inactive",
      ]),
      startY: 50,
      theme: "grid",
      styles: {
        fontSize: 9,
        cellPadding: 6,
        lineColor: [200, 200, 200],
        lineWidth: 0.2,
        valign: "middle",
        textColor: [45, 45, 45],
      },
      headStyles: {
        fillColor: [70, 80, 95],
        textColor: [255, 255, 255],
        fontStyle: "bold",
        halign: "center",
        fontSize: 10,
      },
      alternateRowStyles: {
        fillColor: [250, 250, 250],
      },
      didDrawCell: (data) => {
        if (data.section === "body" && data.column.index === 5) {
          const status = data.cell.text[0]
          if (status === "Active") {
            doc.setFillColor(144, 196, 60)
            doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F")
            doc.setTextColor(255, 255, 255)
          } else if (status === "Inactive") {
            doc.setFillColor(220, 220, 220)
            doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F")
            doc.setTextColor(100, 100, 100)
          }
        }
      },
      didDrawPage: (data) => {
        // Footer line
        doc.setDrawColor(200, 200, 200)
        doc.setLineWidth(0.5)
        doc.line(
          15,
          doc.internal.pageSize.height - 20,
          doc.internal.pageSize.width - 15,
          doc.internal.pageSize.height - 20,
        )

        // Page numbers
        doc.setFillColor(144, 196, 60)
        doc.roundedRect(doc.internal.pageSize.width / 2 - 15, doc.internal.pageSize.height - 18, 30, 12, 3, 3, "F")
        doc.setTextColor(255, 255, 255)
        doc.setFontSize(9)
        doc.text(
          `Page ${data.pageNumber} of ${doc.internal.getNumberOfPages()}`,
          doc.internal.pageSize.width / 2,
          doc.internal.pageSize.height - 10,
          { align: "center" },
        )

        // Confidentiality notice
        doc.setTextColor(120, 120, 120)
        doc.setFontSize(8)
        doc.setFont("helvetica", "italic")
        doc.text("Confidential - For internal use only", 15, doc.internal.pageSize.height - 10)

        // Institution info
        doc.text("© SustainaFood", doc.internal.pageSize.width - 45, doc.internal.pageSize.height - 10)
      },
    })

    doc.save(`Supermarket_Directory_${today.toISOString().split("T")[0]}.pdf`)
  }

  const filteredSupermarkets = supermarkets.filter((supermarket) => {
    const phoneString = supermarket.phone ? supermarket.phone.toString() : ""
    return (
      supermarket.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      supermarket.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
      phoneString.includes(searchQuery)
    )
  })

  const sortedSupermarkets = filteredSupermarkets.sort((a, b) => {
    if (sortField === "name") {
      return sortOrder === "asc" ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name)
    } else if (sortField === "email") {
      return sortOrder === "asc" ? a.email.localeCompare(b.email) : b.email.localeCompare(a.email)
    } else if (sortField === "phone") {
      return sortOrder === "asc" ? a.phone - b.phone : b.phone - a.phone
    } else if (sortField === "taxReference") {
      return sortOrder === "asc"
        ? (a.taxReference || "").localeCompare(b.taxReference || "")
        : (b.taxReference || "").localeCompare(a.taxReference || "")
    } else if (sortField === "isActive") {
      return sortOrder === "asc"
        ? (a.isActive ? 1 : -1) - (b.isActive ? 1 : -1)
        : (b.isActive ? 1 : -1) - (a.isActive ? 1 : -1)
    }
    return 0
  })

  const displaySupermarkets = sortedSupermarkets.slice(pagesVisited, pagesVisited + supermarketsPerPage)
  const pageCount = Math.ceil(filteredSupermarkets.length / supermarketsPerPage)

  const changePage = ({ selected }) => {
    setCurrentPage(selected)
  }

  return (
    <div className="dashboard-container">
      <Sidebar />
      <div className="dashboard-content">
        <Navbar setSearchQuery={setSearchQuery} />
        <div className="backlist-container">
          {/* Changed from supermarket-list to backlist-container */}
          <div className="backlist-header">
            {/* Changed from header-container to backlist-header */}
            <h2 className="backlist-title">Supermarket Management</h2>
            {/* Added backlist-title class */}
            <button className="backlist-action-button" onClick={exportToPDF}>
              {/* Changed from export-pdf-btn to backlist-action-button */}
              <FaFilePdf /> Export to PDF
            </button>
          </div>

          <div className="backlist-search">
            {/* Added backlist-search wrapper */}
            <div className="sort-container">
              <label>Sort by:</label>
              <select value={sortField} onChange={(e) => setSortField(e.target.value)}>
                <option value="name">Name</option>
                <option value="email">Email</option>
                <option value="phone">Phone</option>
                <option value="taxReference">Tax Reference</option>
                <option value="isActive">Active Status</option>
              </select>
              <select value={sortOrder} onChange={(e) => setSortOrder(e.target.value)}>
                <option value="asc">Ascending</option>
                <option value="desc">Descending</option>
              </select>
            </div>
          </div>

          <table className="backlist-table">
            {/* Added backlist-table class */}
            <thead className="backlist-table-head">
              {/* Added backlist-table-head class */}
              <tr>
                <th className="backlist-table-header">ID</th>
                <th className="backlist-table-header">Photo</th>
                <th className="backlist-table-header">Name</th>
                <th className="backlist-table-header">Email</th>
                <th className="backlist-table-header">Phone</th>
                <th className="backlist-table-header">Tax Reference</th>
                <th className="backlist-table-header">Active</th>
                <th className="backlist-table-header">Actions</th>
              </tr>
            </thead>
            <tbody>
              {displaySupermarkets.map((supermarket, index) => (
                <tr key={supermarket._id} className="backlist-table-row">
                  {/* Added backlist-table-row class */}
                  <td className="backlist-table-cell">{pagesVisited + index + 1}</td>
                  <td className="backlist-table-cell">
                    <img
                      src={
                        supermarket.photo
                          ? `http://localhost:3000/${supermarket.photo}`
                          : "/src/assets/User_icon_2.svg.png"
                      }
                      alt="supermarket"
                      style={{ width: "40px", height: "40px", borderRadius: "50%" }}
                    />
                  </td>
                  <td className="backlist-table-cell">{supermarket.name}</td>
                  <td className="backlist-table-cell">{supermarket.email}</td>
                  <td className="backlist-table-cell">{supermarket.phone}</td>
                  <td className="backlist-table-cell">{supermarket.taxReference || "N/A"}</td>
                  <td className="backlist-table-cell">{supermarket.isActive ? "Yes" : "No"}</td>
                  <td className="backlist-table-cell backlist-actions-cell">
                    {/* Added backlist-actions-cell class */}
                    <Link to={`/supermarkets/view/${supermarket._id}`} className="backlist-row-action">
                      {/* Changed from view-btn to backlist-row-action */}
                      <FaEye />
                    </Link>
                    <button
                      className="backlist-row-action"
                      onClick={() => handleBlockUser(supermarket._id, supermarket.isBlocked)}
                      style={{ color: supermarket.isBlocked ? "green" : "red" }}
                    >
                      {/* Changed from block-btn to backlist-row-action */}
                      {supermarket.isBlocked ? <FaUnlock /> : <FaBan />}
                    </button>
                    <button className="backlist-row-action" onClick={() => deleteSupermarket(supermarket._id)}>
                      {/* Changed from delete-btn to backlist-row-action */}
                      <FaTrash />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          {/* Pagination */}
          <ReactPaginate
            previousLabel={"Previous"}
            nextLabel={"Next"}
            pageCount={pageCount}
            onPageChange={changePage}
            containerClassName={"backlist-pagination"}
            pageClassName={"backlist-pagination-item"}
            previousClassName={"backlist-pagination-item"}
            nextClassName={"backlist-pagination-item"}
            pageLinkClassName={"backlist-pagination-link"}
            previousLinkClassName={"backlist-pagination-link"}
            nextLinkClassName={"backlist-pagination-link"}
            disabledClassName={"backlist-pagination-disabled"}
            activeClassName={"backlist-pagination-active"}
          />
        </div>
      </div>
    </div>
  )
}

export default SupermarketList
</file>

<file path="sustainafood-frontend/src/pages/backoffice/TransporterList.jsx">
import React, { useEffect, useState } from "react";
import axios from "axios";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "/src/assets/styles/backoffcss/transporterList.css";
import { FaEye, FaTrash, FaBan, FaUnlock, FaFilePdf, FaSort } from "react-icons/fa";
import ReactPaginate from "react-paginate";
import { Link } from "react-router-dom";
import logo from '../../assets/images/logooo.png';  // Import the logo

import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";

const TransporterList = () => {
    const [transporters, setTransporters] = useState([]); // Liste complète des transporteurs
    const [currentPage, setCurrentPage] = useState(0);
    const [searchQuery, setSearchQuery] = useState(""); // State to store the search query
    const [sortField, setSortField] = useState("name"); // State to store the sorting field
    const [sortOrder, setSortOrder] = useState("asc"); // State to store the sorting order
    const transportersPerPage = 5; // Nombre de transporteurs par page

    // Calculate pagesVisited
    const pagesVisited = currentPage * transportersPerPage;

    // Récupération des transporteurs depuis le backend
    useEffect(() => {
        axios.get("http://localhost:3000/users/list")
            .then(response => {
                const transporterUsers = response.data.filter(user => user.role === "transporter");
                setTransporters(transporterUsers);
            })
            .catch(error => console.error("Error fetching transporters:", error));
    }, []);

    // Fonction pour bloquer/débloquer un transporteur
    const handleBlockUser = async (userId, isBlocked) => {
        try {
            const response = await axios.put(`http://localhost:3000/users/toggle-block/${userId}`, {
                isBlocked: !isBlocked
            });

            if (response.status === 200) {
                alert(`User has been ${response.data.isBlocked ? "blocked" : "unblocked"} successfully.`);
                // Update the UI after blocking/unblocking
                setTransporters(transporters.map(transporter =>
                    transporter._id === userId ? { ...transporter, isBlocked: response.data.isBlocked } : transporter
                ));
            } else {
                alert(response.data.error || "Error toggling block status.");
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Failed to update block status.");
        }
    };

    // Fonction pour supprimer un transporteur
    const deleteTransporter = async (transporterId) => {
        if (!window.confirm("Are you sure you want to delete this transporter?")) return;

        try {
            await axios.delete(`http://localhost:3000/users/delete/${transporterId}`);
            alert("Transporter deleted!");
            setTransporters(transporters.filter(transporter => transporter._id !== transporterId));
        } catch (error) {
            console.error("Error deleting transporter:", error);
        }
    };

    // Fonction pour exporter la liste en PDF
    const exportToPDF = () => {
        const doc = new jsPDF({
            orientation: "landscape",
            unit: "mm",
            format: "a4",
        });
    
        // Header background - changed to a neutral light gray
        doc.setFillColor(245, 245, 245); // Light gray instead of green
        doc.rect(0, 0, doc.internal.pageSize.width, 40, "F");
    
        // Decorative bottom line - keeping main color as accent
        doc.setDrawColor(144, 196, 60); // Main color #90C43C
        doc.setLineWidth(1.5);
        doc.line(0, 40, doc.internal.pageSize.width, 40);
    
        // Logo
        const imgWidth = 30, imgHeight = 30;
        doc.addImage(logo, "PNG", 5, 5, imgWidth, imgHeight);
    
        // Title - changed to dark slate blue
        const title = "TRANSPORTER LIST";
        doc.setFontSize(28);
        doc.setTextColor(50, 62, 72); // Dark slate blue instead of green
        doc.setFont("helvetica", "bold");
        doc.text(title, doc.internal.pageSize.width / 2, 20, { align: "center" });
    
        // Date
        const today = new Date();
        const dateStr = today.toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
        });
        doc.setFontSize(10);
        doc.setTextColor(80, 80, 80); // Dark gray
        doc.text(`Generated: ${dateStr}`, doc.internal.pageSize.width - 50, 38);
    
        // Table
        autoTable(doc, {
            head: [["ID", "Name", "Email", "Phone", "Vehicle Type", "Status"]],
            body: transporters.map((transporter, index) => [
                (index + 1).toString(),
                transporter.name,
                transporter.email,
                transporter.phone || "N/A",
                transporter.vehiculeType || "N/A",
                transporter.isActive ? "Active" : "Inactive",
            ]),
            startY: 50,
            theme: "grid",
            styles: {
                fontSize: 9,
                cellPadding: 6,
                lineColor: [200, 200, 200], // Light gray borders
                lineWidth: 0.2,
                valign: "middle",
                textColor: [45, 45, 45], // Dark gray text
            },
            headStyles: {
                fillColor: [70, 80, 95], // Dark blue-gray instead of green
                textColor: [255, 255, 255],
                fontStyle: "bold",
                halign: "center",
                fontSize: 10,
            },
            alternateRowStyles: {
                fillColor: [250, 250, 250], // Very light gray instead of light green
            },
            didDrawCell: (data) => {
                if (data.section === "body" && data.column.index === 5) {
                    const status = data.cell.text[0];
                    if (status === "Active") {
                        doc.setFillColor(144, 196, 60); // Main green for active status only
                        doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F");
                        doc.setTextColor(255, 255, 255); // White text
                    } else if (status === "Inactive") {
                        doc.setFillColor(220, 220, 220); // Light gray for inactive
                        doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F");
                        doc.setTextColor(100, 100, 100); // Dark gray text
                    }
                }
            },
            didDrawPage: (data) => {
                // Footer line
                doc.setDrawColor(200, 200, 200); // Light gray line
                doc.setLineWidth(0.5);
                doc.line(15, doc.internal.pageSize.height - 20, doc.internal.pageSize.width - 15, doc.internal.pageSize.height - 20);
    
                // Page numbers - using main color as accent
                doc.setFillColor(144, 196, 60); // Main green #90C43C
                doc.roundedRect(doc.internal.pageSize.width / 2 - 15, doc.internal.pageSize.height - 18, 30, 12, 3, 3, "F");
                doc.setTextColor(255, 255, 255);
                doc.setFontSize(9);
                doc.text(`Page ${data.pageNumber} of ${doc.internal.getNumberOfPages()}`, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 10, { align: "center" });
    
                // Confidentiality notice
                doc.setTextColor(120, 120, 120);
                doc.setFontSize(8);
                doc.setFont("helvetica", "italic");
                doc.text("Confidential - For internal use only", 15, doc.internal.pageSize.height - 10);
    
                // Institution info
                doc.text("© SustainaFood", doc.internal.pageSize.width - 45, doc.internal.pageSize.height - 10);
            },
        });
    
        doc.save(`Transporter_Directory_${today.toISOString().split("T")[0]}.pdf`);
    };

    // Filtering the transporters based on the search query
    const filteredTransporters = transporters.filter(transporter => {
        const phoneString = transporter.phone?.toString(); // Convert phone number to string for searching
        return (
            transporter.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
            transporter.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
            phoneString.includes(searchQuery) // Search in the phone number as a string
        );
    });

    // Sorting the transporters based on the selected field and order
    const sortedTransporters = filteredTransporters.sort((a, b) => {
        if (sortField === "name") {
            return sortOrder === "asc" ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name);
        } else if (sortField === "email") {
            return sortOrder === "asc" ? a.email.localeCompare(b.email) : b.email.localeCompare(a.email);
        } else if (sortField === "phone") {
            return sortOrder === "asc" ? a.phone - b.phone : b.phone - a.phone;
        } else if (sortField === "vehiculeType") {
            return sortOrder === "asc" ? (a.vehiculeType || "").localeCompare(b.vehiculeType || "") : (b.vehiculeType || "").localeCompare(a.vehiculeType || "");
        } else if (sortField === "isActive") {
            return sortOrder === "asc" ? (a.isActive ? 1 : -1) - (b.isActive ? 1 : -1) : (b.isActive ? 1 : -1) - (a.isActive ? 1 : -1);
        }
        return 0;
    });

    const displayTransporters = sortedTransporters.slice(pagesVisited, pagesVisited + transportersPerPage);

    const pageCount = Math.ceil(filteredTransporters.length / transportersPerPage);

    const changePage = ({ selected }) => {
        setCurrentPage(selected);
    };

    return (
        <div className="dashboard-container">
            <Sidebar />
            <div className="dashboard-content">
                <Navbar setSearchQuery={setSearchQuery} /> {/* Pass search setter to Navbar */}
                <div className="transporter-list">
                    <div className="header-container">
                        <h2>Transporter Management</h2>
                        <button className="export-pdf-btn" onClick={exportToPDF}>
                            <FaFilePdf /> Export to PDF
                        </button>
                    </div>
                    <div className="sort-container">
                        <label>Sort by:</label>
                        <select value={sortField} onChange={(e) => setSortField(e.target.value)}>
                            <option value="name">Name</option>
                            <option value="email">Email</option>
                            <option value="phone">Phone</option>
                            <option value="vehiculeType">Vehicle Type</option>
                            <option value="isActive">Active Status</option>
                        </select>
                        <select value={sortOrder} onChange={(e) => setSortOrder(e.target.value)}>
                            <option value="asc">Ascending</option>
                            <option value="desc">Descending</option>
                        </select>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Photo</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Phone</th>
                                <th>Vehicle Type</th>
                                <th>Active</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {displayTransporters.map((transporter, index) => (
                                <tr key={transporter._id}>
                                    <td>{pagesVisited + index + 1}</td>
                                    <td>
                                        <img
                                            src={transporter.photo ? `http://localhost:3000/${transporter.photo}` : "/src/assets/User_icon_2.svg.png"}
                                            alt="transporter"
                                            className="transporter-photoList"
                                        />
                                    </td>
                                    <td>{transporter.name}</td>
                                    <td>{transporter.email}</td>
                                    <td>{transporter.phone}</td>
                                    <td>{transporter.vehiculeType || "N/A"}</td>
                                    <td>{transporter.isActive ? "Yes" : "No"}</td>
                                    <td className="action-buttons">
                                        <button className="view-btn">
                                            <Link to={`/transporters/view/${transporter._id}`}>
                                                <FaEye />
                                            </Link>
                                        </button>
                                        <button
                                            className="block-btn"
                                            onClick={() => handleBlockUser(transporter._id, transporter.isBlocked)}
                                            style={{ color: transporter.isBlocked ? "green" : "red" }}
                                        >
                                            {transporter.isBlocked ? <FaUnlock /> : <FaBan />}
                                        </button>
                                        <button className="delete-btn" onClick={() => deleteTransporter(transporter._id)}>
                                            <FaTrash />
                                        </button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>

                    {/* Pagination */}
                    <ReactPaginate
                        previousLabel={"Previous"}
                        nextLabel={"Next"}
                        pageCount={pageCount}
                        onPageChange={changePage}
                        containerClassName={"pagination"}
                        previousLinkClassName={"previousBttn"}
                        nextLinkClassName={"nextBttn"}
                        disabledClassName={"paginationDisabled"}
                        activeClassName={"paginationActive"}
                    />
                </div>
            </div>
        </div>
    );
};

export default TransporterList;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/ViewDonationTransaction.jsx">
"use client"

import { useEffect, useState } from "react"
import { useParams, useNavigate } from "react-router-dom"
import styled from "styled-components"
import { getDonationTransactionById } from "../../api/donationTransactionService"
import Sidebar from "../../components/backoffcom/Sidebar"
import Navbar from "../../components/backoffcom/Navbar"
import imgmouna from "../../assets/images/imgmouna.png"

// Main layout components
const DashboardContainer = styled.div`
  display: flex;
  min-height: 100vh;
  background-color: #f5f7f9;
`

const DashboardContent = styled.div`
  flex: 1;
  padding: 70px 20px 20px 20px;
`

const PageHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 24px;
  padding-top: 10px;
  
  h2 {
    font-size: 24px;
    font-weight: 600;
    color: #333;
    margin: 0;
  }
`

const TransactionDetailContainer = styled.div`
  background: white;
  border-radius: 10px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
  overflow: hidden;
`

const TransactionHeader = styled.div`
  background-color: #4caf50;
  color: white;
  padding: 20px 24px;
  position: relative;
  
  h2 {
    margin: 0;
    font-size: 20px;
    font-weight: 500;
  }
`

const TransactionContent = styled.div`
  padding: 24px;
`

// Section components
const Section = styled.div`
  margin-bottom: 28px;
  
  &:last-child {
    margin-bottom: 0;
  }
  
  h3 {
    font-size: 18px;
    color: #333;
    margin: 0 0 16px 0;
    padding-bottom: 8px;
    border-bottom: 1px solid #eaeaea;
  }
  
  h4 {
    font-size: 16px;
    color: #444;
    margin: 16px 0 12px 0;
  }
`

const ProfileSection = styled.div`
  display: flex;
  align-items: center;
  gap: 20px;
  background-color: #f9f9f9;
  padding: 16px;
  border-radius: 8px;
`

const ProfileImg = styled.img`
  width: 70px;
  height: 70px;
  border-radius: 50%;
  object-fit: cover;
  border: 3px solid #4caf50;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
`

const ProfileInfo = styled.div`
  display: flex;
  flex-direction: column;
`

const ProfileName = styled.h3`
  margin: 0;
  color: #333;
  font-size: 18px;
  font-weight: 600;
`

const ProfileRole = styled.p`
  margin: 4px 0 0 0;
  color: #666;
  font-size: 14px;
`

// Detail items
const DetailGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 16px;
  margin-bottom: 20px;
`

const DetailItem = styled.div`
  background-color: #f9f9f9;
  padding: 12px 16px;
  border-radius: 6px;
  border-left: 3px solid #4caf50;
  
  strong {
    display: block;
    color: #555;
    font-size: 13px;
    margin-bottom: 4px;
  }
  
  span {
    color: #333;
    font-size: 16px;
    font-weight: 500;
  }
`

const StatusBadge = styled.span`
  display: inline-block;
  padding: 4px 12px;
  border-radius: 20px;
  font-size: 14px;
  font-weight: 500;
  background-color: ${(props) => {
    switch (props.status?.toLowerCase()) {
      case "completed":
        return "#e6f7e6"
      case "pending":
        return "#fff8e6"
      case "rejected":
        return "#ffebee"
      default:
        return "#f0f0f0"
    }
  }};
  color: ${(props) => {
    switch (props.status?.toLowerCase()) {
      case "completed":
        return "#2e7d32"
      case "pending":
        return "#f57c00"
      case "rejected":
        return "#c62828"
      default:
        return "#666666"
    }
  }};
`

// Lists
const ItemsList = styled.div`
  background-color: #f9f9f9;
  border-radius: 8px;
  overflow: hidden;
`

const ItemRow = styled.div`
  display: flex;
  justify-content: space-between;
  padding: 12px 16px;
  border-bottom: 1px solid #eaeaea;
  
  &:last-child {
    border-bottom: none;
  }
  
  &:hover {
    background-color: #f0f0f0;
  }
`

const ItemName = styled.div`
  font-weight: 500;
  color: #333;
`

const ItemQuantity = styled.div`
  color: #4caf50;
  font-weight: 600;
`

// Buttons
const ButtonContainer = styled.div`
  display: flex;
  justify-content: flex-end;
  gap: 12px;
  margin-top: 24px;
`

const Button = styled.button`
  padding: 10px 20px;
  border-radius: 6px;
  font-size: 15px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
`

const BackButton = styled(Button)`
  background-color: #f0f0f0;
  color: #333;
  border: 1px solid #ddd;
  
  &:hover {
    background-color: #e0e0e0;
  }
`

const PrimaryButton = styled(Button)`
  background-color: #4caf50;
  color: white;
  border: none;
  
  &:hover {
    background-color: #43a047;
  }
`

// Loading and error states
const LoadingState = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  height: 300px;
  font-size: 18px;
  color: #666;
`

const ErrorState = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  height: 300px;
  font-size: 18px;
  color: #d32f2f;
  background-color: #ffebee;
  border-radius: 8px;
  padding: 20px;
`

const ViewDonationTransaction = () => {
  const { transactionId } = useParams()
  const navigate = useNavigate()
  const [transaction, setTransaction] = useState(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [searchQuery, setSearchQuery] = useState("")

  useEffect(() => {
    const fetchTransaction = async () => {
      try {
        setLoading(true)
        const response = await getDonationTransactionById(transactionId)
        // Handle nested data structure if the API returns { data: transaction }
        const transactionData = response.data || response
        setTransaction(transactionData)
      } catch (err) {
        setError("Failed to fetch transaction details: " + (err.message || "Unknown error"))
      } finally {
        setLoading(false)
      }
    }

    fetchTransaction()
  }, [transactionId])

  if (loading)
    return (
      <DashboardContainer>
        <Sidebar />
        <DashboardContent>
          <Navbar setSearchQuery={setSearchQuery} />
          <LoadingState>Loading transaction details...</LoadingState>
        </DashboardContent>
      </DashboardContainer>
    )

  if (error)
    return (
      <DashboardContainer>
        <Sidebar />
        <DashboardContent>
          <Navbar setSearchQuery={setSearchQuery} />
          <ErrorState>Error: {error}</ErrorState>
        </DashboardContent>
      </DashboardContainer>
    )

  if (!transaction)
    return (
      <DashboardContainer>
        <Sidebar />
        <DashboardContent>
          <Navbar setSearchQuery={setSearchQuery} />
          <ErrorState>Transaction not found</ErrorState>
        </DashboardContent>
      </DashboardContainer>
    )

  const defaultImage = imgmouna
  const donorPhoto = transaction.donor?.photo ? `http://localhost:3000/${transaction.donor.photo}` : defaultImage
  const recipientPhoto = transaction.recipient?.photo
    ? `http://localhost:3000/${transaction.recipient.photo}`
    : defaultImage

  const formatDate = (dateString) => {
    if (!dateString) return "N/A"
    const date = new Date(dateString)
    return date.toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    })
  }

  return (
    <DashboardContainer>
      <Sidebar />
      <DashboardContent>
        <Navbar setSearchQuery={setSearchQuery} />

        <PageHeader>
          <h2>Transaction Details</h2>
        </PageHeader>

        <TransactionDetailContainer>
          <TransactionHeader>
            <h2>Donation Transaction #{transaction.id || "N/A"}</h2>
          </TransactionHeader>

          <TransactionContent>
            {/* Status and Dates Section */}
            <Section>
              <DetailGrid>
                <DetailItem>
                  <strong>Status</strong>
                  <StatusBadge status={transaction.status}>{transaction.status || "N/A"}</StatusBadge>
                </DetailItem>
                <DetailItem>
                  <strong>Created At</strong>
                  <span>{formatDate(transaction.createdAt)}</span>
                </DetailItem>
                <DetailItem>
                  <strong>Updated At</strong>
                  <span>{formatDate(transaction.updatedAt)}</span>
                </DetailItem>
                {transaction.rejectionReason && (
                  <DetailItem>
                    <strong>Rejection Reason</strong>
                    <span>{transaction.rejectionReason}</span>
                  </DetailItem>
                )}
              </DetailGrid>
            </Section>

            {/* Donor Information */}
            <Section>
              <h3>Donor Information</h3>
              <ProfileSection>
                <ProfileImg src={donorPhoto} alt="Donor" onError={(e) => (e.target.src = defaultImage)} />
                <ProfileInfo>
                  <ProfileName>{transaction.donor?.name || "Unknown Donor"}</ProfileName>
                  <ProfileRole>{transaction.donor?.role || "Role Not Specified"}</ProfileRole>
                </ProfileInfo>
              </ProfileSection>
            </Section>

            {/* Recipient Information */}
            <Section>
              <h3>Recipient Information</h3>
              <ProfileSection>
                <ProfileImg src={recipientPhoto} alt="Recipient" onError={(e) => (e.target.src = defaultImage)} />
                <ProfileInfo>
                  <ProfileName>{transaction.recipient?.name || "Unknown Recipient"}</ProfileName>
                  <ProfileRole>{transaction.recipient?.role || "Role Not Specified"}</ProfileRole>
                </ProfileInfo>
              </ProfileSection>
            </Section>

            {/* Transaction Details */}
            <Section>
              <h3>Transaction Details</h3>
              <DetailGrid>
                <DetailItem>
                  <strong>Request Need Title</strong>
                  <span>{transaction.requestNeed?.title || "N/A"}</span>
                </DetailItem>
                <DetailItem>
                  <strong>Donation Title</strong>
                  <span>{transaction.donation?.title || "N/A"}</span>
                </DetailItem>
              </DetailGrid>
            </Section>

            {/* Allocated Products */}
            <Section>
              <h3>Allocated Products</h3>
              {transaction.allocatedProducts && transaction.allocatedProducts.length > 0 ? (
                <ItemsList>
                  {transaction.allocatedProducts.map((product, index) => (
                    <ItemRow key={index}>
                      <ItemName>{product.product?.name || "N/A"}</ItemName>
                      <ItemQuantity>Qty: {product.quantity || 0}</ItemQuantity>
                    </ItemRow>
                  ))}
                </ItemsList>
              ) : (
                <p>No products allocated</p>
              )}
            </Section>

            {/* Allocated Meals */}
            <Section>
              <h3>Allocated Meals</h3>
              {transaction.allocatedMeals && transaction.allocatedMeals.length > 0 ? (
                <ItemsList>
                  {transaction.allocatedMeals.map((meal, index) => (
                    <ItemRow key={index}>
                      <ItemName>{meal.meal?.mealName || "N/A"}</ItemName>
                      <ItemQuantity>Qty: {meal.quantity || 0}</ItemQuantity>
                    </ItemRow>
                  ))}
                </ItemsList>
              ) : (
                <p>No meals allocated</p>
              )}
            </Section>

            <ButtonContainer>
              <BackButton onClick={() => navigate("/DonationTransList")}>Back to List</BackButton>
              <PrimaryButton onClick={() => window.print()}>Print Details</PrimaryButton>
            </ButtonContainer>
          </TransactionContent>
        </TransactionDetailContainer>
      </DashboardContent>
    </DashboardContainer>
  )
}

export default ViewDonationTransaction
</file>

<file path="sustainafood-frontend/src/pages/Editprofile.jsx">
"use client"

import { useState, useEffect } from "react"
import Navbar from "../components/Navbar"
import pdp from "../assets/images/pdp1.png" // Default fallback image
import "../assets/styles/EditProfile.css" // Import the CSS file
import upload from "../assets/images/upload.png"
import Footer from "../components/Footer"
import { useNavigate } from "react-router-dom"
import { useAuth } from "../contexts/AuthContext"
import { getUserById, updateUser } from "../api/userService"
import { FaCamera } from "react-icons/fa"
import { useAlert } from "../contexts/AlertContext"

const EditProfile = () => {
  const { showAlert } = useAlert() // Added useAlert

  const [fileName, setFileName] = useState("")
  const [imagePreview, setImagePreview] = useState(null)
  const [studentCardPreview, setStudentCardPreview] = useState(null)
  const [errors, setErrors] = useState({})

  const navigate = useNavigate()
  const { user: authUser } = useAuth()
  const [authUserId, setAuthUserId] = useState(null)
  const role = authUser?.role
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    photo: "",
    address: "",
    // For student
    sexe: "",
    num_cin: "",
    age: "",
    image_carte_etudiant: null,
    // For ONG
    id_fiscale: "",
    type: "",
    // For restaurant/supermarket
    taxReference: "",
    // For transporter
    vehiculeType: "",
  })

  useEffect(() => {
    const fetchUserDetails = async () => {
      if (typeof authUser.id === "string") {
        setAuthUserId(authUser.id)
        if (authUser && authUser.id) {
          try {
            const response = await getUserById(authUser.id)
            const userData = response.data
            setFormData({
              name: userData.name || "",
              email: userData.email || "",
              phone: userData.phone || "",
              photo: userData.photo || "",
              address: userData.address || "",
              sexe: userData.sexe || "",
              num_cin: userData.num_cin || "",
              age: userData.age || "",
              image_carte_etudiant: userData.image_carte_etudiant || null,
              id_fiscale: userData.id_fiscale || "",
              type: userData.type || "",
              taxReference: userData.taxReference || "",
              vehiculeType: userData.vehiculeType || "",
            })
          } catch (error) {
            console.error("Error fetching user data:", error)
          }
        }
      } else if (typeof authUser.id === "number") {
        setAuthUserId(authUser._id)
        if (authUser && authUser._id) {
          try {
            const response = await getUserById(authUser._id)
            const userData = response.data
            setFormData({
              name: userData.name || "",
              email: userData.email || "",
              phone: userData.phone || "",
              photo: userData.photo || "",
              address: userData.address || "",
              sexe: userData.sexe || "",
              num_cin: userData.num_cin || "",
              age: userData.age || "",
              image_carte_etudiant: userData.image_carte_etudiant || null,
              id_fiscale: userData.id_fiscale || "",
              type: userData.type || "",
              taxReference: userData.taxReference || "",
              vehiculeType: userData.vehiculeType || "",
            })
          } catch (error) {
            console.error("Error fetching user data:", error)
          }
        }
      }
    }
    fetchUserDetails()
  }, [authUser])

  const profilePhotoUrl =
    formData.photo && typeof formData.photo === "string" ? `http://localhost:3000/${formData.photo}` : pdp

  // Validation function for the fields
  const validateFields = () => {
    const newErrors = {}

    // Common required fields
    if (!formData.name) {
      newErrors.name = "Name is required."
    } else if (!/^[a-zA-Z\s]+$/.test(formData.name)) {
      newErrors.name = "Invalid name format."
    }

    if (!formData.email) {
      newErrors.email = "Email is required."
    } else if (!/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(formData.email)) {
      newErrors.email = "Please enter a valid email address (e.g., name@example.com)."
    }

    if (!formData.phone) {
      newErrors.phone = "Phone number is required."
    } else if (!/^\d{8,15}$/.test(formData.phone)) {
      newErrors.phone = "Invalid phone number format."
    }

    if (!formData.address) {
      newErrors.address = "Address is required."
    }

    // Role-specific fields
    if (role === "student") {
      if (!formData.sexe) {
        newErrors.sexe = "Gender is required."
      }
      if (!formData.age) {
        newErrors.age = "Age is required."
      }
      if (!formData.num_cin) {
        newErrors.num_cin = "CIN number is required."
      } else if (!/^\d{8}$/.test(formData.num_cin)) {
        newErrors.num_cin = "Invalid CIN format (must be 8 digits)."
      }
      if (!formData.image_carte_etudiant) {
        newErrors.image_carte_etudiant = "Student card image is required."
      }
    }

    if (role === "ong") {
      if (!formData.id_fiscale) {
        newErrors.id_fiscale = "Fiscal ID is required."
      } else if (!/^TN\d{8}$/.test(formData.id_fiscale)) {
        newErrors.id_fiscale = "Invalid fiscal ID format (must be TN followed by 8 digits)."
      }
      if (!formData.type) {
        newErrors.type = "ONG type is required."
      }
    }

    if (role === "restaurant" || role === "supermarket") {
      if (!formData.taxReference) {
        newErrors.taxReference = "Tax reference is required."
      } else if (!/^VAT-\d{8}$/.test(formData.taxReference)) {
        newErrors.taxReference = "Invalid tax reference format (must be VAT- followed by 8 digits)."
      }
    }

    if (role === "transporter") {
      if (!formData.vehiculeType) {
        newErrors.vehiculeType = "Vehicle type is required."
      }
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  // Handles changes in form fields
  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData((prev) => ({ ...prev, [name]: value }))

    const newErrors = { ...errors }
    switch (name) {
      case "name":
        if (!value) {
          newErrors[name] = "Name is required."
        } else if (!/^[a-zA-Z\s]+$/.test(value)) {
          newErrors[name] = "Invalid name format."
        } else {
          delete newErrors[name]
        }
        break
      case "email":
        if (!value) {
          newErrors[name] = "Email is required."
        } else if (!/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(value)) {
          newErrors[name] = "Please enter a valid email."
        } else {
          delete newErrors[name]
        }
        break
      case "phone":
        if (!value) {
          newErrors[name] = "Phone number is required."
        } else if (!/^\d{8,15}$/.test(value)) {
          newErrors[name] = "Invalid phone number format."
        } else {
          delete newErrors[name]
        }
        break
      case "address":
        if (!value) {
          newErrors[name] = "Address is required."
        } else {
          delete newErrors[name]
        }
        break
      case "sexe":
        if (!value) {
          newErrors[name] = "Gender is required."
        } else {
          delete newErrors[name]
        }
        break
      case "age":
        if (!value) {
          newErrors[name] = "Age is required."
        } else {
          delete newErrors[name]
        }
        break
      case "num_cin":
        if (!value) {
          newErrors[name] = "CIN number is required."
        } else if (!/^\d{8}$/.test(value)) {
          newErrors[name] = "Invalid CIN format (8 digits)."
        } else {
          delete newErrors[name]
        }
        break
      case "id_fiscale":
        if (!value) {
          newErrors[name] = "Fiscal ID is required."
        } else if (!/^TN\d{8}$/.test(value)) {
          newErrors[name] = "Invalid fiscal ID format (TN + 8 digits)."
        } else {
          delete newErrors[name]
        }
        break
      case "type":
        if (!value) {
          newErrors[name] = "ONG type is required."
        } else {
          delete newErrors[name]
        }
        break
      case "taxReference":
        if (!value) {
          newErrors[name] = "Tax reference is required."
        } else if (!/^VAT-\d{8}$/.test(value)) {
          newErrors[name] = "Invalid format (VAT- + 8 digits)."
        } else {
          delete newErrors[name]
        }
        break
      case "vehiculeType":
        if (!value) {
          newErrors[name] = "Vehicle type is required."
        } else {
          delete newErrors[name]
        }
        break
    }
    setErrors(newErrors)
  }

  // Handles file uploads
  const handleFileChange = (event) => {
    const { name, files } = event.target
    if (files && files.length > 0) {
      const file = files[0]
      setFormData((prev) => ({ ...prev, [name]: file }))

      const reader = new FileReader()
      if (name === "photo") {
        reader.onload = (e) => setImagePreview(e.target.result)
        reader.readAsDataURL(file)
        setFileName(file.name)
      } else if (name === "image_carte_etudiant") {
        reader.onload = (e) => setStudentCardPreview(e.target.result)
        reader.readAsDataURL(file)
        const newErrors = { ...errors }
        delete newErrors.image_carte_etudiant
        setErrors(newErrors)
      }
    }
  }

  // Form submission
  const handleSubmit = async (e) => {
    e.preventDefault()
    if (!validateFields()) {
      return
    }

    const data = new FormData()
    data.append("name", formData.name)
    data.append("email", formData.email)
    data.append("phone", formData.phone)
    data.append("address", formData.address)
    data.append("age", formData.age)
    data.append("sexe", formData.sexe)
    data.append("num_cin", formData.num_cin)
    data.append("id_fiscale", formData.id_fiscale)
    data.append("type", formData.type)
    data.append("taxReference", formData.taxReference)
    data.append("vehiculeType", formData.vehiculeType)

    if (formData.photo instanceof File) {
      data.append("photo", formData.photo)
    } else if (formData.photo) {
      data.append("photo", formData.photo)
    }
    if (role === "student" && formData.image_carte_etudiant instanceof File) {
      data.append("image_carte_etudiant", formData.image_carte_etudiant)
    } else if (role === "student" && formData.image_carte_etudiant) {
      data.append("image_carte_etudiant", formData.image_carte_etudiant)
    }

    try {
      await updateUser(authUserId, data)
      showAlert("success", "Profile updated successfully")

      navigate("/profile")
    } catch (error) {
      console.error("Error updating profile:", error)
      showAlert("error", "Failed to update profile")
    }
  }

  return (
    <>
      <Navbar />
      <div className="editprofile-container">
        <div className="editprofile-header">
          <div className="editprofile-profile-image-container">
            <img src={imagePreview || profilePhotoUrl} className="editprofile-profile-image" alt="Profile Preview" />
            <label htmlFor="file-upload-photo" className="editprofile-photo-icon" title="Change Photo">
              <FaCamera style={{ fontSize: "16px", color: "white" }} />
            </label>
            <input
              id="file-upload-photo"
              type="file"
              name="photo"
              accept="image/*"
              onChange={handleFileChange}
              style={{ display: "none" }}
            />
          </div>

          <div className="editprofile-user-info">
            <span className="editprofile-font-weight-bold">{formData.name || "User Name"}</span>
            <span className="editprofile-text-black-50">{formData.email || "email@example.com"}</span>
            <h2 className="editprofile-text-right">Profile Settings</h2>
          </div>
        </div>

        <form onSubmit={handleSubmit} className="editprofile-form">
          {/* Common fields */}
          <div className="login-input-block">
            <input
              type="text"
              className={`login-input ${errors.name ? "error" : ""}`}
              name="name"
              value={formData.name}
              onChange={handleChange}
              required
              placeholder=" "
            />
            <label className="login-label">Name</label>
            {errors.name && <div className="error-field">{errors.name}</div>}
          </div>

          <div className="login-input-block">
            <input
              type="email"
              className={`login-input ${errors.email ? "error" : ""}`}
              name="email"
              value={formData.email}
              onChange={handleChange}
              required
              placeholder=" "
            />
            <label className="login-label">Email</label>
            {errors.email && <div className="error-field">{errors.email}</div>}
          </div>

          <div className="login-input-block">
            <input
              type="number"
              className={`login-input ${errors.phone ? "error" : ""}`}
              name="phone"
              value={formData.phone}
              onChange={handleChange}
              required
              placeholder=" "
            />
            <label className="login-label">Phone Number</label>
            {errors.phone && <div className="error-field">{errors.phone}</div>}
          </div>

          <div className="login-input-block">
            <input
              type="text"
              className={`login-input ${errors.address ? "error" : ""}`}
              name="address"
              value={formData.address}
              onChange={handleChange}
              required
              placeholder=" "
            />
            <label className="login-label">Address</label>
            {errors.address && <div className="error-field">{errors.address}</div>}
          </div>

          {/* Role-specific fields */}
          {role === "student" && (
            <>
              <div className="login-input-block">
                <select
                  className={`login-input ${errors.sexe ? "error" : ""}`}
                  name="sexe"
                  value={formData.sexe}
                  onChange={handleChange}
                  required
                >
                  <option value="">Select Gender</option>
                  <option value="male">Male</option>
                  <option value="female">Female</option>
                  <option value="other">Other</option>
                </select>
                <label className="login-label">Gender</label>
                {errors.sexe && <div className="error-field">{errors.sexe}</div>}
              </div>

              <div className="login-input-block">
                <input
                  type="number"
                  className={`login-input ${errors.age ? "error" : ""}`}
                  name="age"
                  value={formData.age}
                  onChange={handleChange}
                  required
                  placeholder=" "
                />
                <label className="login-label">Age</label>
                {errors.age && <div className="error-field">{errors.age}</div>}
              </div>

              <div className="login-input-block">
                <input
                  type="text"
                  className={`login-input ${errors.num_cin ? "error" : ""}`}
                  name="num_cin"
                  value={formData.num_cin}
                  onChange={handleChange}
                  required
                  placeholder=" "
                />
                <label className="login-label">CIN Number</label>
                {errors.num_cin && <div className="error-field">{errors.num_cin}</div>}
              </div>

              <div className="row3">
                <div className="login-input-block">
                  <label className="login-label">Student Card Image</label>
                  <label htmlFor="file-upload-student" className="custom-file-upload">
                    <img
                      src={upload || "/placeholder.svg"}
                      alt="upload"
                      style={{ width: "20px", height: "10px", color: "gray" }}
                    />
                    Choose Student Card Image
                  </label>
                  <input
                    id="file-upload-student"
                    type="file"
                    name="image_carte_etudiant"
                    onChange={handleFileChange}
                    required
                  />
                  {formData.image_carte_etudiant && typeof formData.image_carte_etudiant === "object" && (
                    <div className="file-name">
                      <p>{formData.image_carte_etudiant.name}</p>
                    </div>
                  )}
                  {(studentCardPreview ||
                    (typeof formData.image_carte_etudiant === "string" && formData.image_carte_etudiant)) && (
                    <div className="student-card-preview">
                      <img
                        src={studentCardPreview || `http://localhost:3000/${formData.image_carte_etudiant}`}
                        alt="Student Card Preview"
                      />
                    </div>
                  )}
                  {errors.image_carte_etudiant && <div className="error-field">{errors.image_carte_etudiant}</div>}
                </div>
              </div>
            </>
          )}

          {role === "ong" && (
            <>
              <div className="login-input-block">
                <input
                  type="text"
                  className={`login-input ${errors.id_fiscale ? "error" : ""}`}
                  name="id_fiscale"
                  value={formData.id_fiscale}
                  onChange={handleChange}
                  required
                  placeholder=" "
                />
                <label className="login-label">Fiscal ID</label>
                {errors.id_fiscale && <div className="error-field">{errors.id_fiscale}</div>}
              </div>

              <div className="login-input-block">
                <select
                  className={`login-input ${errors.type ? "error" : ""}`}
                  name="type"
                  value={formData.type}
                  onChange={handleChange}
                  required
                >
                  <option value="">Select ONG Type</option>
                  <option value="advocacy">Advocacy</option>
                  <option value="operational">Operational</option>
                  <option value="charitable">Charitable</option>
                  <option value="development">Development</option>
                  <option value="environmental">Environmental</option>
                  <option value="human-rights">Human Rights</option>
                  <option value="relief">Relief</option>
                  <option value="research">Research</option>
                  <option value="philanthropic">Philanthropic</option>
                  <option value="social_welfare">Social Welfare</option>
                  <option value="cultural">Cultural</option>
                  <option value="faith_based">Faith Based</option>
                </select>
                <label className="login-label">ONG Type</label>
                {errors.type && <div className="error-field">{errors.type}</div>}
              </div>
            </>
          )}

          {(role === "restaurant" || role === "supermarket") && (
            <div className="login-input-block">
              <input
                type="text"
                className={`login-input ${errors.taxReference ? "error" : ""}`}
                name="taxReference"
                value={formData.taxReference}
                onChange={handleChange}
                required
                placeholder=" "
              />
              <label className="login-label">Tax Reference</label>
              {errors.taxReference && <div className="error-field">{errors.taxReference}</div>}
            </div>
          )}

          {role === "transporter" && (
            <div className="login-input-block">
              <select
                className={`login-input ${errors.vehiculeType ? "error" : ""}`}
                name="vehiculeType"
                value={formData.vehiculeType}
                onChange={handleChange}
                required
              >
                <option value="">Select Vehicle Type</option>
                <option value="car">Car</option>
                <option value="motorbike">Motorbike</option>
                <option value="bicycle">Bicycle</option>
                <option value="van">Van</option>
                <option value="truck">Truck</option>
                <option value="scooter">Scooter</option>
              </select>
              <label className="login-label">Vehicle Type</label>
              {errors.vehiculeType && <div className="error-field">{errors.vehiculeType}</div>}
            </div>
          )}

          <button className="btn login-button" type="submit">
            Save Profile
          </button>
        </form>
      </div>
      <Footer />
    </>
  )
}

export default EditProfile
</file>

<file path="sustainafood-frontend/src/pages/GamePage.jsx">
import React, { useState } from 'react';
import FruitSelector from '../components/game/FruitSelector'; // Ajustez le chemin si nécessaire
import GameArea from '../components/game/GameArea';         // Ajustez le chemin si nécessaire
import GameOver from '../components/game/GameOver';         // Ajustez le chemin si nécessaire
import '../assets/styles/Game.css'; // Ajustez le chemin si nécessaire

// Define possible game states
const GAME_STATES = {
  SELECTING: 'selecting',
  PLAYING: 'playing',
  GAME_OVER: 'gameOver',
};

function GamePage() {
  const [gameState, setGameState] = useState(GAME_STATES.SELECTING);
  const [selectedFruit, setSelectedFruit] = useState(null);
  const [finalScore, setFinalScore] = useState(0);

  const handleSelectFruit = (fruit) => {
    setSelectedFruit(fruit);
  };

  const handleStartGame = () => {
    if (selectedFruit) {
      setGameState(GAME_STATES.PLAYING);
      setFinalScore(0); // Reset score for new game
    }
  };

  const handleGameOver = (score) => {
    setFinalScore(score);
    setGameState(GAME_STATES.GAME_OVER);
  };

  const handleRestart = () => {
    setGameState(GAME_STATES.SELECTING);
  };

  // Render different components based on game state
  const renderContent = () => {
    switch (gameState) {
      case GAME_STATES.PLAYING:
        return <GameArea fruitType={selectedFruit} onGameOver={handleGameOver} />;
      case GAME_STATES.GAME_OVER:
        return <GameOver score={finalScore} onRestart={handleRestart} />;
      case GAME_STATES.SELECTING:
      default:
        return (
          <FruitSelector
            selectedFruit={selectedFruit}
            onSelectFruit={handleSelectFruit}
            onStartGame={handleStartGame}
          />
        );
    }
  };

  return (
    <div className="app-container game-page-container"> {/* Utilise app-container pour le style global */}
      <h1>Sauve le Fruit !</h1>
      {renderContent()}
    </div>
  );
}

export default GamePage;
</file>

<file path="sustainafood-frontend/src/pages/ListDonationsRequest.jsx">
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import { getDonationTransactionsByRequestNeedId } from '../api/donationTransactionService';
import { getRequestById } from '../api/requestNeedsService';
import { createAndAcceptDonationTransactionBiderc, rejectDonationTransaction } from '../api/donationTransactionService';
import imgmouna from '../assets/images/imgmouna.png';
import styled, { createGlobalStyle } from 'styled-components';
import { FaSearch } from 'react-icons/fa';
import { useAlert } from '../contexts/AlertContext';

// Global Styles
const GlobalStyle = createGlobalStyle`
  body {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    background: #f0f8f0;
    box-sizing: border-box;
  }
`;

// Styled Components
const DonationContainer = styled.div`
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
`;

const Controls = styled.div`
  display: flex;
  justify-content: flex-end;
  gap: 15px;
  margin: 20px 0;
`;

const Select = styled.select`
  font-size: 16px;
  border-radius: 25px;
  border: 1px solid #ccc;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  transition: 0.3s;
  cursor: pointer;
  background: white;
  color: #333;
  font-weight: bold;
  padding: 10px 10px 10px 3px;
  
  &:hover {
    border-color: #228b22;
    transform: scale(1.05);
  }
`;

const DonationCard = styled.div`
  background: #f8f9fa;
  border-left: 4px solid #228b22;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 20px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: transform 0.2s ease-in-out;

  &:hover {
    transform: scale(1.02);
  }

  @media (max-width: 768px) {
    padding: 15px;
  }
`;

const ProfileInfo = styled.div`
  display: flex;
  align-items: center;
  gap: 15px;
  margin-bottom: 15px;

  @media (max-width: 768px) {
    flex-direction: column;
    align-items: flex-start;
  }
`;

const ProfileImg = styled.img`
  width: 50px;
  height: 50px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #228b22;
  cursor: pointer;
  transition: transform 0.2s ease-in-out;

  &:hover {
    transform: scale(1.1);
  }
`;

const ProfileText = styled.p`
  margin: 0;
  font-size: 16px;
  font-weight: bold;
  color: #495057;
  cursor: pointer;
  transition: color 0.2s ease-in-out;

  &:hover {
    color: #228b22;
  }
`;

const DonationDetails = styled.div`
  margin-bottom: 15px;
`;

const DonationDetail = styled.p`
  font-size: 14px;
  color: #495057;
  margin: 5px 0;

  strong {
    color: #222;
    font-weight: 600;
  }
`;

const ProductSection = styled.div`
  margin-bottom: 15px;
`;

const ProductsTitle = styled.h4`
  font-size: 16px;
  color: #222;
  margin: 0 0 10px;
`;

const ProductList = styled.ul`
  list-style: none;
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 8px;
  margin-top: 10px;
`;

const ProductItem = styled.li`
  background: #ffffff;
  padding: 10px;
  border-left: 3px solid #228b22;
  border-radius: 5px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  font-size: 14px;

  @media (max-width: 768px) {
    flex-direction: column;
    align-items: flex-start;
  }
`;

const ProductDetails = styled.div`
  display: flex;
  flex-direction: column;
  flex-grow: 1;

  span {
    display: block;
    font-size: 13px;
    color: #333;
  }
`;

const ProductQuantity = styled.span`
  font-size: 16px;
  font-weight: bold;
  color: #d9534f;
  padding: 4px 8px;
  border-radius: 4px;

  @media (max-width: 768px) {
    font-size: 14px;
    padding: 6px;
  }
`;

const ButtonContainer = styled.div`
  display: flex;
  justify-content: space-evenly;
  margin-top: 15px;
`;

const ActionButton = styled.button`
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
  font-weight: bold;
  transition: background 0.3s ease-in-out;

  &.accept-btn {
    background-color: #28a745;
    color: white;

    &:hover {
      background-color: #218838;
    }
  }

  &.reject-btn {
    background-color: #dc3545;
    color: white;

    &:hover {
      background-color: #c82333;
    }
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
`;

const PaginationControls = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  gap: 10px;

  button {
    padding: 10px 20px;
    font-size: 14px;
    background: #228b22;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s;

    &:hover:not(:disabled) {
      background: #56ab2f;
    }

    &:disabled {
      background: #ccc;
      cursor: not-allowed;
    }
  }

  span {
    font-size: 14px;
    color: #333;
  }
`;

const LoadingMessage = styled.div`
  font-size: 18px;
  color: #555;
  text-align: center;
  padding: 40px;
`;

const NoDonations = styled.p`
  font-size: 18px;
  color: #888;
  text-align: center;
  padding: 20px;
`;

const ErrorContainer = styled.div`
  text-align: center;
  padding: 40px;
`;

const DonationTitle = styled.h1`
  color: #228b22;
  font-size: 40px;
  margin-bottom: 20px;
  text-align: center;
`;

const SearchContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  background: white;
  padding: 8px;
  border-radius: 25px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  width: 320px;
  margin: 0 auto 20px;
  transition: all 0.3s ease-in-out;

  &:hover {
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }
`;

const SearchIcon = styled(FaSearch)`
  color: #555;
  margin-right: 8px;
`;

const SearchInput = styled.input`
  border: none;
  outline: none;
  font-size: 16px;
  width: 100%;
  padding: 8px;
  background: transparent;
`;

const RejectionModal = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
`;

const ModalContent = styled.div`
  background: white;
  padding: 20px;
  border-radius: 8px;
  width: 400px;
  max-width: 90%;
`;

const ModalTextarea = styled.textarea`
  width: 100%;
  min-height: 100px;
  margin: 10px 0;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
`;

const ModalButtons = styled.div`
  display: flex;
  justify-content: flex-end;
  gap: 10px;
`;

const Spinner = styled.div`
  display: inline-block;
  width: ${props => props.size === 'sm' ? '12px' : '16px'};
  height: ${props => props.size === 'sm' ? '12px' : '16px'};
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: white;
  animation: spin 1s ease-in-out infinite;
  margin-right: 5px;

  @keyframes spin {
    to { transform: rotate(360deg); }
  }
`;

const StatusBadge = styled.span`
  display: inline-block;
  padding: 3px 8px;
  border-radius: 12px;
  font-size: 12px;
  font-weight: bold;
  margin-left: 5px;
  
  &.pending {
    background-color: #fff3cd;
    color: #856404;
  }
  
  &.approved {
    background-color: #d4edda;
    color: #155724;
  }
  
  &.rejected {
    background-color: #f8d7da;
    color: #721c24;
  }
`;

const ListDonationsRequest = () => {
  const { showAlert } = useAlert();
  const { id } = useParams(); // requestNeedId
  const navigate = useNavigate();
  const [transactions, setTransactions] = useState([]);
  const [filteredTransactions, setFilteredTransactions] = useState([]);
  const [request, setRequest] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(3);
  const [filterOption, setFilterOption] = useState('all');
  const [sortOption, setSortOption] = useState('date');
  const [searchQuery, setSearchQuery] = useState('');
  const [processing, setProcessing] = useState({});
  const [rejectionReason, setRejectionReason] = useState('');
  const [currentRejectionId, setCurrentRejectionId] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const requestResponse = await getRequestById(id);
        setRequest(requestResponse.data);

        const transactionData = await getDonationTransactionsByRequestNeedId(id);
        const transactionsArray = Array.isArray(transactionData) ? transactionData : [];
        setTransactions(transactionsArray);
      } catch (err) {
        console.error('Fetch error:', err.response?.data || err.message);
        setError(err.response?.data?.message || 'Failed to fetch data');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [id]);

  useEffect(() => {
    if (!request || transactions.length === 0) return;

    let updatedTransactions = [...transactions];

    // Apply filters
    if (filterOption === 'pending' || filterOption === 'approved' || filterOption === 'rejected') {
      updatedTransactions = updatedTransactions.filter(t => t.status === filterOption);
    } else if (filterOption === 'full') {
      updatedTransactions = updatedTransactions.filter(transaction => {
        if (transaction.donation.category === 'packaged_products') {
          return transaction.allocatedProducts.every(item => {
            const requestedProduct = request.requestedProducts?.find(
              rp => rp.product.toString() === item.product.toString()
            );
            return requestedProduct && item.quantity >= requestedProduct.quantity;
          });
        } else if (transaction.donation.category === 'prepared_meals') {
          const totalAllocated = transaction.allocatedMeals.reduce((sum, m) => sum + m.quantity, 0);
          return totalAllocated >= request.numberOfMeals;
        }
        return false;
      });
    }

    // Apply search
    if (searchQuery) {
      updatedTransactions = updatedTransactions.filter(transaction => {
        const donation = transaction.donation;
        const productMatch = donation.products?.some(product =>
          product.product?.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
          product.product?.productType?.toLowerCase().includes(searchQuery.toLowerCase())
        );
        const mealMatch = donation.meals?.some(meal =>
          meal.meal?.mealName?.toLowerCase().includes(searchQuery.toLowerCase())
        );
        const donorMatch = donation.donor?.name?.toLowerCase().includes(searchQuery.toLowerCase());
        return productMatch || mealMatch || donorMatch;
      });
    }

    // Apply sorting
    updatedTransactions.sort((a, b) => {
      const donationA = a.donation;
      const donationB = b.donation;
      if (sortOption === 'title') {
        return donationA.title.localeCompare(donationB.title);
      } else if (sortOption === 'donor') {
        return (donationA.donor?.name || '').localeCompare(donationB.donor?.name || '');
      } else if (sortOption === 'status') {
        return a.status.localeCompare(b.status);
      } else {
        return new Date(donationA.expirationDate) - new Date(donationB.expirationDate);
      }
    });

    setFilteredTransactions(updatedTransactions);
    setCurrentPage(1);
  }, [transactions, request, filterOption, sortOption, searchQuery]);

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentTransactions = filteredTransactions.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(filteredTransactions.length / itemsPerPage);

  const paginate = (pageNumber) => setCurrentPage(pageNumber);

  const handleAcceptDonation = async (transactionId) => {
    if (!window.confirm('Are you sure you want to accept this transaction?')) return;

    try {
      setProcessing(prev => ({ ...prev, [transactionId]: 'accepting' }));

      const transaction = transactions.find(t => t._id === transactionId);
      const donation = transaction.donation;

      // Optimistic update
      setTransactions(prev => prev.map(t => 
        t._id === transactionId ? { ...t, status: 'approved' } : t
      ));

      if (donation.category === 'prepared_meals') {
        const totalAllocated = transaction.allocatedMeals.reduce((sum, m) => sum + m.quantity, 0);
        setRequest(prev => ({
          ...prev,
          numberOfMeals: prev.numberOfMeals - totalAllocated
        }));
      } else if (donation.category === 'packaged_products') {
        setRequest(prev => ({
          ...prev,
          requestedProducts: prev.requestedProducts.map(rp => {
            const allocatedProduct = transaction.allocatedProducts.find(ap => 
              ap.product.toString() === rp.product.toString()
            );
            if (allocatedProduct) {
              return {
                ...rp,
                quantity: rp.quantity - allocatedProduct.quantity
              };
            }
            return rp;
          })
        }));
      }

      const response = await createAndAcceptDonationTransactionBiderc(
        donation._id,
        id,
        transaction.allocatedProducts,
        transaction.allocatedMeals
      );
      console.log('createAndAcceptDonationTransactionBiderc response:', response);

      const { transaction: updatedTransaction, donation: updatedDonation, request: updatedRequest } = response;
      setTransactions(prev => prev.map(t => 
        t._id === transactionId ? updatedTransaction : t
      ));
      setRequest(updatedRequest);

      setFilterOption('all');
      showAlert('success', 'Transaction accepted successfully!');
    } catch (error) {
      console.error('Error accepting transaction:', error.response?.data || error.message);
      const errorMessage = error.response?.data?.message || 'An unexpected error occurred while accepting the transaction.';
      
      setTransactions(prev => prev.map(t => 
        t._id === transactionId ? { ...t, status: 'pending' } : t
      ));
      setRequest(prev => ({ ...prev }));

      showAlert('error', errorMessage);
    } finally {
      setProcessing(prev => ({ ...prev, [transactionId]: false }));
    }
  };

  const handleRejectDonation = async (transactionId) => {
    if (!rejectionReason) {
      showAlert('warning', 'Please provide a reason for rejection');
      return;
    }

    try {
      setProcessing(prev => ({ ...prev, [transactionId]: 'rejecting' }));
      await rejectDonationTransaction(transactionId, rejectionReason);

      setTransactions(prev => prev.map(t => 
        t._id === transactionId ? { ...t, status: 'rejected', rejectionReason } : t
      ));
      setCurrentRejectionId(null);
      setRejectionReason('');

      showAlert('success', 'Transaction rejected successfully!');
    } catch (error) {
      console.error('Error rejecting transaction:', error.response?.data || error.message);
      showAlert('error', 'Failed to reject transaction');
    } finally {
      setProcessing(prev => ({ ...prev, [transactionId]: false }));
    }
  };

  const openRejectionDialog = (transactionId) => {
    setCurrentRejectionId(transactionId);
    setRejectionReason('');
  };

  const handleProfileClick = (donorId) => {
    if (donorId) {
      navigate(`/ViewProfile/${donorId}`);
    }
  };

  if (loading) return <LoadingMessage>Loading...</LoadingMessage>;

  if (error) return (
    <>
      <Navbar />
      <ErrorContainer>Error: {error}</ErrorContainer>
      <Footer />
    </>
  );

  if (!request || transactions.length === 0) return (
    <>
      <Navbar />
      <ErrorContainer>
        {request ? `No transactions found for request: ${request.title}` : 'Request not found'}
      </ErrorContainer>
      <Footer />
    </>
  );

  return (
    <>
      <GlobalStyle />
      <Navbar />
      <DonationContainer>
        <DonationTitle>
          🤝 Transactions for Request: <br />
          <span className="request-title">{request.title}</span>
        </DonationTitle>

        <Controls>
          <SearchContainer>
            <SearchIcon />
            <SearchInput
              type="text"
              placeholder="Search by product, meal, or donor..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </SearchContainer>

          <Select value={filterOption} onChange={(e) => setFilterOption(e.target.value)}>
            <option value="all">🟢 All Transactions</option>
            <option value="pending">🟠 Pending</option>
            <option value="approved">🟢 Approved</option>
            <option value="rejected">🔴 Rejected</option>
          </Select>

          <Select value={sortOption} onChange={(e) => setSortOption(e.target.value)}>
            <option value="date">📆 Sort by Date</option>
            <option value="title">📝 Sort by Title</option>
            <option value="donor">👤 Sort by Donor</option>
            <option value="status">🔄 Sort by Status</option>
          </Select>
        </Controls>

        {currentTransactions.length > 0 ? (
          currentTransactions.map((transaction) => {
            const donation = transaction.donation;
            const userPhoto = donation.donor?.photo
              ? `http://localhost:3000/${donation.donor.photo}`
              : imgmouna;
            return (
              <DonationCard key={transaction._id}>
                <ProfileInfo>
                  <ProfileImg
                    src={userPhoto}
                    alt="Profile"
                    onError={(e) => {
                      e.target.src = imgmouna;
                      console.error(`Failed to load image: ${userPhoto}`);
                    }}
                    onClick={() => handleProfileClick(donation.donor?._id)}
                  />
                  <ProfileText onClick={() => handleProfileClick(donation.donor?._id)}>
                    {donation.donor?.name || 'Unknown'}
                  </ProfileText>
                  <ProfileText>{donation.donor?.role || 'N/A'}</ProfileText>
                </ProfileInfo>
                <DonationDetails>
                  <DonationDetail><strong>Transaction ID:</strong> {transaction.id}</DonationDetail>
                  <DonationDetail><strong>Donation Title:</strong> {donation.title || 'Untitled'}</DonationDetail>
                  <DonationDetail><strong>Location:</strong> {donation.address || 'Not specified'}</DonationDetail>
                  <DonationDetail>
                    <strong>Expiration Date:</strong> {donation.expirationDate ? new Date(donation.expirationDate).toLocaleDateString() : 'Not set'}
                  </DonationDetail>
                  <DonationDetail><strong>Category:</strong> {donation.category || 'Not specified'}</DonationDetail>
                  <DonationDetail>
                    <strong>Status:</strong>
                    <StatusBadge className={transaction.status || 'pending'}>
                      {transaction.status || 'pending'}
                    </StatusBadge>
                  </DonationDetail>
                  {donation.category === 'prepared_meals' && (
                    <DonationDetail>
                      <strong>Total Meals Donated:</strong> {donation.numberOfMeals || 'N/A'}
                    </DonationDetail>
                  )}
                  {transaction.rejectionReason && (
                    <DonationDetail>
                      <strong>Rejection Reason:</strong> {transaction.rejectionReason}
                    </DonationDetail>
                  )}
                </DonationDetails>
                <ProductSection>
                  <ProductsTitle>{donation.category === 'prepared_meals' ? 'Allocated Meals:' : 'Allocated Products:'}</ProductsTitle>
                  <ProductList>
                    {donation.category === 'prepared_meals' ? (
                      transaction.allocatedMeals && transaction.allocatedMeals.length > 0 ? (
                        transaction.allocatedMeals.map((item, itemIndex) => (
                          <ProductItem key={item._id || itemIndex}>
                            <ProductDetails>
                              <span><strong>Name:</strong> {item.meal?.mealName || 'N/A'}</span>
                              <span><strong>Type:</strong> {item.meal?.mealType || 'N/A'}</span>
                            </ProductDetails>
                            <ProductQuantity>
                              <strong>Quantity:</strong> {item.quantity || 0}
                            </ProductQuantity>
                          </ProductItem>
                        ))
                      ) : (
                        <ProductItem>No meals allocated</ProductItem>
                      )
                    ) : (
                      transaction.allocatedProducts && transaction.allocatedProducts.length > 0 ? (
                        transaction.allocatedProducts.map((item, itemIndex) => (
                          <ProductItem key={item._id || itemIndex}>
                            <ProductDetails>
                              <span><strong>Name:</strong> {item.product?.name || 'N/A'}</span>
                              <span><strong>Type:</strong> {item.product?.productType || 'N/A'}</span>
                              <span><strong>Weight:</strong> {item.product?.weightPerUnit ? `${item.product.weightPerUnit} ${item.product.weightUnit || ''}` : 'N/A'}</span>
                            </ProductDetails>
                            <ProductQuantity>
                              <strong>Quantity:</strong> {item.quantity || 0}
                            </ProductQuantity>
                          </ProductItem>
                        ))
                      ) : (
                        <ProductItem>No products allocated</ProductItem>
                      )
                    )}
                  </ProductList>
                </ProductSection>
                <ButtonContainer>
                  {transaction.status === 'pending' ? (
                    <>
                      <ActionButton
                        className="accept-btn"
                        onClick={() => handleAcceptDonation(transaction._id)}
                        disabled={processing[transaction._id]}
                      >
                        {processing[transaction._id] === 'accepting' ? (
                          <>
                            <Spinner size="sm" /> Processing...
                          </>
                        ) : '✔ Accept'}
                      </ActionButton>
                      <ActionButton
                        className="reject-btn"
                        onClick={() => openRejectionDialog(transaction._id)}
                        disabled={processing[transaction._id]}
                      >
                        ✖ Reject
                      </ActionButton>
                    </>
                  ) : (
                    <div style={{
                      color: transaction.status === 'approved' ? 'green' : 'red',
                      fontWeight: 'bold'
                    }}>
                      Status: {transaction.status}
                    </div>
                  )}
                </ButtonContainer>
              </DonationCard>
            );
          })
        ) : (
          <NoDonations>No matching transactions found.</NoDonations>
        )}

        {currentRejectionId && (
          <RejectionModal>
            <ModalContent>
              <h3>Reason for Rejection</h3>
              <p>Please explain why you're rejecting this transaction:</p>
              <ModalTextarea
                value={rejectionReason}
                onChange={(e) => setRejectionReason(e.target.value)}
                placeholder="Enter rejection reason (required)..."
              />
              <ModalButtons>
                <ActionButton
                  className="cancel-btn"
                  onClick={() => setCurrentRejectionId(null)}
                >
                  Cancel
                </ActionButton>
                <ActionButton
                  className="reject-btn"
                  onClick={() => handleRejectDonation(currentRejectionId)}
                  disabled={!rejectionReason || processing[currentRejectionId]}
                >
                  {processing[currentRejectionId] === 'rejecting' ? (
                    <>
                      <Spinner size="sm" /> Submitting...
                    </>
                  ) : 'Submit Rejection'}
                </ActionButton>
              </ModalButtons>
            </ModalContent>
          </RejectionModal>
        )}

        {totalPages > 1 && (
          <PaginationControls>
            <button
              onClick={() => paginate(currentPage - 1)}
              disabled={currentPage === 1}
            >
              Previous
            </button>
            <span>Page {currentPage} of {totalPages}</span>
            <button
              onClick={() => paginate(currentPage + 1)}
              disabled={currentPage === totalPages}
            >
              Next
            </button>
          </PaginationControls>
        )}
      </DonationContainer>
      <Footer />
    </>
  );
};

export default ListDonationsRequest;
</file>

<file path="sustainafood-frontend/src/pages/ListOfDonations.jsx">
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import styled, { createGlobalStyle, keyframes } from 'styled-components';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import donation1 from '../assets/images/home1.png';
import donation2 from '../assets/images/home2.png';
import donation3 from '../assets/images/home3.png';
import Composantdonation from '../components/Composantdonation';
import { getDonations } from "../api/donationService";
import patternBg from '../assets/images/bg.png';
import { FaSearch, FaFilter } from "react-icons/fa";
import { useAuth } from "../contexts/AuthContext";
import { getUserById } from "../api/userService";

const GlobalStyle = createGlobalStyle`
  body {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    background: #f0f8f0;
    box-sizing: border-box;
    overflow-x: hidden;
  }
`;

const fadeIn = keyframes`
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
`;

const fadeSlide = keyframes`
  0% { opacity: 0; transform: scale(1.05); }
  8% { opacity: 1; transform: scale(1); }
  33% { opacity: 1; transform: scale(1); }
  41% { opacity: 0; transform: scale(1.05); }
  100% { opacity: 0; transform: scale(1.05); }
`;

const float = keyframes`
  0% { transform: translateY(0px); }
  50% { transform: translateY(-15px); }
  100% { transform: translateY(0px); }
`;

const shimmer = keyframes`
  0% { background-position: -1000px 0; }
  100% { background-position: 1000px 0; }
`;

const HomeContainer = styled.div`
  display: flex;
  flex-direction: column;
  gap: 60px;

  & > section {
    opacity: 0;
    animation: ${fadeIn} 0.8s ease-out forwards;
  }
`;

const HeroSection = styled.section`
  position: relative;
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: space-between;
  padding: 80px 80px 120px;
  gap: 40px;
  background: 
    linear-gradient(135deg, rgba(230, 242, 230, 0.9), rgba(220, 240, 220, 0.85)),
    url(${patternBg}) repeat center center;
  background-size: 200px 200px;
  overflow: hidden;

  &::before {
    content: '';
    position: absolute;
    top: -50px;
    right: -50px;
    width: 200px;
    height: 200px;
    border-radius: 50%;
    background: rgba(34, 139, 34, 0.1);
    z-index: 1;
  }

  &::after {
    content: '';
    position: absolute;
    bottom: -30px;
    left: 15%;
    width: 120px;
    height: 120px;
    border-radius: 50%;
    background: rgba(34, 139, 34, 0.08);
    z-index: 1;
  }
`;

const HeroText = styled.div`
  flex: 1 1 500px;
  z-index: 2;

  h1 {
    font-size: 52px;
    font-weight: 800;
    color: #1a7a1a;
    margin-bottom: 20px;
    position: relative;

    &::after {
      content: '';
      position: absolute;
      bottom: -10px;
      left: 0;
      width: 80px;
      height: 4px;
      background: linear-gradient(90deg, #228b22, #56ab2f);
      border-radius: 2px;
    }
  }

  p {
    font-size: 20px;
    color: #3a5a3a;
    margin-bottom: 35px;
    line-height: 1.6;
    max-width: 90%;
  }
`;

const CallToAction = styled.a`
  display: inline-block;
  padding: 16px 36px;
  font-size: 18px;
  font-weight: 600;
  background: linear-gradient(135deg, #228b22, #56ab2f);
  color: white;
  border-radius: 30px;
  text-decoration: none;
  transition: all 0.3s ease;
  box-shadow: 0 6px 15px rgba(34, 139, 34, 0.2);
  position: relative;
  overflow: hidden;

  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(34, 139, 34, 0.3);
  }

  &::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.3) 50%, rgba(255, 255, 255, 0) 100%);
    transform: rotate(30deg);
    animation: ${shimmer} 3s infinite;
    pointer-events: none;
  }
`;

const SliderContainer = styled.div`
  position: relative;
  flex: 1 1 500px;
  width: 100%;
  height: 420px;
  overflow: hidden;
  z-index: 2;
  transform-style: preserve-3d;
  perspective: 1000px;
  animation: ${float} 6s ease-in-out infinite;
`;

const SlideImage = styled.img`
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 20px;
  opacity: 0;
  animation: ${fadeSlide} 12s infinite;
  animation-fill-mode: forwards;
  filter: brightness(1.05) contrast(1.05);
`;

const Slide1 = styled(SlideImage)`
  animation-delay: 0s;
`;
const Slide2 = styled(SlideImage)`
  animation-delay: 4s;
`;
const Slide3 = styled(SlideImage)`
  animation-delay: 8s;
`;

const Wave = styled.svg`
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: auto;
  z-index: 1;
  filter: drop-shadow(0 -5px 5px rgba(0, 0, 0, 0.03));
`;

const SectionWrapper = styled.section`
  padding: 80px;
  background: #fff;
  text-align: center;
  position: relative;
  overflow: hidden;

  &::before {
    content: '';
    position: absolute;
    top: -100px;
    right: -100px;
    width: 300px;
    height: 300px;
    border-radius: 50%;
    background: rgba(34, 139, 34, 0.05);
    z-index: 0;
  }

  &::after {
    content: '';
    position: absolute;
    bottom: -80px;
    left: -80px;
    width: 250px;
    height: 250px;
    border-radius: 50%;
    background: rgba(34, 139, 34, 0.05);
    z-index: 0;
  }
`;

const Container = styled.div`
  padding: 0;
  text-align: center;
  position: relative;
  z-index: 1;
`;

const Title = styled.h2`
  font-size: 40px;
  font-weight: 700;
  color: #1a7a1a;
  margin-bottom: 50px;
  position: relative;
  display: inline-block;
  z-index: 1;

  &::after {
    content: '';
    position: absolute;
    bottom: -12px;
    left: 50%;
    transform: translateX(-50%);
    width: 80px;
    height: 4px;
    background: linear-gradient(90deg, #228b22, #56ab2f);
    border-radius: 2px;
  }
`;

const SearchContainer = styled.div`
  display: flex;
  align-items: center;
  background: white;
  padding: 12px 20px;
  border-radius: 30px;
  box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
  width: 320px;
  margin: 0 auto 40px;
  transition: all 0.3s ease;
  z-index: 2;

  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
  }
`;

const SearchIcon = styled(FaSearch)`
  color: #3a5a3a;
  margin-right: 10px;
`;

const SearchInput = styled.input`
  border: none;
  outline: none;
  font-size: 16px;
  width: 100%;
  background: transparent;
  color: #3a5a3a;
`;

const Controls = styled.div`
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 20px;
  margin-bottom: 40px;
  z-index: 2;
`;

const FilterIcon = styled(FaFilter)`
  margin-right: 8px;
  color: #3a5a3a;
`;

const Select = styled.select`
  padding: 12px 20px;
  font-size: 16px;
  border-radius: 30px;
  border: none;
  box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  cursor: pointer;
  background: white;
  color: #3a5a3a;
  font-weight: 600;

  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(34, 139, 34, 0.2);
  }
`;

const ContentList = styled.div`
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 30px;
  z-index: 2;

  & > * {
    flex: 1 1 calc(33.333% - 20px); /* 3 cards per row, accounting for gap */
    max-width: calc(33.333% - 20px);
    box-sizing: border-box;
  }

  @media (max-width: 1024px) {
    & > * {
      flex: 1 1 calc(50% - 15px); /* 2 cards per row */
      max-width: calc(50% - 15px);
    }
  }

  @media (max-width: 768px) {
    & > * {
      flex: 1 1 100%; /* 1 card per row */
      max-width: 100%;
    }
  }
`;

const LoadingMessage = styled.div`
  font-size: 18px;
  color: #3a5a3a;
  z-index: 2;
`;

const NoDonations = styled.p`
  font-size: 18px;
  color: #3a5a3a;
  z-index: 2;
`;

const PaginationControls = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 40px;
  gap: 15px;
  z-index: 2;

  button {
    padding: 12px 24px;
    font-size: 16px;
    background: linear-gradient(135deg, #228b22, #56ab2f);
    color: white;
    border: none;
    border-radius: 30px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 6px 15px rgba(34, 139, 34, 0.2);

    &:hover {
      transform: translateY(-3px);
      box-shadow: 0 10px 20px rgba(34, 139, 34, 0.3);
    }

    &:disabled {
      background: #ccc;
      box-shadow: none;
      cursor: not-allowed;
      transform: none;
    }
  }

  span {
    font-size: 16px;
    color: #3a5a3a;
  }
`;

const ListOfDonations = () => {
  const [donations, setDonations] = useState([]);
  const [filteredDonations, setFilteredDonations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [sortOption, setSortOption] = useState("date");
  const [statusFilter, setStatusFilter] = useState("all");
  const [categoryFilter, setCategoryFilter] = useState("all");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(6);
  const { user: authUser, token, logout } = useAuth();

  const [user, setUser] = useState(authUser);
  useEffect(() => {
    const fetchUser = async () => {
      if (typeof authUser.id === "number") {
        if (!authUser || !authUser._id) return;
        try {
          const response = await getUserById(authUser._id);
          setUser(response.data);
        } catch (error) {
          console.error("Backend Error:", error);
        }
      }
      else if (typeof authUser.id === "string") {
        if (!authUser || !authUser.id) return;
        try {
          const response = await getUserById(authUser.id);
          setUser(response.data);
        } catch (error) {
          console.error("Backend Error:", error);
        }
      }
    };

    if (authUser && (authUser._id || authUser.id)) {
      fetchUser();
    }
  }, [authUser]);
  const isDonner = user?.role === "restaurant" || user?.role === "supermarket";
  const isRecipient = user?.role === "ong" || user?.role === "student";
  useEffect(() => {
    const fetchDonations = async () => {
      try {
        const response = await getDonations();
        setDonations(response.data);
        setFilteredDonations(response.data);
        setLoading(false);
        console.log("Donations fetched:", response.data);
      } catch (error) {
        console.error("Backend Error:", error);
        setLoading(false);
      }
    };
    fetchDonations();
  }, []);

  useEffect(() => {
    let updatedDonations = [...donations];

    if (searchQuery) {
      updatedDonations = updatedDonations.filter((donation) =>
        donation.title.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    if (statusFilter !== "all") {
      updatedDonations = updatedDonations.filter((donation) => donation.status === statusFilter);
    }

    if (categoryFilter !== "all") {
      updatedDonations = updatedDonations.filter((donation) => donation.category === categoryFilter);
    }

    updatedDonations.sort((a, b) => {
      if (sortOption === "title") {
        return a.title.localeCompare(b.title);
      } else if (sortOption === "status") {
        return a.status.localeCompare(b.status);
      } else {
        return new Date(a.expirationDate) - new Date(b.expirationDate);
      }
    });

    setFilteredDonations(updatedDonations);
    setCurrentPage(1); // Reset to page 1 when filters change
  }, [searchQuery, sortOption, statusFilter, categoryFilter, donations]);

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentDonations = filteredDonations.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(filteredDonations.length / itemsPerPage);

  return (
    <>
      <GlobalStyle />
      <Navbar />
      <HomeContainer>
        {/* Hero Section */}
        <HeroSection>
          <HeroText>
            <h1>List Of Donations in SustainaFood</h1>
            <p>
              Give if you can, receive if you need—together, we reduce food waste and spread hope!
            </p>
            {isDonner && <CallToAction href="/AddDonation">Add Your Donation</CallToAction>}
          </HeroText>
          <SliderContainer>
            <Slide1 src={donation2} alt="Donation 1" />
            <Slide2 src={donation3} alt="Donation 2" />
            <Slide3 src={donation1} alt="Donation 3" />
          </SliderContainer>
          <Wave viewBox="0 0 1440 320">
            <path
              fill="#f0f8f0"
              fillOpacity="1"
              d="M0,96L30,90C60,85,120,75,180,64C240,53,300,43,360,64C420,85,480,139,540,170.7C600,203,660,213,720,224C780,235,840,245,900,240C960,235,1020,213,1080,181.3C1140,149,1200,107,1260,112C1320,117,1380,171,1410,197.3L1440,224L1440,320L1410,320C1380,320,1320,320,1260,320C1200,320,1140,320,1080,320C1020,320,960,320,900,320C840,320,780,320,720,320C660,320,600,320,540,320C480,320,420,320,360,320C300,320,240,320,180,320C120,320,60,320,30,320L0,320Z"
            />
          </Wave>
        </HeroSection>

        {/* Donations List Section */}
        <SectionWrapper>
          <Container>
            <Title>List Of Donations</Title>
            <SearchContainer>
              <SearchIcon />
              <SearchInput
                type="text"
                placeholder="Search donations..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </SearchContainer>
            <Controls>
              <Select value={sortOption} onChange={(e) => setSortOption(e.target.value)}>
                <option value="date">📆 Sort by Expiration Date</option>
                <option value="title">🔠 Sort by Title</option>
                <option value="status">🔄 Sort by Status</option>
              </Select>
              <Select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>
                <option value="all">🟢 All Statuses</option>
                <option value="pending">🕒 Pending</option>
                <option value="fulfilled">✅ Fulfilled</option>
                <option value="partially_fulfilled">❌ Partially fulfilled</option>
              </Select>
              <Select value={categoryFilter} onChange={(e) => setCategoryFilter(e.target.value)}>
                <option value="all">📦 All Categories</option>
                <option value="prepared_meals">🍽️ Prepared Meals</option>
                <option value="packaged_products">🛒 Packaged Products</option>
              </Select>
            </Controls>
            <ContentList>
              {loading ? (
                <LoadingMessage>Loading...</LoadingMessage>
              ) : currentDonations.length > 0 ? (
                currentDonations.map((donationItem) => (
                  <Composantdonation key={donationItem._id} donation={donationItem} />
                ))
              ) : (
                <NoDonations>No matching donations found.</NoDonations>
              )}
            </ContentList>
            <PaginationControls>
              <button onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))} disabled={currentPage === 1}>
                Previous
              </button>
              <span>Page {currentPage} of {totalPages}</span>
              <button onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))} disabled={currentPage === totalPages}>
                Next
              </button>
            </PaginationControls>
          </Container>
        </SectionWrapper>
      </HomeContainer>
      <Footer />
    </>
  );
};

export default ListOfDonations;
</file>

<file path="sustainafood-frontend/src/pages/ListOfRequests.jsx">
"use client"

import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import styled, { createGlobalStyle, keyframes } from 'styled-components';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import donation1 from '../assets/images/home1.png';
import donation2 from '../assets/images/home2.png';
import donation3 from '../assets/images/home3.png';
import Composantrequest from "../components/Composantrequest";
import { getrequests } from "../api/requestNeedsService";
import patternBg from '../assets/images/bg.png';
import { FaSearch, FaFilter } from "react-icons/fa";
import { useAuth } from "../contexts/AuthContext";
import { getUserById } from "../api/userService";

// Global styles
const GlobalStyle = createGlobalStyle`
  body {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    background: #f0f8f0;
    box-sizing: border-box;
    overflow-x: hidden;
  }
`;

// Animation keyframes
const fadeIn = keyframes`
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
`;
const fadeSlide = keyframes`
  0% { opacity: 0; transform: scale(1.05); }
  8% { opacity: 1; transform: scale(1); }
  33% { opacity: 1; transform: scale(1); }
  41% { opacity: 0; transform: scale(1.05); }
  100% { opacity: 0; transform: scale(1.05); }
`;
const float = keyframes`
  0% { transform: translateY(0px); }
  50% { transform: translateY(-15px); }
  100% { transform: translateY(0px); }
`;
const shimmer = keyframes`
  0% { background-position: -1000px 0; }
  100% { background-position: 1000px 0; }
`;
const skeletonLoading = keyframes`
  0% { background-position: -200px 0; }
  100% { background-position: calc(200px + 100%) 0; }
`;

// Main container
const HomeContainer = styled.div`
  display: flex;
  flex-direction: column;
  gap: 60px;
  & > section {
    opacity: 0;
    animation: ${fadeIn} 0.8s ease-out forwards;
  }
  & > section:nth-child(2) {
    animation-delay: 0.2s;
  }
`;

// Hero section
const HeroSection = styled.section`
  position: relative;
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: space-between;
  padding: 80px 80px 120px;
  gap: 40px;
  background: linear-gradient(135deg, rgba(230, 242, 230, 0.9), rgba(220, 240, 220, 0.85)), url(${patternBg}) repeat center center;
  background-size: 200px 200px;
  overflow: hidden;
  &::before { content: ''; position: absolute; top: -50px; right: -50px; width: 200px; height: 200px; border-radius: 50%; background: rgba(34, 139, 34, 0.1); z-index: 1; }
  &::after { content: ''; position: absolute; bottom: -30px; left: 15%; width: 120px; height: 120px; border-radius: 50%; background: rgba(34, 139, 34, 0.08); z-index: 1; }
`;

// Hero text
const HeroText = styled.div`
  flex: 1 1 500px;
  z-index: 2;
  h1 { font-size: 52px; font-weight: 800; color: #1a7a1a; margin-bottom: 20px; position: relative; &::after { content: ''; position: absolute; bottom: -10px; left: 0; width: 80px; height: 4px; background: linear-gradient(90deg, #228b22, #56ab2f); border-radius: 2px; } }
  p { font-size: 20px; color: #3a5a3a; margin-bottom: 35px; line-height: 1.6; max-width: 90%; }
`;

// Call to action button
const CallToAction = styled.a`
  display: inline-block;
  padding: 16px 36px;
  font-size: 18px;
  font-weight: 600;
  background: linear-gradient(135deg, #228b22, #56ab2f);
  color: white;
  border-radius: 30px;
  text-decoration: none;
  transition: all 0.3s ease;
  box-shadow: 0 6px 15px rgba(34, 139, 34, 0.2);
  position: relative;
  overflow: hidden;
  &:hover { transform: translateY(-3px); box-shadow: 0 10px 20px rgba(34, 139, 34, 0.3); }
  &::after { content: ''; position: absolute; top: -50%; left: -50%; width: 200%; height: 200%; background: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.3) 50%, rgba(255, 255, 255, 0) 100%); transform: rotate(30deg); animation: ${shimmer} 3s infinite; pointer-events: none; }
`;

// Slider container
const SliderContainer = styled.div`
  position: relative;
  flex: 1 1 500px;
  width: 100%;
  height: 420px;
  overflow: hidden;
  z-index: 2;
  transform-style: preserve-3d;
  perspective: 1000px;
  animation: ${float} 6s ease-in-out infinite;
`;
const SlideImage = styled.img`
  position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover; border-radius: 20px; opacity: 0; animation: ${fadeSlide} 12s infinite; animation-fill-mode: forwards; filter: brightness(1.05) contrast(1.05);
`;
const Slide1 = styled(SlideImage)`animation-delay: 0s;`;
const Slide2 = styled(SlideImage)`animation-delay: 4s;`;
const Slide3 = styled(SlideImage)`animation-delay: 8s;`;

// Wave shape
const Wave = styled.svg`
  position: absolute; bottom: 0; left: 0; width: 100%; height: auto; z-index: 1; filter: drop-shadow(0 -5px 5px rgba(0, 0, 0, 0.03));
`;

// Section wrapper
const SectionWrapper = styled.section`
  padding: 80px;
  background: #fff;
  text-align: center;
  position: relative;
  overflow: hidden;
  &::before { content: ''; position: absolute; top: -100px; right: -100px; width: 300px; height: 300px; border-radius: 50%; background: rgba(34, 139, 34, 0.05); z-index: 0; }
  &::after { content: ''; position: absolute; bottom: -80px; left: -80px; width: 250px; height: 250px; border-radius: 50%; background: rgba(34, 139, 34, 0.05); z-index: 0; }
`;

// Container
const Container = styled.div`
  padding: 0;
  text-align: center;
  position: relative;
  z-index: 1;
`;

// Title
const Title = styled.h2`
  font-size: 40px;
  font-weight: 700;
  color: #1a7a1a;
  margin-bottom: 50px;
  position: relative;
  display: inline-block;
  z-index: 1;
  &::after { content: ''; position: absolute; bottom: -12px; left: 50%; transform: translateX(-50%); width: 80px; height: 4px; background: linear-gradient(90deg, #228b22, #56ab2f); border-radius: 2px; }
`;

// Search container
const SearchContainer = styled.div`
  display: flex;
  align-items: center;
  background: white;
  padding: 12px 20px;
  border-radius: 30px;
  box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
  width: 320px;
  margin: 0 auto 40px;
  transition: all 0.3s ease;
  z-index: 2;
  &:hover { transform: translateY(-3px); box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15); }
`;

// Search icon
const SearchIcon = styled(FaSearch)`color: #3a5a3a; margin-right: 10px;`;

// Search input
const SearchInput = styled.input`
  border: none;
  outline: none;
  font-size: 16px;
  width: 100%;
  background: transparent;
  color: #3a5a3a;
`;

// Controls
const Controls = styled.div`
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 20px;
  margin-bottom: 40px;
  z-index: 2;
  @media (max-width: 768px) { flex-direction: column; align-items: center; }
`;

// Filter icon
const FilterIcon = styled(FaFilter)`margin-right: 8px; color: #3a5a3a;`;

// Select
const Select = styled.select`
  padding: 12px 20px;
  font-size: 16px;
  border-radius: 30px;
  border: none;
  box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  cursor: pointer;
  background: white;
  color: #3a5a3a;
  font-weight: 600;
  appearance: none;
  background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%233a5a3a' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: right 16px center;
  background-size: 16px;
  padding-right: 40px;
  &:hover { transform: translateY(-3px); box-shadow: 0 10px 20px rgba(34, 139, 34, 0.2); }
  @media (max-width: 768px) { width: 100%; max-width: 320px; }
`;

// Content list
const ContentList = styled.div`
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 30px;
  z-index: 2;
  & > * { flex: 0 0 calc(33.333% - 20px); max-width: calc(33.333% - 20px); box-sizing: border-box; }
`;

// Skeleton loading components
const SkeletonCard = styled.div`
  background: white;
  border-radius: 16px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
  padding: 20px;
  height: 350px;
  display: flex;
  flex-direction: column;
`;
const SkeletonImage = styled.div`
  width: 100%;
  height: 180px;
  margin-bottom: 15px;
  border-radius: 8px;
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  background-size: 200px 100%;
  animation: ${skeletonLoading} 1.5s infinite;
`;
const SkeletonTitle = styled.div`
  height: 30px;
  width: 70%;
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  background-size: 200px 100%;
  animation: ${skeletonLoading} 1.5s infinite;
  border-radius: 8px;
  margin-bottom: 10px;
`;
const SkeletonText = styled.div`
  height: 15px;
  width: 100%;
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  background-size: 200px 100%;
  animation: ${skeletonLoading} 1.5s infinite;
  border-radius: 8px;
  margin-bottom: 10px;
`;
const SkeletonButton = styled.div`
  height: 40px;
  width: 100%;
  margin-top: 15px;
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  background-size: 200px 100%;
  animation: ${skeletonLoading} 1.5s infinite;
  border-radius: 8px;
`;

// Empty state
const EmptyState = styled.div`
  text-align: center;
  padding: 60px 20px;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 16px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
  margin: 40px auto;
  max-width: 600px;
  h3 { font-size: 24px; color: #1a7a1a; margin-bottom: 20px; }
  p { font-size: 16px; color: #3a5a3a; margin-bottom: 30px; }
`;

// Pagination controls
const PaginationControls = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 40px;
  gap: 15px;
  z-index: 2;
  button {
    padding: 12px 24px;
    font-size: 16px;
    background: linear-gradient(135deg, #228b22, #56ab2f);
    color: white;
    border: none;
    border-radius: 30px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 6px 15px rgba(34, 139, 34, 0.2);
    &:hover { transform: translateY(-3px); box-shadow: 0 10px 20px rgba(34, 139, 34, 0.3); }
    &:disabled { background: #ccc; box-shadow: none; cursor: not-allowed; transform: none; }
  }
  span { font-size: 16px; color: #3a5a3a; font-weight: 500; }
`;

const ListOfRequests = () => {
  const [requests, setRequests] = useState([]);
  const [filteredRequests, setFilteredRequests] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [sortOption, setSortOption] = useState("date");
  const [statusFilter, setStatusFilter] = useState("all");
  const [categoryFilter, setCategoryFilter] = useState("all");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(6);
  const { user: authUser, token, logout } = useAuth();

  const [user, setUser] = useState(authUser);
  useEffect(() => {
    const fetchUser = async () => {
      if (typeof authUser.id === "number") {
        if (!authUser || !authUser._id) return;
        try {
          const response = await getUserById(authUser._id);
          setUser(response.data);
        } catch (error) {
          console.error("Backend Error:", error);
        }
      }
      else if (typeof authUser.id === "string") {
        if (!authUser || !authUser.id) return;
        try {
          const response = await getUserById(authUser.id);
          setUser(response.data);
        } catch (error) {
          console.error("Backend Error:", error);
        }
      }
    };

    if (authUser && (authUser._id || authUser.id)) {
      fetchUser();
    }
  }, [authUser]);

  const isDonner = user?.role === "restaurant" || user?.role === "supermarket";
  const isRecipient = user?.role === "ong" || user?.role === "student";

  useEffect(() => {
    const fetchRequests = async () => {
      try {
        const response = await getrequests();
        setRequests(response.data);
        setFilteredRequests(response.data);
        setLoading(false);
        console.log("Requests fetched:", response.data);
      } catch (error) {
        console.error("Error fetching requests:", error);
        setLoading(false);
      }
    };
    fetchRequests();
  }, []);

  useEffect(() => {
    let updatedRequests = [...requests];

    if (searchQuery) {
      updatedRequests = updatedRequests.filter((request) =>
        request.title.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    if (statusFilter !== "all") {
      updatedRequests = updatedRequests.filter((request) => request.status === statusFilter);
    }

    if (categoryFilter !== "all") {
      updatedRequests = updatedRequests.filter((request) => request.category === categoryFilter);
    }

    updatedRequests.sort((a, b) => {
      if (sortOption === "title") {
        return a.title.localeCompare(b.title);
      } else if (sortOption === "status") {
        return a.status.localeCompare(b.status);
      } else {
        return new Date(a.expirationDate) - new Date(b.expirationDate);
      }
    });

    setFilteredRequests(updatedRequests);
    setCurrentPage(1); // Reset to page 1 when filters change
  }, [searchQuery, sortOption, statusFilter, categoryFilter, requests]);

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentRequests = filteredRequests.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(filteredRequests.length / itemsPerPage);

  return (
    <>
      <GlobalStyle />
      <Navbar />
      <HomeContainer>
        <HeroSection>
          <HeroText>
            <h1>List Of Requests in SustainaFood</h1>
            <p>
              Give if you can, receive if you need—together, we reduce food waste and spread hope!
            </p>
            {isRecipient && <CallToAction href="/AddDonation">Add Your Request</CallToAction>}
          </HeroText>
          <SliderContainer>
            <Slide1 src={donation2} alt="Request 1" />
            <Slide2 src={donation3} alt="Request 2" />
            <Slide3 src={donation1} alt="Request 3" />
          </SliderContainer>
          <Wave viewBox="0 0 1440 320">
            <path
              fill="#f0f8f0"
              fillOpacity="1"
              d="M0,96L30,90C60,85,120,75,180,64C240,53,300,43,360,64C420,85,480,139,540,170.7C600,203,660,213,720,224C780,235,840,245,900,240C960,235,1020,213,1080,181.3C1140,149,1200,107,1260,112C1320,117,1380,171,1410,197.3L1440,224L1440,320L1410,320C1380,320,1320,320,1260,320C1200,320,1140,320,1080,320C1020,320,960,320,900,320C840,320,780,320,720,320C660,320,600,320,540,320C480,320,420,320,360,320C300,320,240,320,180,320C120,320,60,320,30,320L0,320Z"
            />
          </Wave>
        </HeroSection>
        <SectionWrapper>
          <Container>
            <Title>List Of Requests</Title>
            <SearchContainer>
              <SearchIcon />
              <SearchInput
                type="text"
                placeholder="Search requests..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </SearchContainer>
            <Controls>
              <Select value={sortOption} onChange={(e) => setSortOption(e.target.value)}>
                <option value="date">📆 Sort by Expiration Date</option>
                <option value="title">🔠 Sort by Title</option>
                <option value="status">🔄 Sort by Status</option>
              </Select>
              <Select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>
                <option value="all">🟢 All Statuses</option>
                <option value="pending">🕒 Pending</option>
                <option value="fulfilled">✅ Fulfilled</option>
                <option value="partially_fulfilled">❌ Partially fulfilled</option>
              </Select>
              <Select value={categoryFilter} onChange={(e) => setCategoryFilter(e.target.value)}>
                <option value="all">📦 All Categories</option>
                <option value="prepared_meals">🍽️ Prepared Meals</option>
                <option value="packaged_products">🛒 Packaged Products</option>
              </Select>
            </Controls>
            <ContentList>
              {loading ? (
                <>
                  <SkeletonCard>
                    <SkeletonImage />
                    <SkeletonTitle />
                    <SkeletonText />
                    <SkeletonText />
                    <SkeletonButton />
                  </SkeletonCard>
                  <SkeletonCard>
                    <SkeletonImage />
                    <SkeletonTitle />
                    <SkeletonText />
                    <SkeletonText />
                    <SkeletonButton />
                  </SkeletonCard>
                  <SkeletonCard>
                    <SkeletonImage />
                    <SkeletonTitle />
                    <SkeletonText />
                    <SkeletonText />
                    <SkeletonButton />
                  </SkeletonCard>
                </>
              ) : currentRequests.length > 0 ? (
                currentRequests.map((requestItem) => (
                  <Composantrequest key={requestItem._id} request={requestItem} />
                ))
              ) : (
                <EmptyState>
                  <h3>No Requests Found</h3>
                  <p>No matching requests found. Try adjusting your filters or check back later.</p>
                </EmptyState>
              )}
            </ContentList>
            <PaginationControls>
              <button onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))} disabled={currentPage === 1}>
                Previous
              </button>
              <span>Page {currentPage} of {totalPages}</span>
              <button onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))} disabled={currentPage === totalPages}>
                Next
              </button>
            </PaginationControls>
          </Container>
        </SectionWrapper>
      </HomeContainer>
      <Footer />
    </>
  );
};

export default ListOfRequests;
</file>

<file path="sustainafood-frontend/src/pages/MyDonationsList.jsx">
"use client"

import React, { useEffect, useState } from 'react';
import { getDonationByUserId } from "../api/donationService";
import { useAuth } from "../contexts/AuthContext";
import Composantdonation from "../components/Composantdonation";
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import styled, { createGlobalStyle, keyframes } from 'styled-components';
import { FaSearch, FaFilter } from "react-icons/fa";
import { Link } from 'react-router-dom';

// Replace with the actual path to your background pattern image
import patternBg from "../assets/images/bg.png";

const GlobalStyle = createGlobalStyle`
  body {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    background: #f0f8f0;
    box-sizing: border-box;
    overflow-x: hidden;
  }
`;

const fadeIn = keyframes`
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
`;

const float = keyframes`
  0% { transform: translateY(0px); }
  50% { transform: translateY(-15px); }
  100% { transform: translateY(0px); }
`;

const shimmer = keyframes`
  0% { background-position: -1000px 0; }
  100% { background-position: 1000px 0; }
`;

const DonationsContainer = styled.div`
  display: flex;
  flex-direction: column;
  gap: 60px;

  & > section {
    opacity: 0;
    animation: ${fadeIn} 0.8s ease-out forwards;
  }
`;

const DonationsSection = styled.section`
  position: relative;
  padding: 80px 80px 120px;
  background: 
    linear-gradient(135deg, rgba(230, 242, 230, 0.9), rgba(220, 240, 220, 0.85)),
    url(${patternBg}) repeat center center;
  background-size: 200px 200px;
  overflow: hidden;

  &::before {
    content: '';
    position: absolute;
    top: -50px;
    right: -50px;
    width: 200px;
    height: 200px;
    border-radius: 50%;
    background: rgba(34, 139, 34, 0.1);
    z-index: 1;
  }

  &::after {
    content: '';
    position: absolute;
    bottom: -30px;
    left: 15%;
    width: 120px;
    height: 120px;
    border-radius: 50%;
    background: rgba(34, 139, 34, 0.08);
    z-index: 1;
  }
`;

const SectionTitle = styled.h2`
  font-size: 40px;
  font-weight: 700;
  color: #1a7a1a;
  margin-bottom: 50px;
  position: relative;
  text-align: center;
  z-index: 2;

  &::after {
    content: '';
    position: absolute;
    bottom: -12px;
    left: 50%;
    transform: translateX(-50%);
    width: 80px;
    height: 4px;
    background: linear-gradient(90deg, #228b22, #56ab2f);
    border-radius: 2px;
  }
`;

const TopControls = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 20px;
  margin-bottom: 40px;
  flex-wrap: wrap;
  z-index: 2;
`;

const AddRequestButton = styled(Link)`
  display: inline-block;
  padding: 16px 36px;
  font-size: 18px;
  font-weight: 600;
  background: linear-gradient(135deg, #228b22, #56ab2f);
  color: white;
  border-radius: 30px;
  text-decoration: none;
  transition: all 0.3s ease;
  box-shadow: 0 6px 15px rgba(34, 139, 34, 0.2);
  position: relative;
  overflow: hidden;
  animation: ${float} 6s ease-in-out infinite;

  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(34, 139, 34, 0.3);
  }

  &::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.3) 50%, rgba(255, 255, 255, 0) 100%);
    transform: rotate(30deg);
    animation: ${shimmer} 3s infinite;
    pointer-events: none;
  }
`;

const SearchContainer = styled.div`
  display: flex;
  align-items: center;
  background: white;
  padding: 12px 20px;
  border-radius: 30px;
  box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
  width: 320px;
  transition: all 0.3s ease;
  z-index: 2;

  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
  }
`;

const SearchIcon = styled(FaSearch)`
  color: #3a5a3a;
  margin-right: 10px;
`;

const SearchInput = styled.input`
  border: none;
  outline: none;
  font-size: 16px;
  width: 100%;
  background: transparent;
  color: #3a5a3a;
`;

const Controls = styled.div`
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 20px;
  margin-bottom: 40px;
  z-index: 2;
`;

const FilterIcon = styled(FaFilter)`
  margin-right: 8px;
  color: #3a5a3a;
`;

const Select = styled.select`
  padding: 12px 20px;
  font-size: 16px;
  border-radius: 30px;
  border: none;
  box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  cursor: pointer;
  background: white;
  color: #3a5a3a;
  font-weight: 600;

  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(34, 139, 34, 0.2);
  }
`;

const ContentList = styled.div`
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 30px;
  z-index: 2;

  & > * {
    flex: 1 1 calc(33.333% - 20px); /* 3 cards per row, accounting for gap */
    max-width: calc(33.333% - 20px);
    box-sizing: border-box;
  }

  @media (max-width: 1024px) {
    & > * {
      flex: 1 1 calc(50% - 15px); /* 2 cards per row */
      max-width: calc(50% - 15px);
    }
  }

  @media (max-width: 768px) {
    & > * {
      flex: 1 1 100%; /* 1 card per row */
      max-width: 100%;
    }
  }
`;

const LoadingMessage = styled.div`
  font-size: 18px;
  color: #3a5a3a;
  z-index: 2;
`;

const NoDonations = styled.p`
  font-size: 18px;
  color: #3a5a3a;
  z-index: 2;
`;

const PaginationControls = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 40px;
  gap: 15px;
  z-index: 2;

  button {
    padding: 12px 24px;
    font-size: 16px;
    background: linear-gradient(135deg, #228b22, #56ab2f);
    color: white;
    border: none;
    border-radius: 30px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 6px 15px rgba(34, 139, 34, 0.2);

    &:hover {
      transform: translateY(-3px);
      box-shadow: 0 10px 20px rgba(34, 139, 34, 0.3);
    }

    &:disabled {
      background: #ccc;
      box-shadow: none;
      cursor: not-allowed;
      transform: none;
    }
  }

  span {
    font-size: 16px;
    color: #3a5a3a;
  }
`;

export default function MyDonationsList() {
  const [donations, setDonations] = useState([]);
  const [filteredDonations, setFilteredDonations] = useState([]);
  const [loading, setLoading] = useState(true);
  const { user: authUser } = useAuth();
  const user = JSON.parse(localStorage.getItem('user'));
  const userid = user ? (user._id || user.id) : null;
  const [searchQuery, setSearchQuery] = useState("");
  const [sortOption, setSortOption] = useState("date");
  const [statusFilter, setStatusFilter] = useState("all");
  const [categoryFilter, setCategoryFilter] = useState("all");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(6);

  useEffect(() => {
    const fetchDonations = async () => {
      if (!userid) {
        setLoading(false);
        return;
      }

      try {
        const response = await getDonationByUserId(userid);
        setDonations(response.data);
      } catch (err) {
        console.error(err.response?.data?.message || 'Error fetching donation data');
      } finally {
        setLoading(false);
      }
    };

    fetchDonations();
  }, [userid]);

  useEffect(() => {
    let updatedDonations = [...donations];

    if (searchQuery) {
      updatedDonations = updatedDonations.filter((donation) =>
        donation.title.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    if (statusFilter !== "all") {
      updatedDonations = updatedDonations.filter((donation) => donation.status === statusFilter);
    }

    if (categoryFilter !== "all") {
      updatedDonations = updatedDonations.filter((donation) => donation.category === categoryFilter);
    }

    updatedDonations.sort((a, b) => {
      if (sortOption === "title") {
        return a.title.localeCompare(b.title);
      } else if (sortOption === "status") {
        return a.status.localeCompare(b.status);
      } else {
        return new Date(a.expirationDate) - new Date(b.expirationDate);
      }
    });

    setFilteredDonations(updatedDonations);
    setCurrentPage(1);
  }, [searchQuery, sortOption, statusFilter, categoryFilter, donations]);

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentDonations = filteredDonations.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(filteredDonations.length / itemsPerPage);

  return (
    <>
      <GlobalStyle />
      <Navbar />
      <DonationsContainer>
        <DonationsSection>
          <SectionTitle>My Donations</SectionTitle>
          <TopControls>
            <AddRequestButton to="/AddDonation">
              ✚ Add New Donation
            </AddRequestButton>
            <SearchContainer>
              <SearchIcon />
              <SearchInput
                type="text"
                placeholder="Search donations..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </SearchContainer>
          </TopControls>
          <Controls>
            <Select value={sortOption} onChange={(e) => setSortOption(e.target.value)}>
              <option value="date">📆 Sort by Expiration Date</option>
              <option value="title">🔠 Sort by Title</option>
              <option value="status">🔄 Sort by Status</option>
            </Select>
            <Select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>
              <option value="all">🟢 All Statuses</option>
              <option value="pending">🕒 Pending</option>
              <option value="approved">✅ Accepted</option>
              <option value="rejected">❌ Rejected</option>
            </Select>
            <Select value={categoryFilter} onChange={(e) => setCategoryFilter(e.target.value)}>
              <option value="all">📦 All Categories</option>
              <option value="prepared_meals">🍽️ Prepared Meals</option>
              <option value="packaged_products">🛒 Packaged Products</option>
            </Select>
          </Controls>
          <ContentList>
            {loading ? (
              <LoadingMessage>Loading...</LoadingMessage>
            ) : currentDonations.length > 0 ? (
              currentDonations.map((donationItem) => (
                <Composantdonation key={donationItem._id} donation={donationItem} />
              ))
            ) : (
              <NoDonations>No matching donations found.</NoDonations>
            )}
          </ContentList>
          <PaginationControls>
            <button
              onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
              disabled={currentPage === 1}
            >
              Previous
            </button>
            <span>Page {currentPage} of {totalPages}</span>
            <button
              onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}
              disabled={currentPage === totalPages}
            >
              Next
            </button>
          </PaginationControls>
        </DonationsSection>
      </DonationsContainer>
      <Footer />
    </>
  );
}
</file>

<file path="sustainafood-frontend/src/pages/MyDonationsRequest.jsx">
import React, { useEffect, useState } from 'react';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import { getDonationTransactionsByDonorId, createAndAcceptDonationTransaction, rejectDonationTransaction } from '../api/donationTransactionService';
import imgmouna from '../assets/images/imgmouna.png';
import styled, { createGlobalStyle } from 'styled-components';
import { FaSearch } from 'react-icons/fa';
import { useAlert } from '../contexts/AlertContext';
import { Link , useParams, useNavigate } from 'react-router-dom';

// Global Styles
const GlobalStyle = createGlobalStyle`
  body {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    background: #f0f8f0;
    box-sizing: border-box;
  }
`;

const TransactionContainer = styled.div`
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
`;

const Controls = styled.div`
  display: flex;
  justify-content: flex-end;
  gap: 15px;
  margin: 20px 0;
`;

const Select = styled.select`
  font-size: 16px;
  border-radius: 25px;
  border: 1px solid #ccc;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  transition: 0.3s;
  cursor: pointer;
  background: white;
  color: #333;
  font-weight: bold;
  padding: 10px 10px 10px 3px;
  
  &:hover {
    border-color: #228b22;
    transform: scale(1.05);
  }
`;

const TransactionCard = styled.div`
  background: #f8f9fa;
  border-left: 4px solid #228b22;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 20px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: transform 0.2s ease-in-out;

  &:hover {
    transform: scale(1.02);
  }

  @media (max-width: 768px) {
    padding: 15px;
  }
`;

const ProfileInfo = styled.div`
  display: flex;
  align-items: center;
  gap: 15px;
  margin-bottom: 15px;

  @media (max-width: 768px) {
    flex-direction: column;
    align-items: flex-start;
  }
`;

const ProfileImg = styled.img`
  width: 50px;
  height: 50px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #228b22;
`;

const ProfileText = styled.p`
  margin: 0;
  font-size: 16px;
  font-weight: bold;
  color: #495057;
`;

const TransactionDetails = styled.div`
  margin-bottom: 15px;
`;

const TransactionDetail = styled.p`
  font-size: 14px;
  color: #495057;
  margin: 5px 0;

  strong {
    color: #222;
    font-weight: 600;
  }
`;

const ItemSection = styled.div`
  margin-bottom: 15px;
`;

const ItemsTitle = styled.h4`
  font-size: 16px;
  color: #222;
  margin: 0 0 10px;
`;

const ItemList = styled.ul`
  list-style: none;
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 8px;
  margin-top: 10px;
`;

const Item = styled.li`
  background: #ffffff;
  padding: 10px;
  border-left: 3px solid #228b22;
  border-radius: 5px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  font-size: 14px;

  @media (max-width: 768px) {
    flex-direction: column;
    align-items: flex-start;
  }
`;

const ItemDetails = styled.div`
  display: flex;
  flex-direction: column;
  flex-grow: 1;

  span {
    display: block;
    font-size: 13px;
    color: #333;
  }
`;

const ItemQuantity = styled.span`
  font-size: 14px;
  font-weight: bold;
  color: #d9534f;
  padding: 4px 8px;
  border-radius: 4px;

  @media (max-width: 768px) {
    font-size: 13px;
    padding: 6px;
  }
`;

const ButtonContainer = styled.div`
  display: flex;
  justify-content: space-evenly;
  margin-top: 15px;
`;

const ActionButton = styled.button`
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
  font-weight: bold;
  transition: background 0.3s ease-in-out;

  &.accept-btn {
    background-color: #28a745;
    color: white;

    &:hover {
      background-color: #218838;
    }
  }

  &.reject-btn {
    background-color: #dc3545;
    color: white;

    &:hover {
      background-color: #c82333;
    }
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
`;

const PaginationControls = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  gap: 10px;

  button {
    padding: 10px 20px;
    font-size: 14px;
    background: #228b22;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s;

    &:hover:not(:disabled) {
      background: #56ab2f;
    }

    &:disabled {
      background: #ccc;
      cursor: not-allowed;
    }
  }

  span {
    font-size: 14px;
    color: #333;
  }
`;

const LoadingMessage = styled.div`
  font-size: 18px;
  color: #555;
  text-align: center;
  padding: 40px;
`;

const NoTransactions = styled.p`
  font-size: 18px;
  color: #888;
  text-align: center;
  padding: 20px;
`;

const ErrorContainer = styled.div`
  text-align: center;
  padding: 40px;
`;

const TransactionTitle = styled.h1`
  color: #228b22;
  font-size: 40px;
  margin-bottom: 20px;
  text-align: center;

  p {
    font-size: 24px;
    color: #495057;
    margin: 5px 0 0;
  }
`;

const SearchContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  background: white;
  padding: 8px;
  border-radius: 25px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  width: 320px;
  margin: 0 auto 20px;
  transition: all 0.3s ease-in-out;

  &:hover {
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }
`;

const SearchIcon = styled(FaSearch)`
  color: #555;
  margin-right: 8px;
`;

const SearchInput = styled.input`
  border: none;
  outline: none;
  font-size: 16px;
  width: 100%;
  padding: 8px;
  background: transparent;
`;

const StatusBadge = styled.span`
  display: inline-block;
  padding: 3px 8px;
  border-radius: 12px;
  font-size: 12px;
  font-weight: bold;
  margin-left: 5px;
  
  &.pending {
    background-color: #fff3cd;
    color: #856404;
  }
  
  &.approved {
    background-color: #d4edda;
    color: #155724;
  }
  
  &.rejected {
    background-color: #f8d7da;
    color: #721c24;
  }

  &.fulfilled {
    background-color: #cce5ff;
    color: #004085;
  }

  &.partially_fulfilled {
    background-color: #e2e3e5;
    color: #383d41;
  }
`;

const RejectionModal = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
`;

const ModalContent = styled.div`
  background: white;
  padding: 20px;
  border-radius: 8px;
  width: 400px;
  max-width: 90%;
`;

const ModalTextarea = styled.textarea`
  width: 100%;
  min-height: 100px;
  margin: 10px 0;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
`;

const ModalButtons = styled.div`
  display: flex;
  justify-content: flex-end;
  gap: 10px;
`;

const Spinner = styled.div`
  display: inline-block;
  width: ${props => props.size === 'sm' ? '12px' : '16px'};
  height: ${props => props.size === 'sm' ? '12px' : '16px'};
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: white;
  animation: spin 1s ease-in-out infinite;
  margin-right: 5px;

  @keyframes spin {
    to { transform: rotate(360deg); }
  }
`;

const MyDonationsRequest = () => {
  const { showAlert } = useAlert();
  const { donorId } = useParams();
  const navigate = useNavigate();
  const [transactions, setTransactions] = useState([]);
  const [filteredTransactions, setFilteredTransactions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(3);
  const [filterOption, setFilterOption] = useState('all');
  const [sortOption, setSortOption] = useState('date');
  const [searchQuery, setSearchQuery] = useState('');
  const [processing, setProcessing] = useState({});
  const [rejectionReason, setRejectionReason] = useState('');
  const [currentRejectionId, setCurrentRejectionId] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      const token = localStorage.getItem('token');
      if (!token) {
        showAlert('error', 'Please log in to view transactions');
        navigate('/login');
        return;
      }

      try {
        setLoading(true);
        const transactionResponse = await getDonationTransactionsByDonorId(donorId);
        console.log('Transactions response:', transactionResponse);
        const transactionsArray = Array.isArray(transactionResponse) ? transactionResponse : [];
        setTransactions(transactionsArray);
      } catch (err) {
        console.error('Fetch error:', err.response?.data || err.message);
        let errorMessage = 'Failed to fetch transactions';
        if (err.response) {
          if (err.response.status === 404) {
            errorMessage = 'No transactions found for this donor';
          } else if (err.response.status === 400) {
            errorMessage = 'Invalid donor ID';
          } else {
            errorMessage = err.response.data?.message || err.response.data?.error || err.message;
          }
        }
        setError(errorMessage);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [donorId, navigate, showAlert]);

  useEffect(() => {
    if (transactions.length === 0) return;

    let updatedTransactions = [...transactions];

    // Apply filters
    if (filterOption !== 'all') {
      updatedTransactions = updatedTransactions.filter(t => t.status === filterOption);
    }

    // Apply search
    if (searchQuery) {
      updatedTransactions = updatedTransactions.filter(transaction => {
        const request = transaction.requestNeed;
        const donation = transaction.donation;
        const productMatch = request.requestedProducts?.some(product => 
          product.product?.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
          product.product?.productType?.toLowerCase().includes(searchQuery.toLowerCase())
        );
        const mealMatch = request.requestedMeals?.some(meal => 
          meal.meal?.mealName?.toLowerCase().includes(searchQuery.toLowerCase()) ||
          meal.meal?.mealType?.toLowerCase().includes(searchQuery.toLowerCase())
        );
        const recipientMatch = request.recipient?.name?.toLowerCase().includes(searchQuery.toLowerCase());
        const donationMatch = donation.title?.toLowerCase().includes(searchQuery.toLowerCase());
        return productMatch || mealMatch || recipientMatch || donationMatch;
      });
    }

    // Apply sorting
    updatedTransactions.sort((a, b) => {
      const requestA = a.requestNeed;
      const requestB = b.requestNeed;
      const donationA = a.donation;
      const donationB = b.donation;
      if (sortOption === 'title') {
        return requestA.title.localeCompare(requestB.title);
      } else if (sortOption === 'recipient') {
        const aName = requestA.recipient?.name || '';
        const bName = requestB.recipient?.name || '';
        return aName.localeCompare(bName);
      } else if (sortOption === 'status') {
        return a.status.localeCompare(b.status);
      } else if (sortOption === 'donation') {
        return donationA.title.localeCompare(donationB.title);
      } else {
        return new Date(a.createdAt) - new Date(b.createdAt);
      }
    });

    setFilteredTransactions(updatedTransactions);
    setCurrentPage(1);
  }, [transactions, filterOption, sortOption, searchQuery]);

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentTransactions = filteredTransactions.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(filteredTransactions.length / itemsPerPage);

  const paginate = (pageNumber) => setCurrentPage(pageNumber);





 

  if (loading) return <LoadingMessage>Loading...</LoadingMessage>;

  if (error) return (
    <>
      <Navbar />
      <ErrorContainer>Error: {error}</ErrorContainer>
      <Footer />
    </>
  );

  if (transactions.length === 0) return (
    <>
      <Navbar />
      <ErrorContainer>No transactions found for this donor</ErrorContainer>
      <Footer />
    </>
  );

  return (
    <>
      <GlobalStyle />
      <Navbar />
      <TransactionContainer>
        <TransactionTitle>
          My Donation Requests
          <p>All transactions for your donations</p>
        </TransactionTitle>

        <SearchContainer>
          <SearchIcon />
          <SearchInput
            type="text"
            placeholder="Search by recipient, product, meal, or donation..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </SearchContainer>

        <Controls>
          <Select
            value={filterOption}
            onChange={(e) => setFilterOption(e.target.value)}
          >
            <option value="all">All Statuses</option>
            <option value="pending">Pending</option>
            <option value="approved">Approved</option>
            <option value="rejected">Rejected</option>
            <option value="fulfilled">Fulfilled</option>
            <option value="partially_fulfilled">Partially Fulfilled</option>
          </Select>

          <Select
            value={sortOption}
            onChange={(e) => setSortOption(e.target.value)}
          >
            <option value="date">Sort by Date</option>
            <option value="title">Sort by Request Title</option>
            <option value="recipient">Sort by Recipient</option>
            <option value="status">Sort by Status</option>
            <option value="donation">Sort by Donation Title</option>
          </Select>
        </Controls>

        {currentTransactions.length === 0 ? (
          <NoTransactions>No transactions match your criteria.</NoTransactions>
        ) : (
          currentTransactions.map((transaction) => (
            
            <TransactionCard key={transaction._id}>
              <ProfileInfo>
              <Link  style={{color:'black' , textDecoration: 'none'}} to={`/ViewProfile/${transaction.requestNeed.recipient?._id}`}>

                <ProfileImg
                  src={transaction.requestNeed.recipient?.photo ? `http://localhost:3000/${transaction.requestNeed.recipient.photo}` : imgmouna}
                  alt="Recipient"
                /></Link>
                <ProfileText>
                <Link  style={{color:'black' , textDecoration: 'none'}} to={`/ViewProfile/${transaction.requestNeed.recipient?._id}`}>

                  {transaction.requestNeed.recipient?.name || 'Unknown Recipient'}
                  </Link>
                  <StatusBadge className={transaction.status.toLowerCase()}>
                    {transaction.status.replace('_', ' ')}
                  </StatusBadge>
                </ProfileText>
              </ProfileInfo>

              <TransactionDetails>
                <TransactionDetail>
                  <strong>Donation Title:</strong> {transaction.donation.title}
                </TransactionDetail>
                <TransactionDetail>
                  <strong>Request Title:</strong> {transaction.requestNeed.title}
                </TransactionDetail>
                <TransactionDetail>
                  <strong>Created At:</strong>{' '}
                  {new Date(transaction.createdAt).toLocaleDateString()}
                </TransactionDetail>
                {transaction.rejectionReason && (
                  <TransactionDetail>
                    <strong>Rejection Reason:</strong> {transaction.rejectionReason}
                  </TransactionDetail>
                )}
              </TransactionDetails>

              {transaction.requestNeed.requestedProducts?.length > 0 && (
                <ItemSection>
                  <ItemsTitle>Requested Products</ItemsTitle>
                  <ItemList>
                    {transaction.requestNeed.requestedProducts.map((item, index) => (
                      <Item key={index}>
                        <ItemDetails>
                          <span>
                            {item.product?.name || 'Unknown Product'} (
                            {item.product?.productType || 'N/A'})
                          </span>
                        </ItemDetails>
                        <ItemQuantity>{item.quantity} units</ItemQuantity>
                      </Item>
                    ))}
                  </ItemList>
                </ItemSection>
              )}

              {transaction.requestNeed.requestedMeals?.length > 0 && (
                <ItemSection>
                  <ItemsTitle>Requested Meals</ItemsTitle>
                  <ItemList>
                    {transaction.requestNeed.requestedMeals.map((item, index) => (
                      <Item key={index}>
                        <ItemDetails>
                          <span>
                            {item.meal?.mealName || 'Unknown Meal'} (
                            {item.meal?.mealType || 'N/A'})
                          </span>
                        </ItemDetails>
                        <ItemQuantity>{item.quantity} units</ItemQuantity>
                      </Item>
                    ))}
                  </ItemList>
                </ItemSection>
              )}

              {transaction.allocatedProducts?.length > 0 && (
                <ItemSection>
                  <ItemsTitle>Allocated Products</ItemsTitle>
                  <ItemList>
                    {transaction.allocatedProducts.map((item, index) => (
                      <Item key={index}>
                        <ItemDetails>
                          <span>
                            {item.product?.name || 'Unknown Product'} (
                            {item.product?.productType || 'N/A'})
                          </span>
                        </ItemDetails>
                        <ItemQuantity>{item.quantity} units</ItemQuantity>
                      </Item>
                    ))}
                  </ItemList>
                </ItemSection>
              )}

              {transaction.allocatedMeals?.length > 0 && (
                <ItemSection>
                  <ItemsTitle>Allocated Meals</ItemsTitle>
                  <ItemList>
                    {transaction.allocatedMeals.map((item, index) => (
                      <Item key={index}>
                        <ItemDetails>
                          <span>
                            {item.meal?.mealName || 'Unknown Meal'} (
                            {item.meal?.mealType || 'N/A'})
                          </span>
                        </ItemDetails>
                        <ItemQuantity>{item.quantity} units</ItemQuantity>
                      </Item>
                    ))}
                  </ItemList>
                </ItemSection>
              )}

            
            </TransactionCard>
          ))
        )}

        <PaginationControls>
          <button
            onClick={() => paginate(currentPage - 1)}
            disabled={currentPage === 1}
          >
            Previous
          </button>
          <span>
            Page {currentPage} of {totalPages}
          </span>
          <button
            onClick={() => paginate(currentPage + 1)}
            disabled={currentPage === totalPages}
          >
            Next
          </button>
        </PaginationControls>
      </TransactionContainer>

      {currentRejectionId && (
        <RejectionModal>
          <ModalContent>
            <h3>Reject Transaction</h3>
            <ModalTextarea
              placeholder="Enter reason for rejection..."
              value={rejectionReason}
              onChange={(e) => setRejectionReason(e.target.value)}
            />
            <ModalButtons>
              <ActionButton
                onClick={() => setCurrentRejectionId(null)}
                style={{ background: '#6c757d' }}
              >
                Cancel
              </ActionButton>
              <ActionButton
                className="reject-btn"
                onClick={() => handleRejectTransaction(currentRejectionId)}
                disabled={processing[currentRejectionId]}
              >
                {processing[currentRejectionId] === 'rejecting' && (
                  <Spinner size="sm" />
                )}
                Confirm
              </ActionButton>
            </ModalButtons>
          </ModalContent>
        </RejectionModal>
      )}

      <Footer />
    </>
  );
};

export default MyDonationsRequest;
</file>

<file path="sustainafood-frontend/src/pages/MyRequest.jsx">
"use client"

import React, { useEffect, useState } from 'react';
import { getRequestsByRecipientId } from "../api/requestNeedsService";
import { useAuth } from "../contexts/AuthContext";
import Composantrequest from "../components/Composantrequest";
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import styled, { createGlobalStyle, keyframes } from 'styled-components';
import { FaSearch, FaFilter } from "react-icons/fa";
import { Link } from 'react-router-dom';

// Replace with the actual path to your background pattern image
import patternBg from "../assets/images/bg.png";

const GlobalStyle = createGlobalStyle`
  body {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    background: #f0f8f0;
    box-sizing: border-box;
    overflow-x: hidden;
  }
`;

const fadeIn = keyframes`
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
`;

const float = keyframes`
  0% { transform: translateY(0px); }
  50% { transform: translateY(-15px); }
  100% { transform: translateY(0px); }
`;

const shimmer = keyframes`
  0% { background-position: -1000px 0; }
  100% { background-position: 1000px 0; }
`;

const RequestsContainer = styled.div`
  display: flex;
  flex-direction: column;
  gap: 60px;

  & > section {
    opacity: 0;
    animation: ${fadeIn} 0.8s ease-out forwards;
  }
`;

const RequestsSection = styled.section`
  position: relative;
  padding: 80px 80px 120px;
  background: 
    linear-gradient(135deg, rgba(230, 242, 230, 0.9), rgba(220, 240, 220, 0.85)),
    url(${patternBg}) repeat center center;
  background-size: 200px 200px;
  overflow: hidden;

  &::before {
    content: '';
    position: absolute;
    top: -50px;
    right: -50px;
    width: 200px;
    height: 200px;
    border-radius: 50%;
    background: rgba(34, 139, 34, 0.1);
    z-index: 1;
  }

  &::after {
    content: '';
    position: absolute;
    bottom: -30px;
    left: 15%;
    width: 120px;
    height: 120px;
    border-radius: 50%;
    background: rgba(34, 139, 34, 0.08);
    z-index: 1;
  }
`;

const SectionTitle = styled.h2`
  font-size: 40px;
  font-weight: 700;
  color: #1a7a1a;
  margin-bottom: 50px;
  position: relative;
  text-align: center;
  z-index: 2;

  &::after {
    content: '';
    position: absolute;
    bottom: -12px;
    left: 50%;
    transform: translateX(-50%);
    width: 80px;
    height: 4px;
    background: linear-gradient(90deg, #228b22, #56ab2f);
    border-radius: 2px;
  }
`;

const TopControls = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 20px;
  margin-bottom: 40px;
  flex-wrap: wrap;
  z-index: 2;
`;

const AddRequestButton = styled(Link)`
  display: inline-block;
  padding: 16px 36px;
  font-size: 18px;
  font-weight: 600;
  background: linear-gradient(135deg, #228b22, #56ab2f);
  color: white;
  border-radius: 30px;
  text-decoration: none;
  transition: all 0.3s ease;
  box-shadow: 0 6px 15px rgba(34, 139, 34, 0.2);
  position: relative;
  overflow: hidden;
  animation: ${float} 6s ease-in-out infinite;

  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(34, 139, 34, 0.3);
  }

  &::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.3) 50%, rgba(255, 255, 255, 0) 100%);
    transform: rotate(30deg);
    animation: ${shimmer} 3s infinite;
    pointer-events: none;
  }
`;

const SearchContainer = styled.div`
  display: flex;
  align-items: center;
  background: white;
  padding: 12px 20px;
  border-radius: 30px;
  box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
  width: 320px;
  transition: all 0.3s ease;
  z-index: 2;

  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
  }
`;

const SearchIcon = styled(FaSearch)`
  color: #3a5a3a;
  margin-right: 10px;
`;

const SearchInput = styled.input`
  border: none;
  outline: none;
  font-size: 16px;
  width: 100%;
  background: transparent;
  color: #3a5a3a;
`;

const Controls = styled.div`
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 20px;
  margin-bottom: 40px;
  z-index: 2;
`;

const FilterIcon = styled(FaFilter)`
  margin-right: 8px;
  color: #3a5a3a;
`;

const Select = styled.select`
  padding: 12px 20px;
  font-size: 16px;
  border-radius: 30px;
  border: none;
  box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  cursor: pointer;
  background: white;
  color: #3a5a3a;
  font-weight: 600;

  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(34, 139, 34, 0.2);
  }
`;

const ContentList = styled.div`
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 30px;
  z-index: 2;

  & > * {
    flex: 0 0 calc(33.333% - 20px); /* Fixed 3 cards per row */
    max-width: calc(33.333% - 20px);
    box-sizing: border-box;
  }
`;

const LoadingMessage = styled.div`
  font-size: 18px;
  color: #3a5a3a;
  z-index: 2;
`;

const NoRequests = styled.p`
  font-size: 18px;
  color: #3a5a3a;
  z-index: 2;
`;

const PaginationControls = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 40px;
  gap: 15px;
  z-index: 2;

  button {
    padding: 12px 24px;
    font-size: 16px;
    background: linear-gradient(135deg, #228b22, #56ab2f);
    color: white;
    border: none;
    border-radius: 30px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 6px 15px rgba(34, 139, 34, 0.2);

    &:hover {
      transform: translateY(-3px);
      box-shadow: 0 10px 20px rgba(34, 139, 34, 0.3);
    }

    &:disabled {
      background: #ccc;
      box-shadow: none;
      cursor: not-allowed;
      transform: none;
    }
  }

  span {
    font-size: 16px;
    color: #3a5a3a;
  }
`;

export default function MyRequest() {
  const [requests, setRequests] = useState([]);
  const [filteredRequests, setFilteredRequests] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const { user: authUser } = useAuth();

  const [searchQuery, setSearchQuery] = useState("");
  const [sortOption, setSortOption] = useState("date");
  const [statusFilter, setStatusFilter] = useState("all");
  const [categoryFilter, setCategoryFilter] = useState("all");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(6);

  useEffect(() => {
    console.log("Current authUser:", authUser);
    console.log("LocalStorage user:", localStorage.getItem("user"));
    console.log("LocalStorage token:", localStorage.getItem("token"));
  }, []);

  useEffect(() => {
    const fetchRequests = async () => {
      const userId = authUser?._id || authUser?.id || authUser?.user?._id;
      
      if (!userId) {
        console.log("No user ID found in authUser:", authUser);
        setError("User not properly authenticated");
        setLoading(false);
        return;
      }

      try {
        setLoading(true);
        const response = await getRequestsByRecipientId(userId);
        setRequests(response.data);
        setFilteredRequests(response.data);
      } catch (error) {
        setError("Failed to load requests");
      } finally {
        setLoading(false);
      }
    };

    fetchRequests();
  }, [authUser]);

  useEffect(() => {
    let updatedRequests = [...requests];

    if (searchQuery) {
      updatedRequests = updatedRequests.filter((request) =>
        request.title.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    if (statusFilter !== "all") {
      updatedRequests = updatedRequests.filter((request) => request.status === statusFilter);
    }

    if (categoryFilter !== "all") {
      updatedRequests = updatedRequests.filter((request) => request.category === categoryFilter);
    }

    updatedRequests.sort((a, b) => {
      if (sortOption === "title") {
        return a.title.localeCompare(b.title);
      } else if (sortOption === "status") {
        return a.status.localeCompare(b.title);
      } else {
        return new Date(a.expirationDate) - new Date(b.expirationDate);
      }
    });

    setFilteredRequests(updatedRequests);
    setCurrentPage(1);
  }, [searchQuery, sortOption, statusFilter, categoryFilter, requests]);

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentRequests = filteredRequests.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(filteredRequests.length / itemsPerPage);

  return (
    <>
      <GlobalStyle />
      <Navbar />
      <RequestsContainer>
        <RequestsSection>
          <SectionTitle>My Requests</SectionTitle>
          {error && <div style={{ color: 'red', textAlign: 'center', zIndex: 2 }}>{error}</div>}
          <TopControls>
            <AddRequestButton to="/AddDonation">
              ✚ Add New Request
            </AddRequestButton>
            <SearchContainer>
              <SearchIcon />
              <SearchInput
                type="text"
                placeholder="Search requests..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </SearchContainer>
          </TopControls>
          <Controls>
            <Select value={sortOption} onChange={(e) => setSortOption(e.target.value)}>
              <option value="date">📆 Sort by Expiration Date</option>
              <option value="title">🔠 Sort by Title</option>
              <option value="status">🔄 Sort by Status</option>
            </Select>
            <Select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>
              <option value="all">🟢 All Statuses</option>
              <option value="pending">🕒 Pending</option>
              <option value="approved">✅ Accepted</option>
              <option value="rejected">❌ Rejected</option>
            </Select>
            <Select value={categoryFilter} onChange={(e) => setCategoryFilter(e.target.value)}>
              <option value="all">📦 All Categories</option>
              <option value="prepared_meals">🍽️ Prepared Meals</option>
              <option value="packaged_products">🛒 Packaged Products</option>
            </Select>
          </Controls>
          <ContentList>
            {loading ? (
              <LoadingMessage>Loading your requests...</LoadingMessage>
            ) : currentRequests.length > 0 ? (
              currentRequests.map((requestItem) => (
                <Composantrequest key={requestItem._id} request={requestItem} />
              ))
            ) : (
              <NoRequests>No requests found. Create your first request!</NoRequests>
            )}
          </ContentList>
          {filteredRequests.length > itemsPerPage && (
            <PaginationControls>
              <button
                onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
                disabled={currentPage === 1}
              >
                Previous
              </button>
              <span>Page {currentPage} of {totalPages}</span>
              <button
                onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}
                disabled={currentPage === totalPages}
              >
                Next
              </button>
            </PaginationControls>
          )}
        </RequestsSection>
      </RequestsContainer>
      <Footer />
    </>
  );
}
</file>

<file path="sustainafood-frontend/src/pages/MyRequestDonation.jsx">
import React, { useEffect, useState } from 'react';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';

import { getTransactionsByRecipientId, createAndAcceptDonationTransaction, rejectDonationTransaction } from '../api/donationTransactionService';
import imgmouna from '../assets/images/imgmouna.png';
import styled, { createGlobalStyle } from 'styled-components';
import { FaSearch } from 'react-icons/fa';
import { useAlert } from '../contexts/AlertContext';
import { useParams, useNavigate,Link } from 'react-router-dom';

// Global Styles
const GlobalStyle = createGlobalStyle`
  body {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    background: #f0f8f0;
    box-sizing: border-box;
  }
`;

const TransactionContainer = styled.div`
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
`;

const Controls = styled.div`
  display: flex;
  justify-content: flex-end;
  gap: 15px;
  margin: 20px 0;
`;

const Select = styled.select`
  font-size: 16px;
  border-radius: 25px;
  border: 1px solid #ccc;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  transition: 0.3s;
  cursor: pointer;
  background: white;
  color: #333;
  font-weight: bold;
  padding: 10px 10px 10px 3px;
  
  &:hover {
    border-color: #228b22;
    transform: scale(1.05);
  }
`;

const TransactionCard = styled.div`
  background: #f8f9fa;
  border-left: 4px solid #228b22;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 20px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: transform 0.2s ease-in-out;

  &:hover {
    transform: scale(1.02);
  }

  @media (max-width: 768px) {
    padding: 15px;
  }
`;

const ProfileInfo = styled.div`
  display: flex;
  align-items: center;
  gap: 15px;
  margin-bottom: 15px;

  @media (max-width: 768px) {
    flex-direction: column;
    align-items: flex-start;
  }
`;

const ProfileImg = styled.img`
  width: 50px;
  height: 50px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #228b22;
`;

const ProfileText = styled.p`
  margin: 0;
  font-size: 16px;
  font-weight: bold;
  color: #495057;
`;

const TransactionDetails = styled.div`
  margin-bottom: 15px;
`;

const TransactionDetail = styled.p`
  font-size: 14px;
  color: #495057;
  margin: 5px 0;

  strong {
    color: #222;
    font-weight: 600;
  }
`;

const ItemSection = styled.div`
  margin-bottom: 15px;
`;

const ItemsTitle = styled.h4`
  font-size: 16px;
  color: #222;
  margin: 0 0 10px;
`;

const ItemList = styled.ul`
  list-style: none;
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 8px;
  margin-top: 10px;
`;

const Item = styled.li`
  background: #ffffff;
  padding: 10px;
  border-left: 3px solid #228b22;
  border-radius: 5px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  font-size: 14px;

  @media (max-width: 768px) {
    flex-direction: column;
    align-items: flex-start;
  }
`;

const ItemDetails = styled.div`
  display: flex;
  flex-direction: column;
  flex-grow: 1;

  span {
    display: block;
    font-size: 13px;
    color: #333;
  }
`;

const ItemQuantity = styled.span`
  font-size: 14px;
  font-weight: bold;
  color: #d9534f;
  padding: 4px 8px;
  border-radius: 4px;

  @media (max-width: 768px) {
    font-size: 13px;
    padding: 6px;
  }
`;

const ButtonContainer = styled.div`
  display: flex;
  justify-content: space-evenly;
  margin-top: 15px;
`;

const ActionButton = styled.button`
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
  font-weight: bold;
  transition: background 0.3s ease-in-out;

  &.accept-btn {
    background-color: #28a745;
    color: white;

    &:hover {
      background-color: #218838;
    }
  }

  &.reject-btn {
    background-color: #dc3545;
    color: white;

    &:hover {
      background-color: #c82333;
    }
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
`;

const PaginationControls = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  gap: 10px;

  button {
    padding: 10px 20px;
    font-size: 14px;
    background: #228b22;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s;

    &:hover:not(:disabled) {
      background: #56ab2f;
    }

    &:disabled {
      background: #ccc;
      cursor: not-allowed;
    }
  }

  span {
    font-size: 14px;
    color: #333;
  }
`;

const LoadingMessage = styled.div`
  font-size: 18px;
  color: #555;
  text-align: center;
  padding: 40px;
`;

const NoTransactions = styled.p`
  font-size: 18px;
  color: #888;
  text-align: center;
  padding: 20px;
`;

const ErrorContainer = styled.div`
  text-align: center;
  padding: 40px;
`;

const TransactionTitle = styled.h1`
  color: #228b22;
  font-size: 40px;
  margin-bottom: 20px;
  text-align: center;

  p {
    font-size: 24px;
    color: #495057;
    margin: 5px 0 0;
  }
`;

const SearchContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  background: white;
  padding: 8px;
  border-radius: 25px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  width: 320px;
  margin: 0 auto 20px;
  transition: all 0.3s ease-in-out;

  &:hover {
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }
`;

const SearchIcon = styled(FaSearch)`
  color: #555;
  margin-right: 8px;
`;

const SearchInput = styled.input`
  border: none;
  outline: none;
  font-size: 16px;
  width: 100%;
  padding: 8px;
  background: transparent;
`;

const StatusBadge = styled.span`
  display: inline-block;
  padding: 3px 8px;
  border-radius: 12px;
  font-size: 12px;
  font-weight: bold;
  margin-left: 5px;
  
  &.pending {
    background-color: #fff3cd;
    color: #856404;
  }
  
  &.approved {
    background-color: #d4edda;
    color: #155724;
  }
  
  &.rejected {
    background-color: #f8d7da;
    color: #721c24;
  }

  &.fulfilled {
    background-color: #cce5ff;
    color: #004085;
  }

  &.partially_fulfilled {
    background-color: #e2e3e5;
    color: #383d41;
  }
`;

const RejectionModal = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
`;

const ModalContent = styled.div`
  background: white;
  padding: 20px;
  border-radius: 8px;
  width: 400px;
  max-width: 90%;
`;

const ModalTextarea = styled.textarea`
  width: 100%;
  min-height: 100px;
  margin: 10px 0;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
`;

const ModalButtons = styled.div`
  display: flex;
  justify-content: flex-end;
  gap: 10px;
`;

const Spinner = styled.div`
  display: inline-block;
  width: ${props => props.size === 'sm' ? '12px' : '16px'};
  height: ${props => props.size === 'sm' ? '12px' : '16px'};
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: white;
  animation: spin 1s ease-in-out infinite;
  margin-right: 5px;

  @keyframes spin {
    to { transform: rotate(360deg); }
  }
`;

const MyRequestDonation = () => {
  const { showAlert } = useAlert();
  const { recipientId } = useParams();
  const navigate = useNavigate();
  const [transactions, setTransactions] = useState([]);
  const [filteredTransactions, setFilteredTransactions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(3);
  const [filterOption, setFilterOption] = useState('all');
  const [sortOption, setSortOption] = useState('date');
  const [searchQuery, setSearchQuery] = useState('');
  const [processing, setProcessing] = useState({});
  const [rejectionReason, setRejectionReason] = useState('');
  const [currentRejectionId, setCurrentRejectionId] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      const token = localStorage.getItem('token');
      if (!token) {
        showAlert('error', 'Please log in to view transactions');
        navigate('/login');
        return;
      }

      try {
        setLoading(true);
        const transactionResponse = await getTransactionsByRecipientId(recipientId);
        console.log('Transactions response:', transactionResponse);
        const transactionsArray = Array.isArray(transactionResponse) ? transactionResponse : [];
        setTransactions(transactionsArray);
      } catch (err) {
        console.error('Fetch error:', err.response?.data || err.message);
        let errorMessage = 'Failed to fetch transactions';
        if (err.response) {
          if (err.response.status === 404) {
            errorMessage = 'No transactions found for this recipient';
          } else if (err.response.status === 400) {
            errorMessage = 'Invalid recipient ID';
          } else {
            errorMessage = err.response.data?.message || err.response.data?.error || err.message;
          }
        }
        setError(errorMessage);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [recipientId, navigate, showAlert]);

  useEffect(() => {
    if (transactions.length === 0) return;

    let updatedTransactions = [...transactions];

    // Apply filters
    if (filterOption !== 'all') {
      updatedTransactions = updatedTransactions.filter(t => t.status === filterOption);
    }

    // Apply search
    if (searchQuery) {
      updatedTransactions = updatedTransactions.filter(transaction => {
        const request = transaction.requestNeed;
        const donation = transaction.donation;
        const productMatch = request.requestedProducts?.some(product => 
          product.product?.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
          product.product?.productType?.toLowerCase().includes(searchQuery.toLowerCase())
        );
        const mealMatch = request.requestedMeals?.some(meal => 
          meal.meal?.mealName?.toLowerCase().includes(searchQuery.toLowerCase()) ||
          meal.meal?.mealType?.toLowerCase().includes(searchQuery.toLowerCase())
        );
        const donorMatch = transaction.donor?.name?.toLowerCase().includes(searchQuery.toLowerCase());
        const donationMatch = donation.title?.toLowerCase().includes(searchQuery.toLowerCase());
        return productMatch || mealMatch || donorMatch || donationMatch;
      });
    }

    // Apply sorting
    updatedTransactions.sort((a, b) => {
      const requestA = a.requestNeed;
      const requestB = b.requestNeed;
      const donationA = a.donation;
      const donationB = b.donation;
      if (sortOption === 'title') {
        return requestA.title.localeCompare(requestB.title);
      } else if (sortOption === 'donor') {
        const aName = a.donor?.name || '';
        const bName = b.donor?.name || '';
        return aName.localeCompare(bName);
      } else if (sortOption === 'status') {
        return a.status.localeCompare(b.status);
      } else if (sortOption === 'donation') {
        return donationA.title.localeCompare(donationB.title);
      } else {
        return new Date(a.createdAt) - new Date(b.createdAt);
      }
    });

    setFilteredTransactions(updatedTransactions);
    setCurrentPage(1);
  }, [transactions, filterOption, sortOption, searchQuery]);

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentTransactions = filteredTransactions.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(filteredTransactions.length / itemsPerPage);

  const paginate = (pageNumber) => setCurrentPage(pageNumber);



  if (loading) return <LoadingMessage>Loading...</LoadingMessage>;

  if (error) return (
    <>
      <Navbar />
      <ErrorContainer>Error: {error}</ErrorContainer>
      <Footer />
    </>
  );

  if (transactions.length === 0) return (
    <>
      <Navbar />
      <ErrorContainer>No transactions found for this recipient</ErrorContainer>
      <Footer />
    </>
  );

  return (
    <>
      <GlobalStyle />
      <Navbar />
      <TransactionContainer>
        <TransactionTitle>
          My Requests Transactions
          <p>All transactions for your requests</p>
        </TransactionTitle>

        <SearchContainer>
          <SearchIcon />
          <SearchInput
            type="text"
            placeholder="Search by donor, product, meal, or donation..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </SearchContainer>

        <Controls>
          <Select
            value={filterOption}
            onChange={(e) => setFilterOption(e.target.value)}
          >
            <option value="all">All Statuses</option>
            <option value="pending">Pending</option>
            <option value="approved">Approved</option>
            <option value="rejected">Rejected</option>
            <option value="fulfilled">Fulfilled</option>
            <option value="partially_fulfilled">Partially Fulfilled</option>
          </Select>

          <Select
            value={sortOption}
            onChange={(e) => setSortOption(e.target.value)}
          >
            <option value="date">Sort by Date</option>
            <option value="title">Sort by Request Title</option>
            <option value="donor">Sort by Donor</option>
            <option value="status">Sort by Status</option>
            <option value="donation">Sort by Donation Title</option>
          </Select>
        </Controls>

        {currentTransactions.length === 0 ? (
          <NoTransactions>No transactions match your criteria.</NoTransactions>
        ) : (
          currentTransactions.map((transaction) => (
            <TransactionCard key={transaction._id}>
              <ProfileInfo>
              <Link  to={`/ViewProfile/${transaction.donor?._id}`}>

                <ProfileImg
                  src={transaction.donor?.photo ? `http://localhost:3000/${transaction.donor.photo}` : imgmouna}
                  alt="Donor"
                  onError={(e) => (e.target.src = imgmouna)}
                />
                </Link>
                <ProfileText>
                <Link  style={{color:'black' , textDecoration: 'none'}} to={`/ViewProfile/${transaction.donor?._id}`}>

                  {transaction.donor?.name || 'Unknown Donor'}</Link>
                  <StatusBadge className={transaction.status.toLowerCase()}>
                    {transaction.status.replace('_', ' ')}
                  </StatusBadge>
                </ProfileText>
              </ProfileInfo>

              <TransactionDetails>
                <TransactionDetail>
                  <strong>Donation Title:</strong> {transaction.donation.title || 'Unknown title'}
                </TransactionDetail>
                <TransactionDetail>
                  <strong>Request Title:</strong> {transaction.requestNeed.title || 'Unknown title'}
                </TransactionDetail>
                <TransactionDetail>
                  <strong>Donor:</strong> {transaction.donor?.name || 'Unknown Donor'}
                </TransactionDetail>
                <TransactionDetail>
                  <strong>Created At:</strong>{' '}
                  {new Date(transaction.createdAt).toLocaleDateString()}
                </TransactionDetail>
                {transaction.rejectionReason && (
                  <TransactionDetail>
                    <strong>Rejection Reason:</strong> {transaction.rejectionReason}
                  </TransactionDetail>
                )}
              </TransactionDetails>

              {transaction.requestNeed.requestedProducts?.length > 0 && (
                <ItemSection>
                  <ItemsTitle>Requested Products</ItemsTitle>
                  <ItemList>
                    {transaction.requestNeed.requestedProducts.map((item, index) => (
                      <Item key={index}>
                        <ItemDetails>
                          <span>
                            {item.product?.name || 'Unknown Product'} (
                            {item.product?.productType || 'N/A'})
                          </span>
                        </ItemDetails>
                        <ItemQuantity>{item.quantity} units</ItemQuantity>
                      </Item>
                    ))}
                  </ItemList>
                </ItemSection>
              )}

              {transaction.requestNeed.requestedMeals?.length > 0 && (
                <ItemSection>
                  <ItemsTitle>Requested Meals</ItemsTitle>
                  <ItemList>
                    {transaction.requestNeed.requestedMeals.map((item, index) => (
                      <Item key={index}>
                        <ItemDetails>
                          <span>
                            {item.meal?.mealName || 'Unknown Meal'} (
                            {item.meal?.mealType || 'N/A'})
                          </span>
                        </ItemDetails>
                        <ItemQuantity>{item.quantity} units</ItemQuantity>
                      </Item>
                    ))}
                  </ItemList>
                </ItemSection>
              )}

              {transaction.allocatedProducts?.length > 0 && (
                <ItemSection>
                  <ItemsTitle>Allocated Products</ItemsTitle>
                  <ItemList>
                    {transaction.allocatedProducts.map((item, index) => (
                      <Item key={index}>
                        <ItemDetails>
                          <span>
                            {item.product?.name || 'Unknown Product'} (
                            {item.product?.productType || 'N/A'})
                          </span>
                        </ItemDetails>
                        <ItemQuantity>{item.quantity} units</ItemQuantity>
                      </Item>
                    ))}
                  </ItemList>
                </ItemSection>
              )}

              {transaction.allocatedMeals?.length > 0 && (
                <ItemSection>
                  <ItemsTitle>Allocated Meals</ItemsTitle>
                  <ItemList>
                    {transaction.allocatedMeals.map((item, index) => (
                      <Item key={index}>
                        <ItemDetails>
                          <span>
                            {item.meal?.mealName || 'Unknown Meal'} (
                            {item.meal?.mealType || 'N/A'})
                          </span>
                        </ItemDetails>
                        <ItemQuantity>{item.quantity} units</ItemQuantity>
                      </Item>
                    ))}
                  </ItemList>
                </ItemSection>
              )}

            
            </TransactionCard>
          ))
        )}

        <PaginationControls>
          <button
            onClick={() => paginate(currentPage - 1)}
            disabled={currentPage === 1}
          >
            Previous
          </button>
          <span>
            Page {currentPage} of {totalPages}
          </span>
          <button
            onClick={() => paginate(currentPage + 1)}
            disabled={currentPage === totalPages}
          >
            Next
          </button>
        </PaginationControls>
      </TransactionContainer>

      {currentRejectionId && (
        <RejectionModal>
          <ModalContent>
            <h3>Reject Transaction</h3>
            <ModalTextarea
              placeholder="Enter reason for rejection..."
              value={rejectionReason}
              onChange={(e) => setRejectionReason(e.target.value)}
            />
            <ModalButtons>
              <ActionButton
                onClick={() => setCurrentRejectionId(null)}
                style={{ background: '#6c757d' }}
              >
                Cancel
              </ActionButton>
              <ActionButton
                className="reject-btn"
                onClick={() => handleRejectTransaction(currentRejectionId)}
                disabled={processing[currentRejectionId]}
              >
                {processing[currentRejectionId] === 'rejecting' && (
                  <Spinner size="sm" />
                )}
                Confirm
              </ActionButton>
            </ModalButtons>
          </ModalContent>
        </RejectionModal>
      )}

      <Footer />
    </>
  );
};

export default MyRequestDonation;
</file>

<file path="sustainafood-frontend/src/pages/Signup.jsx">
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import ReCAPTCHA from "react-google-recaptcha";
import "../assets/styles/log.css";
import logo from "../assets/images/LogoCh.png";
import loginImg from "../assets/images/signupCh.png";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowLeft } from "@fortawesome/free-solid-svg-icons";
import { signupUser } from "../api/userService";
import { FaEye, FaEyeSlash } from "react-icons/fa";
import styled from "styled-components";

const All = styled.div`
  background-color: #fff5f7; /* Rose pâle */
  border: none;
  color: #333;
  padding: 5px 15px;
  margin: 8px 0;
  width: 100%;
  border-radius: 5px;
`;

const StyledWrapper = styled.div`
  .plusButton {
    --plus_sideLength: 2.5rem;
    --plus_topRightTriangleSideLength: 0.9rem;
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    border: 1px solid #ff6f91; /* Rose */
    width: var(--plus_sideLength);
    height: var(--plus_sideLength);
    background-color: #ff6f91; /* Rose */
    overflow: hidden;
  }
  .plusButton::before {
    position: absolute;
    content: "";
    top: 0;
    right: 0;
    width: 0;
    height: 0;
    border-width: 0 var(--plus_topRightTriangleSideLength) var(--plus_topRightTriangleSideLength) 0;
    border-style: solid;
    border-color: transparent #fff transparent transparent;
    transition-timing-function: ease-in-out;
    transition-duration: 0.2s;
  }
  .plusButton:hover {
    cursor: pointer;
    background-color: #e65b7f; /* Rose plus foncé */
  }
  .plusButton:hover::before {
    --plus_topRightTriangleSideLength: calc(var(--plus_sideLength) * 2);
  }
  .plusButton:focus-visible::before {
    --plus_topRightTriangleSideLength: calc(var(--plus_sideLength) * 2);
  }
  .plusButton > .plusIcon {
    fill: #fff;
    width: calc(var(--plus_sideLength) * 0.5);
    height: calc(var(--plus_sideLength) * 0.5);
    z-index: 1;
    transition-timing-function: ease-in-out;
    transition-duration: 0.2s;
  }
  .plusButton:hover > .plusIcon {
    fill: #333;
    transform: rotate(180deg);
  }
  .plusButton:focus-visible > .plusIcon {
    fill: #333;
    transform: rotate(180deg);
  }
`;

const HiddenFileInput = styled.input`
  display: none;
`;

const ImagePreview = styled.img`
  width: 40px;
  height: 40px;
  border-radius: 50%;
  object-fit: cover;
  margin-left: 12px;
  border: 2px solid #ff6f91; /* Rose */
`;

const ErrorMessage = styled.p`
  color: #e65b7f; /* Rose foncé */
  font-size: 12px;
  margin: 5px 0 0 0;
`;

const Signup = () => {
  const [fileName, setFileName] = useState("");
  const [imagePreview, setImagePreview] = useState(null);
  const [profilePhotoFile, setProfilePhotoFile] = useState(null);
  const navigate = useNavigate();
  const [isRightPanelActive, setIsRightPanelActive] = useState(false);

  // Input fields state
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [phone, setPhone] = useState("");
  const [name, setName] = useState("");
  const [address, setAddress] = useState("");
  const [role, setRole] = useState("ong");
  const [error, setError] = useState("");
  const [id_fiscale, setId_fiscale] = useState("");
  const [num_cin, setNum_cin] = useState("");
  const [sexe, setSexe] = useState("male");
  const [age, setAge] = useState("");
  const [taxReference, setTaxReference] = useState("");
  const [vehiculeType, setVehiculeType] = useState("car");
  const [type, setType] = useState("charitable");
  const [licenseNumber, setLicenseNumber] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [captchaValue, setCaptchaValue] = useState(null);

  const isOng = role === "ong";
  const isStudent = role === "student" ;
  const isTransporter = role === "transporter";
  const isDonor = role === "supermarket" || role === "restaurant";
  const isPersonnel = role === "personaldonor";

  // State for errors
  const [errors, setErrors] = useState({
    name: "",
    email: "",
    password: "",
    confirmPassword: "",
    phone: "",
    address: "",
    role: "",
    id_fiscale: "",
    num_cin: "",
    sexe: "",
    age: "",
    taxReference: "",
    vehiculeType: "",
    type: "",
    licenseNumber: "",
  });

  // Handle file selection for profile photo
  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      // Validate file type
      if (!file.type.startsWith("image/")) {
        setError("Please upload an image file (e.g., JPG, PNG).");
        return;
      }
      // Validate file size (e.g., max 5MB)
      if (file.size > 5 * 1024 * 1024) {
        setError("Image size must be less than 5MB.");
        return;
      }
      setFileName(file.name);
      setProfilePhotoFile(file);
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const togglePanel = () => {
    setIsRightPanelActive(!isRightPanelActive);
  };

  const validateFields = () => {
    const newErrors = {};

    if (!name.match(/^[a-zA-Z\s]+$/)) {
      newErrors.name = "Invalid name format";
    }

    if (!email.match(/^\S+@\S+\.\S+$/)) {
      newErrors.email = "Invalid email format";
    }

    if (!password.match(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*\W)[A-Za-z\d\W]+$/)) {
      newErrors.password =
        "Password must include at least one uppercase, one lowercase, one number, and one special character";
    }

    if (password !== confirmPassword) {
      newErrors.confirmPassword = "Passwords do not match";
    }

    if (!phone.match(/^\d{8,15}$/)) {
      newErrors.phone = "Invalid phone number format";
    }

    if (isStudent || isPersonnel && !num_cin.match(/^\d{8}$/)) {
      newErrors.num_cin = "Invalid CIN format (must be 8 digits)";
    }

    if (isOng && !id_fiscale.match(/^TN\d{8}$/)) {
      newErrors.id_fiscale = "Invalid NGO fiscal ID format (must be like TN12345678)";
    }

    if (isDonor && !taxReference.match(/^VAT-\d{8}$/)) {
      newErrors.taxReference = "Invalid Tax Reference format (must be like VAT-12345678)";
    }

    if (isTransporter && !licenseNumber.match(/^\d{8}$/)) {
      newErrors.licenseNumber = "Invalid license number format (must be 8 digits)";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSignup = async (e) => {
    e.preventDefault();
    setError("");

    if (!validateFields()) {
      return;
    }

    if (!captchaValue) {
      setError("Veuillez valider le reCAPTCHA.");
      return;
    }

    // Create a FormData object and append all fields
    const data = new FormData();
    data.append("email", email);
    data.append("password", password);
    data.append("confirmPassword", confirmPassword);
    data.append("phone", phone);
    data.append("name", name);
    data.append("address", address);
    data.append("role", role);
    if (isOng) {
      data.append("id_fiscale", id_fiscale);
      data.append("type", type);
    }
    if (isStudent || isPersonnel) {
      data.append("sexe", sexe);
      data.append("age", age);
      data.append("num_cin", num_cin);
    }
    if (isTransporter) {
      data.append("vehiculeType", vehiculeType);
      data.append("licenseNumber", licenseNumber);
    }
    if (isDonor) {
      data.append("taxReference", taxReference);
    }
    if (profilePhotoFile) {
      data.append("photo", profilePhotoFile);
    }

    try {
      const response = await signupUser(data);
      console.log("Inscription réussie");
      navigate("/login");
    } catch (err) {
      setError(err.response?.data?.error || "Erreur d'inscription.");
    }
  };

  return (
    <div className="aa">
      <div className={`signup-container ${isRightPanelActive ? "right-panel-active" : ""}`} id="container">
        <div className="signup-form-container signup-sign-up-container">
          <form className="signup-form" onSubmit={handleSignup}>
            <h1 className="signup-h1">Sign Up</h1>

            {/* Input Fields */}
            <input
              className="signup-input"
              type="text"
              placeholder="Name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
            />
            {errors.name && <ErrorMessage>{errors.name}</ErrorMessage>}

            <input
              className="signup-input"
              type="email"
              placeholder="Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
            {errors.email && <ErrorMessage>{errors.email}</ErrorMessage>}

              
            <input className="signup-input" type={showPassword ? "text" : "password"} placeholder="Password" value={password} onChange={(e) => setPassword(e.target.value)} required />
            {errors.password && <p className="error-message">{errors.password}</p>}
            <span style={{ marginBottom: "10px" }} className="auth-eye-icon" onClick={() => setShowPassword(!showPassword)}>
              {showPassword ? <FaEyeSlash /> : <FaEye />}
            </span>

            <input className="signup-input" type={showConfirmPassword ? "text" : "password"} placeholder="Confirm Password" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} required />
            {errors.confirmPassword && <p className="error-message">{errors.confirmPassword}</p>}
            <span style={{ marginBottom: "10px" }} className="auth-eye-icon" onClick={() => setShowConfirmPassword(!showConfirmPassword)}>
              {showConfirmPassword ? <FaEyeSlash /> : <FaEye />}
            </span>
            <select
              className="signup-input"
              value={role}
              onChange={(e) => setRole(e.target.value)}
              required
            >
              <option value="ong">ONG</option>
              <option value="restaurant">Restaurant</option>
              <option value="supermarket">Supermarket</option>
              <option value="student">Student</option>
              <option value="transporter">Transporter</option>
              <option value="personaldonor">Personnel Donor</option>
            </select>

            {/* Profile Photo Upload Section */}
            <All>
              <div style={{ display: "flex", alignItems: "center", gap: "10px" }}>
                <HiddenFileInput id="file" type="file" accept="image/*" onChange={handleFileChange} />
                <div>
                  <span>Profile photo</span>
                </div>
                {imagePreview && <ImagePreview src={imagePreview} alt="Profile" />}
                {fileName && <span>📂 {fileName}</span>}
              </div>
              <StyledWrapper>
                <div
                  tabIndex={0}
                  className="plusButton"
                  style={{ marginLeft: "auto", marginTop: "-25px" }}
                  onClick={() => document.getElementById("file").click()}
                >
                  <svg className="plusIcon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 30 30">
                    <g mask="url(#mask0_21_345)">
                      <path d="M13.75 23.75V16.25H6.25V13.75H13.75V6.25H16.25V13.75H23.75V16.25H16.25V23.75H13.75Z" />
                    </g>
                  </svg>
                </div>
              </StyledWrapper>
            </All>

            {isStudent || isPersonnel && (
              <>
                <select
                  className="signup-input"
                  value={sexe}
                  onChange={(e) => setSexe(e.target.value)}
                  required
                >
                  <option value="male">Men</option>
                  <option value="female">Women</option>
                  <option value="other">Other</option>
                </select>
                <input
                  className="signup-input"
                  type="number"
                  placeholder="Age"
                  value={age}
                  onChange={(e) => setAge(e.target.value)}
                  required
                />
                {errors.age && <ErrorMessage>{errors.age}</ErrorMessage>}
                <input
                  className="signup-input"
                  type="text"
                  placeholder="CIN number"
                  value={num_cin}
                  onChange={(e) => setNum_cin(e.target.value)}
                  required
                />
                {errors.num_cin && <ErrorMessage>{errors.num_cin}</ErrorMessage>}
              </>
            )}
            {isOng && (
              <>
                <input
                  className="signup-input"
                  type="text"
                  placeholder="Fiscale ID"
                  value={id_fiscale}
                  onChange={(e) => setId_fiscale(e.target.value)}
                  required
                />
                {errors.id_fiscale && <ErrorMessage>{errors.id_fiscale}</ErrorMessage>}
                <select
                  className="signup-input"
                  value={type}
                  onChange={(e) => setType(e.target.value)}
                  required
                >
                  <option value="advocacy">Advocacy</option>
                  <option value="operational">Operational</option>
                  <option value="charitable">Charitable</option>
                  <option value="development">Development</option>
                  <option value="environmental">Environmental</option>
                  <option value="human_rights">Human Rights</option>
                  <option value="relief">Relief</option>
                  <option value="research">Research</option>
                  <option value="philanthropic">Philanthropic</option>
                  <option value="social_welfare">Social Welfare</option>
                  <option value="cultural">Cultural</option>
                  <option value="faith_based">Faith Based</option>
                </select>
              </>
            )}
            {isTransporter && (
              <>
                <select
                  className="signup-input"
                  value={vehiculeType}
                  onChange={(e) => setVehiculeType(e.target.value)}
                  required
                >
                  <option value="car">Car</option>
                  <option value="motorbike">Motorbike</option>
                  <option value="bicycle">Bicycle</option>
                  <option value="van">Van</option>
                  <option value="truck">Truck</option>
                  <option value="scooter">Scooter</option>
                </select>
                <input
                  className="signup-input"
                  type="text"
                  placeholder="License Number"
                  value={licenseNumber}
                  onChange={(e) => setLicenseNumber(e.target.value)}
                  required
                />
                {errors.licenseNumber && <ErrorMessage>{errors.licenseNumber}</ErrorMessage>}
              </>
            )}
            {isDonor && (
              <>
                <input
                  className="signup-input"
                  type="text"
                  placeholder="Tax Reference"
                  value={taxReference}
                  onChange={(e) => setTaxReference(e.target.value)}
                  required
                />
                {errors.taxReference && <ErrorMessage>{errors.taxReference}</ErrorMessage>}
              </>
            )}
            <input
              className="signup-input"
              type="text"
              placeholder="Address"
              value={address}
              onChange={(e) => setAddress(e.target.value)}
              required
            />
            {errors.address && <ErrorMessage>{errors.address}</ErrorMessage>}
            <input
              className="signup-input"
              type="text"
              placeholder="Phone Number"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
              required
            />
            {errors.phone && <ErrorMessage>{errors.phone}</ErrorMessage>}

            {/* Google reCAPTCHA */}
            <ReCAPTCHA
              sitekey="6LeXoN8qAAAAAHnZcOwetBZ9TfyOl8K_wg7j97hq"
              onChange={(value) => setCaptchaValue(value)}
            />

            {/* Display Errors */}
            {error && <ErrorMessage>{error}</ErrorMessage>}

            <button type="submit" className="signup-button">Sign Up</button>

            <div>
              <span style={{ fontSize: "14px", marginLeft: "-230px" }}>
                Already have an account? <a href="/login">Sign In</a>
              </span>
            </div>
          </form>
        </div>

        <div className="signup-form-container signup-sign-in-container">
          <form className="signup-form" action="#">
            <img src={logo} alt="Logo" className="signup-logo" />
            <p className="signup-p">
              Be a part of a movement to make the world a better place by redistributing surplus food to those who need it.
            </p>
          </form>
        </div>

        <div className="signup-overlay-container">
          <div className="signup-overlay">
            <div className="signup-overlay-panel signup-overlay-left">
              <img src={loginImg} alt="Logo" className="signup-logo" />
              <button className="signbtn" onClick={togglePanel}>
                <FontAwesomeIcon icon={faArrowLeft} />
              </button>
            </div>
            <div className="signup-overlay-panel signup-overlay-right">
              <h1 className="signup-h1">Join Us Today!</h1>
              <p className="signup-p">Sign up to help us reduce food waste and support your community!</p>
              <button className="signbtn" onClick={togglePanel}>Sign Up</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Signup;
</file>

<file path="sustinia-ai/.gitignore">
# Virtual environment
venv/

# Compiled Python files
__pycache__/
*.pyc
</file>

<file path="sustinia-ai/class_indices.json">
{"apple_pie": 0, "baby_back_ribs": 1, "baklava": 2, "beef_carpaccio": 3, "beef_tartare": 4, "beet_salad": 5, "beignets": 6, "bibimbap": 7, "bread_pudding": 8, "breakfast_burrito": 9, "bruschetta": 10, "caesar_salad": 11, "cannoli": 12, "caprese_salad": 13, "carrot_cake": 14, "ceviche": 15, "cheese_plate": 16, "cheesecake": 17, "chicken_curry": 18, "chicken_quesadilla": 19, "chicken_wings": 20, "chocolate_cake": 21, "chocolate_mousse": 22, "churros": 23, "clam_chowder": 24, "club_sandwich": 25, "crab_cakes": 26, "creme_brulee": 27, "croque_madame": 28, "cup_cakes": 29, "deviled_eggs": 30, "donuts": 31, "dumplings": 32, "edamame": 33, "eggs_benedict": 34, "escargots": 35, "falafel": 36, "filet_mignon": 37, "fish_and_chips": 38, "foie_gras": 39, "french_fries": 40, "french_onion_soup": 41, "french_toast": 42, "fried_calamari": 43, "fried_rice": 44, "frozen_yogurt": 45, "garlic_bread": 46, "gnocchi": 47, "greek_salad": 48, "grilled_cheese_sandwich": 49, "grilled_salmon": 50, "guacamole": 51, "gyoza": 52, "hamburger": 53, "hot_and_sour_soup": 54, "hot_dog": 55, "huevos_rancheros": 56, "hummus": 57, "ice_cream": 58, "lasagna": 59, "lobster_bisque": 60, "lobster_roll_sandwich": 61, "macaroni_and_cheese": 62, "macarons": 63, "miso_soup": 64, "mussels": 65, "nachos": 66, "omelette": 67, "onion_rings": 68, "oysters": 69, "pad_thai": 70, "paella": 71, "pancakes": 72, "panna_cotta": 73, "peking_duck": 74, "pho": 75, "pizza": 76, "pork_chop": 77, "poutine": 78, "prime_rib": 79, "pulled_pork_sandwich": 80, "ramen": 81, "ravioli": 82, "red_velvet_cake": 83, "risotto": 84, "samosa": 85, "sashimi": 86, "scallops": 87, "seaweed_salad": 88, "shrimp_and_grits": 89, "spaghetti_bolognese": 90, "spaghetti_carbonara": 91, "spring_rolls": 92, "steak": 93, "strawberry_shortcake": 94, "sushi": 95, "tacos": 96, "takoyaki": 97, "tiramisu": 98, "tuna_tartare": 99, "waffles": 100}
</file>

<file path="sustainafood-backend/controllers/ContactSubmissionController.js">
const ContactSubmission = require('../models/ContactSubmission');

exports.submitContactForm = async (req, res) => {
  try {
    const { name, email, comment } = req.body;

    if (!name || !email || !comment) {
      return res.status(400).json({ message: 'All fields are required' });
    }

    const newSubmission = new ContactSubmission({
      name,
      email,
      comment,
    });

    await newSubmission.save();
    res.status(201).json({ message: 'Form submitted successfully', submissionId: newSubmission._id });
  } catch (error) {
    res.status(500).json({ message: 'Error submitting form', error: error.message });
  }
};

exports.getAllSubmissions = async (req, res) => {
  try {
    const submissions = await ContactSubmission.find().sort({ submittedAt: -1 });
    res.status(200).json({ data: submissions });
  } catch (error) {
    res.status(500).json({ message: 'Error fetching submissions', error: error.message });
  }
};

// controllers/ContactSubmissionController.js
exports.updateSubmissionStatus = async (req, res) => {
    try {
      const { id } = req.params;
      const { status } = req.body;
  
      if (!["pending", "responded"].includes(status)) {
        return res.status(400).json({ message: "Invalid status" });
      }
  
      const submission = await ContactSubmission.findByIdAndUpdate(
        id,
        { status },
        { new: true }
      );
  
      if (!submission) {
        return res.status(404).json({ message: "Submission not found" });
      }
  
      res.status(200).json({ message: "Status updated successfully", submission });
    } catch (error) {
      res.status(500).json({ message: "Error updating status", error: error.message });
    }
  };

  // controllers/ContactSubmissionController.js
exports.getSubmissionById = async (req, res) => {
    try {
      const { id } = req.params;
      const submission = await ContactSubmission.findById(id);
      if (!submission) {
        return res.status(404).json({ message: "Submission not found" });
      }
      res.status(200).json(submission);
    } catch (error) {
      res.status(500).json({ message: "Error fetching submission", error: error.message });
    }
  };
</file>

<file path="sustainafood-backend/controllers/donationController.js">
const numeric = require('numeric');
const { IsolationForest } = require('ml-isolation-forest');
const DonationTransaction = require('../models/DonationTransaction');
const Donation = require('../models/Donation');
const RequestNeed = require('../models/RequestNeed');
const mongoose = require('mongoose');
const Meal = require('../models/Meals');
const Product = require('../models/Product');
const Counter = require('../models/Counter');
const { classifyFoodItem } = require('../aiService/classifyFoodItem');
const { predictSupplyDemand } = require('../aiService/predictSupplyDemand');
const User = require('../models/User');
const Notification = require('../models/Notification');
const nodemailer = require('nodemailer');
const path = require('path');
const fs = require('fs');
require('dotenv').config();

const badWords = [
  "damn",
  "hell",
  "idiot",
  "stupid",
  "fuck",
  "t**t"
];

const containsBadWords = (text) => {
  if (!text || typeof text !== 'string') return false;
  const lowerText = text.toLowerCase();
  return badWords.some(word => lowerText.includes(word));
};

const checkBadWords = (text) => {
  if (!text || typeof text !== 'string') return null;
  const lowerText = text.toLowerCase();
  const badWord = badWords.find(word => lowerText.includes(word));
  return badWord ? { containsBadWords: true, badWord } : null;
};

async function sendEmail(to, subject, text) {
  try {
    let transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
      tls: {
        rejectUnauthorized: process.env.NODE_ENV === 'production' ? true : false,
      },
    });

    let mailOptions = {
      from: `"SustainaFood Team" <${process.env.EMAIL_USER}>`,
      to,
      subject,
      text,
    };

    await transporter.verify();
    const info = await transporter.sendMail(mailOptions);
    console.log(`Email sent to ${to}: ${info.messageId}`);
  } catch (error) {
    console.error('Error sending email:', {
      message: error.message,
      stack: error.stack,
      to,
      subject,
    });
    throw new Error(`Failed to send email: ${error.message}`);
  }
}

class DonationRecommender {
  constructor() {
    this.interactionMatrix = null;
    this.donationIds = [];
    this.requestIds = [];
    this.U = null;
    this.S = null;
    this.Vt = null;
  }

  async buildInteractionMatrix() {
    const transactions = await DonationTransaction.find({ status: 'completed' })
      .populate('donation')
      .populate('requestNeed');

    console.log('Transactions found:', transactions.length);
    console.log('Sample transaction:', transactions[0] || 'No transactions');

    const donationSet = new Set();
    const requestSet = new Set();
    const interactions = {};

    transactions.forEach((tx) => {
      const donationId = tx.donation._id.toString();
      const requestId = tx.requestNeed._id.toString();
      donationSet.add(donationId);
      requestSet.add(requestId);
      const key = `${donationId}-${requestId}`;
      interactions[key] = (interactions[key] || 0) + 1;
    });

    this.donationIds = Array.from(donationSet);
    this.requestIds = Array.from(requestSet);

    console.log('Donation IDs:', this.donationIds);
    console.log('Request IDs:', this.requestIds);
    console.log('Interactions:', interactions);

    if (this.donationIds.length === 0 || this.requestIds.length === 0) {
      console.log('No data to build matrix. Setting to empty 1x1 matrix.');
      this.interactionMatrix = [[0]];
    } else {
      this.interactionMatrix = numeric.dim([this.donationIds.length, this.requestIds.length], 0);
      Object.entries(interactions).forEach(([key, count]) => {
        const [donationId, requestId] = key.split('-');
        const donationIdx = this.donationIds.indexOf(donationId);
        const requestIdx = this.requestIds.indexOf(requestId);
        if (donationIdx >= 0 && requestIdx >= 0) {
          this.interactionMatrix[donationIdx][requestIdx] = count;
        }
      });
    }

    console.log('Matrix dimensions:', [this.donationIds.length, this.requestIds.length]);
    console.log('Built Interaction Matrix:', this.interactionMatrix);
  }

  train(k = 10) {
    if (!this.interactionMatrix) throw new Error('Interaction matrix not built');

    console.log('Interaction Matrix in train:', this.interactionMatrix);
    console.log('Donation IDs length:', this.donationIds.length);
    console.log('Request IDs length:', this.requestIds.length);

    if (this.donationIds.length === 0 || this.requestIds.length === 0) {
      console.log('No interactions available. Initializing default model.');
      this.U = numeric.dim([1, k], 0);
      this.S = numeric.dim([k], 0);
      this.Vt = numeric.dim([k, 1], 0);
      return;
    }

    const svd = numeric.svd(this.interactionMatrix);
    this.U = svd.U;
    this.S = svd.S;
    this.Vt = svd.V;

    this.U = numeric.getBlock(this.U, [0, 0], [this.donationIds.length - 1, k - 1]);
    this.S = this.S.slice(0, k);
    this.Vt = numeric.getBlock(this.Vt, [0, 0], [k - 1, this.requestIds.length - 1]);

    console.log('Model trained successfully');
  }

  async getRecommendations(donationId, topN = 5) {
    if (!this.U || !this.S || !this.Vt) throw new Error('Model not trained');

    const donation = await Donation.findById(donationId);
    if (!donation) throw new Error('Donation not found');

    let donationIdx = this.donationIds.indexOf(donationId.toString());
    let donationVector;

    if (donationIdx === -1) {
      donationVector = await this.createDonationVector(donation);
    } else {
      donationVector = this.U[donationIdx].slice(0, this.S.length);
    }

    const scores = numeric.dot(numeric.dot(donationVector, numeric.diag(this.S)), this.Vt);

    const requestScores = scores.map((score, idx) => ({
      requestId: this.requestIds[idx],
      score,
    })).sort((a, b) => b.score - a.score).slice(0, topN);

    const recommendations = await Promise.all(
      requestScores.map(async ({ requestId, score }) => {
        const request = await RequestNeed.findById(requestId).populate('recipient');
        const fulfilledItems = this.calculateFulfilledItems(donation, request);
        return { request, fulfilledItems, matchScore: score };
      })
    );

    return recommendations;
  }

  async createDonationVector(donation) {
    const requests = await RequestNeed.find({ category: donation.category, status: 'pending' });
    const similarityScores = await Promise.all(
      requests.map(async (req) => {
        const fulfilledItems = this.calculateFulfilledItems(donation, req);
        return fulfilledItems.length > 0
          ? fulfilledItems.reduce((sum, item) => sum + item.quantity, 0) * 10
          : 0;
      })
    );

    const avgVector = numeric.div(numeric.add(...this.U), this.U.length);
    return numeric.add(avgVector.slice(0, this.S.length), similarityScores.map((s) => s / 100));
  }

  calculateFulfilledItems(donation, request) {
    const fulfilledItems = [];
    if (donation.category === 'packaged_products') {
      for (const reqProduct of request.requestedProducts || []) {
        const matchingProduct = donation.products.find(
          (p) => p.product.toString() === reqProduct.product.toString()
        );
        if (matchingProduct) {
          const fulfilledQty = Math.min(matchingProduct.quantity, reqProduct.quantity);
          fulfilledItems.push({ product: reqProduct.product, quantity: fulfilledQty });
        }
      }
    } else if (donation.category === 'prepared_meals') {
      const requestedMeals = request.numberOfMeals || 0;
      const donatedMeals = donation.numberOfMeals || 0;
      if (requestedMeals > 0 && donatedMeals > 0) {
        const fulfilledQty = Math.min(donatedMeals, requestedMeals);
        fulfilledItems.push({ quantity: fulfilledQty });
      }
    }
    return fulfilledItems;
  }

  async detectAnomalies() {
    const donations = await Donation.find();
    const currentDate = new Date();

    console.log('Found donations in detectAnomalies:', donations.length);
    console.log('Sample donations:', donations.slice(0, 2).map(d => ({
      id: d._id,
      title: d.title,
      quantity: d.category === 'prepared_meals' ? d.numberOfMeals : d.products.reduce((sum, p) => sum + p.quantity, 0),
      expirationDate: d.expirationDate,
      isAnomaly: d.isAnomaly,
    })));

    if (donations.length === 0) {
      console.log('No donations found in database.');
      return [];
    }

    if (donations.length === 1) {
      console.log('Only one donation found, checking for extreme values...');
      const d = donations[0];
      const quantity = d.category === 'prepared_meals'
        ? d.numberOfMeals || 0
        : d.products ? d.products.reduce((sum, p) => sum + p.quantity, 0) : 0;
      const daysToExpiry = d.expirationDate
        ? Math.max(0, Math.ceil((new Date(d.expirationDate) - currentDate) / (1000 * 60 * 60 * 24)))
        : 1000;

      console.log('Single donation check:', { id: d._id, quantity, daysToExpiry });

      if (quantity >= 100 && daysToExpiry <= 4 && quantity !== 1) {
        return [{
          donationId: d._id,
          donor: d.donor,
          title: d.title,
          quantity,
          daysToExpiry,
          linkedRequests: d.linkedRequests ? d.linkedRequests.length : 0,
          anomalyScore: 0.9,
          reason: `Large quantity (${quantity}) near expiry (${daysToExpiry} days)`
        }];
      }
      console.log('Single donation does not meet anomaly criteria.');
      return [];
    }

    const features = donations.map((d) => {
      const quantity = d.category === 'prepared_meals'
        ? d.numberOfMeals || 0
        : d.products ? d.products.reduce((sum, p) => sum + p.quantity, 0) : 0;
      const frequency = donations.filter(
        (don) => don.donor.toString() === d.donor.toString()
      ).length;
      const daysToExpiry = d.expirationDate
        ? Math.max(0, Math.ceil((new Date(d.expirationDate) - currentDate) / (1000 * 60 * 60 * 24)))
        : 1000;
      const numLinkedRequests = d.linkedRequests ? d.linkedRequests.length : 0;

      return [Math.log1p(quantity), frequency, daysToExpiry, numLinkedRequests]; // Apply log scaling to quantity
    });

    console.log('Features for anomaly detection:', features);

    // Validate features
    const validFeatures = features.filter(f => f.every(val => !isNaN(val) && val !== null));
    if (validFeatures.length === 0) {
      console.log('No valid features for anomaly detection.');
      return [];
    }

    const normalize = (arr) => {
      const mean = arr.reduce((sum, val) => sum + val, 0) / arr.length;
      const std = Math.sqrt(
        arr.map((val) => (val - mean) ** 2).reduce((sum, val) => sum + val, 0) / arr.length
      ) || 1; // Avoid division by zero
      return arr.map((val) => (val - mean) / std);
    };

    const transposedFeatures = validFeatures[0].map((_, colIdx) => validFeatures.map((row) => row[colIdx]));
    const normalizedFeatures = transposedFeatures
      .map(normalize)
      .reduce((acc, col, colIdx) => {
        validFeatures.forEach((row, rowIdx) => {
          if (!acc[rowIdx]) acc[rowIdx] = [];
          acc[rowIdx][colIdx] = col[rowIdx];
        });
        return acc;
      }, []);

    console.log('Normalized features:', normalizedFeatures);

    const forest = new IsolationForest({
      nTrees: 100,
      maxSamples: Math.min(256, validFeatures.length),
      contamination: 0.1,
    });

    console.log('Training Isolation Forest with', validFeatures.length, 'samples...');
    forest.train(normalizedFeatures);

    console.log('Predicting anomalies...');
    const anomalyScores = forest.predict(normalizedFeatures);
    console.log('Anomaly scores:', anomalyScores.map((score, idx) => ({
      donationId: donations[idx]._id,
      score,
      quantity: validFeatures[idx][0],
      daysToExpiry: validFeatures[idx][2]
    })));

    const threshold = 0.6; // Increased threshold for more sensitivity

    const anomalies = donations
      .filter((d, idx) => {
        if (idx >= validFeatures.length) return false; // Skip invalid features
        const rawQuantity = d.category === 'prepared_meals'
          ? d.numberOfMeals || 0
          : d.products ? d.products.reduce((sum, p) => sum + p.quantity, 0) : 0;
        const daysToExpiry = d.expirationDate
          ? Math.max(0, Math.ceil((new Date(d.expirationDate) - currentDate) / (1000 * 60 * 60 * 24)))
          : 1000;

        const isLargeQuantity = rawQuantity >= 100;
        const isNearExpiry = daysToExpiry <= 4;
        const isSmallDonation = rawQuantity === 1;
        const isExtremeCase = rawQuantity >= 10000 && daysToExpiry <= 7; // Flag extreme quantities

        const isAnomaly = (anomalyScores[idx] < threshold || isExtremeCase) && isLargeQuantity && isNearExpiry && !isSmallDonation;
        console.log('Anomaly check for donation:', {
          donationId: d._id,
          rawQuantity,
          daysToExpiry,
          anomalyScore: anomalyScores[idx],
          isLargeQuantity,
          isNearExpiry,
          isSmallDonation,
          isExtremeCase,
          isAnomaly
        });

        return isAnomaly;
      })
      .map((d, idx) => ({
        donationId: d._id,
        title: d.title,
        donor: d.donor,
        quantity: d.category === 'prepared_meals'
          ? d.numberOfMeals || 0
          : d.products ? d.products.reduce((sum, p) => sum + p.quantity, 0) : 0,
        daysToExpiry: d.expirationDate
          ? Math.max(0, Math.ceil((new Date(d.expirationDate) - currentDate) / (1000 * 60 * 60 * 24)))
          : 1000,
        linkedRequests: d.linkedRequests ? d.linkedRequests.length : 0,
        anomalyScore: anomalyScores[idx],
        reason: `Large quantity (${d.category === 'prepared_meals' ? d.numberOfMeals || 0 : d.products.reduce((sum, p) => sum + p.quantity, 0)}) near expiry (${d.expirationDate ? Math.max(0, Math.ceil((new Date(d.expirationDate) - currentDate) / (1000 * 60 * 60 * 24))) : 1000} days)`
      }));

    console.log('Detected anomalies:', anomalies);
    if (anomalies.length === 0) {
      console.log('No anomalies detected. Possible reasons: strict criteria, insufficient data, or invalid donation fields.');
    }
    return anomalies;
  }
}

async function createDonation(req, res) {
  let newDonation;
  const recommender = new DonationRecommender();

  try {
    let {
      title,
      location,
      address,
      expirationDate,
      description,
      category,
      type,
      donor,
      products,
      numberOfMeals,
      status,
      meals
    } = req.body;

    console.log("Incoming Request Body:", req.body);

    let parsedLocation;
    try {
      parsedLocation = JSON.parse(location);
      if (
        parsedLocation.type !== 'Point' ||
        !Array.isArray(parsedLocation.coordinates) ||
        parsedLocation.coordinates.length !== 2 ||
        typeof parsedLocation.coordinates[0] !== 'number' ||
        typeof parsedLocation.coordinates[1] !== 'number'
      ) {
        throw new Error('Invalid location format: must be a GeoJSON Point with [longitude, latitude]');
      }
    } catch (error) {
      throw new Error('Invalid location format: must be a valid GeoJSON string');
    }

    if (!address || typeof address !== 'string' || !address.trim()) {
      throw new Error('Missing or invalid required field: address');
    }

    const badWordChecks = [];
    const titleCheck = checkBadWords(title);
    if (titleCheck) badWordChecks.push({ field: 'title', ...titleCheck });
    const descriptionCheck = checkBadWords(description);
    if (descriptionCheck) badWordChecks.push({ field: 'description', ...descriptionCheck });
    const addressCheck = checkBadWords(address);
    if (addressCheck) badWordChecks.push({ field: 'address', ...addressCheck });

    for (const product of products || []) {
      const nameCheck = checkBadWords(product.name);
      if (nameCheck) badWordChecks.push({ field: `product name "${product.name}"`, ...nameCheck });
      const descCheck = checkBadWords(product.productDescription);
      if (descCheck) badWordChecks.push({ field: `product description for "${product.name}"`, ...descCheck });
    }
    for (const meal of meals || []) {
      const nameCheck = checkBadWords(meal.mealName);
      if (nameCheck) badWordChecks.push({ field: `meal name "${meal.mealName}"`, ...nameCheck });
      const descCheck = checkBadWords(meal.mealDescription);
      if (descCheck) badWordChecks.push({ field: `meal description for "${meal.mealName}"`, ...descCheck });
    }

    if (badWordChecks.length > 0) {
      return res.status(400).json({
        message: 'Inappropriate language detected in submission',
        badWordsDetected: badWordChecks
      });
    }

    if (!Array.isArray(products)) {
      if (typeof products === 'string') {
        try {
          products = JSON.parse(products);
        } catch (error) {
          throw new Error('Invalid products format: must be a valid JSON array');
        }
      } else {
        products = [];
      }
    }

    if (!Array.isArray(meals)) {
      if (typeof meals === 'string') {
        try {
          meals = JSON.parse(meals);
        } catch (error) {
          throw new Error('Invalid meals format: must be a valid JSON array');
        }
      } else {
        meals = [];
      }
    }

    const validMealTypes = ['Breakfast', 'Lunch', 'Dinner', 'Snack', 'Dessert', 'Other'];

    const validMeals = meals
      .map((meal, index) => {
        if (!meal.mealName || typeof meal.mealName !== 'string' || !meal.mealName.trim()) {
          throw new Error(`Meal at index ${index} is missing a valid mealName`);
        }
        if (!meal.mealDescription || typeof meal.mealDescription !== 'string' || !meal.mealDescription.trim()) {
          throw new Error(`Meal at index ${index} is missing a valid mealDescription`);
        }
        if (!meal.mealType || !validMealTypes.includes(meal.mealType)) {
          throw new Error(`Meal at index ${index} has an invalid mealType: ${meal.mealType}`);
        }
        const quantity = parseInt(meal.quantity);
        if (isNaN(quantity) || quantity <= 0) {
          throw new Error(`Meal at index ${index} has an invalid quantity: ${meal.quantity}`);
        }
        return {
          mealName: meal.mealName,
          mealDescription: meal.mealDescription,
          mealType: meal.mealType,
          quantity: quantity
        };
      })
      .filter(meal => meal);

    const validProducts = products
      .map((product, index) => {
        if (!product.name || typeof product.name !== 'string' || !product.name.trim()) {
          throw new Error(`Product at index ${index} is missing a valid name`);
        }
        if (!product.productType || typeof product.productType !== 'string') {
          throw new Error(`Product at index ${index} is missing a valid productType`);
        }
        if (!product.productDescription || typeof product.productDescription !== 'string' || !product.productDescription.trim()) {
          throw new Error(`Product at index ${index} is missing a valid productDescription`);
        }
        const weightPerUnit = parseFloat(product.weightPerUnit);
        if (isNaN(weightPerUnit) || weightPerUnit <= 0) {
          throw new Error(`Product at index ${index} has an invalid weightPerUnit: ${product.weightPerUnit}`);
        }
        const totalQuantity = parseInt(product.totalQuantity);
        if (isNaN(totalQuantity) || totalQuantity <= 0) {
          throw new Error(`Product at index ${index} is an invalid totalQuantity: ${product.totalQuantity}`);
        }
        if (!product.status || typeof product.status !== 'string') {
          throw new Error(`Product at index ${index} is missing a valid status`);
        }
        return {
          name: product.name,
          productType: product.productType,
          productDescription: product.productDescription,
          weightPerUnit: weightPerUnit,
          weightUnit: product.weightUnit || 'kg',
          weightUnitTotale: product.weightUnitTotale || 'kg',
          totalQuantity: totalQuantity,
          image: product.image || '',
          status: product.status || 'available'
        };
      })
      .filter(product => product);

    if (!title || typeof title !== 'string' || !title.trim()) {
      throw new Error('Missing or invalid required field: title');
    }
    if (!parsedLocation) {
      throw new Error('Missing or invalid required field: location');
    }
    if (!expirationDate || isNaN(new Date(expirationDate).getTime())) {
      throw new Error('Missing or invalid required field: expirationDate');
    }
    if (!description || typeof description !== 'string' || !description.trim()) {
      throw new Error('Missing or invalid required field: description');
    }
    if (!donor || !mongoose.Types.ObjectId.isValid(donor)) {
      throw new Error('Missing or invalid required field: donor');
    }

    if (category === 'prepared_meals' && validMeals.length === 0) {
      throw new Error('At least one valid meal is required for prepared_meals category');
    }
    if (category === 'packaged_products' && validProducts.length === 0) {
      throw new Error('At least one valid product is required for packaged_products category');
    }

    const calculatedNumberOfMeals = category === 'prepared_meals'
      ? validMeals.reduce((sum, meal) => sum + meal.quantity, 0)
      : undefined;

    const providedNumberOfMeals = parseInt(numberOfMeals);
    if (category === 'prepared_meals' && !isNaN(providedNumberOfMeals) && providedNumberOfMeals !== calculatedNumberOfMeals) {
      throw new Error(`Provided numberOfMeals (${providedNumberOfMeals}) does not match the calculated total (${calculatedNumberOfMeals})`);
    }

    newDonation = new Donation({
      title,
      location: parsedLocation,
      address,
      expirationDate: new Date(expirationDate),
      description,
      category: category || 'prepared_meals',
      type: type || 'donation',
      donor,
      meals: [],
      numberOfMeals: category === 'prepared_meals' ? (providedNumberOfMeals || calculatedNumberOfMeals) : undefined,
      remainingMeals: category === 'prepared_meals' ? (providedNumberOfMeals || calculatedNumberOfMeals) : undefined,
      products: [],
      status: status || 'pending',
      isAnomaly: false,
      created_at: new Date(),
      updated_at: new Date(),
    });

    let mealEntries = [];
    if (category === 'prepared_meals' && validMeals.length > 0) {
      for (let meal of validMeals) {
        const counter = await Counter.findOneAndUpdate(
          { _id: 'mealId' },
          { $inc: { seq: 1 } },
          { new: true, upsert: true }
        );
        if (!counter) throw new Error('Failed to generate meal ID');
        const newMeal = new Meal({
          id: counter.seq,
          mealName: meal.mealName,
          mealDescription: meal.mealDescription,
          mealType: meal.mealType,
          quantity: meal.quantity,
          donation: newDonation._id
        });
        await newMeal.save();
        mealEntries.push({ meal: newMeal._id, quantity: meal.quantity });
      }
    }

    let productEntries = [];
    if (category === 'packaged_products' && validProducts.length > 0) {
      for (let product of validProducts) {
        const counter = await Counter.findOneAndUpdate(
          { _id: 'ProductId' },
          { $inc: { seq: 1 } },
          { new: true, upsert: true }
        );
        if (!counter) throw new Error('Failed to generate product ID');
        const newProduct = new Product({
          id: counter.seq,
          name: product.name,
          productType: product.productType,
          productDescription: product.productDescription,
          weightPerUnit: product.weightPerUnit,
          weightUnit: product.weightUnit,
          weightUnitTotale: product.weightUnitTotale,
          totalQuantity: product.totalQuantity,
          image: product.image,
          status: product.status,
          donation: newDonation._id
        });
        await newProduct.save();
        productEntries.push({ product: newProduct._id, quantity: product.totalQuantity });
      }
    }

    newDonation.meals = mealEntries;
    newDonation.products = productEntries;

    await newDonation.save();

    const anomalies = await recommender.detectAnomalies();
    const isAnomaly = anomalies.some(anomaly => anomaly.donationId.toString() === newDonation._id.toString());

    if (isAnomaly) {
      newDonation.isAnomaly = true;
      await newDonation.save();

      const donorUser = await newDonation.populate('donor', 'email name');
      const donorEmail = donorUser.donor.email;
      const donorName = donorUser.donor.name || 'Donor';
      const anomalyDetails = anomalies.find(anomaly => anomaly.donationId.toString() === newDonation._id.toString());

      const emailSubject = 'Anomaly Detected in Your Donation';
      const emailText = `
        Dear ${donorName},

        Your donation titled "${newDonation.title}" has been flagged as an anomaly.
        Reason: ${anomalyDetails.reason}.
        Please review your donation details or contact support for assistance.

        Thank you,
        The Donation Platform Team
      `;

      await sendEmail(donorEmail, emailSubject, emailText);
    }

    const populatedDonation = await Donation.findById(newDonation._id)
      .populate('donor', 'name role email')
      .populate('products.product')
      .populate('meals.meal');

    res.status(201).json({
      message: 'Donation created successfully',
      donation: populatedDonation,
      isAnomaly: newDonation.isAnomaly
    });
  } catch (error) {
    if (newDonation && newDonation._id) {
      if (newDonation.meals && newDonation.meals.length > 0) {
        const mealIds = newDonation.meals.map(entry => entry.meal);
        await Meal.deleteMany({ _id: { $in: mealIds } });
      }
      if (newDonation.products && newDonation.products.length > 0) {
        const productIds = newDonation.products.map(entry => entry.product);
        await Product.deleteMany({ _id: { $in: productIds } });
      }
      await Donation.deleteOne({ _id: newDonation._id });
    }
    console.error("Error creating donation:", error);
    res.status(400).json({
      message: "Failed to create donation",
      error: error.message || error.toString()
    });
  }
}

// Other functions remain unchanged
async function updateDonation(req, res) {
  try {
    const { id } = req.params;
    const { products, meals, location, ...donationData } = req.body;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: 'Invalid donation ID' });
    }

    const existingDonation = await Donation.findById(id).populate('meals.meal');
    if (!existingDonation) {
      return res.status(404).json({ message: 'Donation not found' });
    }

    let parsedLocation;
    if (location) {
      try {
        parsedLocation = JSON.parse(location);
        if (
          parsedLocation.type !== 'Point' ||
          !Array.isArray(parsedLocation.coordinates) ||
          parsedLocation.coordinates.length !== 2 ||
          typeof parsedLocation.coordinates[0] !== 'number' ||
          typeof parsedLocation.coordinates[1] !== 'number'
        ) {
          throw new Error('Invalid location format: must be a GeoJSON Point with [longitude, latitude]');
        }
      } catch (error) {
        throw new Error('Invalid location format: must be a valid GeoJSON string');
      }
    }

    const badWordChecks = [];
    if (donationData.title) {
      const titleCheck = checkBadWords(donationData.title);
      if (titleCheck) badWordChecks.push({ field: 'title', ...titleCheck });
    }
    if (donationData.description) {
      const descriptionCheck = checkBadWords(donationData.description);
      if (descriptionCheck) badWordChecks.push({ field: 'description', ...descriptionCheck });
    }
    if (donationData.address) {
      const addressCheck = checkBadWords(donationData.address);
      if (addressCheck) badWordChecks.push({ field: 'address', ...addressCheck });
    }
    for (const product of products || []) {
      if (product.name) {
        const nameCheck = checkBadWords(product.name);
        if (nameCheck) badWordChecks.push({ field: `product name "${product.name}"`, ...nameCheck });
      }
      if (product.productDescription) {
        const descCheck = checkBadWords(product.productDescription);
        if (descCheck) badWordChecks.push({ field: `product description for "${product.name}"`, ...descCheck });
      }
    }
    for (const meal of meals || []) {
      if (meal.mealName) {
        const nameCheck = checkBadWords(meal.mealName);
        if (nameCheck) badWordChecks.push({ field: `meal name "${meal.mealName}"`, ...nameCheck });
      }
      if (meal.mealDescription) {
        const descCheck = checkBadWords(meal.mealDescription);
        if (descCheck) badWordChecks.push({ field: `meal description for "${meal.mealName}"`, ...descCheck });
      }
    }

    if (badWordChecks.length > 0) {
      return res.status(400).json({
        message: 'Inappropriate language detected in submission',
        badWordsDetected: badWordChecks
      });
    }

    let updatedProducts = existingDonation.products || [];
    if (products !== undefined) {
      if (!Array.isArray(products)) {
        return res.status(400).json({ message: 'Products must be an array' });
      }
      updatedProducts = [];
      for (const item of products) {
        if (item.quantity !== undefined && (typeof item.quantity !== 'number' || item.quantity < 0)) {
          return res.status(400).json({ message: 'Invalid quantity in products array' });
        }

        let productId;
        if (item.id) {
          const product = await Product.findOne({ id: item.id });
          if (!product) {
            return res.status(404).json({ message: `Product with id ${item.id} not found` });
          }
          product.name = item.name ?? product.name;
          product.productDescription = item.productDescription ?? product.productDescription;
          product.productType = item.productType ?? product.productType;
          product.weightPerUnit = item.weightPerUnit ?? product.weightPerUnit;
          product.weightUnit = item.weightUnit ?? product.weightUnit;
          product.totalQuantity = item.totalQuantity ?? product.totalQuantity;
          product.status = item.status ?? product.status;
          await product.save();
          productId = product._id;
        } else {
          const counter = await Counter.findOneAndUpdate(
            { _id: 'ProductId' },
            { $inc: { seq: 1 } },
            { new: true, upsert: true }
          );
          const newProduct = new Product({
            id: counter.seq,
            name: item.name,
            productDescription: item.productDescription,
            productType: item.productType,
            weightPerUnit: item.weightPerUnit,
            weightUnit: item.weightUnit,
            totalQuantity: item.totalQuantity,
            status: item.status || 'available',
            donation: id
          });
          await newProduct.save();
          productId = newProduct._id;
        }
        updatedProducts.push({ product: productId, quantity: item.quantity || 1 });
      }
    }

    let updatedMeals = [];
    if (meals !== undefined) {
      if (!Array.isArray(meals)) {
        return res.status(400).json({ message: 'Meals must be an array' });
      }

      const existingMealIds = existingDonation.meals.map(mealEntry => mealEntry.meal.id.toString());
      const updatedMealIds = meals
        .filter(item => item.id)
        .map(item => item.id.toString());

      const mealsToDelete = existingMealIds.filter(mealId => !updatedMealIds.includes(mealId));
      if (mealsToDelete.length > 0) {
        await Meal.deleteMany({ id: { $in: mealsToDelete } });
      }

      updatedMeals = [];
      for (const item of meals) {
        if (item.quantity === undefined || typeof item.quantity !== 'number' || item.quantity < 1) {
          return res.status(400).json({ message: 'Invalid or missing quantity in meals array' });
        }

        let mealId;
        if (item.id) {
          const meal = await Meal.findOne({ id: item.id });
          if (!meal) {
            return res.status(404).json({ message: `Meal with id ${item.id} not found` });
          }
          meal.mealName = item.mealName ?? meal.mealName;
          meal.mealDescription = item.mealDescription ?? meal.mealDescription;
          meal.mealType = item.mealType ?? meal.mealType;
          meal.quantity = item.quantity;
          await meal.save();
          mealId = meal._id;
        } else {
          const counter = await Counter.findOneAndUpdate(
            { _id: 'mealId' },
            { $inc: { seq: 1 } },
            { new: true, upsert: true }
          );
          const newMeal = new Meal({
            id: counter.seq,
            mealName: item.mealName,
            mealDescription: item.mealDescription,
            mealType: item.mealType,
            quantity: item.quantity,
            donation: id
          });
          await newMeal.save();
          mealId = newMeal._id;
        }
        updatedMeals.push({ meal: mealId, quantity: item.quantity });
      }
    } else {
      updatedMeals = existingDonation.meals.map(mealEntry => ({
        meal: mealEntry.meal._id,
        quantity: mealEntry.quantity,
      }));
    }

    const allowedFields = [
      'title',
      'expirationDate',
      'type',
      'category',
      'description',
      'numberOfMeals',
      'address'
    ];
    const updateData = {};
    allowedFields.forEach((field) => {
      if (donationData[field] !== undefined) {
        updateData[field] = donationData[field];
      }
    });
    if (parsedLocation) {
      updateData.location = parsedLocation;
    }

    const updatedDonation = await Donation.findByIdAndUpdate(
      id,
      { ...updateData, products: updatedProducts, meals: updatedMeals },
      { new: true }
    )
      .populate('donor', 'name role email')
      .populate('products.product')
      .populate('meals.meal');

    if (!updatedDonation) {
      return res.status(404).json({ message: 'Donation not found' });
    }

    res.status(200).json({
      message: 'Donation updated successfully',
      data: updatedDonation
    });
  } catch (error) {
    console.error('Error updating donation:', error);
    res.status(500).json({
      message: 'Failed to update donation',
      error: error.message || error.toString()
    });
  }
}

async function deleteDonation(req, res) {
  try {
    const { id } = req.params;
    const donation = await Donation.findById(id);

    if (!donation) {
      return res.status(404).json({ message: 'Donation not found' });
    }

    if (donation.products && donation.products.length > 0) {
      const productIds = donation.products.map(entry => entry.product);
      await Product.deleteMany({ _id: { $in: productIds } });
    }
    if (donation.meals && donation.meals.length > 0) {
      const mealIds = donation.meals.map(entry => entry.meal);
      await Meal.deleteMany({ _id: { $in: mealIds } });
    }

    await Donation.findByIdAndDelete(id);

    res.status(200).json({ message: 'Donation and related items deleted successfully' });
  } catch (error) {
    console.error('Error deleting donation:', error);
    res.status(500).json({ message: 'Failed to delete donation', error: error.message || error.toString() });
  }
}

async function getDonationsByStatus(req, res) {
  try {
    const { status } = req.params;
    const donations = await Donation.find({ status })
      .populate('donor', 'name role email')
      .populate('products.product')
      .populate('meals.meal');

    if (donations.length === 0) {
      return res.status(404).json({ message: 'No donations found with this status' });
    }

    res.status(200).json(donations);
  } catch (error) {
    console.error('Error fetching donations by status:', error);
    res.status(500).json({ message: 'Server error', error: error.message || error.toString() });
  }
}

async function getAllDonations(req, res) {
  try {
    const donations = await Donation.find({ isaPost: true, isAnomaly: false, status: { $ne: 'rejected' } })
      .populate('donor', 'name role email photo')
      .populate('products.product')
      .populate('meals.meal')
      .populate('linkedRequests');

    res.status(200).json(donations);
  } catch (error) {
    console.error('Error fetching all donations:', error);
    res.status(500).json({ message: 'Server error', error: error.message || error.toString() });
  }
}

async function getDonationById(req, res) {
  try {
    const { id } = req.params;
    const donation = await Donation.findById(id)
      .populate('donor', 'name role email photo')
      .populate('products.product')
      .populate('meals.meal');

    if (!donation) {
      return res.status(404).json({ message: 'Donation not found' });
    }

    console.log('Fetched donation for getDonationById:', donation);
    res.status(200).json(donation);
  } catch (error) {
    console.error('Error fetching donation by ID:', error);
    res.status(500).json({ message: 'Server error', error: error.message || error.toString() });
  }
}

async function getDonationsByUserId(req, res) {
  try {
    const { userId } = req.params;
    const donations = await Donation.find({ donor: userId, isaPost: true, isAnomaly: false })
      .populate('products.product')
      .populate('meals.meal');

    if (donations.length === 0) {
      return res.status(404).json({ message: 'No donations found for this user' });
    }

    res.status(200).json(donations);
  } catch (error) {
    console.error('Error fetching donations by user ID:', error);
    res.status(500).json({ message: 'Server error', error: error.message || error.toString() });
  }
}

async function getRequestDonationsByUserId(req, res) {
  try {
    const { userId } = req.params;
    const donations = await Donation.find({ donor: userId, isaPost: false, isAnomaly: false })
      .populate('products.product')
      .populate('linkedRequests')
      .populate('meals.meal');

    if (donations.length === 0) {
      return res.status(404).json({ message: 'No donations found for this user' });
    }

    res.status(200).json(donations);
  } catch (error) {
    console.error('Error fetching donations by user ID:', error);
    res.status(500).json({ message: 'Server error', error: error.message || error.toString() });
  }
}

async function getDonationsByDate(req, res) {
  try {
    const { date } = req.params;
    const startOfDay = new Date(date);
    startOfDay.setHours(0, 0, 0, 0);
    const endOfDay = new Date(date);
    endOfDay.setHours(23, 59, 59, 999);

    const donations = await Donation.find({
      expirationDate: { $gte: startOfDay, $lte: endOfDay }
    })
      .populate('products.product')
      .populate('meals.meal');

    if (donations.length === 0) {
      return res.status(404).json({ message: 'No donations found for this date' });
    }

    res.status(200).json(donations);
  } catch (error) {
    console.error('Error fetching donations by date:', error);
    res.status(500).json({ message: 'Server error', error: error.message || error.toString() });
  }
}

async function getDonationsByType(req, res) {
  try {
    const { type } = req.params;
    const donations = await Donation.find({ type })
      .populate('products.product')
      .populate('meals.meal');

    if (donations.length === 0) {
      return res.status(404).json({ message: 'No donations found for this type' });
    }

    res.status(200).json(donations);
  } catch (error) {
    console.error('Error fetching donations by type:', error);
    res.status(500).json({ message: 'Server error', error: error.message || error.toString() });
  }
}

async function getDonationsByCategory(req, res) {
  try {
    const { category } = req.params;
    const donations = await Donation.find({ category })
      .populate('products.product')
      .populate('meals.meal');

    if (donations.length === 0) {
      return res.status(404).json({ message: 'No donations found for this category' });
    }

    res.status(200).json(donations);
  } catch (error) {
    console.error('Error fetching donations by category:', error);
    res.status(500).json({ message: 'Server error', error: error.message || error.toString() });
  }
}

const getDonationByRequestId = async (req, res) => {
  try {
    const { requestId } = req.params;

    const request = await RequestNeed.findById(requestId);
    if (!request) {
      return res.status(404).json({ message: 'Request not found' });
    }

    const donationIds = request.linkedDonation || [];

    if (donationIds.length === 0) {
      return res.status(200).json([]);
    }

    const donations = await Donation.find({ _id: { $in: donationIds } })
      .populate('products.product')
      .populate('meals.meal')
      .populate('donor');

    res.status(200).json(donations);
  } catch (error) {
    console.error('Error fetching donations:', error);
    res.status(500).json({ message: 'Failed to fetch donations', error: error.message });
  }
};

async function classifyFood(req, res) {
  try {
    const { name, description, category } = req.body;

    if (!name || !description || !category) {
      return res.status(400).json({ message: 'Name, description, and category are required' });
    }

    if (!['packaged_products', 'prepared_meals'].includes(category)) {
      return res.status(400).json({ message: 'Invalid category' });
    }

    const badWordChecks = [];
    const nameCheck = checkBadWords(name);
    if (nameCheck) badWordChecks.push({ field: 'name', ...nameCheck });
    const descCheck = checkBadWords(description);
    if (descCheck) badWordChecks.push({ field: 'description', ...descCheck });

    if (badWordChecks.length > 0) {
      return res.status(400).json({
        message: 'Inappropriate language detected in submission',
        badWordsDetected: badWordChecks
      });
    }

    const classification = await classifyFoodItem({ name, description, category });
    res.status(200).json(classification);
  } catch (error) {
    console.error('Error classifying food item:', error);
    res.status(500).json({ message: 'Failed to classify food item', error: error.message || error.toString() });
  }
}

async function getSupplyDemandPrediction(req, res) {
  console.log('getSupplyDemandPrediction called');
  try {
    const { period } = req.query;
    console.log('Fetching predictions for period:', period || 'week');
    const predictions = await predictSupplyDemand(period || 'week');
    console.log('Predictions:', predictions);
    if (!predictions.supply || !predictions.demand) {
      throw new Error('Prediction data is incomplete');
    }
    res.status(200).json(predictions);
  } catch (error) {
    console.error('Prediction Error Details:', error.stack);
    res.status(500).json({ message: 'Failed to predict supply and demand', error: error.message || error.toString() });
  }
}

async function matchDonationToRequests(donation) {
  const { category, products, meals, expirationDate, numberOfMeals: donatedMeals } = donation;

  const requests = await RequestNeed.find({
    category: donation.category,
    status: 'pending',
    expirationDate: { $gte: new Date() }
  }).populate('recipient');

  const matches = [];
  for (const request of requests) {
    let matchScore = 0;
    let fulfilledItems = [];

    if (category === 'packaged_products') {
      for (const reqProduct of request.requestedProducts || []) {
        const matchingProduct = products.find(p => p.product.productType === reqProduct.product.productType);
        if (matchingProduct) {
          const fulfilledQty = Math.min(matchingProduct.quantity, reqProduct.quantity);
          fulfilledItems.push({ product: reqProduct.product._id, quantity: fulfilledQty });
          matchScore += fulfilledQty * 10;
        }
      }
    } else if (category === 'prepared_meals') {
      const requestedMeals = request.numberOfMeals || 0;
      if (requestedMeals > 0 && donatedMeals > 0) {
        const fulfilledQty = Math.min(donatedMeals, requestedMeals);
        fulfilledItems.push({ quantity: fulfilledQty });
        matchScore += fulfilledQty * 10;
      }
    }

    if (fulfilledItems.length > 0) {
      const daysUntilExpiration = (expirationDate - new Date()) / (1000 * 60 * 60 * 24);
      if (daysUntilExpiration < 3) matchScore += 50;
      else if (daysUntilExpiration < 7) matchScore += 20;

      if (request.recipient.type === 'RELIEF' && daysUntilExpiration < 7) {
        matchScore += 30;
      } else if (request.recipient.type === 'SOCIAL_WELFARE') {
        matchScore += 10;
      }

      matches.push({
        request,
        fulfilledItems,
        matchScore
      });
    }
  }

  return matches.sort((a, b) => b.score - a.score);
}

module.exports = {
  getRequestDonationsByUserId,
  matchDonationToRequests,
  getDonationByRequestId,
  getSupplyDemandPrediction,
  classifyFood,
  getDonationsByUserId,
  getAllDonations,
  getDonationById,
  getDonationsByDate,
  getDonationsByType,
  getDonationsByCategory,
  createDonation,
  updateDonation,
  deleteDonation,
  getDonationsByStatus
};
</file>

<file path="sustainafood-backend/controllers/donationTransactionController.js">
// donationTransactionController.js
const DonationTransaction = require('../models/DonationTransaction');
const RequestNeed = require('../models/RequestNeed');
const Donation = require('../models/Donation');
const Product = require('../models/Product');
const Meal = require('../models/Meals');
const User = require('../models/User');
const Delivery = require('../models/Delivery');
const nodemailer = require('nodemailer');
const path = require('path');
const { createNotification } = require('./notificationController');
const mongoose = require("mongoose");

// Function to send email notifications
async function sendEmail(to, subject, text, html, attachments = []) {
  try {
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
      tls: {
        rejectUnauthorized: false,
      },
    });

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to,
      subject,
      text,
      html,
      attachments,
    };

    await transporter.sendMail(mailOptions);
    console.log(`Email sent to ${to}`);
  } catch (error) {
    console.error(`Failed to send email to ${to}:`, error.message);
    throw new Error(`Failed to send email: ${error.message}`);
  }
}

async function getAllDonationTransactions(req, res) {
  try {
    const transactions = await DonationTransaction.find()
      .populate('requestNeed')
      .populate('donation')
      .populate('allocatedProducts.product')
      .populate('allocatedMeals.meal');
    res.status(200).json(transactions);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error });
  }
}

async function getDonationTransactionById(req, res) {
  try {
    const { id } = req.params;
    const transaction = await DonationTransaction.findById(id)
      .populate('requestNeed')
      .populate('donation')
      .populate('allocatedProducts.product')
      .populate('allocatedMeals.meal')
      .populate('donor')
      .populate('recipient');

    if (!transaction) {
      return res.status(404).json({ message: 'Donation transaction not found' });
    }

    res.status(200).json(transaction);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error });
  }
}

async function getDonationTransactionsByRequestNeedId(req, res) {
  try {
    const { requestNeedId } = req.params;
    const transactions = await DonationTransaction.find({ requestNeed: requestNeedId })
      .populate({
        path: 'donation',
        populate: [
          { path: 'donor' },
          { path: 'meals.meal', model: 'Meals' },
        ],
      })
      .populate('requestNeed')
      .populate('allocatedProducts.product')
      .populate('allocatedMeals.meal');

    if (!transactions.length) {
      return res.status(404).json({ message: 'No transactions found for this request need' });
    }

    res.status(200).json(transactions);
  } catch (error) {
    console.error('Error fetching transactions:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

async function getDonationTransactionsByDonationId(req, res) {
  try {
    const { donationId } = req.params;
    const transactions = await DonationTransaction.find({ donation: donationId })
      .populate({
        path: 'donation',
        populate: [
          { path: 'donor' },
          { path: 'meals.meal', model: 'Meals' },
          { path: 'products.product', model: 'Product' },
        ],
      })
      .populate({
        path: 'requestNeed',
        populate: [
          { path: 'recipient' },
          { path: 'requestedProducts.product', model: 'Product' },
          { path: 'requestedMeals.meal', model: 'Meals' },
        ],
      })
      .populate('allocatedProducts.product')
      .populate('allocatedMeals.meal');

    if (!transactions.length) {
      return res.status(404).json({ message: 'No transactions found for this donation' });
    }

    res.status(200).json(transactions);
  } catch (error) {
    console.error('Error fetching transactions:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}

async function getDonationTransactionsByStatus(req, res) {
  try {
    const { status } = req.params;
    const transactions = await DonationTransaction.find({ status })
      .populate('requestNeed')
      .populate('donation')
      .populate('allocatedProducts.product')
      .populate('allocatedMeals.meal');

    if (!transactions.length) {
      return res.status(404).json({ message: 'No transactions found with this status' });
    }

    res.status(200).json(transactions);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error });
  }
}

async function createDonationTransaction(req, res) {
  try {
    const { requestNeed, donation, allocatedProducts, allocatedMeals, status } = req.body;

    if (!requestNeed || !donation || (!allocatedProducts && !allocatedMeals) || !status) {
      return res.status(400).json({ message: 'RequestNeed, donation, at least one of allocatedProducts or allocatedMeals, and status are required' });
    }

    if (allocatedProducts && (!Array.isArray(allocatedProducts) || !allocatedProducts.length)) {
      return res.status(400).json({ message: 'allocatedProducts must be a non-empty array if provided' });
    }

    if (allocatedMeals && (!Array.isArray(allocatedMeals) || !allocatedMeals.length)) {
      return res.status(400).json({ message: 'allocatedMeals must be a non-empty array if provided' });
    }

    const newTransaction = new DonationTransaction({
      requestNeed,
      donation,
      allocatedProducts: allocatedProducts || [],
      allocatedMeals: allocatedMeals || [],
      status,
    });

    await newTransaction.save();
    res.status(201).json({ message: 'Donation transaction created successfully', newTransaction });
  } catch (error) {
    res.status(400).json({ message: 'Failed to create donation transaction', error });
  }
}

async function updateDonationTransaction(req, res) {
  try {
    const { id } = req.params;
    const { requestNeed, donation, allocatedProducts, allocatedMeals, status } = req.body;

    const updatedTransaction = await DonationTransaction.findByIdAndUpdate(
      id,
      { requestNeed, donation, allocatedProducts, allocatedMeals, status },
      { new: true }
    )
      .populate('requestNeed')
      .populate('donation')
      .populate('allocatedProducts.product')
      .populate('allocatedMeals.meal');

    if (!updatedTransaction) {
      return res.status(404).json({ message: 'Donation transaction not found' });
    }

    res.status(200).json({ message: 'Donation transaction updated successfully', updatedTransaction });
  } catch (error) {
    res.status(500).json({ message: 'Failed to update donation transaction', error });
  }
}

async function deleteDonationTransaction(req, res) {
  try {
    const { id } = req.params;
    const deletedTransaction = await DonationTransaction.findByIdAndDelete(id);

    if (!deletedTransaction) {
      return res.status(404).json({ message: 'Donation transaction not found' });
    }

    res.status(200).json({ message: 'Donation transaction deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Failed to delete donation transaction', error });
  }
}

async function acceptDonationTransaction(req, res) {
    try {
      const { transactionId } = req.params;
  
      // Validate transactionId
      if (!mongoose.Types.ObjectId.isValid(transactionId)) {
        return res.status(400).json({ message: 'Invalid transaction ID' });
      }
  
      // Fetch transaction with populated references
      const transaction = await DonationTransaction.findById(transactionId)
        .populate('requestNeed')
        .populate('donation')
        .populate('allocatedProducts.product')
        .populate('allocatedMeals.meal');
  
      if (!transaction) {
        return res.status(404).json({ message: 'Transaction not found' });
      }
      if (transaction.status !== 'pending') {
        return res.status(400).json({ message: `Transaction cannot be accepted in its current state (${transaction.status})` });
      }
  
      const donation = transaction.donation;
      const requestNeed = transaction.requestNeed;
  
      // Update donation quantities
      if (donation.category === 'packaged_products') {
        for (const allocatedProduct of transaction.allocatedProducts) {
          const donationProduct = donation.products.find(p => p.product.toString() === allocatedProduct.product._id.toString());
          if (donationProduct) {
            donationProduct.quantity -= allocatedProduct.quantity;
            if (donationProduct.quantity < 0) donationProduct.quantity = 0;
          }
        }
  
        const remainingProducts = donation.products.reduce((sum, p) => sum + p.quantity, 0);
        donation.status = remainingProducts === 0 ? 'fulfilled' : 'partially_fulfilled';
      }
  
      if (donation.category === 'prepared_meals') {
        let totalAllocatedMeals = 0;
        for (const allocatedMeal of transaction.allocatedMeals) {
          const donationMeal = donation.meals.find(m => m.meal.toString() === allocatedMeal.meal._id.toString());
          if (donationMeal) {
            donationMeal.quantity -= allocatedMeal.quantity;
            if (donationMeal.quantity < 0) donationMeal.quantity = 0;
            totalAllocatedMeals += allocatedMeal.quantity;
          }
        }
  
        donation.remainingMeals = (donation.remainingMeals || donation.numberOfMeals) - totalAllocatedMeals;
        if (donation.remainingMeals < 0) donation.remainingMeals = 0;
        donation.status = donation.remainingMeals === 0 ? 'fulfilled' : 'partially_fulfilled';
  
        requestNeed.numberOfMeals -= totalAllocatedMeals;
        if (requestNeed.numberOfMeals < 0) requestNeed.numberOfMeals = 0;
        requestNeed.status = requestNeed.numberOfMeals === 0 ? 'fulfilled' : 'partially_fulfilled';
      }
  
      // Save updated donation and requestNeed
      await donation.save();
      await requestNeed.save();
  
      // Update transaction status
      transaction.status = 'approved';
      transaction.responseDate = new Date();
      await transaction.save();
  
      // Find available transporter
      const availableTransporters = await User.find({
        role: 'transporter',
        isAvailable: true,
        isActive: true,
        isBlocked: false,
      }).select('_id name email location');
  
      let selectedTransporter = null;
      if (availableTransporters.length === 0) {
        console.warn('No available transporters found. Delivery will be created without a transporter.');
      } else {
        // Basic selection: First available transporter
        selectedTransporter = availableTransporters[0];
  
        // Optional: Select nearest transporter using geospatial query
        if (donation.location && donation.location.type === 'Point') {
          try {
            const nearestTransporter = await User.find({
              role: 'transporter',
              isAvailable: true,
              isActive: true,
              isBlocked: false,
              location: {
                $near: {
                  $geometry: donation.location,
                  $maxDistance: 10000, // 10km in meters
                },
              },
            })
              .select('_id name email location')
              .limit(1);
  
            selectedTransporter = nearestTransporter[0] || availableTransporters[0];
          } catch (geoError) {
            console.error('Geospatial query failed:', geoError.message);
            // Fallback to first available transporter
          }
        }
      }
  
      // Create delivery
      const delivery = new Delivery({
        donationTransaction: transaction._id,
        transporter: selectedTransporter ? selectedTransporter._id : null,
        pickupAddress: donation.address,
        deliveryAddress: requestNeed.address,
        status: 'pending',
      });
      await delivery.save();
  
      // Notify recipient
      const recipient = await User.findById(transaction.recipient).select('_id name email');
      await createNotification({
        body: {
          sender: transaction.donor,
          receiver: transaction.recipient,
          message: `A delivery has been created for your request "${requestNeed.title}". Status: Pending.`,
        },
      }, { status: () => ({ json: () => {} }) });
  
      // Notify donor
      await createNotification({
        body: {
          sender: transaction.recipient,
          receiver: transaction.donor,
          message: `A delivery has been created for your donation "${donation.title}". Status: Pending.`,
        },
      }, { status: () => ({ json: () => {} }) });
  
      // Notify transporter (if assigned)
      if (selectedTransporter) {
        await createNotification({
          body: {
            sender: transaction.donor,
            receiver: selectedTransporter._id,
            message: `You have been assigned to a delivery for the donation "${donation.title}". Pickup address: ${donation.address}. Status: Pending.`,
          },
        }, { status: () => ({ json: () => {} }) });
  
        // Send email to transporter
        if (selectedTransporter.email) {
          const transporterEmail = nodemailer.createTransport({
            service: 'gmail',
            auth: {
              user: process.env.EMAIL_USER,
              pass: process.env.EMAIL_PASS,
            },
            tls: { rejectUnauthorized: false },
          });
  
          const mailOptions = {
            from: process.env.EMAIL_USER,
            to: selectedTransporter.email,
            subject: `New Delivery Assigned: ${donation.title}`,
            text: `Dear ${selectedTransporter.name || 'Transporter'},
  
  You have been assigned to a delivery for the donation "${donation.title}".
  
  Details:
  - Donation Title: ${donation.title}
  - Pickup Address: ${donation.address}
  - Delivery Address: ${requestNeed.address}
  - Delivery Status: Pending
  
  Thank you for using our platform!
  
  Best regards,
  The Platform Team`,
            html: `
              <div style="font-family: Arial, sans-serif; color: black;">
                <h2 style="color: #228b22;">New Delivery Assigned</h2>
                <p>Dear ${selectedTransporter.name || 'Transporter'},</p>
                <p>You have been assigned to a delivery for the donation "<strong>${donation.title}</strong>".</p>
                <h3>Details:</h3>
                <ul>
                  <li><strong>Donation Title:</strong> ${donation.title}</li>
                  <li><strong>Pickup Address:</strong> ${donation.address}</li>
                  <li><strong>Delivery Address:</strong> ${requestNeed.address}</li>
                  <li><strong>Delivery Status:</strong> Pending</li>
                </ul>
                <p>Thank you for using our platform!</p>
                <p style="margin-top: 20px;">Best regards,<br>The Platform Team</p>
              </div>
            `,
          };
  
          await transporterEmail.sendMail(mailOptions);
          console.log(`Email sent to ${selectedTransporter.email}`);
        }
      }
  
      // Send email to recipient
      if (recipient && recipient.email) {
        const transporter = nodemailer.createTransport({
          service: 'gmail',
          auth: {
            user: process.env.EMAIL_USER,
            pass: process.env.EMAIL_PASS,
          },
          tls: { rejectUnauthorized: false },
        });
  
        const mailOptions = {
          from: process.env.EMAIL_USER,
          to: recipient.email,
          subject: `Your Request "${requestNeed.title}" Has Been Accepted and Delivery Is Scheduled`,
          text: `Dear ${recipient.name || 'User'},
  
  Your request titled "${requestNeed.title}" has been accepted and a delivery is scheduled.
  
  Details:
  - Donation Title: ${donation.title}
  - Request Status: ${requestNeed.status}
  - Delivery Status: Pending
  ${selectedTransporter ? `- Assigned Transporter: ${selectedTransporter.name}` : '- Transporter: Pending Assignment'}
  
  Thank you for using our platform!
  
  Best regards,
  The Platform Team`,
          html: `
            <div style="font-family: Arial, sans-serif; color: black;">
              <h2 style="color: #228b22;">Your Request Has Been Accepted</h2>
              <p>Dear ${recipient.name || 'User'},</p>
              <p>Your request titled "<strong>${requestNeed.title}</strong>" has been accepted and a delivery is scheduled.</p>
              <h3>Details:</h3>
              <ul>
                <li><strong>Donation Title:</strong> ${donation.title}</li>
                <li><strong>Request Status:</strong> ${requestNeed.status}</li>
                <li><strong>Delivery Status:</strong> Pending</li>
                ${selectedTransporter ? `<li><strong>Assigned Transporter:</strong> ${selectedTransporter.name}</li>` : '<li><strong>Transporter:</strong> Pending Assignment</li>'}
              </ul>
              <p>Thank you for using our platform!</p>
              <p style="margin-top: 20px;">Best regards,<br>The Platform Team</p>
            </div>
          `,
        };
  
        await transporter.sendMail(mailOptions);
        console.log(`Email sent to ${recipient.email}`);
      }
  
      res.status(200).json({
        message: 'Donation accepted and delivery created successfully',
        transaction,
        delivery,
        transporter: selectedTransporter ? { _id: selectedTransporter._id, name: selectedTransporter.name } : null,
      });
    } catch (error) {
      console.error('Error accepting donation transaction:', error);
      res.status(500).json({ message: 'Failed to accept donation', error: error.message });
    }
  }



 
async function createAndAcceptDonationTransaction(req, res) {
    try {
      const { donationId, requestNeedId, allocatedProducts = [], allocatedMeals = [] } = req.body;
      const user = req.user;
  
      // Validate inputs
      if (!donationId || !requestNeedId) {
        return res.status(400).json({ message: 'donationId and requestNeedId are required' });
      }
      if (!mongoose.Types.ObjectId.isValid(donationId) || !mongoose.Types.ObjectId.isValid(requestNeedId)) {
        return res.status(400).json({ message: 'Invalid donationId or requestNeedId' });
      }
  
      // Fetch transaction with populated references
      const transaction = await DonationTransaction.findOne({
        donation: donationId,
        requestNeed: requestNeedId,
        status: 'pending',
      })
        .populate({
          path: 'donation',
          populate: [
            { path: 'donor' },
            { path: 'meals.meal', model: 'Meals' },
            { path: 'products.product', model: 'Product' },
          ],
        })
        .populate({
          path: 'requestNeed',
          populate: [
            { path: 'recipient' },
            { path: 'requestedProducts.product', model: 'Product' },
            { path: 'requestedMeals.meal', model: 'Meals' },
          ],
        })
        .populate('allocatedProducts.product')
        .populate('allocatedMeals.meal');
  
      if (!transaction) {
        return res.status(404).json({ message: 'Pending transaction not found for this donation and request' });
      }
  
      const donation = transaction.donation;
      const requestNeed = transaction.requestNeed;
  
      // Validate category match
      if (donation.category !== requestNeed.category) {
        return res.status(400).json({
          message: `Donation and request categories do not match (donation: ${donation.category}, request: ${requestNeed.category})`,
        });
      }
  
      // Validate allocations based on category
      if (donation.category === 'packaged_products' && allocatedMeals.length > 0) {
        return res.status(400).json({
          message: 'allocatedMeals must be empty for packaged_products donations',
        });
      }
      if (donation.category === 'prepared_meals' && allocatedProducts.length > 0) {
        return res.status(400).json({
          message: 'allocatedProducts must be empty for prepared_meals donations',
        });
      }
  
      let isFullyFulfilled = false;
      let finalAllocatedProducts = [];
      let finalAllocatedMeals = [];
  
      // Set allocations based on category
      if (donation.category === 'packaged_products') {
        finalAllocatedProducts = allocatedProducts.length ? allocatedProducts : transaction.allocatedProducts;
        finalAllocatedMeals = []; // Ignore allocatedMeals
      } else if (donation.category === 'prepared_meals') {
        finalAllocatedMeals = allocatedMeals.length ? allocatedMeals : transaction.allocatedMeals;
        finalAllocatedProducts = []; // Ignore allocatedProducts
      }
  
      // Handle prepared meals
      if (donation.category === 'prepared_meals') {
        if (!finalAllocatedMeals.length) {
          return res.status(400).json({ message: 'No meals allocated for this request' });
        }
  
        let totalAllocated = 0;
        for (const allocated of finalAllocatedMeals) {
          const donationMeal = donation.meals.find((m) =>
            m.meal && allocated.meal && m.meal._id.toString() === allocated.meal._id.toString()
          );
          if (!donationMeal) {
            console.error('Meal not found in donation:', {
              allocatedMeal: allocated,
              donationMeals: donation.meals,
            });
            return res.status(400).json({
              message: `Meal ${allocated.meal?._id || allocated.meal} not found in donation`,
            });
          }
          if (allocated.quantity > donationMeal.quantity) {
            return res.status(400).json({
              message: `Requested quantity (${allocated.quantity}) exceeds available quantity (${donationMeal.quantity}) for meal ${allocated.meal._id}`,
            });
          }
          donationMeal.quantity -= allocated.quantity;
          totalAllocated += allocated.quantity;
        }
  
        donation.meals = donation.meals.filter((m) => m.quantity > 0);
  
        donation.remainingMeals = (donation.remainingMeals || donation.numberOfMeals) - totalAllocated;
        if (donation.remainingMeals < 0) donation.remainingMeals = 0;
        isFullyFulfilled = donation.remainingMeals === 0;
        donation.status = isFullyFulfilled ? 'fulfilled' : 'partially_fulfilled';
  
        requestNeed.numberOfMeals = (requestNeed.numberOfMeals || 0) - totalAllocated;
        if (requestNeed.numberOfMeals < 0) requestNeed.numberOfMeals = 0;
        requestNeed.status = requestNeed.numberOfMeals === 0 ? 'fulfilled' : 'partially_fulfilled';
  
        // Ensure donation.numberOfMeals is not negative
        donation.numberOfMeals = (donation.numberOfMeals || 0) - totalAllocated;
        if (donation.numberOfMeals < 0) donation.numberOfMeals = 0;
      }
  
      // Handle packaged products
      if (donation.category === 'packaged_products') {
        if (!finalAllocatedProducts.length) {
          return res.status(400).json({ message: 'No products allocated for this request' });
        }
  
        for (const allocated of finalAllocatedProducts) {
          const donationProduct = donation.products.find((p) =>
            p.product && allocated.product && p.product._id.toString() === allocated.product._id.toString()
          );
          if (!donationProduct) {
            console.error('Product not found in donation:', {
              allocatedProduct: allocated,
              donationProducts: donation.products,
            });
            return res.status(400).json({
              message: `Product ${allocated.product?._id || allocated.product} not found in donation`,
            });
          }
          if (allocated.quantity > donationProduct.quantity) {
            return res.status(400).json({
              message: `Requested quantity (${allocated.quantity}) exceeds available quantity (${donationProduct.quantity}) for product ${allocated.product._id}`,
            });
          }
          donationProduct.quantity -= allocated.quantity;
  
          const requestProduct = requestNeed.requestedProducts.find((rp) =>
            rp.product && allocated.product && rp.product._id.toString() === allocated.product._id.toString()
          );
          if (requestProduct) {
            requestProduct.quantity -= allocated.quantity;
            if (requestProduct.quantity < 0) requestProduct.quantity = 0;
          }
        }
  
        donation.products = donation.products.filter((p) => p.quantity > 0);
        const remainingProducts = donation.products.reduce((sum, p) => sum + p.quantity, 0);
        isFullyFulfilled = remainingProducts === 0;
        donation.status = isFullyFulfilled ? 'fulfilled' : 'partially_fulfilled';
  
        // Ensure numberOfMeals is not modified for packaged_products
        donation.numberOfMeals = donation.numberOfMeals || 0;
        requestNeed.numberOfMeals = requestNeed.numberOfMeals || 0;
        const remainingRequestProducts = requestNeed.requestedProducts.reduce(
          (sum, rp) => sum + rp.quantity,
          0
        );
        requestNeed.status = remainingRequestProducts === 0 ? 'fulfilled' : 'partially_fulfilled';
      }
  
      // Log donation state before saving
      console.log('Donation before save:', {
        numberOfMeals: donation.numberOfMeals,
        remainingMeals: donation.remainingMeals,
        category: donation.category,
        products: donation.products,
        meals: donation.meals,
      });
  
      // Save updates
      await donation.save();
      await requestNeed.save();
  
      // Update transaction
      transaction.status = 'approved';
      transaction.responseDate = new Date();
      transaction.allocatedProducts = finalAllocatedProducts;
      transaction.allocatedMeals = finalAllocatedMeals;
      await transaction.save();
  
      // Find available transporter
      const availableTransporters = await User.find({
        role: 'transporter',
        isAvailable: true,
        isActive: true,
        isBlocked: false,
      }).select('_id name email location');
  
      let selectedTransporter = null;
      if (availableTransporters.length === 0) {
        console.warn('No available transporters found. Delivery will be created without a transporter.');
      } else {
        // Basic selection: First available transporter
        selectedTransporter = availableTransporters[0];
  
        // Optional: Select nearest transporter using geospatial query
        if (donation.location && donation.location.type === 'Point') {
          try {
            const nearestTransporter = await User.find({
              role: 'transporter',
              isAvailable: true,
              isActive: true,
              isBlocked: false,
              location: {
                $near: {
                  $geometry: donation.location,
                  $maxDistance: 10000, // 10km in meters
                },
              },
            })
              .select('_id name email location')
              .limit(1);
  
            selectedTransporter = nearestTransporter[0] || availableTransporters[0];
          } catch (geoError) {
            console.error('Geospatial query failed:', geoError.message);
            // Fallback to first available transporter
          }
        }
      }
  
      // Create delivery
      const delivery = new Delivery({
        donationTransaction: transaction._id,
        transporter: selectedTransporter ? selectedTransporter._id : null,
        pickupCoordinates: donation.location,
        deliveryCoordinates: requestNeed.location,
        pickupAddress: donation.address,
        deliveryAddress: requestNeed.address,
        status: null,
      });
      await delivery.save();
  
      // Notify recipient
      const recipient = await User.findById(requestNeed.recipient).select('_id name email');
      await createNotification({
        body: {
          sender: transaction.donor,
          receiver: transaction.recipient,
          message: `A delivery has been created for your request "${requestNeed.title}". Status: Pending.`,
        },
      }, { status: () => ({ json: () => {} }) });
  
      // Notify donor
      await createNotification({
        body: {
          sender: transaction.recipient,
          receiver: transaction.donor,
          message: `A delivery has been created for your donation "${donation.title}". Status: Pending.`,
        },
      }, { status: () => ({ json: () => {} }) });
  
      // Notify transporter (if assigned)
      if (selectedTransporter) {
        await createNotification({
          body: {
            sender: transaction.donor,
            receiver: selectedTransporter._id,
            message: `You have been assigned to a delivery for the donation "${donation.title}". Pickup address: ${donation.address}. Status: Pending.`,
          },
        }, { status: () => ({ json: () => {} }) });
      }
  
      // Send email to donor
      if (donation.donor && donation.donor.email) {
        let allocatedItemsText = '';
        if (donation.category === 'prepared_meals') {
          allocatedItemsText = finalAllocatedMeals
            .map((am) => {
              const meal = donation.meals.find((m) =>
                m.meal && am.meal && m.meal._id.toString() === am.meal._id.toString()
              )?.meal;
              return `${meal?.mealName || 'Unknown Meal'} (Quantity: ${am.quantity})`;
            })
            .join(', ');
        } else if (donation.category === 'packaged_products') {
          allocatedItemsText = finalAllocatedProducts
            .map((ap) => {
              const product = donation.products.find((p) =>
                p.product && ap.product && p.product._id.toString() === ap.product._id.toString()
              )?.product;
              return `${product?.name || 'Unknown Product'} (Quantity: ${ap.quantity})`;
            })
            .join(', ');
        }
  
        const subject = `Your Donation "${donation.title}" Has Been Accepted`;
        const text = `Dear ${donation.donor.name || 'Donor'},
  
  Your donation titled "${donation.title}" has been accepted.
  
  Donation Details:
  - Title: ${donation.title}
  - Request: ${requestNeed.title}
  - Allocated Items: ${allocatedItemsText}
  - Accepted On: ${new Date().toLocaleDateString()}
  - Status: ${donation.status}
  - Delivery Status: Pending
  ${selectedTransporter ? `- Assigned Transporter: ${selectedTransporter.name}` : '- Transporter: Pending Assignment'}
  
  Thank you for your generosity!
  
  Best regards,
  The Platform Team`;
  
        const html = `
          <div style="font-family: Arial, sans-serif; color: black;">
            <div style="text-align: center; margin-bottom: 20px;">
              <img src="cid:logo" alt="Platform Logo" style="max-width: 150px; height: auto;" />
            </div>
            <h2 style="color: #228b22;">Your Donation Has Been Accepted</h2>
            <p>Dear ${donation.donor.name || 'Donor'},</p>
            <p>Your donation titled "<strong>${donation.title}</strong>" has been accepted.</p>
            <h3>Donation Details:</h3>
            <ul>
              <li><strong>Title:</strong> ${donation.title}</li>
              <li><strong>Request:</strong> ${requestNeed.title}</li>
              <li><strong>Allocated Items:</strong> ${allocatedItemsText}</li>
              <li><strong>Accepted On:</strong> ${new Date().toLocaleDateString()}</li>
              <li><strong>Status:</strong> ${donation.status}</li>
              <li><strong>Delivery Status:</strong> Pending</li>
              ${selectedTransporter ? `<li><strong>Assigned Transporter:</strong> ${selectedTransporter.name}</li>` : '<li><strong>Transporter:</strong> Pending Assignment</li>'}
            </ul>
            <p>Thank you for your generosity!</p>
            <p style="margin-top: 20px;">Best regards,<br>The Platform Team</p>
          </div>
        `;
  
        const attachments = [
          {
            filename: 'logo.png',
            path: path.join(__dirname, '../Uploads/logo.png'),
            cid: 'logo',
          },
        ];
  
        await sendEmail(donation.donor.email, subject, text, html, attachments);
        console.log(`Email sent to ${donation.donor.email}`);
      }
  
      // Send email to recipient
      if (recipient && recipient.email) {
        const subject = `Your Request "${requestNeed.title}" Has Been Fulfilled`;
        const text = `Dear ${recipient.name || 'User'},
  
  Your request titled "${requestNeed.title}" has been fulfilled.
  
  Details:
  - Donation Title: ${donation.title}
  - Request Status: ${requestNeed.status}
  - Delivery Status: Pending
  ${selectedTransporter ? `- Assigned Transporter: ${selectedTransporter.name}` : '- Transporter: Pending Assignment'}
  
  Thank you for using our platform!
  
  Best regards,
  The Platform Team`;
  
        const html = `
          <div style="font-family: Arial, sans-serif; color: black;">
            <div style="text-align: center; margin-bottom: 20px;">
              <img src="cid:logo" alt="Platform Logo" style="max-width: 150px; height: auto;" />
            </div>
            <h2 style="color: #228b22;">Your Request Has Been Fulfilled</h2>
            <p>Dear ${recipient.name || 'User'},</p>
            <p>Your request titled "<strong>${requestNeed.title}</strong>" has been fulfilled.</p>
            <h3>Details:</h3>
            <ul>
              <li><strong>Donation Title:</strong> ${donation.title}</li>
              <li><strong>Request Status:</strong> ${requestNeed.status}</li>
              <li><strong>Delivery Status:</strong> Pending</li>
              ${selectedTransporter ? `<li><strong>Assigned Transporter:</strong> ${selectedTransporter.name}</li>` : '<li><strong>Transporter:</strong> Pending Assignment</li>'}
            </ul>
            <p>Thank you for using our platform!</p>
            <p style="margin-top: 20px;">Best regards,<br>The Platform Team</p>
          </div>
        `;
  
        const attachments = [
          {
            filename: 'logo.png',
            path: path.join(__dirname, '../Uploads/logo.png'),
            cid: 'logo',
          },
        ];
  
        await sendEmail(recipient.email, subject, text, html, attachments);
        console.log(`Email sent to ${recipient.email}`);
      }
  
      // Send email to transporter (if assigned)
      if (selectedTransporter && selectedTransporter.email) {
        const subject = `New Delivery Assigned: ${donation.title}`;
        const text = `Dear ${selectedTransporter.name || 'Transporter'},
  
  You have been assigned to a delivery for the donation "${donation.title}".
  
  Details:
  - Donation Title: ${donation.title}
  - Pickup Address: ${donation.address}
  - Delivery Address: ${requestNeed.address}
  - Delivery Status: Pending
  
  Thank you for using our platform!
  
  Best regards,
  The Platform Team`;
  
        const html = `
          <div style="font-family: Arial, sans-serif; color: black;">
            <div style="text-align: center; margin-bottom: 20px;">
              <img src="cid:logo" alt="Platform Logo" style="max-width: 150px; height: auto;" />
            </div>
            <h2 style="color: #228b22;">New Delivery Assigned</h2>
            <p>Dear ${selectedTransporter.name || 'Transporter'},</p>
            <p>You have been assigned to a delivery for the donation "<strong>${donation.title}</strong>".</p>
            <h3>Details:</h3>
            <ul>
              <li><strong>Donation Title:</strong> ${donation.title}</li>
              <li><strong>Pickup Address:</strong> ${donation.address}</li>
              <li><strong>Delivery Address:</strong> ${requestNeed.address}</li>
              <li><strong>Delivery Status:</strong> Pending</li>
            </ul>
            <p>Thank you for using our platform!</p>
            <p style="margin-top: 20px;">Best regards,<br>The Platform Team</p>
          </div>
        `;
  
        const attachments = [
          {
            filename: 'logo.png',
            path: path.join(__dirname, '../Uploads/logo.png'),
            cid: 'logo',
          },
        ];
  
        await sendEmail(selectedTransporter.email, subject, text, html, attachments);
        console.log(`Email sent to ${selectedTransporter.email}`);
      }
  
      res.status(200).json({
        message: 'Transaction accepted successfully',
        donation,
        request: requestNeed,
        transaction,
        delivery,
        transporter: selectedTransporter ? { _id: selectedTransporter._id, name: selectedTransporter.name } : null,
      });
    } catch (error) {
      console.error('Error accepting transaction:', error);
      res.status(500).json({
        message: 'Failed to accept transaction',
        error: error.message,
      });
    }
  }
  

  async function createAndAcceptDonationTransactionBiderc(req, res) {
    try {
      const { donationId, requestNeedId, allocatedProducts = [], allocatedMeals = [] } = req.body;
      const user = req.user;
  
      // Validate inputs
      if (!donationId || !requestNeedId) {
        return res.status(400).json({ message: 'donationId and requestNeedId are required' });
      }
      if (!mongoose.Types.ObjectId.isValid(donationId) || !mongoose.Types.ObjectId.isValid(requestNeedId)) {
        return res.status(400).json({ message: 'Invalid donationId or requestNeedId' });
      }
  
      // Fetch transaction with populated references
      const transaction = await DonationTransaction.findOne({
        donation: donationId,
        requestNeed: requestNeedId,
        status: 'pending',
      })
        .populate({
          path: 'donation',
          populate: [
            { path: 'donor' },
            { path: 'meals.meal', model: 'Meals' },
            { path: 'products.product', model: 'Product' },
          ],
        })
        .populate({
          path: 'requestNeed',
          populate: [
            { path: 'recipient' },
            { path: 'requestedProducts.product', model: 'Product' },
            { path: 'requestedMeals.meal', model: 'Meals' },
          ],
        })
        .populate('allocatedProducts.product')
        .populate('allocatedMeals.meal');
  
      if (!transaction) {
        return res.status(404).json({ message: 'Pending transaction not found for this donation and request' });
      }
  
      const donation = transaction.donation;
      const requestNeed = transaction.requestNeed;
  
      // Validate category match
      if (donation.category !== requestNeed.category) {
        return res.status(400).json({
          message: `Donation and request categories do not match (donation: ${donation.category}, request: ${requestNeed.category})`,
        });
      }
  
      // Validate allocations based on category
      if (donation.category === 'packaged_products' && allocatedMeals.length > 0) {
        return res.status(400).json({
          message: 'allocatedMeals must be empty for packaged_products donations',
        });
      }
      if (donation.category === 'prepared_meals' && allocatedProducts.length > 0) {
        return res.status(400).json({
          message: 'allocatedProducts must be empty for prepared_meals donations',
        });
      }
  
      let isFullyFulfilled = false;
      let finalAllocatedProducts = [];
      let finalAllocatedMeals = [];
  
      // Set allocations based on category
      if (donation.category === 'packaged_products') {
        finalAllocatedProducts = allocatedProducts.length ? allocatedProducts : transaction.allocatedProducts;
        finalAllocatedMeals = []; // Ignore allocatedMeals
      } else if (donation.category === 'prepared_meals') {
        finalAllocatedMeals = allocatedMeals.length ? allocatedMeals : transaction.allocatedMeals;
        finalAllocatedProducts = []; // Ignore allocatedProducts
      }
  
      // Handle prepared meals
      if (donation.category === 'prepared_meals') {
        if (!finalAllocatedMeals.length) {
          return res.status(400).json({ message: 'No meals allocated for this request' });
        }
  
        let totalAllocated = 0;
        for (const allocated of finalAllocatedMeals) {
          const donationMeal = donation.meals.find((m) =>
            m.meal && allocated.meal && m.meal._id.toString() === allocated.meal._id.toString()
          );
          if (!donationMeal) {
            console.error('Meal not found in donation:', {
              allocatedMeal: allocated,
              donationMeals: donation.meals,
            });
            return res.status(400).json({
              message: `Meal ${allocated.meal?._id || allocated.meal} not found in donation`,
            });
          }
          if (allocated.quantity > donationMeal.quantity) {
            return res.status(400).json({
              message: `Requested quantity (${allocated.quantity}) exceeds available quantity (${donationMeal.quantity}) for meal ${allocated.meal._id}`,
            });
          }
          donationMeal.quantity -= allocated.quantity;
          totalAllocated += allocated.quantity;
        }
  
        donation.meals = donation.meals.filter((m) => m.quantity > 0);
  
        donation.remainingMeals = (donation.remainingMeals || donation.numberOfMeals) - totalAllocated;
        if (donation.remainingMeals < 0) donation.remainingMeals = 0;
        isFullyFulfilled = donation.remainingMeals === 0;
        donation.status = isFullyFulfilled ? 'fulfilled' : 'approved';
  
        requestNeed.numberOfMeals = (requestNeed.numberOfMeals || 0) - totalAllocated;
        if (requestNeed.numberOfMeals < 0) requestNeed.numberOfMeals = 0;
        requestNeed.status = requestNeed.numberOfMeals === 0 ? 'fulfilled' : 'partially_fulfilled';
  
        // Ensure donation.numberOfMeals is not negative
        donation.numberOfMeals = (donation.numberOfMeals || 0) - totalAllocated;
        if (donation.numberOfMeals < 0) donation.numberOfMeals = 0;
      }
  
      // Handle packaged products
      if (donation.category === 'packaged_products') {
        if (!finalAllocatedProducts.length) {
          return res.status(400).json({ message: 'No products allocated for this request' });
        }
  
        for (const allocated of finalAllocatedProducts) {
          const donationProduct = donation.products.find((p) =>
            p.product && allocated.product && p.product._id.toString() === allocated.product._id.toString()
          );
          if (!donationProduct) {
            console.error('Product not found in donation:', {
              allocatedProduct: allocated,
              donationProducts: donation.products,
            });
            return res.status(400).json({
              message: `Product ${allocated.product?._id || allocated.product} not found in donation`,
            });
          }
          if (allocated.quantity > donationProduct.quantity) {
            return res.status(400).json({
              message: `Requested quantity (${allocated.quantity}) exceeds available quantity (${donationProduct.quantity}) for product ${allocated.product._id}`,
            });
          }
          donationProduct.quantity -= allocated.quantity;
  
          const requestProduct = requestNeed.requestedProducts.find((rp) =>
            rp.product && allocated.product && rp.product._id.toString() === allocated.product._id.toString()
          );
          if (requestProduct) {
            requestProduct.quantity -= allocated.quantity;
            if (requestProduct.quantity < 0) requestProduct.quantity = 0;
          }
        }
  
        donation.products = donation.products.filter((p) => p.quantity > 0);
        const remainingProducts = donation.products.reduce((sum, p) => sum + p.quantity, 0);
        isFullyFulfilled = remainingProducts === 0;
        donation.status = isFullyFulfilled ? 'fulfilled' : 'approved';
  
        // Ensure numberOfMeals is not modified for packaged_products
        donation.numberOfMeals = donation.numberOfMeals || 0;
        requestNeed.numberOfMeals = requestNeed.numberOfMeals || 0;
        const remainingRequestProducts = requestNeed.requestedProducts.reduce(
          (sum, rp) => sum + rp.quantity,
          0
        );
        requestNeed.status = remainingRequestProducts === 0 ? 'fulfilled' : 'partially_fulfilled';
      }
  
      // Log donation state before saving
      console.log('Donation before save:', {
        numberOfMeals: donation.numberOfMeals,
        remainingMeals: donation.remainingMeals,
        category: donation.category,
        products: donation.products,
        meals: donation.meals,
      });
  
      // Save updates
      await donation.save();
      await requestNeed.save();
  
      // Update transaction
      transaction.status = 'approved';
      transaction.responseDate = new Date();
      transaction.allocatedProducts = finalAllocatedProducts;
      transaction.allocatedMeals = finalAllocatedMeals;
      await transaction.save();
  
      // Find available transporter
      const availableTransporters = await User.find({
        role: 'transporter',
        isAvailable: true,
        isActive: true,
        isBlocked: false,
      }).select('_id name email location');
  
      let selectedTransporter = null;
      if (availableTransporters.length === 0) {
        console.warn('No available transporters found. Delivery will be created without a transporter.');
      } else {
        // Basic selection: First available transporter
        selectedTransporter = availableTransporters[0];
  
        // Optional: Select nearest transporter using geospatial query
        if (donation.location && donation.location.type === 'Point') {
          try {
            const nearestTransporter = await User.find({
              role: 'transporter',
              isAvailable: true,
              isActive: true,
              isBlocked: false,
              location: {
                $near: {
                  $geometry: donation.location,
                  $maxDistance: 10000, // 10km in meters
                },
              },
            })
              .select('_id name email location')
              .limit(1);
  
            selectedTransporter = nearestTransporter[0] || availableTransporters[0];
          } catch (geoError) {
            console.error('Geospatial query failed:', geoError.message);
            // Fallback to first available transporter
          }
        }
      }
  
      // Create delivery
      const delivery = new Delivery({
        donationTransaction: transaction._id,
        transporter: selectedTransporter ? selectedTransporter._id : null,
        pickupAddress: donation.address,
        deliveryAddress: requestNeed.address,
        pickupCoordinates: donation.location,
        deliveryCoordinates: requestNeed.location,
        status: null,
      });
      await delivery.save();
  
      // Notify recipient
      const recipient = await User.findById(requestNeed.recipient).select('_id name email');
      await createNotification({
        body: {
          sender: transaction.donor,
          receiver: transaction.recipient,
          message: `A delivery has been created for your request "${requestNeed.title}". Status: Pending.`,
        },
      }, { status: () => ({ json: () => {} }) });
  
      // Notify donor
      await createNotification({
        body: {
          sender: transaction.recipient,
          receiver: transaction.donor,
          message: `A delivery has been created for your donation "${donation.title}". Status: Pending.`,
        },
      }, { status: () => ({ json: () => {} }) });
  
      // Notify transporter (if assigned)
      if (selectedTransporter) {
        await createNotification({
          body: {
            sender: transaction.donor,
            receiver: selectedTransporter._id,
            message: `You have been assigned to a delivery for the donation "${donation.title}". Pickup address: ${donation.address}. Status: Pending.`,
          },
        }, { status: () => ({ json: () => {} }) });
      }
  
      // Send email to donor
      if (donation.donor && donation.donor.email) {
        let allocatedItemsText = '';
        if (donation.category === 'prepared_meals') {
          allocatedItemsText = finalAllocatedMeals
            .map((am) => {
              const meal = donation.meals.find((m) =>
                m.meal && am.meal && m.meal._id.toString() === am.meal._id.toString()
              )?.meal;
              return `${meal?.mealName || 'Unknown Meal'} (Quantity: ${am.quantity})`;
            })
            .join(', ');
        } else if (donation.category === 'packaged_products') {
          allocatedItemsText = finalAllocatedProducts
            .map((ap) => {
              const product = donation.products.find((p) =>
                p.product && ap.product && p.product._id.toString() === ap.product._id.toString()
              )?.product;
              return `${product?.name || 'Unknown Product'} (Quantity: ${ap.quantity})`;
            })
            .join(', ');
        }
  
        const subject = `Your Donation "${donation.title}" Has Been Accepted`;
        const text = `Dear ${donation.donor.name || 'Donor'},
  
  Your donation titled "${donation.title}" has been accepted.
  
  Donation Details:
  - Title: ${donation.title}
  - Request: ${requestNeed.title}
  - Allocated Items: ${allocatedItemsText}
  - Accepted On: ${new Date().toLocaleDateString()}
  - Status: ${donation.status}
  - Delivery Status: Pending
  ${selectedTransporter ? `- Assigned Transporter: ${selectedTransporter.name}` : '- Transporter: Pending Assignment'}
  
  Thank you for your generosity!
  
  Best regards,
  The Platform Team`;
  
        const html = `
          <div style="font-family: Arial, sans-serif; color: black;">
            <div style="text-align: center; margin-bottom: 20px;">
              <img src="cid:logo" alt="Platform Logo" style="max-width: 150px; height: auto;" />
            </div>
            <h2 style="color: #228b22;">Your Donation Has Been Accepted</h2>
            <p>Dear ${donation.donor.name || 'Donor'},</p>
            <p>Your donation titled "<strong>${donation.title}</strong>" has been accepted.</p>
            <h3>Donation Details:</h3>
            <ul>
              <li><strong>Title:</strong> ${donation.title}</li>
              <li><strong>Request:</strong> ${requestNeed.title}</li>
              <li><strong>Allocated Items:</strong> ${allocatedItemsText}</li>
              <li><strong>Accepted On:</strong> ${new Date().toLocaleDateString()}</li>
              <li><strong>Status:</strong> ${donation.status}</li>
              <li><strong>Delivery Status:</strong> Pending</li>
              ${selectedTransporter ? `<li><strong>Assigned Transporter:</strong> ${selectedTransporter.name}</li>` : '<li><strong>Transporter:</strong> Pending Assignment</li>'}
            </ul>
            <p>Thank you for your generosity!</p>
            <p style="margin-top: 20px;">Best regards,<br>The Platform Team</p>
          </div>
        `;
  
        const attachments = [
          {
            filename: 'logo.png',
            path: path.join(__dirname, '../Uploads/logo.png'),
            cid: 'logo',
          },
        ];
  
        await sendEmail(donation.donor.email, subject, text, html, attachments);
        console.log(`Email sent to ${donation.donor.email}`);
      }
  
      // Send email to recipient
      if (recipient && recipient.email) {
        const subject = `Your Request "${requestNeed.title}" Has Been Fulfilled`;
        const text = `Dear ${recipient.name || 'User'},
  
  Your request titled "${requestNeed.title}" has been fulfilled.
  
  Details:
  - Donation Title: ${donation.title}
  - Request Status: ${requestNeed.status}
  - Delivery Status: Pending
  ${selectedTransporter ? `- Assigned Transporter: ${selectedTransporter.name}` : '- Transporter: Pending Assignment'}
  
  Thank you for using our platform!
  
  Best regards,
  The Platform Team`;
  
        const html = `
          <div style="font-family: Arial, sans-serif; color: black;">
            <div style="text-align: center; margin-bottom: 20px;">
              <img src="cid:logo" alt="Platform Logo" style="max-width: 150px; height: auto;" />
            </div>
            <h2 style="color: #228b22;">Your Request Has Been Fulfilled</h2>
            <p>Dear ${recipient.name || 'User'},</p>
            <p>Your request titled "<strong>${requestNeed.title}</strong>" has been fulfilled.</p>
            <h3>Details:</h3>
            <ul>
              <li><strong>Donation Title:</strong> ${donation.title}</li>
              <li><strong>Request Status:</strong> ${requestNeed.status}</li>
              <li><strong>Delivery Status:</strong> Pending</li>
              ${selectedTransporter ? `<li><strong>Assigned Transporter:</strong> ${selectedTransporter.name}</li>` : '<li><strong>Transporter:</strong> Pending Assignment</li>'}
            </ul>
            <p>Thank you for using our platform!</p>
            <p style="margin-top: 20px;">Best regards,<br>The Platform Team</p>
          </div>
        `;
  
        const attachments = [
          {
            filename: 'logo.png',
            path: path.join(__dirname, '../Uploads/logo.png'),
            cid: 'logo',
          },
        ];
  
        await sendEmail(recipient.email, subject, text, html, attachments);
        console.log(`Email sent to ${recipient.email}`);
      }
  
      // Send email to transporter (if assigned)
      if (selectedTransporter && selectedTransporter.email) {
        const subject = `New Delivery Assigned: ${donation.title}`;
        const text = `Dear ${selectedTransporter.name || 'Transporter'},
  
  You have been assigned to a delivery for the donation "${donation.title}".
  
  Details:
  - Donation Title: ${donation.title}
  - Pickup Address: ${donation.address}
  - Delivery Address: ${requestNeed.address}
  - Delivery Status: Pending
  
  Thank you for using our platform!
  
  Best regards,
  The Platform Team`;
  
        const html = `
          <div style="font-family: Arial, sans-serif; color: black;">
            <div style="text-align: center; margin-bottom: 20px;">
              <img src="cid:logo" alt="Platform Logo" style="max-width: 150px; height: auto;" />
            </div>
            <h2 style="color: #228b22;">New Delivery Assigned</h2>
            <p>Dear ${selectedTransporter.name || 'Transporter'},</p>
            <p>You have been assigned to a delivery for the donation "<strong>${donation.title}</strong>".</p>
            <h3>Details:</h3>
            <ul>
              <li><strong>Donation Title:</strong> ${donation.title}</li>
              <li><strong>Pickup Address:</strong> ${donation.address}</li>
              <li><strong>Delivery Address:</strong> ${requestNeed.address}</li>
              <li><strong>Delivery Status:</strong> Pending</li>
            </ul>
            <p>Thank you for using our platform!</p>
            <p style="margin-top: 20px;">Best regards,<br>The Platform Team</p>
          </div>
        `;
  
        const attachments = [
          {
            filename: 'logo.png',
            path: path.join(__dirname, '../Uploads/logo.png'),
            cid: 'logo',
          },
        ];
  
        await sendEmail(selectedTransporter.email, subject, text, html, attachments);
        console.log(`Email sent to ${selectedTransporter.email}`);
      }
  
      res.status(200).json({
        message: 'Transaction accepted successfully',
        donation,
        request: requestNeed,
        transaction,
        delivery,
        transporter: selectedTransporter ? { _id: selectedTransporter._id, name: selectedTransporter.name } : null,
      });
    } catch (error) {
      console.error('Error accepting transaction:', error);
      res.status(500).json({
        message: 'Failed to accept transaction',
        error: error.message,
      });
    }
  }
  
  
async function rejectDonationTransaction(req, res) {
    try {
      const { transactionId } = req.params;
      const { rejectionReason } = req.body;
  
      if (!transactionId) {
        return res.status(400).json({ message: 'Transaction ID is required' });
      }
      if (!rejectionReason) {
        return res.status(400).json({ message: 'Rejection reason is required' });
      }
  
      const transaction = await DonationTransaction.findById(transactionId)
        .populate({
          path: 'donation',
          populate: [
            { path: 'donor' },
            { path: 'meals.meal', model: 'Meals' },
            { path: 'products.product', model: 'Product' },
          ],
        })
        .populate({
          path: 'requestNeed',
          populate: [
            { path: 'recipient' },
            { path: 'requestedProducts.product', model: 'Product' },
          ],
        })
        .populate('recipient')
        .populate('donor')
        .populate('allocatedProducts.product')
        .populate('allocatedMeals.meal');
  
      if (!transaction) {
        return res.status(404).json({ message: 'Transaction not found' });
      }
  
      if (transaction.status !== 'pending') {
        return res.status(400).json({
          message: `Transaction cannot be rejected in its current state (${transaction.status})`,
        });
      }
  
      transaction.status = 'rejected';
      transaction.responseDate = new Date();
      transaction.rejectionReason = rejectionReason;
      await transaction.save();
  
      const donation = transaction.donation;
      if (donation) {
        donation.linkedRequests = donation.linkedRequests.filter(
          (reqId) => reqId.toString() !== transaction.requestNeed._id.toString()
        );
        const otherTransactions = await DonationTransaction.find({
          donation: donation._id,
          status: { $in: ['pending', 'approved'] },
        });
        donation.status = otherTransactions.length > 0 ? 'approved' : 'pending';
        await donation.save();
      }
  
      const requestNeed = transaction.requestNeed;
      if (requestNeed) {
        requestNeed.linkedDonation = requestNeed.linkedDonation.filter(
          (donId) => donId.toString() !== transaction.donation._id.toString()
        );
        const otherTransactions = await DonationTransaction.find({
          requestNeed: requestNeed._id,
          status: { $in: ['pending', 'approved'] },
        });
        requestNeed.status = otherTransactions.length > 0 ? 'partially_fulfilled' : 'pending';
        await requestNeed.save();
      }
  
      const recipient = transaction.recipient || (requestNeed && requestNeed.recipient);
      if (recipient && recipient.email) {
        try {
          const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
              user: process.env.EMAIL_USER || 'your-email@gmail.com',
              pass: process.env.EMAIL_PASS || 'your-email-password',
            },
            tls: {
              rejectUnauthorized: false,
            },
          });
  
          const mailOptions = {
            from: process.env.EMAIL_USER || 'your-email@gmail.com',
            to: recipient.email,
            subject: `Votre demande "${requestNeed.title}" a été rejetée`,
            text: `Cher ${recipient.name || 'Utilisateur'},
  
  Nous avons le regret de vous informer qu'une transaction pour votre demande intitulée "${requestNeed.title}" a été rejetée.
  
  Détails :
  - Titre du don : ${donation.title}
  - Raison du rejet : ${rejectionReason}
  
  Si vous avez des questions, veuillez contacter notre équipe de support.
  
  Cordialement,
  L'équipe de la plateforme`,
            html: `
              <div style="font-family: Arial, sans-serif; color: black;">
                <h2 style="color: #dc3545;">Votre transaction a été rejetée</h2>
                <p>Cher ${recipient.name || 'Utilisateur'},</p>
                <p>Nous avons le regret de vous informer qu'une transaction pour votre demande intitulée "<strong>${requestNeed.title}</strong>" a été rejetée.</p>
                <h3>Détails :</h3>
                <ul>
                  <li><strong>Titre du don :</strong> ${donation.title}</li>
                  <li><strong>Raison du rejet :</strong> ${rejectionReason}</li>
                </ul>
                <p>Si vous avez des questions, veuillez contacter notre équipe de support.</p>
                <p style="margin-top: 20px;">Cordialement,<br>L'équipe de la plateforme</p>
              </div>
            `,
          };
  
          await transporter.sendMail(mailOptions);
          console.log(`Email envoyé à ${recipient.email}`);
        } catch (emailError) {
          console.error(`Échec de l'envoi de l'email à ${recipient.email}:`, emailError.message);
        }
      }
  
      const donor = transaction.donor || (donation && donation.donor);
      if (donor && donor.email) {
        try {
          const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
              user: process.env.EMAIL_USER || 'your-email@gmail.com',
              pass: process.env.EMAIL_PASS || 'your-email-password',
            },
            tls: {
              rejectUnauthorized: false,
            },
          });
  
          const mailOptions = {
            from: process.env.EMAIL_USER || 'your-email@gmail.com',
            to: donor.email,
            subject: `Votre don "${donation.title}" a été rejeté`,
            text: `Cher ${donor.name || 'Donateur'},
  
  Nous avons le regret de vous informer qu'une transaction pour votre don intitulé "${donation.title}" a été rejetée.
  
  Détails :
  - Titre de la demande : ${requestNeed.title}
  - Raison du rejet : ${rejectionReason}
  
  Si vous avez des questions, veuillez contacter notre équipe de support.
  
  Cordialement,
  L'équipe de la plateforme`,
            html: `
              <div style="font-family: Arial, sans-serif; color: black;">
                <h2 style="color: #dc3545;">Votre transaction de don a été rejetée</h2>
                <p>Cher ${donor.name || 'Donateur'},</p>
                <p>Nous avons le regret de vous informer qu'une transaction pour votre don intitulé "<strong>${donation.title}</strong>" a été rejetée.</p>
                <h3>Détails :</h3>
                <ul>
                  <li><strong>Titre de la demande :</strong> ${requestNeed.title}</li>
                  <li><strong>Raison du rejet :</strong> ${rejectionReason}</li>
                </ul>
                <p>Si vous avez des questions, veuillez contacter notre équipe de support.</p>
                <p style="margin-top: 20px;">Cordialement,<br>L'équipe de la plateforme</p>
              </div>
            `,
          };
  
          await transporter.sendMail(mailOptions);
          console.log(`Email envoyé à ${donor.email}`);
        } catch (emailError) {
          console.error(`Échec de l'envoi de l'email à ${donor.email}:`, emailError.message);
        }
      }
  
      res.status(200).json({
        message: 'Transaction rejetée avec succès',
        transaction,
      });
    } catch (error) {
      console.error('Erreur lors du rejet de la transaction:', error);
      res.status(500).json({
        message: 'Échec du rejet de la transaction',
        error: error.message,
      });
    }
  }
  
async function checkRequestFulfillment(requestId) {
  const request = await RequestNeed.findById(requestId)
    .populate('requestedProducts')
    .populate('requestedMeals');
  const transactions = await DonationTransaction.find({ 
    requestNeed: requestId, 
    status: 'approved' 
  })
    .populate('allocatedProducts.product')
    .populate('allocatedMeals.meal');

  let isFullyFulfilled = false;

  if (request.category === 'packaged_products') {
    const requestedMap = new Map(request.requestedProducts.map(p => [p._id.toString(), p.totalQuantity]));
    const allocatedMap = new Map();

    transactions.forEach(t => {
      t.allocatedProducts.forEach(ap => {
        const productId = ap.product._id.toString();
        allocatedMap.set(productId, (allocatedMap.get(productId) || 0) + ap.quantity);
      });
    });

    isFullyFulfilled = [...requestedMap].every(([productId, requestedQty]) => 
      (allocatedMap.get(productId) || 0) >= requestedQty
    );
  } else if (request.category === 'prepared_meals') {
    const totalRequestedMeals = request.numberOfMeals;
    let totalAllocatedMeals = 0;

    transactions.forEach(t => {
      t.allocatedMeals.forEach(am => {
        totalAllocatedMeals += am.quantity;
      });
    });

    request.numberOfMeals = totalRequestedMeals - totalAllocatedMeals;
    if (request.numberOfMeals < 0) request.numberOfMeals = 0;

    isFullyFulfilled = request.numberOfMeals === 0;
  }

  request.status = isFullyFulfilled ? 'fulfilled' : 'partially_fulfilled';
  await request.save();
  console.log('checkRequestFulfillment updated request:', request);
}

async function rejectDonation(req, res) {
  try {
    const { donationId } = req.params;
    const { rejectionReason } = req.body;

    const donation = await Donation.findById(donationId);
    if (!donation) {
      return res.status(404).json({ message: 'Don non trouvé' });
    }

    const donor = await User.findById(donation.donor);
    if (!donor) return res.status(404).json({ message: 'Donateur non trouvé' });

    if (donation.status !== 'pending') {
      return res.status(400).json({ 
        message: `Le don ne peut pas être rejeté dans son état actuel (${donation.status})`
      });
    }

    donation.status = 'rejected';
    donation.rejectionReason = rejectionReason || 'Aucune raison fournie';
    await donation.save();

    if (donor.email) {
      const subject = `Votre don "${donation.title}" a été rejeté`;
      const text = `Cher ${donor.name || 'Donateur'},

Nous avons le regret de vous informer que votre don intitulé "${donation.title}" a été rejeté.

Détails du don :
- Titre : ${donation.title}
- Raison du rejet : ${rejectionReason || 'Aucune raison fournie'}
- Rejeté le : ${new Date().toLocaleDateString()}

Si vous avez des questions, veuillez contacter notre équipe de support.

Cordialement,
L'équipe de la plateforme`;

      const html = `
        <div style="font-family: Arial, sans-serif; color: black;">
          <div style="text-align: center; margin-bottom: 20px;">
            <img src="cid:logo" alt="Logo de la plateforme" style="max-width: 150px; height: auto;" />
          </div>
          <h2 style="color: #dc3545;">Votre don a été rejeté</h2>
          <p>Cher ${donor.name || 'Donateur'},</p>
          <p>Nous avons le regret de vous informer que votre don intitulé "<strong>${donation.title}</strong>" a été rejeté.</p>
          <h3>Détails du don :</h3>
          <ul>
            <li><strong>Titre :</strong> ${donation.title}</li>
            <li><strong>Raison du rejet :</strong> ${rejectionReason || 'Aucune raison fournie'}</li>
            <li><strong>Rejeté le :</strong> ${new Date().toLocaleDateString()}</li>
          </ul>
          <p>Si vous avez des questions, veuillez contacter notre équipe de support.</p>
          <p style="margin-top: 20px;">Cordialement,<br>L'équipe de la plateforme</p>
        </div>
      `;

      const attachments = [
        {
          filename: 'logo.png',
          path: path.join(__dirname, '../uploads/logo.png'),
          cid: 'logo',
        },
      ];

      await sendEmail(donor.email, subject, text, html, attachments);
    } else {
      console.warn(`Email du donateur non trouvé pour l'ID du donateur : ${donation.donor}`);
    }

    res.status(200).json({ 
      message: 'Don rejeté avec succès', 
      donation 
    });
  } catch (error) {
    res.status(500).json({ 
      message: 'Échec du rejet du don', 
      error: error.message 
    });
  }
}

async function getDonationTransactionsByDonorId(req, res) {
  try {
    const { donorId } = req.params;

    const donations = await Donation.find({ donor: donorId }).select('_id');

    if (!donations.length) {
      return res.status(404).json({ message: 'Aucun don trouvé pour ce donateur' });
    }

    const donationIds = donations.map(d => d._id);

    const transactions = await DonationTransaction.find({ donation: { $in: donationIds } })
      .populate({
        path: 'donation',
        populate: [
          { path: 'donor', select: 'name photo' },
          { path: 'meals.meal', model: 'Meals' },
          { path: 'products.product', model: 'Product' },
        ],
      })
      .populate({
        path: 'requestNeed',
        populate: [
          { path: 'recipient' },
          { path: 'requestedProducts.product', model: 'Product' },
          { path: 'requestedMeals.meal', model: 'Meals' },
        ],
      })
      .populate('allocatedProducts.product')
      .populate('allocatedMeals.meal');

    if (!transactions.length) {
      return res.status(404).json({ message: 'Aucune transaction trouvée pour ce donateur' });
    }

    res.status(200).json(transactions);
  } catch (error) {
    console.error('Erreur lors de la récupération des transactions par donateur:', error);
    res.status(500).json({ message: 'Erreur serveur', error: error.message });
  }
}

async function getTransactionsByRecipientId(req, res) {
  try {
    const { recipientId } = req.params;
    const transactions = await DonationTransaction.find({ recipient: recipientId })
      .populate({
        path: 'requestNeed',
        populate: [
          { path: 'recipient', select: 'name photo' },
          { path: 'requestedProducts.product', model: 'Product' },
          { path: 'requestedMeals.meal', model: 'Meals' },
        ],
      })
      .populate({
        path: 'donation',
        populate: [
          { path: 'donor', select: 'name photo' },
          { path: 'meals.meal', model: 'Meals' },
          { path: 'products.product', model: 'Product' },
        ],
      })
      .populate('allocatedProducts.product')
      .populate('allocatedMeals.meal')
      .populate('donor');

    if (!transactions.length) {
      return res.status(404).json({ message: 'Aucune transaction trouvée pour ce bénéficiaire' });
    }

    res.status(200).json(transactions);
  } catch (error) {
    console.error('Erreur lors de la récupération des transactions par bénéficiaire:', error);
    res.status(500).json({ message: 'Erreur serveur', error: error.message });
  }
}

module.exports = {
  getAllDonationTransactions,
  getDonationTransactionById,
  getDonationTransactionsByRequestNeedId,
  getDonationTransactionsByDonationId,
  getDonationTransactionsByDonorId,
  getDonationTransactionsByStatus,
  createDonationTransaction,
  updateDonationTransaction,
  deleteDonationTransaction,
  getTransactionsByRecipientId,
  acceptDonationTransaction,
  rejectDonationTransaction,
  createAndAcceptDonationTransaction,
  rejectDonation,
  createAndAcceptDonationTransactionBiderc,
};
</file>

<file path="sustainafood-backend/controllers/statistics.js">
const Donation = require("../models/Donation");
const RequestNeed = require("../models/RequestNeed");
const DonationTransaction = require("../models/DonationTransaction");
const User = require("../models/User");
const Product = require("../models/Product");
const Meal = require("../models/Meals");
const Feedback = require("../models/Feedback");
const Delivery = require("../models/Delivery");
const mongoose = require("mongoose");

// Access Role enum from User model
const Role = {
  ADMIN: 'admin',
  ONG: 'ong',
  RESTAURANT: 'restaurant',
  SUPERMARKET: 'supermarket',
  STUDENT: 'student',
  TRANSPORTER: 'transporter',
  PERSONALDONOR: 'personaldonor'
};

async function getStatistics(req, res) {
  try {
    const { dateRange = "30d", category = "all" } = req.query;

    // Calculate date range
    let startDate;
    const endDate = new Date();
    if (dateRange === "7d") startDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
    else if (dateRange === "30d") startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
    else if (dateRange === "90d") startDate = new Date(Date.now() - 90 * 24 * 60 * 60 * 1000);
    else startDate = new Date(0); // All time

    // Category filter
    const categoryFilter = category === "all" ? {} : { category };

    // Generate placeholder dates for userGrowth to ensure the chart always has data points
    const generateDateRange = (start, end) => {
      const dates = [];
      let currentDate = new Date(start);
      while (currentDate <= end) {
        dates.push({ date: currentDate.toISOString().split("T")[0], count: 0 });
        currentDate.setDate(currentDate.getDate() + 1);
      }
      return dates;
    };

    // Run independent queries in parallel for better performance
    const [
      // 1. User Statistics
      totalUsers,
      userRolesRaw,
      userGrowthRaw,
      // 2. Donation Statistics
      totalDonations,
      donationStatus,
      donationTrends,
      expiringDonations,
      topDonors,
      // 3. Request Statistics
      totalRequests,
      requestStatus,
      requestTrends,
      topRecipients,
      // 4. Transaction Statistics
      totalTransactions,
      transactionStatus,
      // 5. Product and Meal Statistics
      totalProducts,
      totalMeals,
      productBreakdown,
      mealBreakdown,
      // 6. Platform Health Metrics
      foodDistributed,
      foodWastePrevented,
      // 7. Feedback Statistics
      totalFeedbacks,
      averageRating,
      feedbackTrends,
      // 8. Delivery Statistics
      totalDeliveries,
      deliveryStatus,
      deliveryTrends,
    ] = await Promise.all([
      // 1. User Statistics
      User.countDocuments(),
      User.aggregate([
        { $group: { _id: "$role", count: { $sum: 1 } } },
        { $project: { role: "$_id", count: 1, _id: 0 } },
      ]),
      User.aggregate([
        { $match: { createdAt: { $gte: startDate, $lte: endDate } } },
        {
          $group: {
            _id: { $dateToString: { format: "%Y-%m-%d", date: "$createdAt" } },
            count: { $sum: 1 },
          },
        },
        { $sort: { _id: 1 } },
        { $project: { date: "$_id", count: 1, _id: 0 } },
      ]),
      // 2. Donation Statistics
      Donation.countDocuments(categoryFilter),
      Donation.aggregate([
        { $match: categoryFilter },
        { $group: { _id: "$status", count: { $sum: 1 } } },
        { $project: { status: "$_id", count: 1, _id: 0 } },
      ]).then((result) =>
        result.reduce((acc, { status, count }) => ({ ...acc, [status]: count }), {})
      ),
      Donation.aggregate([
        { $match: { createdAt: { $gte: startDate, $lte: endDate }, ...categoryFilter } },
        {
          $group: {
            _id: { $dateToString: { format: "%Y-%m-%d", date: "$createdAt" } },
            count: { $sum: 1 },
          },
        },
        { $sort: { _id: 1 } },
        { $project: { date: "$_id", count: 1, _id: 0 } },
      ]),
      Donation.countDocuments({
        expirationDate: { $gte: new Date(), $lte: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) },
        status: "pending",
        ...categoryFilter,
      }),
      Donation.aggregate([
        { $match: categoryFilter },
        {
          $group: {
            _id: "$donor",
            donationCount: { $sum: 1 },
            totalItems: { $sum: { $add: [{ $sum: "$products.quantity" }, { $sum: "$meals.quantity" }] } },
          },
        },
        { $sort: { donationCount: -1 } },
        { $limit: 5 },
        { $lookup: { from: "users", localField: "_id", foreignField: "_id", as: "donor" } },
        { $unwind: "$donor" },
        { $project: { _id: "$donor._id", name: "$donor.name", donationCount: 1, totalItems: 1 } },
      ]),
      // 3. Request Statistics
      RequestNeed.countDocuments(categoryFilter),
      RequestNeed.aggregate([
        { $match: categoryFilter },
        { $group: { _id: "$status", count: { $sum: 1 } } },
        { $project: { status: "$_id", count: 1, _id: 0 } },
      ]).then((result) =>
        result.reduce((acc, { status, count }) => ({ ...acc, [status]: count }), {})
      ),
      RequestNeed.aggregate([
        { $match: { created_at: { $gte: startDate, $lte: endDate }, ...categoryFilter } },
        {
          $group: {
            _id: { $dateToString: { format: "%Y-%m-%d", date: "$created_at" } },
            count: { $sum: 1 },
          },
        },
        { $sort: { _id: 1 } },
        { $project: { date: "$_id", count: 1, _id: 0 } },
      ]),
      RequestNeed.aggregate([
        { $match: categoryFilter },
        {
          $group: {
            _id: "$recipient",
            requestCount: { $sum: 1 },
            totalItems: {
              $sum: {
                $add: [
                  { $sum: "$requestedProducts.quantity" },
                  { $sum: "$requestedMeals.quantity" },
                ],
              },
            },
          },
        },
        { $sort: { requestCount: -1 } },
        { $limit: 5 },
        { $lookup: { from: "users", localField: "_id", foreignField: "_id", as: "recipient" } },
        { $unwind: "$recipient" },
        { $project: { _id: "$recipient._id", name: "$recipient.name", requestCount: 1, totalItems: 1 } },
      ]),
      // 4. Transaction Statistics
      DonationTransaction.countDocuments(),
      DonationTransaction.aggregate([
        { $group: { _id: "$status", count: { $sum: 1 } } },
        { $project: { status: "$_id", count: 1, _id: 0 } },
      ]).then((result) =>
        result.reduce((acc, { status, count }) => ({ ...acc, [status]: count }), {})
      ),
      // 5. Product and Meal Statistics
      Product.countDocuments(),
      Meal.countDocuments(),
      Product.aggregate([
        { $match: categoryFilter },
        { $group: { _id: "$productType", count: { $sum: "$totalQuantity" } } },
        { $project: { productType: "$_id", count: 1, _id: 0 } },
      ]).then((result) =>
        result.reduce((acc, { productType, count }) => ({ ...acc, [productType]: count }), {})
      ),
      Meal.aggregate([
        { $match: categoryFilter },
        { $group: { _id: "$mealType", count: { $sum: "$quantity" } } },
        { $project: { mealType: "$_id", count: 1, _id: 0 } },
      ]).then((result) =>
        result.reduce((acc, { mealType, count }) => ({ ...acc, [mealType]: count }), {})
      ),
      // 6. Platform Health Metrics
      DonationTransaction.aggregate([
        { $match: { status: "completed" } },
        {
          $group: {
            _id: null,
            totalProducts: { $sum: { $sum: "$allocatedProducts.quantity" } },
            totalMeals: { $sum: { $sum: "$allocatedMeals.quantity" } },
          },
        },
      ]).then((result) => (result[0] ? result[0].totalProducts + result[0].totalMeals : 0)),
      Product.aggregate([
        { $match: { donation: { $exists: true } } },
        {
          $group: {
            _id: null,
            totalWeight: {
              $sum: {
                $cond: [
                  { $and: [{ $ne: ["$weightPerUnit", null] }, { $ne: ["$totalQuantity", null] }] },
                  { $multiply: ["$weightPerUnit", "$totalQuantity"] },
                  0,
                ],
              },
            },
          },
        },
      ]).then((result) => (result[0] ? result[0].totalWeight : 0)),
      // 7. Feedback Statistics
      Feedback.countDocuments(),
      Feedback.aggregate([
        {
          $group: {
            _id: null,
            averageRating: { $avg: "$rating" },
          },
        },
      ]).then((result) => (result[0] ? parseFloat(result[0].averageRating.toFixed(2)) : 0)),
      Feedback.aggregate([
        { $match: { createdAt: { $gte: startDate, $lte: endDate } } },
        {
          $group: {
            _id: { $dateToString: { format: "%Y-%m-%d", date: "$createdAt" } },
            count: { $sum: 1 },
          },
        },
        { $sort: { _id: 1 } },
        { $project: { date: "$_id", count: 1, _id: 0 } },
      ]),
      // 8. Delivery Statistics
      Delivery.countDocuments({ createdAt: { $gte: startDate, $lte: endDate } }),
      Delivery.aggregate([
        { $match: { createdAt: { $gte: startDate, $lte: endDate } } },
        { $group: { _id: "$status", count: { $sum: 1 } } },
        { $project: { status: "$_id", count: 1, _id: 0 } },
      ]).then((result) =>
        result.reduce((acc, { status, count }) => ({ ...acc, [status]: count }), {})
      ),
      Delivery.aggregate([
        { $match: { createdAt: { $gte: startDate, $lte: endDate } } },
        {
          $group: {
            _id: { $dateToString: { format: "%Y-%m-%d", date: "$createdAt" } },
            count: { $sum: 1 },
          },
        },
        { $sort: { _id: 1 } },
        { $project: { date: "$_id", count: 1, _id: 0 } },
      ]),
    ]);

    // Ensure all roles are included in userRoles, even those with zero counts
    const userRoles = Object.values(Role).reduce((acc, role) => {
      const found = userRolesRaw.find((item) => item.role === role);
      acc[role] = found ? found.count : 0;
      return acc;
    }, {});

    // Merge userGrowth with placeholder dates to ensure all dates in the range are represented
    const placeholderDates = generateDateRange(startDate, endDate);
    const userGrowthMap = userGrowthRaw.reduce((acc, entry) => {
      acc[entry.date] = entry.count;
      return acc;
    }, {});
    const userGrowth = placeholderDates.map((entry) => ({
      date: entry.date,
      count: userGrowthMap[entry.date] || 0,
    }));

    // Compile the response
    const stats = {
      totalUsers,
      userRoles,
      totalDonations,
      donationStatus,
      totalRequests,
      requestStatus,
      totalTransactions,
      transactionStatus,
      totalProducts,
      totalMeals,
      expiringDonations,
      foodDistributed,
      foodWastePrevented,
      totalFeedbacks,
      averageRating,
      feedbackTrends,
      totalDeliveries,
      deliveryStatus,
      deliveryTrends,
      topDonors,
      topRecipients,
      donationTrends,
      requestTrends,
      userGrowth,
      productBreakdown,
      mealBreakdown,
    };

    res.status(200).json(stats);
  } catch (error) {
    console.error("Error fetching statistics:", error);
    if (error.name === "MongoServerError") {
      res.status(500).json({ message: "Database error while fetching statistics", error: error.message });
    } else {
      res.status(500).json({ message: "Failed to fetch statistics", error: error.message });
    }
  }
}

module.exports = { getStatistics };
</file>

<file path="sustainafood-backend/routes/ContactSubmission.js">
const express = require('express');
const router = express.Router();
const contactController = require('../controllers/ContactSubmissionController');

router.post('/contact', contactController.submitContactForm);
router.get('/contact/submissions', contactController.getAllSubmissions);
// routes/contactRoutes.js
router.get("/contact/submissions/:id", contactController.getSubmissionById);
router.put("/contact/submissions/:id/respond", contactController.updateSubmissionStatus);

module.exports = router;
</file>

<file path="sustainafood-backend/sonar-project.properties">
sonar.projectKey=nodeapp
</file>

<file path="sustainafood-frontend/nginx.conf">
# server {
#   listen 80;
#   server_name localhost;

#   location / {
#     root /usr/share/nginx/html;
#     index index.html;
#     try_files $uri /index.html;
#   }
# }
server {
    listen 80;
    server_name localhost; # Ou le nom de domaine que vous utiliserez

    # Servir les fichiers statiques du frontend React/Vite
    location / {
        root   /usr/share/nginx/html;    # Le dossier où Dockerfile copie les fichiers de /app/dist
        index  index.html index.htm;
        try_files $uri /index.html;      # Crucial pour les Single Page Applications (SPA)
                                         # Si une URL directe ne correspond pas à un fichier,
                                         # elle renvoie index.html pour que React Router gère la route.
    }

    # Rediriger les appels API vers le service backend
    # Ce bloc intercepte toutes les requêtes commençant par /api/
    location /api/ {
        # 'app' est le nom du service backend défini dans votre docker-compose.yml.
        # Docker Compose permet aux conteneurs de communiquer en utilisant les noms de service.
        # Le backend écoute sur le port 3000 à l'intérieur de son conteneur.
        proxy_pass http://app:3000/; # Le '/' final est important ici !

        # Headers importants pour que le backend reçoive les bonnes informations
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Enlève le préfixe /api/ de l'URL avant de la transmettre au backend
        # Par exemple, /api/users/login deviendra /users/login pour le backend.
        # Cette ligne est nécessaire car vos routes backend ne commencent pas par /api.
        rewrite ^/api/(.*)$ /$1 break;

        # Augmenter les timeouts si nécessaire pour des requêtes longues
        proxy_connect_timeout       600;
        proxy_send_timeout          600;
        proxy_read_timeout          600;
        send_timeout                600;
    }

    # Pages d'erreur personnalisées (optionnel mais recommandé)
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}
</file>

<file path="sustainafood-frontend/package.json">
{
  "name": "sustainafood-frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@fortawesome/fontawesome-svg-core": "^6.7.2",
    "@fortawesome/free-solid-svg-icons": "^6.7.2",
    "@fortawesome/react-fontawesome": "^0.2.2",
    "@huggingface/transformers": "^3.4.1",
    "@mapbox/mapbox-gl-geocoder": "^5.0.3",
    "@react-google-maps/api": "^2.20.6",
    "@react-oauth/google": "^0.12.1",
    "axios": "^1.8.4",
    "bootstrap": "^5.3.3",
    "chart.js": "^4.4.8",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "firebase": "^11.3.1",
    "html2canvas": "^1.4.1",
    "jsonwebtoken": "^9.0.2",
    "jspdf": "^3.0.1",
    "jspdf-autotable": "^5.0.2",
    "jwt-decode": "^3.1.2",
    "leaflet": "^1.9.4",
    "mapbox-gl": "^3.11.0",
    "maplibre-gl": "^5.3.1",
    "papaparse": "^5.5.2",
    "prop-types": "^15.8.1",
    "react": "^18.3.1",
    "react-chartjs-2": "^5.3.0",
    "react-csv": "^2.2.2",
    "react-dom": "^18.3.1",
    "react-google-recaptcha": "^3.1.0",
    "react-icons": "^5.5.0",
    "react-leaflet": "^4.2.1",
    "react-paginate": "^8.3.0",
    "react-router-dom": "^7.1.5",
    "react-toastify": "^11.0.5",
    "recharts": "^2.15.1",
    "styled-components": "^6.1.15",
    "twilio": "^5.5.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "@types/leaflet": "^1.9.17",
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.5",
    "@vitejs/plugin-react": "^1.3.2",
    "eslint": "^9.17.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.16",
    "globals": "^15.14.0",
    "vite": "^6.1.0"
  }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/adminProfile.css">
/* Import DM Sans font */
@import url("https://fonts.googleapis.com/css2?family=DM+Sans:wght@400;500;700&display=swap");

/* Global styles */
* {
  font-family: "DM Sans", sans-serif;
  box-sizing: border-box;
}

/* Main layout */
.profAttachment-admin-dashboard {
  display: flex;
  background: #f8f9fb;
  min-height: 100vh;
}

/* Profile container */
.profAttachment-profile-container {
  flex: 1;
  padding: 20px 30px;
  display: flex;
  flex-direction: column;
  max-width: 1200px;
  margin: 0 auto;
  transition: all 0.3s ease;
}

/* Profile header with animated underline */
.profAttachment-profile-header {
  display: flex;
  align-items: center;
  width: 100%;
  padding: 30px 0;
  margin-top: 20px;
  position: relative;
}

.profAttachment-profile-header h2 {
  font-weight: 700;
  font-size: 28px;
  color: #1a3e3e;
  margin-right: 15px;
  position: relative;
  padding-bottom: 5px;
}

.profAttachment-profile-header h2::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  width: 40px;
  height: 3px;
  background: #8dc73f;
  border-radius: 2px;
  transition: width 0.3s ease;
}

.profAttachment-profile-header:hover h2::after {
  width: 100%;
}

.profAttachment-profile-line {
  flex-grow: 1;
  height: 1px;
  background: linear-gradient(to right, #8dc73f, rgba(141, 199, 63, 0.1));
}

/* Profile card with hover effect */
.profAttachment-profile-card {
  position: relative;
  display: flex;
  align-items: center;
  padding: 40px;
  border-radius: 20px;
  background: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(248, 250, 242, 0.8));
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
  overflow: hidden;
}

.profAttachment-profile-card::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 6px;
  background: linear-gradient(to right, #8dc73f, #a5e350);
}

/* Profile picture container */
.profAttachment-profile-pic-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-right: 30px;
  position: relative;
}

/* Profile picture with creative styling */
.profAttachment-profile-pic {
  position: relative;
  width: 150px;
  height: 150px;
  border-radius: 50%;
  overflow: hidden;
  transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  box-shadow: 0 10px 25px rgba(141, 199, 63, 0.2);
  border: 6px solid rgba(255, 255, 255, 0.8);
  margin-bottom: 15px;
}

.profAttachment-profile-pic img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.5s ease;
}

/* Upload icon positioned on the right side of the image */
.profAttachment-upload-icon {
  position: absolute;
  top: 60%;
  right: 0%;
  transform: translate(-50%, 0%);
  width: 30px;
  height: 30px;
  background: rgba(141, 199, 63, 0.9);
  color: white;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
  z-index: 10;
  border: 2px solid white;
  transition: background-color 0.3s ease;
}

.profAttachment-upload-icon:hover {
  background: #7db32e;
}

.profAttachment-upload-icon svg {
  font-size: 16px;
}

.profAttachment-upload-icon input[type="file"] {
  opacity: 0;
  position: absolute;
  width: 100%;
  height: 100%;
  cursor: pointer;
  top: 0;
  left: 0;
}

/* Remove the semi-transparent overlay */
.profAttachment-profile-pic::after {
  content: none;
}

/* Redesigned save image button */
.profAttachment-save-image-btn {
  background: linear-gradient(135deg, #8dc73f 0%, #6ca22f 100%);
  color: white;
  border: none;
  border-radius: 30px;
  padding: 10px 20px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  font-weight: 500;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(141, 199, 63, 0.3);
  position: relative;
  overflow: hidden;
  z-index: 1;
  width: 150px;
}

.profAttachment-save-image-btn::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(135deg, #6ca22f 0%, #8dc73f 100%);
  opacity: 0;
  transition: opacity 0.3s ease;
  z-index: -1;
}

.profAttachment-save-image-btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 6px 20px rgba(141, 199, 63, 0.4);
}

.profAttachment-save-image-btn:hover::before {
  opacity: 1;
}

.profAttachment-save-image-btn:active {
  transform: translateY(0);
  box-shadow: 0 2px 10px rgba(141, 199, 63, 0.3);
}

.profAttachment-save-icon {
  font-size: 16px;
  transition: transform 0.3s ease;
}

.profAttachment-save-image-btn:hover .profAttachment-save-icon {
  transform: rotate(15deg);
}

/* Profile info styling */
.profAttachment-profile-card > div {
  flex: 1;
  padding-left: 10px;
}

.profAttachment-profile-card h2 {
  font-size: 28px;
  font-weight: 700;
  margin-bottom: 10px;
  color: #1a3e3e;
  position: relative;
  display: inline-block;
}

.profAttachment-profile-card h2::after {
  content: "";
  position: absolute;
  bottom: -5px;
  left: 0;
  width: 40px;
  height: 3px;
  background: #8dc73f;
  transition: width 0.3s ease;
}

.profAttachment-profile-card:hover h2::after {
  width: 100%;
}

.profAttachment-profile-card p {
  margin-bottom: 8px;
  color: #555;
  font-size: 16px;
  display: flex;
  align-items: center;
  gap: 8px;
}

.profAttachment-profile-card p::before {
  content: "•";
  color: #8dc73f;
  font-size: 20px;
}

/* Info section with card design */
.profAttachment-info-section {
  background: white;
  padding: 30px;
  border-radius: 16px;
  box-shadow: 0 5px 20px rgba(0, 0, 0, 0.05);
  width: 100%;
  margin-bottom: 30px;
  border: 1px solid rgba(141, 199, 63, 0.1);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.profAttachment-info-section:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
}

/* Section header with animated button */
.profAttachment-section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  width: 100%;
}

.profAttachment-section-header h3 {
  font-weight: 600;
  font-size: 20px;
  color: #1a3e3e;
  position: relative;
  padding-bottom: 5px;
}

.profAttachment-section-header h3::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  width: 30px;
  height: 2px;
  background: #8dc73f;
  border-radius: 2px;
  transition: width 0.3s ease;
}

.profAttachment-info-section:hover .profAttachment-section-header h3::after {
  width: 100%;
}

/* Edit button with hover effect */
.profAttachment-edit-btn {
  background: #8dc73f;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 8px;
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  display: flex;
  align-items: center;
  gap: 8px;
  transition: all 0.3s ease;
  box-shadow: 0 2px 10px rgba(141, 199, 63, 0.2);
}

.profAttachment-edit-btn:hover {
  background: #7db32e;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(141, 199, 63, 0.3);
}

/* Info grid with card-like items */
.profAttachment-info-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 20px;
  margin-top: 20px;
}

.profAttachment-info-grid div {
  padding: 15px;
  border-radius: 12px;
  background: rgba(248, 249, 251, 0.5);
  border: 1px solid rgba(141, 199, 63, 0.1);
  transition: all 0.3s ease;
}

.profAttachment-info-grid div:hover {
  background: rgba(248, 249, 251, 0.8);
  transform: translateY(-3px);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
}

/* Labels styling */
.profAttachment-label {
  font-weight: 500;
  font-size: 13px;
  color: #8dc73f;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  margin-bottom: 5px;
}

.profAttachment-info-grid p:not(.profAttachment-label) {
  font-weight: 500;
  font-size: 16px;
  color: #333;
  margin-top: 5px;
}

/* Modal styling with animations */
.profAttachment-modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
  animation: profAttachment-fadeIn 0.3s ease;
}

@keyframes profAttachment-fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.profAttachment-modal-content {
  background: white;
  padding: 30px;
  border-radius: 16px;
  width: 500px;
  max-width: 90%;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  animation: profAttachment-slideIn 0.3s ease;
  transform: translateY(0);
}

@keyframes profAttachment-slideIn {
  from {
    transform: translateY(30px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

.profAttachment-modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.profAttachment-modal-header h3 {
  font-size: 20px;
  font-weight: 600;
  color: #1a3e3e;
}

.profAttachment-close-btn {
  background: none;
  border: none;
  font-size: 20px;
  cursor: pointer;
  color: #666;
  transition: color 0.3s ease;
}

.profAttachment-close-btn:hover {
  color: #333;
}

.profAttachment-modal-body {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.profAttachment-modal-body label {
  font-size: 14px;
  font-weight: 600;
  color: #555;
  margin-bottom: 5px;
  display: block;
}

.profAttachment-modal-body input {
  width: 100%;
  padding: 12px;
  border: 1px solid #ddd;
  border-radius: 8px;
  font-size: 15px;
  transition: all 0.3s ease;
}

.profAttachment-modal-body input:focus {
  border-color: #8dc73f;
  box-shadow: 0 0 0 3px rgba(141, 199, 63, 0.2);
  outline: none;
}

.profAttachment-error {
  color: #e74c3c;
  font-size: 12px;
  margin-top: 5px;
}

.profAttachment-modal-footer {
  display: flex;
  justify-content: flex-end;
  margin-top: 25px;
}

.profAttachment-save-btn {
  background: #8dc73f;
  color: white;
  padding: 12px 24px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 500;
  font-size: 15px;
  transition: all 0.3s ease;
  box-shadow: 0 2px 10px rgba(141, 199, 63, 0.2);
}

.profAttachment-save-btn:hover {
  background: #7db32e;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(141, 199, 63, 0.3);
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .profAttachment-profile-card {
    flex-direction: column;
    text-align: center;
    padding: 30px 20px;
  }

  .profAttachment-profile-pic-container {
    margin-right: 0;
    margin-bottom: 20px;
  }

  .profAttachment-profile-card h2::after {
    left: 50%;
    transform: translateX(-50%);
  }

  .profAttachment-profile-card p {
    justify-content: center;
  }

  .profAttachment-save-image-btn {
    margin: 15px auto;
  }

  .profAttachment-info-grid {
    grid-template-columns: 1fr;
  }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/chart.css">
.charts-container {
    width: 100%;
    height: 100%;
  }
  
  .chart {
    width: 100%;
    height: 100%;
    min-height: 250px;
  }
  
  /* Custom tooltip styling */
  .recharts-tooltip-wrapper {
    background: white !important;
    border-radius: 8px !important;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;
    border: none !important;
  }
  
  .recharts-default-tooltip {
    background-color: white !important;
    border: none !important;
    border-radius: 8px !important;
    padding: 10px 14px !important;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;
  }
  
  /* Improve chart grid lines */
  .recharts-cartesian-grid-horizontal line,
  .recharts-cartesian-grid-vertical line {
    stroke: #f0f0f0 !important;
    stroke-width: 1 !important;
  }
  
  /* Improve axis styling */
  .recharts-cartesian-axis-line {
    stroke: #e0e0e0 !important;
    stroke-width: 1 !important;
  }
  
  .recharts-cartesian-axis-tick-line {
    stroke: #e0e0e0 !important;
    stroke-width: 1 !important;
  }
  
  .recharts-cartesian-axis-tick-value {
    font-size: 12px !important;
    fill: #666 !important;
  }
  
  /* Improve legend styling */
  .recharts-default-legend {
    margin-top: 10px !important;
  }
  
  .recharts-legend-item {
    margin-right: 20px !important;
  }
  
  .recharts-legend-item-text {
    font-size: 13px !important;
    color: #555 !important;
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/dashboard.css">
.dashboard-container {
  display: flex;
  min-height: 100vh;
}

.dashboard-content {
  flex: 1;
  padding: 24px;
  background-color: #f8f9fa;
  margin-top: 60px;
  transition: all 0.3s ease;
}

.filter-bar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 24px;
  background: white;
  padding: 16px 20px;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  position: relative;
  z-index: 10;
  transition: all 0.3s ease;
}

.filter-group {
  display: flex;
  gap: 20px;
  flex-wrap: wrap;
}

.filter-group label {
  display: flex;
  align-items: center;
  gap: 10px;
  font-weight: 500;
  color: #1a1a1a;
}

.filter-group select {
  padding: 8px 12px;
  border-radius: 6px;
  border: 1px solid #d1d5db;
  background: #fff;
  cursor: pointer;
  font-size: 14px;
  transition: border-color 0.2s, box-shadow 0.2s;
}

.filter-group select:hover {
  border-color: #9ca3af;
}

.filter-group select:focus {
  border-color: #4CAF50;
  outline: none;
  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);
}

.export-button {
  padding: 10px 20px;
  background-color: #4CAF50;
  color: white;
  text-decoration: none;
  border-radius: 6px;
  font-weight: 500;
  transition: all 0.3s ease;
  border: none;
  display: inline-flex;
  align-items: center;
  gap: 8px;
  cursor: pointer;
}

.export-button:hover {
  background-color: #43a047;
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(76, 175, 80, 0.2);
}

.export-button:active {
  transform: translateY(0);
}

.loading {
  text-align: center;
  font-size: 18px;
  color: #4b5563;
  margin: 30px 0;
  padding: 20px;
  background: white;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.error {
  text-align: center;
  font-size: 18px;
  color: #b91c1c;
  margin: 30px 0;
  background: #fef2f2;
  padding: 20px;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.card-container {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  gap: 24px;
  margin-bottom: 24px;
}

.charts-status-container {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 24px;
  margin-bottom: 30px;
}

.chart-section {
  background: white;
  padding: 20px;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  position: relative;
  overflow: hidden;
}

.chart-section:hover {
  transform: translateY(-3px);
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.08);
}

.chart-section h3 {
  margin-bottom: 18px;
  font-size: 18px;
  font-weight: 600;
  color: #1a1a1a;
  position: relative;
  padding-bottom: 12px;
}

.chart-section h3::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  width: 40px;
  height: 3px;
  background: #4CAF50;
  border-radius: 3px;
}

.detailed-stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 24px;
  margin-bottom: 30px;
}

.stats-section {
  background: #ffffff;
  padding: 24px;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  overflow-x: auto; /* Enable horizontal scrolling for tables */
}

.stats-section:hover {
  transform: translateY(-4px);
  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.12);
}

.stats-section h3 {
  margin-bottom: 20px;
  font-size: 18px;
  font-weight: 700;
  color: #1a1a1a;
  position: relative;
  padding-bottom: 12px;
}

.stats-section h3::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  width: 48px;
  height: 4px;
  background: linear-gradient(90deg, #4CAF50, #66BB6A);
  border-radius: 4px;
}

.stats-section table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
  border-radius: 10px;
  overflow: hidden;
  background: #ffffff;
  min-width: 250px; /* Ensure table has a minimum width */
}

.stats-section th,
.stats-section td {
  padding: 14px 20px;
  text-align: left;
  border-bottom: 1px solid #e5e7eb;
  font-size: 15px;
  color: #1f2937;
}

.stats-section th {
  background: #f9fafb;
  font-weight: 600;
  color: #111827;
  font-size: 14px;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  position: sticky;
  top: 0;
  z-index: 10;
}

.stats-section td {
  font-weight: 400;
}

.stats-section tr:last-child td {
  border-bottom: none;
}

.stats-section tbody tr {
  transition: background-color 0.2s ease;
}

.stats-section tbody tr:hover {
  background-color: #f3f4f6;
}

.stats-section tbody tr:focus-within {
  outline: 2px solid #4CAF50;
  outline-offset: -2px;
}

/* Zebra striping for better readability */
.stats-section tbody tr:nth-child(even) {
  background-color: #fafafa;
}

/* Responsive table adjustments */
@media (max-width: 768px) {
  .stats-section {
    padding: 16px;
  }

  .stats-section table {
    min-width: 300px; /* Ensure table is scrollable on small screens */
  }

  .stats-section th,
  .stats-section td {
    padding: 12px 16px;
    font-size: 14px;
  }

  .stats-section th {
    font-size: 13px;
  }
}

.pie-charts-container {
  display: flex;
  justify-content: space-between;
  gap: 24px;
  margin-bottom: 30px;
  flex-wrap: wrap;
}

.pie-chart-section {
  flex: 1;
  min-width: 250px;
  max-width: 300px;
  background: white;
  padding: 20px;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  text-align: center;
}

.pie-chart-section:hover {
  transform: translateY(-3px);
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.08);
}

.pie-chart-section h3 {
  margin-bottom: 18px;
  font-size: 16px;
  font-weight: 600;
  color: #1a1a1a;
  position: relative;
  padding-bottom: 10px;
}

.pie-chart-section h3::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%);
  width: 40px;
  height: 3px;
  background: #4CAF50;
  border-radius: 3px;
}

.pie-chart-section canvas {
  width: 100% !important;
  height: auto !important;
  max-width: 250px;
  margin: 0 auto;
}

/* General responsive adjustments */
@media (max-width: 768px) {
  .filter-bar {
    flex-direction: column;
    gap: 16px;
    align-items: flex-start;
  }

  .filter-group {
    width: 100%;
  }

  .card-container {
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  }

  .charts-status-container,
  .detailed-stats {
    grid-template-columns: 1fr;
  }

  .pie-charts-container {
    flex-direction: column;
    align-items: center;
  }

  .pie-chart-section {
    max-width: 100%;
  }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/DeleveryMap.css">
.location-picker-delevery {
  position: relative;
  width: 100%;
  height: 100vh;
  font-family: 'Poppins', sans-serif;
}

.address-search-delevery {
  position: absolute;
  top: 20px;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  gap: 10px;
  z-index: 1000;
}

.signup-input-delevery {
  padding: 10px;
  font-size: 14px;
  border-radius: 5px;
  border: 1px solid #ddd;
  width: 300px;
  font-family: 'Poppins', sans-serif;
}

.search-button-delevery {
  padding: 10px 20px;
  background-color: #4CAF50;
  color: #fff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-family: 'Poppins', sans-serif;
  font-size: 14px;
}

.geolocation-button-delevery {
  padding: 10px;
  background-color: #2196F3;
  color: #fff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 14px;
}

.map-container-delevery {
  width: 100%;
  height: 100%;
}

.location-picker-buttons-delevery {
  position: absolute;
  bottom: 20px;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  gap: 10px;
  z-index: 1000;
}

.confirm-button-delevery {
  padding: 10px 20px;
  background-color: #4CAF50;
  color: #fff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-family: 'Poppins', sans-serif;
  font-size: 14px;
}

.cancel-button-delevery {
  padding: 10px 20px;
  background-color: #f44336;
  color: #fff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-family: 'Poppins', sans-serif;
  font-size: 14px;
}

.route-info-popup {
  max-width: 350px;
}

.route-info-content {
  background: rgba(255, 255, 255, 0.9);
  padding: 15px;
  border-radius: 8px;
  font-size: 14px;
  color: #333;
  font-family: 'Poppins', sans-serif;
}

.route-title {
  font-weight: bold;
  margin-bottom: 10px;
}

.route-label {
  margin: 8px 0;
  display: flex;
  align-items: center;
  font-weight: 500;
}

.route-color {
  display: inline-block;
  width: 14px;
  height: 14px;
  border-radius: 3px;
  margin-right: 10px;
}

.total-duration {
  font-weight: bold;
  margin-top: 10px;
}

.error-message {
  color: #d32f2f;
  font-weight: bold;
  margin: 8px 0;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/LocationPicker.css">
.location-picker-localisation {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    margin: auto;
    width: 90%;
    max-width: 800px;
    height: fit-content;
    background: white;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    z-index: 1000;
    padding: 20px;
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.map-container-localisation {
    width: 100%;
    height: 450px;
    border: 1px solid #ccc;
    border-radius: 4px;
    position: relative;
    z-index: 1;
}

.address-search-localisation {
    display: flex;
    gap: 15px;
    align-items: center;
    margin-top: 10px;
}

.signup-input-localisation {
    flex: 1;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 16px;
    white-space: normal;
    overflow-wrap: break-word;
    min-height: 40px;
}

.location-picker-buttons-localisation {
    display: flex;
    gap: 15px;
    justify-content: center;
    flex-wrap: wrap;
    margin-top: 20px;
}

.search-button-localisation,
.geolocation-button-localisation,
.confirm-button-localisation,
.cancel-button-localisation {
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    color: white;
    font-size: 16px;
    transition: background-color 0.3s;
}

.search-button-localisation,
.geolocation-button-localisation,
.confirm-button-localisation {
    background-color: #8dc73f;
}

.cancel-button-localisation {
    background-color: #dc3545;
}

.search-button-localisation:hover,
.geolocation-button-localisation:hover,
.confirm-button-localisation:hover {
    background-color: #7ab336;
}

.cancel-button-localisation:hover {
    background-color: #c82333;
}

@media (max-width: 600px) {
    .location-picker-localisation {
        width: 95%;
        padding: 15px;
    }

    .map-container-localisation {
        height: 300px;
    }

    .signup-input-localisation {
        font-size: 14px;
        padding: 8px;
    }

    .search-button-localisation,
    .geolocation-button-localisation,
    .confirm-button-localisation,
    .cancel-button-localisation {
        padding: 8px 16px;
        font-size: 14px;
    }

    .location-picker-buttons-localisation {
        flex-direction: column;
        gap: 10px;
        margin-top: 15px;
    }
}
</file>

<file path="sustainafood-frontend/src/components/backoffcom/CardStats.jsx">
import {
  FaDollarSign,
  FaUserCheck,
  FaUser,
  FaUsers,
  FaUtensils,
  FaBriefcase,
  FaChartLine,
  FaHandHoldingHeart,
  FaTrash,
  FaBoxOpen,
  FaClock,
  FaTruck,
  FaStar, // Added for Average Rating
} from "react-icons/fa"
import "/src/assets/styles/backoffcss/card.css"

const CardStats = ({ title, value, percentage, icon, color, progress }) => {
  const icons = {
    dollar: <FaDollarSign />,
    userCheck: <FaUserCheck />,
    user: <FaUser />,
    users: <FaUsers />,
    utensils: <FaUtensils />,
    briefcase: <FaBriefcase />,
    chart: <FaChartLine />,
    handHoldingHeart: <FaHandHoldingHeart />,
    trash: <FaTrash />, // For Food Waste Prevented
    clock: <FaClock />, // For Expiring Donations
    box: <FaBoxOpen />, // For Total Products
    truck: <FaTruck />, // For Total Deliveries
    star: <FaStar />, // Added for Average Rating
  }

  // Set progress to a minimum of 30% for visual appeal if not specified
  const displayProgress = progress || 30

  // Set percentage color based on value
  const percentageColor =
    percentage && percentage.startsWith("+")
      ? "#4CAF50" // green for positive
      : percentage && percentage.startsWith("-")
        ? "#F44336" // red for negative
        : "#4CAF50" // default green

  return (
    <div className="card" data-color={color}>
      <div className="card-header">
        <div className="icon">{icons[icon]}</div>
        <div className="card-info">
          <h3>{title}</h3>
          <p className="value">{value}</p>
          {percentage && (
            <p className="percentage" style={{ color: percentageColor }}>
              {percentage}
            </p>
          )}
        </div>
      </div>
      <div className="progress-bar">
        <div
          className="progress"
          style={{
            width: `${displayProgress}%`,
            maxWidth: "100%",
            minWidth: "30%",
          }}
        ></div>
      </div>
    </div>
  )
}

export default CardStats
</file>

<file path="sustainafood-frontend/src/components/Footer.jsx">
import { FaFacebookF, FaTwitter, FaInstagram, FaLinkedinIn } from 'react-icons/fa';
import React from 'react';
import styled, { createGlobalStyle, keyframes } from 'styled-components';

// Global Styles
const GlobalStyle = createGlobalStyle`
  body {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    background: #f0f8f0;
    box-sizing: border-box;
    overflow-x: hidden;
  }
`;

// Animation keyframes
const fadeIn = keyframes`
  from { opacity: 0; }
  to { opacity: 1; }
`;

// Footer container
const FooterContainer = styled.footer`
  background: linear-gradient(135deg, #56ab2f, #228b22);
  color: white;
  padding: 50px 30px 30px;
  font-family: 'Poppins', sans-serif;
  animation: ${fadeIn} 0.8s ease-in-out;
  box-shadow: 0 -5px 15px rgba(0, 0, 0, 0.1);
`;

// Footer content
const FooterContent = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 50px;
  justify-content: center;
  text-align: left;
  max-width: 1200px;
  margin: 0 auto;
  @media (max-width: 768px) {
    grid-template-columns: 1fr;
  }
`;

// Column
const Column = styled.div`
  flex: 1 1 250px;
  min-width: 250px;
`;

// Column title
const ColumnTitle = styled.h3`
  font-size: 22px;
  margin-bottom: 20px;
  color: #e6ffe6;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 1px;
`;

// About text
const AboutText = styled.p`
  font-size: 15px;
  line-height: 1.7;
  color: #e6ffe6;
  opacity: 0.9;
`;

// Footer links
const FooterLinks = styled.ul`
  list-style: none;
  padding: 0;
  li {
    margin-bottom: 12px;
  }
  a {
    color: #e6ffe6;
    text-decoration: none;
    font-size: 15px;
    transition: color 0.3s ease, text-decoration 0.3s ease;
    &:hover {
      color: #ffffff;
      text-decoration: underline;
    }
  }
`;

// Contact info
const ContactInfo = styled.div`
  font-size: 15px;
  line-height: 1.7;
  color: #e6ffe6;
  opacity: 0.9;
  a {
    color: #e6ffe6;
    text-decoration: none;
    transition: color 0.3s ease;
    &:hover {
      color: #ffffff;
    }
  }
`;

// Social icons
const SocialIcons = styled.div`
  margin-top: 20px;
  display: flex;
  gap: 20px;
  svg {
    color: #e6ffe6;
    font-size: 22px;
    cursor: pointer;
    transition: transform 0.3s ease, color 0.3s ease;
    &:hover {
      transform: scale(1.3);
      color: #ffffff;
    }
  }
`;

// Newsletter form
const NewsletterForm = styled.form`
  margin-top: 20px;
  display: flex;
  gap: 12px;
  border-radius: 20px;
  background: rgba(255, 255, 255, 0.1);
  padding: 5px;

  input {
    padding: 10px 15px;
    border: none;
    border-radius: 15px;
    flex: 1;
    background: rgba(255, 255, 255, 0.2);
    color: #ffffff;
    font-size: 14px;
    outline: none;
    transition: background 0.3s ease;
    &::placeholder {
      color: #d4edda;
      opacity: 0.8;
    }
    &:focus {
      background: rgba(255, 255, 255, 0.3);
    }
  }
  button {
    padding: 10px 20px;
    border: none;
    border-radius: 15px;
    background: #d4edda;
    color: #228b22;
    font-weight: 600;
    cursor: pointer;
    transition: background 0.3s ease, transform 0.3s ease;
    &:hover {
      background: #c1eac1;
      transform: translateY(-2px);
    }
    &:active {
      transform: translateY(0);
    }
  }
`;

// Footer bottom
const FooterBottom = styled.div`
  text-align: center;
  margin-top: 40px;
  font-size: 14px;
  color: #e6ffe6;
  opacity: 0.7;
  border-top: 1px solid rgba(255, 255, 255, 0.2);
  padding-top: 20px;
  a {
    color: #e6ffe6;
    text-decoration: none;
    transition: color 0.3s ease;
    &:hover {
      color: #ffffff;
      text-decoration: underline;
    }
  }
`;

const Footer = () => {
  return (
    <FooterContainer>
      <FooterContent>
        {/* About Section */}
        <Column>
          <ColumnTitle>About SustainaFood</ColumnTitle>
          <AboutText>
            SustainaFood is an innovative food redistribution platform committed to reducing food waste and connecting donors, recipients, and transporters. We empower communities and promote sustainability.
          </AboutText>
        </Column>

        {/* Quick Links */}
        <Column>
          <ColumnTitle>Quick Links</ColumnTitle>
          <FooterLinks>
            <li><a href="#">About Us</a></li>
            <li><a href="/Contact">Contact</a></li>
            <li><a href="#">Privacy Policy</a></li>
            <li><a href="#">Terms & Conditions</a></li>
          </FooterLinks>
        </Column>

        {/* Contact & Social */}
        <Column>
          <ColumnTitle>Contact & Social</ColumnTitle>
          <ContactInfo>
            <p style={{color: "#e6ffe6"}}>Email: <a href="mailto:info@sustainafood.com">info@sustainafood.com</a></p>
            <p style={{color: "#e6ffe6"}}>Phone: +216 123 456 789</p>
          </ContactInfo>
          <SocialIcons>
            <FaFacebookF />
            <FaTwitter />
            <FaInstagram />
            <FaLinkedinIn />
          </SocialIcons>
          <NewsletterForm>
            <input type="email" placeholder="Subscribe to newsletter" />
            <button type="submit">Subscribe</button>
          </NewsletterForm>
        </Column>
      </FooterContent>
      <FooterBottom>
        © 2025 SustainaFood. All rights reserved.
      </FooterBottom>
    </FooterContainer>
  );
};

export default Footer;
</file>

<file path="sustainafood-frontend/src/components/LocationPicker.jsx">
import React, { useState, useEffect, useRef } from 'react';
import maplibregl from 'maplibre-gl';
import 'maplibre-gl/dist/maplibre-gl.css';
import '../assets/styles/LocationPicker.css';

const LocationPicker = ({
  isOpen,
  onClose,
  onLocationChange,
  onAddressChange,
  onSelect,
  initialAddress
}) => {
  const mapContainer = useRef(null);
  const map = useRef(null);
  const marker = useRef(null);
  const [location, setLocation] = useState({ type: 'Point', coordinates: [10.1658, 36.8188] });
  const [address, setAddress] = useState(initialAddress || '');

  useEffect(() => {
    if (!isOpen) return;

    map.current = new maplibregl.Map({
      container: mapContainer.current,
      style: {
        version: 8,
        sources: {
          osm: {
            type: 'raster',
            tiles: ['https://tile.openstreetmap.org/{z}/{x}/{y}.png'],
            tileSize: 256,
            attribution: '© OpenStreetMap contributors',
          },
        },
        layers: [{
          id: 'osm',
          type: 'raster',
          source: 'osm',
        }],
      },
      center: location.coordinates,
      zoom: 12,
    });

    map.current.addControl(new maplibregl.NavigationControl());

    map.current.on('load', () => {
      marker.current = new maplibregl.Marker({ draggable: true, color: '#FF0000' })
        .setLngLat(location.coordinates)
        .addTo(map.current);

      marker.current.on('dragend', () => {
        const { lng, lat } = marker.current.getLngLat();
        updateLocation(lng, lat);
      });

      map.current.on('click', (e) => {
        const { lng, lat } = e.lngLat;
        marker.current.setLngLat([lng, lat]);
        updateLocation(lng, lat);
      });

      if (!address && navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          ({ coords }) => updateLocation(coords.longitude, coords.latitude, true),
          () => alert('Geolocation failed. Defaulting to Tunis.')
        );
      }
    });

    return () => {
      if (map.current) map.current.remove();
    };
  }, [isOpen]);

  const updateLocation = async (lng, lat, move = false) => {
    const newLoc = { type: 'Point', coordinates: [lng, lat] };
    setLocation(newLoc);
    onLocationChange(newLoc);

    const addr = await reverseGeocode(lng, lat);
    setAddress(addr);
    onAddressChange(addr);

    if (move) map.current?.flyTo({ center: [lng, lat], zoom: 15 });
  };

  const geocodeAddress = async (query) => {
    try {
      const res = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}`);
      const data = await res.json();
      if (data.length > 0) {
        const { lat, lon } = data[0];
        const lng = parseFloat(lon);
        const latNum = parseFloat(lat);
        marker.current?.setLngLat([lng, latNum]);
        map.current?.flyTo({ center: [lng, latNum], zoom: 15 });
        updateLocation(lng, latNum);
      } else {
        alert('Adresse introuvable.');
      }
    } catch (err) {
      alert('Échec de la géolocalisation par adresse.');
    }
  };

  const reverseGeocode = async (lng, lat) => {
    try {
      const res = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lon=${lng}&lat=${lat}`);
      const data = await res.json();
      return data.display_name || 'Lieu inconnu';
    } catch {
      return 'Lieu inconnu';
    }
  };

  return isOpen ? (
    <div className="location-picker-localisation">
      <div className="address-search-localisation">
        <input
          className="signup-input-localisation"
          value={address}
          onChange={(e) => setAddress(e.target.value)}
          placeholder="Entrer une adresse"
        />
        <button className="search-button-localisation" onClick={() => geocodeAddress(address)}>Rechercher</button>
        <button
          className="geolocation-button-localisation"
          onClick={() => navigator.geolocation.getCurrentPosition(
            ({ coords }) => updateLocation(coords.longitude, coords.latitude, true),
            () => alert('Échec de la géolocalisation.')
          )}
        >
          📍
        </button>
      </div>
      <div ref={mapContainer} className="map-container-localisation" />
      <div className="location-picker-buttons-localisation">
        <button className="confirm-button-localisation" onClick={() => onSelect(location, address)}>Confirmer</button>
        <button className="cancel-button-localisation" onClick={onClose}>Annuler</button>
      </div>
    </div>
  ) : null;
};

export default LocationPicker;
</file>

<file path="sustainafood-frontend/src/components/RoleSpecificProfile.jsx">
import React from 'react';
import DonorProfile from './DonorProfile';
import RecipientProfile from './RecipientProfile';
import TransporterProfile from './TransporterProfile';

const RoleSpecificProfile = ({ user }) => {
  if (!user || !user.role) {
    console.log("User or user.role is missing:", user); // Debug log
    return <div>User data not available.</div>;
  }

  console.log("User role in RoleSpecificProfile:", user.role); // Debug log

  switch(user.role) {
    case 'restaurant':
    case 'supermarket':
    case 'personaldonor':
      return <DonorProfile user={user} />;
    case 'ong':
    case 'student':
      return <RecipientProfile user={user} />;
    case 'transporter':
      return <TransporterProfile user={user} />;
    default:
      return <div>Profile not available for this role: {user.role}</div>;
  }
};

export default RoleSpecificProfile;
</file>

<file path="sustainafood-frontend/src/components/TransporterProfile.jsx">
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { updateTransporterAvailability, updateTransporterLocation, getUserById } from '../api/userService';
import { getFeedbackByUserId, createFeedback } from '../api/feedbackService';
import { useAuth } from '../contexts/AuthContext';
import LocationPicker from '../components/LocationPicker';
import StarRating from '../components/StarRating';
import pdp from '../assets/images/pdp.png';
import '../assets/styles/TransporterProfile.css';

const TransporterProfile = () => {
  const { id } = useParams(); // Get ID from URL
  const { user: authUser, token } = useAuth();
  const user = authUser; // Logged-in user from AuthContext (localStorage)
  const [profileUser, setProfileUser] = useState(null); // User whose profile is being viewed
  const [isAvailable, setIsAvailable] = useState(true);
  const [location, setLocation] = useState({ type: 'Point', coordinates: [0, 0] });
  const [address, setAddress] = useState('');
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const [isMapOpen, setIsMapOpen] = useState(false);
  const [feedbacks, setFeedbacks] = useState([]);
  const [newFeedback, setNewFeedback] = useState({ rating: 0, comment: '' });
  const [feedbackError, setFeedbackError] = useState('');

  const isOwnProfile = !id || (user && (user._id === id || user.id === id)); // No ID or ID matches logged-in user
  const userIdToFetch = id || user?._id || user?.id; // Use URL ID if present, otherwise logged-in user's ID

  // Fetch user data and feedback
  useEffect(() => {
    const fetchData = async () => {
      if (!userIdToFetch) {
        setError('User ID is missing');
        return;
      }

      try {
        // Fetch user data
        const userResponse = await getUserById(userIdToFetch);
        const fetchedUser = userResponse.data;
        setProfileUser(fetchedUser);
        setIsAvailable(fetchedUser.isAvailable !== undefined ? fetchedUser.isAvailable : true);
        if (fetchedUser.location) {
          setLocation(fetchedUser.location);
          setAddress(fetchedUser.address || `Lat: ${fetchedUser.location.coordinates[1].toFixed(6)}, Lon: ${fetchedUser.location.coordinates[0].toFixed(6)}`);
        }

        // Fetch feedback for the user
        const feedbackResponse = await getFeedbackByUserId(userIdToFetch);
        setFeedbacks(feedbackResponse);
      } catch (err) {
        setError(err.message || 'Failed to load profile or feedback');
        console.error('Error fetching data:', err);
      }
    };

    fetchData();
  }, [userIdToFetch]);

  // Handle location selection from LocationPicker
  const handleLocationSelect = async (selectedLocation, selectedAddress) => {
    if (!userIdToFetch) {
      setError('User ID is missing');
      return;
    }

    try {
      setLocation(selectedLocation);
      setAddress(selectedAddress);
      setIsMapOpen(false);
      setError(null);

      // Update location in backend
      await updateTransporterLocation(userIdToFetch, {
        location: selectedLocation,
        address: selectedAddress,
      });
    } catch (err) {
      setError(err.message || 'Failed to update location');
      console.error('Location update error:', err);
    }
  };

  // Handle availability toggle
  const handleAvailabilityToggle = async () => {
    if (!userIdToFetch) {
      setError('User ID is missing');
      return;
    }

    try {
      setLoading(true);
      const newAvailability = !isAvailable;
      await updateTransporterAvailability(userIdToFetch, newAvailability);
      setIsAvailable(newAvailability);
      setError(null);
    } catch (err) {
      setError(err.message || 'Failed to update availability');
      console.error('Availability update error:', err);
    } finally {
      setLoading(false);
    }
  };

  // Handle feedback submission
  const handleFeedbackSubmit = async (e) => {
    e.preventDefault();
    if (newFeedback.rating < 1 || newFeedback.rating > 5) {
      setFeedbackError('Please select a rating between 1 and 5 stars');
      return;
    }
    if (!newFeedback.comment.trim()) {
      setFeedbackError('Please enter a comment');
      return;
    }

    try {
      const reviewerId = user._id || user.id;
      const feedback = await createFeedback(userIdToFetch, newFeedback.rating, newFeedback.comment, reviewerId, token);
      setFeedbacks([feedback, ...feedbacks]);
      setNewFeedback({ rating: 0, comment: '' });
      setFeedbackError('');
    } catch (error) {
      console.error('Error submitting feedback:', error);
      setFeedbackError('Failed to submit feedback. Please try again.');
    }
  };

  if (!user) {
    return <p className="error-message">Please log in to access this page.</p>;
  }

  if (!profileUser) {
    return <p className="loading-message">Loading...</p>;
  }

  if (profileUser.role !== 'transporter') {
    return <p className="error-message">Access denied. This page is for transporters only.</p>;
  }

  return (
    <div className="transporter-profile">
      <h3>{isOwnProfile ? 'Transporter Dashboard' : `${profileUser.name}'s Profile`}</h3>
      {error && <p className="error-message">{error}</p>}
      {loading && <p className="loading-message">Updating...</p>}

      <div className="transporter-card">
        <h4>Availability Status</h4>
        <p><strong>Status:</strong> {isAvailable ? 'Available' : 'Unavailable'}</p>
        {isOwnProfile && (
          <button
            className={`availability-btn ${isAvailable ? 'available' : 'unavailable'}`}
            onClick={handleAvailabilityToggle}
            disabled={loading}
          >
            {isAvailable ? 'Set Unavailable' : 'Set Available'}
          </button>
        )}
      </div>

      <div className="transporter-card">
        <h4>Current Location</h4>
        <div>
          <label>📍 Location</label>
          <input
            type="text"
            value={address}
            onChange={(e) => setAddress(e.target.value)}
            onClick={() => isOwnProfile && setIsMapOpen(true)} // Only clickable if it's the user's own profile
            placeholder="📍 Select Location"
            readOnly
          />
          {isMapOpen && isOwnProfile && (
            <LocationPicker
              isOpen={isMapOpen}
              onClose={() => setIsMapOpen(false)}
              onLocationChange={setLocation}
              onAddressChange={setAddress}
              onSelect={handleLocationSelect}
              initialAddress={address}
            />
          )}
        </div>
        {location.coordinates[0] !== 0 && location.coordinates[1] !== 0 ? (
          <>
            <p><strong>Latitude:</strong> {location.coordinates[1].toFixed(6)}</p>
            <p><strong>Longitude:</strong> {location.coordinates[0].toFixed(6)}</p>
            <div className="map-placeholder">
              <p>Map display coming soon...</p>
            </div>
          </>
        ) : (
          <p>Select a location...</p>
        )}
      </div>

      
    </div>
  );
};

export default TransporterProfile;
</file>

<file path="sustainafood-frontend/src/pages/AnalyticsDashboard.jsx">
import React, { useState, useEffect, useRef } from "react";
import { useAuth } from "../contexts/AuthContext";
import Navbar from "../components/Navbar";
import Footer from "../components/Footer";
import { Bar } from "react-chartjs-2";
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from "chart.js";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";
import logo from '../assets/images/logooo.png';
import styled, { keyframes } from 'styled-components';
import patternBg from "../assets/images/bg.png";

// Register Chart.js components
ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

// Animations
const fadeIn = keyframes`
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
`;

const float = keyframes`
  0% { transform: translateY(0px); }
  50% { transform: translateY(-15px); }
  100% { transform: translateY(0px); }
`;

const shimmer = keyframes`
  0% { background-position: -1000px 0; }
  100% { background-position: 1000px 0; }
`;

// Styled components
const AnalyticsContainer = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background: #f0f8f0;
  padding: 40px 20px;
  font-family: 'Poppins', sans-serif;
`;

const AnalyticsCard = styled.div`
  background: white;
  border-radius: 20px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  padding: 40px;
  max-width: 800px;
  width: 100%;
  margin: 20px;
  position: relative;
  animation: ${fadeIn} 0.8s ease-out forwards;
  z-index: 2;
  background: 
    linear-gradient(135deg, rgba(230, 242, 230, 0.9), rgba(220, 240, 220, 0.85)),
    url(${patternBg}) repeat center center;
  background-size: 200px 200px;

  &::before {
    content: '';
    position: absolute;
    top: -50px;
    right: -50px;
    width: 200px;
    height: 200px;
    border-radius: 50%;
    background: rgba(34, 139, 34, 0.1);
    z-index: 1;
  }

  &::after {
    content: '';
    position: absolute;
    bottom: -30px;
    left: 15%;
    width: 120px;
    height: 120px;
    border-radius: 50%;
    background: rgba(34, 139, 34, 0.08);
    z-index: 1;
  }
`;

const Titlee = styled.h1`
  font-size: 2.5rem;
  font-weight: 700;
  color: #1a7a1a;
  text-align: center;
  margin-bottom: 30px;
  position: relative;

  &::after {
    content: '';
    position: absolute;
    bottom: -12px;
    left: 50%;
    transform: translateX(-50%);
    width: 80px;
    height: 4px;
    background: linear-gradient(90deg, #228b22, #56ab2f);
    border-radius: 2px;
  }
`;

const AnalyticsText = styled.p`
  font-size: 1.1rem;
  color: #3a5a3a;
  margin: 10px 0;
  line-height: 1.6;

  strong {
    color: #1a7a1a;
    font-weight: 600;
  }
`;

const ChartContainer = styled.div`
  width: 100%;
  max-width: 600px;
  margin: 20px auto;
  padding: 20px;
  background: #f9f9f9;
  border-radius: 15px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
`;

const DownloadButton = styled.button`
  display: block;
  margin: 30px auto;
  padding: 12px 30px;
  background: linear-gradient(135deg, #228b22, #56ab2f);
  color: white;
  border: none;
  border-radius: 30px;
  font-family: 'Poppins', sans-serif;
  font-size: 1.1rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 6px 15px rgba(34, 139, 34, 0.2);
  position: relative;
  overflow: hidden;
  animation: ${float} 6s ease-in-out infinite;

  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(34, 139, 34, 0.3);
  }

  &::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.3) 50%, rgba(255, 255, 255, 0) 100%);
    transform: rotate(30deg);
    animation: ${shimmer} 3s infinite;
    pointer-events: none;
  }
`;

const ErrorMessage = styled.p`
  font-size: 1.2rem;
  color: #e63946;
  text-align: center;
  margin: 20px 0;
`;

const LoadingMessage = styled.p`
  font-size: 1.2rem;
  color: #3a5a3a;
  text-align: center;
  margin: 20px 0;
`;

const AnalyticsDashboard = () => {
  const { authUser } = useAuth();
  const user = JSON.parse(localStorage.getItem("user"));
  const [userId, setuserId] = useState("");
  const isDonor = user?.role === "restaurant" || user?.role === "supermarket" || user?.role === "personaldonor";
  const isRecipient = user?.role === "ong" || user?.role === "student";

  const [analyticsData, setAnalyticsData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const chartRef = useRef(null);

  useEffect(() => {
    if (authUser && (authUser._id || authUser.id)) {
      setuserId(authUser._id || authUser.id);
      console.log("userId depuis authUser :", authUser._id || authUser.id);
    } else if (user) {
      setuserId(user._id || user.id || "");
      console.log("userId depuis localStorage :", user._id || user.id);
    }
  }, [authUser]);

  useEffect(() => {
    const fetchAnalytics = async () => {
      if (!userId) {
        setError("User ID is not available.");
        setLoading(false);
        return;
      }
  
      try {
        setLoading(true);
        const endpoint = isDonor
          ? `http://localhost:3000/donation/api/analytics/donor/${userId}`
          : `http://localhost:3000/donation/api/analytics/recipient/${userId}`;
        console.log("Fetching from:", endpoint);
        const response = await fetch(endpoint);
        if (!response.ok) {
          const text = await response.text();
          throw new Error(`Failed to fetch analytics: ${response.status} - ${text}`);
        }
        const data = await response.json();
        console.log("Données de l'API :", data);
        setAnalyticsData(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
  
    if (userId && (isDonor || isRecipient)) fetchAnalytics();
  }, [userId, isDonor, isRecipient]);

  const chartData = analyticsData?.weeklyTrends && analyticsData.weeklyTrends.length > 0
    ? {
        labels: analyticsData.weeklyTrends.map((t) => `Week ${t._id}`),
        datasets: [
          {
            label: isDonor ? "Donations per Week" : "Requests per Week",
            data: analyticsData.weeklyTrends.map((t) => t.count),
            backgroundColor: "#56ab2f",
            borderColor: "#228b22",
            borderWidth: 1,
          },
        ],
      }
    : null;

  const chartOptions = {
    responsive: true,
    plugins: {
      legend: {
        position: "top",
        labels: {
          font: {
            family: "'Poppins', sans-serif",
            size: 14,
          },
          color: "#3a5a3a",
        },
      },
      title: {
        display: true,
        text: "Weekly Activity",
        font: {
          family: "'Poppins', sans-serif",
          size: 20,
          weight: "600",
        },
        color: "#1a7a1a",
      },
    },
    scales: {
      y: {
        beginAtZero: true,
        ticks: {
          font: {
            family: "'Poppins', sans-serif",
            size: 12,
          },
          color: "#3a5a3a",
        },
      },
      x: {
        ticks: {
          font: {
            family: "'Poppins', sans-serif",
            size: 12,
          },
          color: "#3a5a3a",
        },
      },
    },
  };

  const downloadReport = () => {
    const doc = new jsPDF({
      orientation: "portrait",
      unit: "mm",
      format: "a4",
    });

    const addHeader = () => {
      doc.setFillColor(240, 248, 240);
      doc.rect(0, 0, doc.internal.pageSize.width, 30, "F");
      const imgWidth = 25, imgHeight = 25;
      doc.addImage(logo, "PNG", 5, 5, imgWidth, imgHeight);
      doc.setDrawColor(34, 139, 34);
      doc.setLineWidth(1.5);
      doc.line(0, 30, doc.internal.pageSize.width, 30);
      doc.setFontSize(20);
      doc.setTextColor(26, 122, 26);
      doc.setFont("helvetica", "bold");
      doc.text(isDonor ? "Donor Analytics Report" : "Recipient Analytics Report", doc.internal.pageSize.width / 2, 15, { align: "center" });
      const today = new Date().toLocaleDateString("en-US", { year: "numeric", month: "long", day: "numeric" });
      doc.setFontSize(10);
      doc.setTextColor(58, 90, 58);
      doc.text(`Generated: ${today}`, doc.internal.pageSize.width - 50, 25);
    };

    const addFooter = (page, pageCount) => {
      doc.setDrawColor(200, 200, 200);
      doc.setLineWidth(0.5);
      doc.line(15, doc.internal.pageSize.height - 20, doc.internal.pageSize.width - 15, doc.internal.pageSize.height - 20);
      doc.setTextColor(120, 120, 120);
      doc.setFontSize(8);
      doc.setFont("helvetica", "normal");
      doc.text(`Page ${page} of ${pageCount}`, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 10, { align: "center" });
      doc.text("© SustainaFood", doc.internal.pageSize.width - 45, doc.internal.pageSize.height - 10);
    };

    addHeader();

    let position = 40;
    doc.setFontSize(12);
    doc.setTextColor(26, 122, 26);
    doc.setFont("helvetica", "bold");
    doc.text("Analytics Summary", 10, position);
    position += 10;

    doc.setFontSize(10);
    doc.setTextColor(58, 90, 58);
    doc.setFont("helvetica", "normal");
    if (isDonor) {
      doc.text(`Total Donations: ${analyticsData.totalDonations}`, 10, position);
      position += 5;
      doc.text(`Total Items Donated: ${analyticsData.totalItems}`, 10, position);
      position += 5;
      doc.text(`Categories Donated: ${analyticsData.categories.join(", ")}`, 10, position);
    } else {
      doc.text(`Total Requests: ${analyticsData.totalRequests}`, 10, position);
      position += 5;
      doc.text(`Fulfilled Requests: ${analyticsData.fulfilledRequests}`, 10, position);
      position += 5;
      doc.text(`Total Fulfilled Items: ${analyticsData.totalFulfilledItems}`, 10, position);
      position += 5;
      doc.text(`Categories Requested: ${analyticsData.categories.join(", ")}`, 10, position);
    }
    position += 10;

    if (chartData) {
      const chartCanvas = chartRef.current.querySelector("canvas");
      html2canvas(chartCanvas, { scale: 2 }).then((canvas) => {
        const imgData = canvas.toDataURL("image/png");
        const imgWidth = 190;
        const chartImgHeight = (canvas.height * imgWidth) / canvas.width;

        if (position + chartImgHeight > 250) {
          doc.addPage();
          addHeader();
          position = 40;
        }

        doc.addImage(imgData, "PNG", 10, position, imgWidth, chartImgHeight);
        position += chartImgHeight + 10;

        const pageCount = doc.internal.getNumberOfPages();
        for (let i = 1; i <= pageCount; i++) {
          doc.setPage(i);
          addFooter(i, pageCount);
        }

        const today = new Date();
        doc.save(`${isDonor ? "Donor" : "Recipient"}_Analytics_Report_${today.toISOString().split("T")[0]}.pdf`);
      });
    } else {
      const pageCount = doc.internal.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        addFooter(i, pageCount);
      }
      const today = new Date();
      doc.save(`${isDonor ? "Donor" : "Recipient"}_Analytics_Report_${today.toISOString().split("T")[0]}.pdf`);
    }
  };

  if (loading) return <AnalyticsContainer><LoadingMessage>Loading analytics...</LoadingMessage></AnalyticsContainer>;
  if (error) return <AnalyticsContainer><ErrorMessage>{error}</ErrorMessage></AnalyticsContainer>;
  if (!isDonor && !isRecipient) return <AnalyticsContainer><ErrorMessage>Access denied.</ErrorMessage></AnalyticsContainer>;

  console.log("chartData avant rendu :", chartData);

  return (
    <>
      <Navbar />
      <AnalyticsContainer>
        <AnalyticsCard>
          <Titlee>{isDonor ? "Donor Analytics" : "Recipient Analytics"}</Titlee>
          {isDonor ? (
            <>
              <AnalyticsText><strong>Total Donations:</strong> {analyticsData?.totalDonations}</AnalyticsText>
              <AnalyticsText><strong>Total Items Donated:</strong> {analyticsData?.totalItems}</AnalyticsText>
              <AnalyticsText><strong>Categories Donated:</strong> {analyticsData?.categories?.join(", ")}</AnalyticsText>
            </>
          ) : (
            <>
              <AnalyticsText><strong>Total Requests:</strong> {analyticsData?.totalRequests}</AnalyticsText>
              <AnalyticsText><strong>Fulfilled Requests:</strong> {analyticsData?.fulfilledRequests}</AnalyticsText>
              <AnalyticsText><strong>Total Fulfilled Items:</strong> {analyticsData?.totalFulfilledItems}</AnalyticsText>
              <AnalyticsText><strong>Categories Requested:</strong> {analyticsData?.categories?.join(", ")}</AnalyticsText>
            </>
          )}
          {chartData && (
            <ChartContainer ref={chartRef}>
              <Bar data={chartData} options={chartOptions} />
            </ChartContainer>
          )}
          <DownloadButton onClick={downloadReport}>
            Download Report as PDF
          </DownloadButton>
        </AnalyticsCard>
      </AnalyticsContainer>
      <Footer />
    </>
  );
};

export default AnalyticsDashboard;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/Dashboard.jsx">
"use client"

import { useState, useEffect } from "react"
import Sidebar from "../../components/backoffcom/Sidebar"
import Navbar from "../../components/backoffcom/Navbar"
import CardStats from "../../components/backoffcom/CardStats"
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  LineElement,
  PointElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
  RadialLinearScale,
  Filler,
  PolarAreaController,
  RadarController,
  DoughnutController,
} from "chart.js"
import { Bar, Line, Pie } from "react-chartjs-2"
import "/src/assets/styles/backoffcss/dashboard.css"
import axios from "axios"
import { CSVLink } from "react-csv"

// Register Chart.js components
ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  LineElement,
  PointElement,
  ArcElement,
  RadialLinearScale,
  PolarAreaController,
  RadarController,
  DoughnutController,
  Filler,
  Title,
  Tooltip,
  Legend,
)

const Dashboard = () => {
  const [stats, setStats] = useState({
    totalUsers: 20,
    userRoles: {},
    totalDonations: 21,
    donationStatus: {},
    totalRequests: 17,
    requestStatus: {},
    totalTransactions: 19,
    transactionStatus: {},
    totalProducts: 2,
    totalMeals: 15,
    expiringDonations: 8,
    foodDistributed: 1,
    foodWastePrevented: 7,
    totalFeedbacks: 0,
    averageRating: 0,
    feedbackTrends: [],
    deliveryTrends: [],
    totalDeliveries: 0,
    deliveryStatus: {}, // Added deliveryStatus
    topDonors: [],
    topRecipients: [],
    donationTrends: [],
    requestTrends: [],
    userGrowth: [],
    productBreakdown: {},
    mealBreakdown: {},
  })

  const [filters, setFilters] = useState({
    dateRange: "30d",
    category: "all",
  })

  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)

  useEffect(() => {
    const fetchStats = async () => {
      setLoading(true)
      setError(null)
      try {
        const response = await axios.get("http://localhost:3000/stats", {
          params: filters,
        })
        setStats(response.data)
      } catch (err) {
        console.error("Error fetching stats:", err)
        setError("Failed to load statistics. Please try again later.")
      } finally {
        setLoading(false)
      }
    }
    fetchStats()
  }, [filters])

  const handleFilterChange = (e) => {
    const { name, value } = e.target
    setFilters((prev) => ({ ...prev, [name]: value }))
  }

  const csvData = [
    { label: "Total Users", value: stats.totalUsers },
    { label: "Total Donations", value: stats.totalDonations },
    { label: "Total Requests", value: stats.totalRequests },
    { label: "Total Transactions", value: stats.totalTransactions },
    { label: "Total Products", value: stats.totalProducts },
    { label: "Total Meals", value: stats.totalMeals },
    { label: "Expiring Donations", value: stats.expiringDonations },
    { label: "Food Waste Prevented (kg)", value: stats.foodWastePrevented },
    { label: "Total Feedbacks", value: stats.totalFeedbacks },
    { label: "Average Rating", value: stats.averageRating },
    { label: "Total Deliveries", value: stats.totalDeliveries },
    ...Object.entries(stats.userRoles).map(([role, count]) => ({
      label: `Users - ${role}`,
      value: count,
    })),
    ...Object.entries(stats.donationStatus).map(([status, count]) => ({
      label: `Donations - ${status}`,
      value: count,
    })),
    ...Object.entries(stats.requestStatus).map(([status, count]) => ({
      label: `Requests - ${status}`,
      value: count,
    })),
    ...Object.entries(stats.transactionStatus).map(([status, count]) => ({
      label: `Transactions - ${status}`,
      value: count,
    })),
    ...Object.entries(stats.deliveryStatus).map(([status, count]) => ({
      label: `Deliveries - ${status}`,
      value: count,
    })),
    ...Object.entries(stats.productBreakdown).map(([type, count]) => ({
      label: `Products - ${type}`,
      value: count,
    })),
    ...Object.entries(stats.mealBreakdown).map(([type, count]) => ({
      label: `Meals - ${type}`,
      value: count,
    })),
  ]

  // Donation Trends - Area Chart
  const donationTrendsData = {
    labels: stats.donationTrends.map((trend) => trend.date),
    datasets: [
      {
        label: "Donations Over Time",
        data: stats.donationTrends.map((trend) => trend.count),
        borderColor: "rgba(75, 192, 192, 1)",
        backgroundColor: "rgba(75, 192, 192, 0.2)",
        fill: true,
        tension: 0.4,
      },
    ],
  }

  // Request Trends - Area Chart
  const requestTrendsData = {
    labels: stats.requestTrends.map((trend) => trend.date),
    datasets: [
      {
        label: "Requests Over Time",
        data: stats.requestTrends.map((trend) => trend.count),
        borderColor: "rgba(255, 159, 64, 1)",
        backgroundColor: "rgba(255, 159, 64, 0.2)",
        fill: true,
        tension: 0.4,
      },
    ],
  }

  // User Growth - Area Chart
  const userGrowthData = {
    labels: stats.userGrowth.map((growth) => growth.date),
    datasets: [
      {
        label: "New Users Over Time",
        data: stats.userGrowth.map((growth) => growth.count),
        borderColor: "rgba(255, 99, 132, 1)",
        backgroundColor: "rgba(255, 99, 132, 0.2)",
        fill: true,
        tension: 0.4,
      },
    ],
  }

  // Feedback Trends - Area Chart
  const feedbackTrendsData = {
    labels: stats.feedbackTrends.map((trend) => trend.date),
    datasets: [
      {
        label: "Feedbacks Over Time",
        data: stats.feedbackTrends.map((trend) => trend.count),
        borderColor: "rgba(153, 102, 255, 1)",
        backgroundColor: "rgba(153, 102, 255, 0.2)",
        fill: true,
        tension: 0.4,
      },
    ],
  }

  // Delivery Trends - Area Chart
  const deliveryTrendsData = {
    labels: stats.deliveryTrends.map((trend) => trend.date),
    datasets: [
      {
        label: "Deliveries Over Time",
        data: stats.deliveryTrends.map((trend) => trend.count),
        borderColor: "rgba(46, 125, 50, 1)",
        backgroundColor: "rgba(46, 125, 50, 0.2)",
        fill: true,
        tension: 0.4,
      },
    ],
  }

  // Product Breakdown - Horizontal Bar Chart
  const productBreakdownData = {
    labels: Object.keys(stats.productBreakdown),
    datasets: [
      {
        label: "Product Types",
        data: Object.values(stats.productBreakdown),
        backgroundColor: ["#4CAF50", "#FF9800", "#2196F3", "#F44336", "#8D6E63"],
        borderWidth: 0,
        borderRadius: 6,
      },
    ],
  }

  // Meal Breakdown - Doughnut Chart
  const mealBreakdownData = {
    labels: Object.keys(stats.mealBreakdown),
    datasets: [
      {
        label: "Meal Types",
        data: Object.values(stats.mealBreakdown),
        backgroundColor: ["#66BB6A", "#FFA726", "#42A5F5", "#EF5350", "#A1887F"],
        borderWidth: 2,
        borderColor: "#ffffff",
      },
    ],
  }

  // Donation Status - Pie Chart
  const donationStatusData = {
    labels: Object.keys(stats.donationStatus),
    datasets: [
      {
        label: "Donation Status",
        data: Object.values(stats.donationStatus),
        backgroundColor: ["#43A047", "#FB8C00", "#1E88E5", "#E53935", "#795548", "#607D8B"],
        borderWidth: 2,
        borderColor: "#ffffff",
      },
    ],
  }

  // Request Status - Pie Chart
  const requestStatusData = {
    labels: Object.keys(stats.requestStatus),
    datasets: [
      {
        label: "Request Status",
        data: Object.values(stats.requestStatus),
        backgroundColor: ["#388E3C", "#F57C00", "#1976D2", "#D32F2F", "#6D4C41"],
        borderWidth: 2,
        borderColor: "#ffffff",
      },
    ],
  }

  // Delivery Status - Pie Chart
  const deliveryStatusData = {
    labels: Object.keys(stats.deliveryStatus),
    datasets: [
      {
        label: "Delivery Status",
        data: Object.values(stats.deliveryStatus),
        backgroundColor: ["#0288D1", "#FBC02D", "#7B1FA2"],
        borderWidth: 2,
        borderColor: "#ffffff",
      },
    ],
  }

  // Transaction Status - Stacked Bar Chart
  const transactionStatusData = {
    labels: ["Transaction Status"],
    datasets: Object.entries(stats.transactionStatus).map(([status, count], index) => ({
      label: status,
      data: [count],
      backgroundColor: ["#2E7D32", "#EF6C00", "#1565C0", "#C62828", "#5D4037", "#546E7A"][index],
      borderWidth: 0,
      borderRadius: 6,
    })),
  }

  return (
    <div className="dashboard-container">
      <Sidebar />
      <div className="dashboard-content">
        <Navbar />
        <div className="filter-bar">
          <div className="filter-group">
            <label>
              Date Range:
              <select name="dateRange" value={filters.dateRange} onChange={handleFilterChange}>
                <option value="7d">Last 7 Days</option>
                <option value="30d">Last 30 Days</option>
                <option value="90d">Last 90 Days</option>
                <option value="all">All Time</option>
              </select>
            </label>
            <label>
              Category:
              <select name="category" value={filters.category} onChange={handleFilterChange}>
                <option value="all">All</option>
                <option value="packaged_products">Packaged Products</option>
                <option value="prepared_meals">Prepared Meals</option>
              </select>
            </label>
          </div>
          <CSVLink
            data={csvData}
            filename={`sustainafood-stats-${new Date().toISOString()}.csv`}
            className="export-button"
          >
            Export to CSV
          </CSVLink>
        </div>
        {loading && <div className="loading">Loading statistics...</div>}
        {error && <div className="error">{error}</div>}
        {!loading && !error && (
          <>
            <div className="card-container">
              <CardStats
                title="Total Users"
                value={stats.totalUsers}
                percentage={null}
                icon="users"
                color="blue"
                progress={0}
              />
              <CardStats
                title="Total Donations"
                value={stats.totalDonations}
                percentage={null}
                icon="utensils"
                color="green"
                progress={0}
              />
              <CardStats
                title="Total Requests"
                value={stats.totalRequests}
                percentage={null}
                icon="handHoldingHeart"
                color="orange"
                progress={0}
              />
              <CardStats
                title="Total Transactions"
                value={stats.totalTransactions}
                percentage={null}
                icon="chart"
                color="purple"
                progress={0}
              />
              <CardStats
                title="Food Waste Prevented"
                value={`${stats.foodWastePrevented} kg`}
                percentage={null}
                icon="trash"
                color="teal"
                progress={0}
              />
              <CardStats
                title="Expiring Donations"
                value={stats.expiringDonations}
                percentage={null}
                icon="clock"
                color="yellow"
                progress={0}
              />
              <CardStats
                title="Total Products"
                value={stats.totalProducts}
                percentage={null}
                icon="box"
                color="pink"
                progress={0}
              />
              <CardStats
                title="Total Meals"
                value={stats.totalMeals}
                percentage={null}
                icon="utensils"
                color="cyan"
                progress={0}
              />
              <CardStats
                title="Average Rating"
                value={stats.averageRating.toFixed(1)}
                percentage={null}
                icon="star"
                color="gold"
                progress={0}
              />
              <CardStats
                title="Total Deliveries"
                value={stats.totalDeliveries}
                percentage={null}
                icon="truck"
                color="indigo"
                progress={0}
              />
            </div>
            <div className="charts-status-container">
              <div className="chart-section">
                <h3>User Growth</h3>
                <Line
                  data={userGrowthData}
                  options={{
                    responsive: true,
                    plugins: {
                      legend: {
                        position: "top",
                      },
                    },
                    scales: {
                      y: {
                        beginAtZero: true,
                      },
                    },
                  }}
                />
              </div>
              <div className="chart-section">
                <h3>Transaction Status</h3>
                <Bar
                  data={transactionStatusData}
                  options={{
                    responsive: true,
                    scales: {
                      x: {
                        stacked: true,
                      },
                      y: {
                        stacked: true,
                        beginAtZero: true,
                      },
                    },
                    plugins: {
                      legend: {
                        position: "bottom",
                      },
                    },
                  }}
                />
              </div>
              <div className="chart-section">
                <h3>Request Trends</h3>
                <Line
                  data={requestTrendsData}
                  options={{
                    responsive: true,
                    plugins: {
                      legend: {
                        position: "top",
                      },
                    },
                    scales: {
                      y: {
                        beginAtZero: true,
                      },
                    },
                  }}
                />
              </div>
              <div className="chart-section">
                <h3>Feedback Trends</h3>
                <Line
                  data={feedbackTrendsData}
                  options={{
                    responsive: true,
                    plugins: {
                      legend: {
                        position: "top",
                      },
                    },
                    scales: {
                      y: {
                        beginAtZero: true,
                      },
                    },
                  }}
                />
              </div>
              <div className="chart-section">
                <h3>Donation Trends</h3>
                <Line
                  data={donationTrendsData}
                  options={{
                    responsive: true,
                    plugins: {
                      legend: {
                        position: "top",
                      },
                    },
                    scales: {
                      y: {
                        beginAtZero: true,
                      },
                    },
                  }}
                />
              </div>
              <div className="chart-section">
                <h3>Delivery Trends</h3>
                <Line
                  data={deliveryTrendsData}
                  options={{
                    responsive: true,
                    plugins: {
                      legend: {
                        position: "top",
                      },
                    },
                    scales: {
                      y: {
                        beginAtZero: true,
                      },
                    },
                  }}
                />
              </div>
              <div className="chart-section">
                <h3>Product Breakdown</h3>
                <Bar
                  data={productBreakdownData}
                  options={{
                    responsive: true,
                    indexAxis: "y",
                    plugins: {
                      legend: {
                        display: false,
                      },
                    },
                    scales: {
                      x: {
                        beginAtZero: true,
                      },
                    },
                  }}
                />
              </div>
              <div className="chart-section">
                <h3>Meal Breakdown</h3>
                <Bar
                  data={mealBreakdownData}
                  options={{
                    responsive: true,
                    indexAxis: "y",
                    plugins: {
                      legend: {
                        display: false,
                      },
                    },
                    scales: {
                      x: {
                        beginAtZero: true,
                      },
                    },
                  }}
                />
              </div>
            </div>
            <div className="pie-charts-container">
              <div className="pie-chart-section">
                <h3>Donation Status</h3>
                <Pie
                  data={donationStatusData}
                  options={{
                    responsive: true,
                    plugins: {
                      legend: {
                        position: "bottom",
                      },
                    },
                  }}
                />
              </div>
              <div className="pie-chart-section">
                <h3>Request Status</h3>
                <Pie
                  data={requestStatusData}
                  options={{
                    responsive: true,
                    plugins: {
                      legend: {
                        position: "bottom",
                      },
                    },
                  }}
                />
              </div>
              <div className="pie-chart-section">
                <h3>Delivery Status</h3>
                <Pie
                  data={deliveryStatusData}
                  options={{
                    responsive: true,
                    plugins: {
                      legend: {
                        position: "bottom",
                      },
                    },
                  }}
                />
              </div>
            </div>
            <div className="detailed-stats">
              <div className="stats-section">
                <h3>User Role Breakdown</h3>
                <table>
                  <thead>
                    <tr>
                      <th>Role</th>
                      <th>Count</th>
                    </tr>
                  </thead>
                  <tbody>
                    {Object.entries(stats.userRoles).map(([role, count]) => (
                      <tr key={role}>
                        <td>{role}</td>
                        <td>{count}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              <div className="stats-section">
                <h3>Top Donors</h3>
                <table>
                  <thead>
                    <tr>
                      <th>Name</th>
                      <th>Donations</th>
                      <th>Total Items</th>
                    </tr>
                  </thead>
                  <tbody>
                    {stats.topDonors.map((donor) => (
                      <tr key={donor._id}>
                        <td>{donor.name || "Unknown"}</td>
                        <td>{donor.donationCount}</td>
                        <td>{donor.totalItems}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              <div className="stats-section">
                <h3>Top Recipients</h3>
                <table>
                  <thead>
                    <tr>
                      <th>Name</th>
                      <th>Requests</th>
                      <th>Total Items Received</th>
                    </tr>
                  </thead>
                  <tbody>
                    {stats.topRecipients.map((recipient) => (
                      <tr key={recipient._id}>
                        <td>{recipient.name || "Unknown"}</td>
                        <td>{recipient.requestCount}</td>
                        <td>{recipient.totalItems}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  )
}

export default Dashboard
</file>

<file path="sustainafood-frontend/src/pages/backoffice/delivery.jsx">
import React, { useEffect, useState } from "react";
import axios from "axios";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "/src/assets/styles/backoffcss/transporterList.css";
import { FaEye, FaFilePdf } from "react-icons/fa";
import ReactPaginate from "react-paginate";
import { Link } from "react-router-dom";
import logo from '../../assets/images/logooo.png';
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";

const Delivery = () => {
    const [deliveries, setDeliveries] = useState([]);
    const [filteredDeliveries, setFilteredDeliveries] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [currentPage, setCurrentPage] = useState(0);
    const [searchQuery, setSearchQuery] = useState("");
    const [filterOption, setFilterOption] = useState("all");
    const [sortOption, setSortOption] = useState("date");
    const [deliveriesPerPage] = useState(5);

    // Fetch deliveries
    useEffect(() => {
        const fetchDeliveries = async () => {
            try {
                setLoading(true);
                const token = localStorage.getItem("token");
                if (!token) {
                    throw new Error("Please log in to view deliveries");
                }

                const response = await axios.get("http://localhost:3000/deliveries", {
                    headers: { Authorization: `Bearer ${token}` },
                });

                const deliveriesArray = Array.isArray(response.data.data) ? response.data.data : [];
                setDeliveries(deliveriesArray);
                setFilteredDeliveries(deliveriesArray);
            } catch (err) {
                console.error("Fetch error:", err);
                setError(err.message || "Failed to fetch deliveries");
            } finally {
                setLoading(false);
            }
        };

        fetchDeliveries();
    }, []);

    // Apply search, filter, and sort
    useEffect(() => {
        if (!deliveries.length) return;

        let updatedDeliveries = [...deliveries];

        // Apply search
        if (searchQuery) {
            updatedDeliveries = updatedDeliveries.filter((delivery) => {
                const donation = delivery.donationTransaction?.donation || {};
                const recipient = delivery.donationTransaction?.requestNeed?.recipient || {};
                const donor = donation.donor || {};
                const transporter = delivery.transporter || {};
                const titleMatch = donation.title?.toLowerCase().includes(searchQuery.toLowerCase());
                const categoryMatch = donation.category?.toLowerCase().includes(searchQuery.toLowerCase());
                const recipientMatch = recipient.name?.toLowerCase().includes(searchQuery.toLowerCase());
                const donorMatch = donor.name?.toLowerCase().includes(searchQuery.toLowerCase());
                const transporterMatch = transporter.name?.toLowerCase().includes(searchQuery.toLowerCase());
                const addressMatch =
                    delivery.pickupAddress?.toLowerCase().includes(searchQuery.toLowerCase()) ||
                    delivery.deliveryAddress?.toLowerCase().includes(searchQuery.toLowerCase());
                return titleMatch || categoryMatch || recipientMatch || donorMatch || transporterMatch || addressMatch;
            });
        }

        // Apply filter
        if (filterOption !== "all") {
            updatedDeliveries = updatedDeliveries.filter(
                (delivery) => (delivery.status || "no-status") === filterOption
            );
        }

        // Apply sorting
        updatedDeliveries.sort((a, b) => {
            const donationA = a.donationTransaction?.donation || {};
            const donationB = b.donationTransaction?.donation || {};
            const recipientA = a.donationTransaction?.requestNeed?.recipient || {};
            const recipientB = b.donationTransaction?.requestNeed?.recipient || {};
            const transporterA = a.transporter || {};
            const transporterB = b.transporter || {};
            if (sortOption === "title") {
                return (donationA.title || "").localeCompare(donationB.title || "");
            } else if (sortOption === "recipient") {
                return (recipientA.name || "").localeCompare(recipientB.name || "");
            } else if (sortOption === "transporter") {
                return (transporterA.name || "").localeCompare(transporterB.name || "");
            } else if (sortOption === "status") {
                return (a.status || "no-status").localeCompare(b.status || "no-status");
            } else {
                return new Date(a.createdAt) - new Date(b.createdAt);
            }
        });

        setFilteredDeliveries(updatedDeliveries);
        setCurrentPage(0);
    }, [deliveries, searchQuery, filterOption, sortOption]);

    // Export to PDF
    const exportToPDF = () => {
        const doc = new jsPDF({
            orientation: "landscape",
            unit: "mm",
            format: "a4",
        });

        doc.setFillColor(245, 245, 245);
        doc.rect(0, 0, doc.internal.pageSize.width, 40, "F");

        doc.setDrawColor(144, 196, 60);
        doc.setLineWidth(1.5);
        doc.line(0, 40, doc.internal.pageSize.width, 40);

        const imgWidth = 30,
            imgHeight = 30;
        doc.addImage(logo, "PNG", 5, 5, imgWidth, imgHeight);

        const title = "DELIVERY LIST";
        doc.setFontSize(28);
        doc.setTextColor(50, 62, 72);
        doc.setFont("helvetica", "bold");
        doc.text(title, doc.internal.pageSize.width / 2, 20, { align: "center" });

        const today = new Date();
        const dateStr = today.toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
        });
        doc.setFontSize(10);
        doc.setTextColor(80, 80, 80);
        doc.text(`Generated: ${dateStr}`, doc.internal.pageSize.width - 50, 38);

        autoTable(doc, {
            head: [["ID", "Donation Title", "Donor", "Recipient", "Transporter", "Pickup Address", "Delivery Address", "Status"]],
            body: filteredDeliveries.map((delivery, index) => {
                const donation = delivery.donationTransaction?.donation || {};
                const recipient = delivery.donationTransaction?.requestNeed?.recipient || {};
                const donor = donation.donor || {};
                const transporter = delivery.transporter || {};
                return [
                    (index + 1).toString(),
                    donation.title || "Untitled",
                    donor.name || "Unknown Donor",
                    recipient.name || "Unknown Recipient",
                    transporter.name || "No Transporter Assigned",
                    delivery.pickupAddress || "Not specified",
                    delivery.deliveryAddress || "Not specified",
                    delivery.status || "No Status",
                ];
            }),
            startY: 50,
            theme: "grid",
            styles: {
                fontSize: 9,
                cellPadding: 6,
                lineColor: [200, 200, 200],
                lineWidth: 0.2,
                valign: "middle",
                textColor: [45, 45, 45],
            },
            headStyles: {
                fillColor: [70, 80, 95],
                textColor: [255, 255, 255],
                fontStyle: "bold",
                halign: "center",
                fontSize: 10,
            },
            alternateRowStyles: {
                fillColor: [250, 250, 250],
            },
            didDrawCell: (data) => {
                if (data.section === "body" && data.column.index === 7) {
                    const status = data.cell.text[0];
                    if (status === "delivered") {
                        doc.setFillColor(144, 196, 60);
                        doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F");
                        doc.setTextColor(255, 255, 255);
                    } else if (status === "failed") {
                        doc.setFillColor(220, 220, 220);
                        doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F");
                        doc.setTextColor(100, 100, 100);
                    }
                }
            },
            didDrawPage: (data) => {
                doc.setDrawColor(200, 200, 200);
                doc.setLineWidth(0.5);
                doc.line(15, doc.internal.pageSize.height - 20, doc.internal.pageSize.width - 15, doc.internal.pageSize.height - 20);

                doc.setFillColor(144, 196, 60);
                doc.roundedRect(doc.internal.pageSize.width / 2 - 15, doc.internal.pageSize.height - 18, 30, 12, 3, 3, "F");
                doc.setTextColor(255, 255, 255);
                doc.setFontSize(9);
                doc.text(`Page ${data.pageNumber} of ${doc.internal.getNumberOfPages()}`, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 10, { align: "center" });

                doc.setTextColor(120, 120, 120);
                doc.setFontSize(8);
                doc.setFont("helvetica", "italic");
                doc.text("Confidential - For internal use only", 15, doc.internal.pageSize.height - 10);

                doc.text("© SustainaFood", doc.internal.pageSize.width - 45, doc.internal.pageSize.height - 10);
            },
        });

        doc.save(`Delivery_List_${today.toISOString().split("T")[0]}.pdf`);
    };

    const pagesVisited = currentPage * deliveriesPerPage;
    const displayDeliveries = filteredDeliveries.slice(pagesVisited, pagesVisited + deliveriesPerPage);
    const pageCount = Math.ceil(filteredDeliveries.length / deliveriesPerPage);

    const changePage = ({ selected }) => {
        setCurrentPage(selected);
    };

    if (loading) return <div>Loading...</div>;

    if (error) return <div>Error: {error}</div>;

    return (
        <div className="dashboard-container">
            <Sidebar />
            <div className="dashboard-content">
                <Navbar setSearchQuery={setSearchQuery} />
                <div className="transporter-list">
                    <div className="header-container">
                        <h2>Delivery Management</h2>
                        <button className="export-pdf-btn" onClick={exportToPDF}>
                            <FaFilePdf /> Export to PDF
                        </button>
                    </div>
                    <div className="sort-container" style={{ display: "flex", gap: "15px", marginBottom: "20px" }}>
                        <div>
                            <label>Filter by Status: </label>
                            <select
                                value={filterOption}
                                onChange={(e) => setFilterOption(e.target.value)}
                                style={{
                                    padding: "5px",
                                    borderRadius: "5px",
                                    border: "1px solid #ccc",
                                    marginLeft: "5px",
                                }}
                            >
                                <option value="all">All Deliveries</option>
                                <option value="no-status">No Status</option>
                                <option value="pending">Pending</option>
                                <option value="picked_up">Picked Up</option>
                                <option value="in_progress">In Progress</option>
                                <option value="delivered">Delivered</option>
                                <option value="failed">Failed</option>
                            </select>
                        </div>
                        <div>
                            <label>Sort by: </label>
                            <select
                                value={sortOption}
                                onChange={(e) => setSortOption(e.target.value)}
                                style={{
                                    padding: "5px",
                                    borderRadius: "5px",
                                    border: "1px solid #ccc",
                                    marginLeft: "5px",
                                }}
                            >
                                <option value="date">Sort by Date</option>
                                <option value="title">Sort by Donation Title</option>
                                <option value="recipient">Sort by Recipient</option>
                                <option value="transporter">Sort by Transporter</option>
                                <option value="status">Sort by Status</option>
                            </select>
                        </div>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Donation Title</th>
                                <th>Donor</th>
                                <th>Recipient</th>
                                <th>Transporter</th>
                                <th>Pickup Address</th>
                                <th>Delivery Address</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {displayDeliveries.map((delivery, index) => {
                                const donation = delivery.donationTransaction?.donation || {};
                                const recipient = delivery.donationTransaction?.requestNeed?.recipient || {};
                                const donor = donation.donor || {};
                                const transporter = delivery.transporter || {};

                                return (
                                    <tr key={delivery._id}>
                                        <td>{pagesVisited + index + 1}</td>
                                        <td>{donation.title || "Untitled"}</td>
                                        <td>{donor.name || "Unknown Donor"}</td>
                                        <td>{recipient.name || "Unknown Recipient"}</td>
                                        <td>{transporter.name || "No Transporter Assigned"}</td>
                                        <td>{delivery.pickupAddress || "Not specified"}</td>
                                        <td>{delivery.deliveryAddress || "Not specified"}</td>
                                        <td>{delivery.status || "No Status"}</td>
                                        <td className="action-buttons">
                                            <button className="view-btn">
                                                <Link to={`/deliveries/view/${delivery._id}`}>
                                                    <FaEye />
                                                </Link>
                                            </button>
                                        </td>
                                    </tr>
                                );
                            })}
                        </tbody>
                    </table>

                    <ReactPaginate
                        previousLabel={"Previous"}
                        nextLabel={"Next"}
                        pageCount={pageCount}
                        onPageChange={changePage}
                        containerClassName={"pagination"}
                        previousLinkClassName={"previousBttn"}
                        nextLinkClassName={"nextBttn"}
                        disabledClassName={"paginationDisabled"}
                        activeClassName={"paginationActive"}
                    />
                </div>
            </div>
        </div>
    );
};

export default Delivery;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/PersonnelList.jsx">
"use client"

import { useEffect, useState } from "react"
import axios from "axios"
import Sidebar from "../../components/backoffcom/Sidebar"
import Navbar from "../../components/backoffcom/Navbar"
import "/src/assets/styles/backoffcss/backlist.css" // Changed from studentList.css to backlist.css
import { FaEye, FaTrash, FaBan, FaUnlock, FaFilePdf } from "react-icons/fa"
import ReactPaginate from "react-paginate"
import { Link } from "react-router-dom"
import logo from "../../assets/images/logooo.png"

import { jsPDF } from "jspdf"
import autoTable from "jspdf-autotable"

const PersonnelList = () => {
  const [students, setStudents] = useState([])
  const [currentPage, setCurrentPage] = useState(0)
  const [searchQuery, setSearchQuery] = useState("")
  const [sortField, setSortField] = useState("name")
  const [sortOrder, setSortOrder] = useState("asc")
  const studentsPerPage = 3

  const pagesVisited = currentPage * studentsPerPage

  useEffect(() => {
    axios
      .get("http://localhost:3000/users/list")
      .then((response) => {
        const studentUsers = response.data.filter((user) => user.role === "personaldonor")
        setStudents(studentUsers)
      })
      .catch((error) => console.error("Error fetching personal donors:", error))
  }, [])

  const handleBlockUser = async (userId, isBlocked) => {
    try {
      const response = await axios.put(`http://localhost:3000/users/toggle-block/${userId}`, {
        isBlocked: !isBlocked,
      })

      if (response.status === 200) {
        alert(`User has been ${response.data.isBlocked ? "blocked" : "unblocked"} successfully.`)
        setStudents(
          students.map((student) =>
            student._id === userId ? { ...student, isBlocked: response.data.isBlocked } : student,
          ),
        )
      } else {
        alert(response.data.error || "Error toggling block status.")
      }
    } catch (error) {
      console.error("Error:", error)
      alert("Failed to update block status.")
    }
  }

  const deleteUser = async (userId) => {
    if (!window.confirm("Are you sure you want to delete this personal donor?")) return

    try {
      await axios.delete(`http://localhost:3000/users/delete/${userId}`)
      alert("Personal donor deleted!")
      setStudents(students.filter((user) => user._id !== userId))
    } catch (error) {
      console.error("Error deleting personal donor:", error)
    }
  }

  const exportToPDF = () => {
    const doc = new jsPDF({
      orientation: "landscape",
      unit: "mm",
      format: "a4",
    })

    // Header background
    doc.setFillColor(245, 245, 245)
    doc.rect(0, 0, doc.internal.pageSize.width, 40, "F")

    // Decorative bottom line
    doc.setDrawColor(144, 196, 60)
    doc.setLineWidth(1.5)
    doc.line(0, 40, doc.internal.pageSize.width, 40)

    // Logo
    const imgWidth = 30,
      imgHeight = 30
    doc.addImage(logo, "PNG", 5, 5, imgWidth, imgHeight)

    // Title
    const title = "Personal Donor LIST"
    doc.setFontSize(28)
    doc.setTextColor(50, 62, 72)
    doc.setFont("helvetica", "bold")
    doc.text(title, doc.internal.pageSize.width / 2, 20, { align: "center" })

    // Date
    const today = new Date()
    const dateStr = today.toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    })
    doc.setFontSize(10)
    doc.setTextColor(80, 80, 80)
    doc.text(`Generated: ${dateStr}`, doc.internal.pageSize.width - 50, 38)

    // Table
    autoTable(doc, {
      head: [["ID", "Name", "Email", "Phone", "CIN", "Age", "Sex", "Status"]],
      body: students.map((student, index) => [
        (index + 1).toString(),
        student.name,
        student.email,
        student.phone || "N/A",
        student.num_cin || "N/A",
        student.age ? student.age.toString() : "N/A",
        student.sexe || "N/A",
        student.isActive ? "Active" : "Inactive",
      ]),
      startY: 50,
      theme: "grid",
      styles: {
        fontSize: 9,
        cellPadding: 6,
        lineColor: [200, 200, 200],
        lineWidth: 0.2,
        valign: "middle",
        textColor: [45, 45, 45],
      },
      headStyles: {
        fillColor: [70, 80, 95],
        textColor: [255, 255, 255],
        fontStyle: "bold",
        halign: "center",
        fontSize: 10,
      },
      alternateRowStyles: {
        fillColor: [250, 250, 250],
      },
      didDrawCell: (data) => {
        if (data.section === "body" && data.column.index === 7) {
          const status = data.cell.text[0]
          if (status === "Active") {
            doc.setFillColor(144, 196, 60)
            doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F")
            doc.setTextColor(255, 255, 255)
          } else if (status === "Inactive") {
            doc.setFillColor(220, 220, 220)
            doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F")
            doc.setTextColor(100, 100, 100)
          }
        }
      },
      didDrawPage: (data) => {
        // Footer line
        doc.setDrawColor(200, 200, 200)
        doc.setLineWidth(0.5)
        doc.line(
          15,
          doc.internal.pageSize.height - 20,
          doc.internal.pageSize.width - 15,
          doc.internal.pageSize.height - 20,
        )

        // Page numbers
        doc.setFillColor(144, 196, 60)
        doc.roundedRect(doc.internal.pageSize.width / 2 - 15, doc.internal.pageSize.height - 18, 30, 12, 3, 3, "F")
        doc.setTextColor(255, 255, 255)
        doc.setFontSize(9)
        doc.text(
          `Page ${data.pageNumber} of ${doc.internal.getNumberOfPages()}`,
          doc.internal.pageSize.width / 2,
          doc.internal.pageSize.height - 10,
          { align: "center" },
        )

        // Confidentiality notice
        doc.setTextColor(120, 120, 120)
        doc.setFontSize(8)
        doc.setFont("helvetica", "italic")
        doc.text("Confidential - For internal use only", 15, doc.internal.pageSize.height - 10)

        // Institution info
        doc.text("©SustainaFood", doc.internal.pageSize.width - 45, doc.internal.pageSize.height - 10)
      },
    })

    doc.save(`Personal_Donor_Directory_${today.toISOString().split("T")[0]}.pdf`)
  }

  const filteredStudents = students.filter((student) => {
    const phoneString = student.phone ? student.phone.toString() : ""
    const ageString = student.age ? student.age.toString() : ""
    const numCinString = student.num_cin ? student.num_cin.toString() : ""
    const sexeString = student.sexe ? student.sexe.toString().toLowerCase() : ""
    return (
      student.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      student.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
      phoneString.includes(searchQuery) ||
      ageString.includes(searchQuery) ||
      numCinString.includes(searchQuery) ||
      sexeString.includes(searchQuery)
    )
  })

  const sortedStudents = filteredStudents.sort((a, b) => {
    if (sortField === "name") {
      return sortOrder === "asc" ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name)
    } else if (sortField === "email") {
      return sortOrder === "asc" ? a.email.localeCompare(b.email) : b.email.localeCompare(a.email)
    } else if (sortField === "phone") {
      return sortOrder === "asc" ? a.phone - b.phone : b.phone - a.phone
    } else if (sortField === "num_cin") {
      return sortOrder === "asc"
        ? (a.num_cin || "").localeCompare(b.num_cin || "")
        : (b.num_cin || "").localeCompare(a.num_cin || "")
    } else if (sortField === "age") {
      return sortOrder === "asc" ? a.age - b.age : b.age - a.age
    } else if (sortField === "sexe") {
      return sortOrder === "asc" ? a.sexe.localeCompare(b.sexe) : b.sexe.localeCompare(a.sexe)
    } else if (sortField === "isActive") {
      return sortOrder === "asc"
        ? (a.isActive ? 1 : -1) - (b.isActive ? 1 : -1)
        : (b.isActive ? 1 : -1) - (a.isActive ? 1 : -1)
    }
    return 0
  })

  const displayStudents = sortedStudents.slice(pagesVisited, pagesVisited + studentsPerPage)
  const pageCount = Math.ceil(filteredStudents.length / studentsPerPage)

  const changePage = ({ selected }) => {
    setCurrentPage(selected)
  }

  return (
    <div className="dashboard-container">
      <Sidebar />
      <div className="dashboard-content">
        <Navbar setSearchQuery={setSearchQuery} />
        <div className="backlist-container">
          {/* Changed from student-list to backlist-container */}
          <div className="backlist-header">
            {/* Changed from header-container to backlist-header */}
            <h2 className="backlist-title">Personal Donor Management</h2>
            {/* Added backlist-title class */}
            <button className="backlist-action-button" onClick={exportToPDF}>
              {/* Changed from export-pdf-btn to backlist-action-button */}
              <FaFilePdf /> Export to PDF
            </button>
          </div>

          <div className="backlist-search">
            {/* Added backlist-search wrapper */}
            <div className="sort-container">
              <label>Sort by:</label>
              <select value={sortField} onChange={(e) => setSortField(e.target.value)}>
                <option value="name">Name</option>
                <option value="email">Email</option>
                <option value="phone">Phone</option>
                <option value="num_cin">CIN</option>
                <option value="age">Age</option>
                <option value="sexe">Sex</option>
                <option value="isActive">Active Status</option>
              </select>
              <select value={sortOrder} onChange={(e) => setSortOrder(e.target.value)}>
                <option value="asc">Ascending</option>
                <option value="desc">Descending</option>
              </select>
            </div>
          </div>

          <table className="backlist-table">
            {/* Added backlist-table class */}
            <thead className="backlist-table-head">
              {/* Added backlist-table-head class */}
              <tr>
                <th className="backlist-table-header">ID</th>
                <th className="backlist-table-header">Photo</th>
                <th className="backlist-table-header">Name</th>
                <th className="backlist-table-header">Email</th>
                <th className="backlist-table-header">Phone</th>
                <th className="backlist-table-header">CIN</th>
                <th className="backlist-table-header">Age</th>
                <th className="backlist-table-header">Sex</th>
                <th className="backlist-table-header">Active</th>
                <th className="backlist-table-header">Actions</th>
              </tr>
            </thead>
            <tbody>
              {displayStudents.map((student, index) => (
                <tr key={student._id} className="backlist-table-row">
                  {/* Added backlist-table-row class */}
                  <td className="backlist-table-cell">{pagesVisited + index + 1}</td>
                  <td className="backlist-table-cell">
                    <img
                      src={student.photo ? `http://localhost:3000/${student.photo}` : "/src/assets/User_icon_2.svg.png"}
                      alt="Student"
                      style={{ width: "40px", height: "40px", borderRadius: "50%" }}
                    />
                  </td>
                  <td className="backlist-table-cell">{student.name}</td>
                  <td className="backlist-table-cell">{student.email}</td>
                  <td className="backlist-table-cell">{student.phone}</td>
                  <td className="backlist-table-cell">{student.num_cin || "N/A"}</td>
                  <td className="backlist-table-cell">{student.age || "N/A"}</td>
                  <td className="backlist-table-cell">{student.sexe}</td>
                  <td className="backlist-table-cell">{student.isActive ? "Yes" : "No"}</td>
                  <td className="backlist-table-cell backlist-actions-cell">
                    {/* Added backlist-actions-cell class */}
                    <Link to={`/students/view/${student._id}`} className="backlist-row-action">
                      {/* Changed from view-btn to backlist-row-action */}
                      <FaEye />
                    </Link>
                    <button
                      className="backlist-row-action"
                      onClick={() => handleBlockUser(student._id, student.isBlocked)}
                      style={{ color: student.isBlocked ? "green" : "red" }}
                    >
                      {/* Changed from block-btn to backlist-row-action */}
                      {student.isBlocked ? <FaUnlock /> : <FaBan />}
                    </button>
                    <button className="backlist-row-action" onClick={() => deleteUser(student._id)}>
                      {/* Changed from delete-btn to backlist-row-action */}
                      <FaTrash />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          {/* Pagination */}
          <ReactPaginate
            previousLabel={"Previous"}
            nextLabel={"Next"}
            pageCount={pageCount}
            onPageChange={changePage}
            containerClassName={"backlist-pagination"}
            pageClassName={"backlist-pagination-item"}
            previousClassName={"backlist-pagination-item"}
            nextClassName={"backlist-pagination-item"}
            pageLinkClassName={"backlist-pagination-link"}
            previousLinkClassName={"backlist-pagination-link"}
            nextLinkClassName={"backlist-pagination-link"}
            disabledClassName={"backlist-pagination-disabled"}
            activeClassName={"backlist-pagination-active"}
          />
        </div>
      </div>
    </div>
  )
}

export default PersonnelList
</file>

<file path="sustainafood-frontend/src/pages/Contact.jsx">
"use client"

import { useState } from "react"
import Navbar from "../components/Navbar"
import Footer from "../components/Footer"
import "../assets/styles/Contact.css"
import { FaPhone, FaEnvelope, FaMapMarkerAlt, FaClock } from "react-icons/fa"
import { submitContactForm } from "../api/contactService"
import LoadingButton from "../components/LoadingButton"
import ContactInfoBox from "../components/ContactInfoBox"

const Contact = () => {
  const [feedback, setFeedback] = useState({
    name: "",
    email: "",
    comment: "",
  })

  const [submitted, setSubmitted] = useState(false)
  const [error, setError] = useState(null)
  const [loading, setLoading] = useState(false)

  const handleChange = (e) => {
    const { name, value } = e.target
    setFeedback({ ...feedback, [name]: value })
    // Clear error when user starts typing
    if (error) setError(null)
  }

  const validateEmail = (email) => {
    const re =
      /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
    return re.test(String(email).toLowerCase())
  }

  const handleSubmit = async (e) => {
    e.preventDefault()

    // Form validation
    if (!feedback.name.trim()) {
      setError("Please enter your name")
      return
    }

    if (!feedback.email.trim()) {
      setError("Please enter your email address")
      return
    }

    if (!validateEmail(feedback.email)) {
      setError("Please enter a valid email address")
      return
    }

    if (!feedback.comment.trim()) {
      setError("Please enter your message")
      return
    }

    setLoading(true)

    try {
      await submitContactForm(feedback)
      setSubmitted(true)
      setError(null)
      setFeedback({ name: "", email: "", comment: "" }) // Reset form
    } catch (err) {
      setError(err.message || "Failed to submit the form. Please try again.")
    } finally {
      setLoading(false)
    }
  }

  const contactInfo = [
    {
      icon: FaMapMarkerAlt,
      title: "Address",
      content: "Pôle Technologique El Ghazela, Ariana Tunis",
    },
    {
      icon: FaPhone,
      title: "Phone",
      content: "+216 123 456 789",
    },
    {
      icon: FaEnvelope,
      title: "Email",
      content: "Ssustainafood@gmail.com",
    },
    {
      icon: FaClock,
      title: "Working Hours",
      content: "Mon - Fri: 9 AM - 6 PM",
    },
  ]

  return (
    <>
      <Navbar />
      <div className="contact-page">
        <h2 className="contact-title">Get In Touch</h2>
        <div className="contact-message">
          Have a question, a suggestion, or need assistance? We're here to help! Whether you're looking for support,
          partnership opportunities, or more information about our services, feel free to reach out. Our team will
          respond as soon as possible.
        </div>

        <div className="contact-container">
          <div className="contact-info">
            {contactInfo.map((info, index) => (
              <ContactInfoBox key={index} icon={info.icon} title={info.title} content={info.content} />
            ))}
          </div>

          <div className="feedback-form-container">
            <h3>Leave a message</h3>
            {!submitted ? (
              <form onSubmit={handleSubmit} className="feedback-form">
                <input
                  type="text"
                  name="name"
                  placeholder="Your Name"
                  value={feedback.name}
                  onChange={handleChange}
                  aria-label="Your Name"
                />
                <input
                  type="email"
                  name="email"
                  placeholder="Your Email"
                  value={feedback.email}
                  onChange={handleChange}
                  aria-label="Your Email"
                />
                <textarea
                  name="comment"
                  placeholder="Your Message"
                  value={feedback.comment}
                  onChange={handleChange}
                  aria-label="Your Message"
                  rows="5"
                />

                <LoadingButton isLoading={loading} type="submit">
                  Send Message
                </LoadingButton>

                {error && <p className="error-message">{error}</p>}
              </form>
            ) : (
              <div className="feedback-success">
                <p>Thank you for your message, {feedback.name || "Visitor"}!</p>
                <p>We've received your inquiry and will get back to you as soon as possible.</p>
                <button onClick={() => setSubmitted(false)}>Send Another Message</button>
              </div>
            )}
          </div>
        </div>

        <div className="contact-map">
          <iframe
            src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3164.329763530718!2d10.1772!3d36.8760!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x12d347f3d5b8d4d5%3A0x3a8d6db8ed2f31b0!2sAriana+Soghra!5e0!3m2!1sen!2stn!4v1622064481553"
            width="100%"
            height="400"
            style={{ border: 0 }}
            allowFullScreen=""
            loading="lazy"
            referrerPolicy="no-referrer-when-downgrade"
            title="SustainaFood Location"
            aria-label="Google Maps showing SustainaFood location"
          />
        </div>
      </div>
      <Footer />
    </>
  )
}

export default Contact
</file>

<file path="sustainafood-frontend/src/pages/DetailsDonations.jsx">
import React, { useEffect, useState } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import '../assets/styles/DetailsDonations.css';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import { getDonationById, deleteDonation, updateDonation } from '../api/donationService';
import { deleteProduct } from '../api/productService';
import { createRequestNeedForExistingDonation } from '../api/requestNeedsService';
import { FaEdit, FaTrash, FaSave, FaTimes, FaEye } from "react-icons/fa";
import styled from 'styled-components';
import logo from "../assets/images/LogoCh.png";
import { useAlert } from '../contexts/AlertContext';
import { createnotification } from '../api/notificationService';
import LocationPicker from "../components/LocationPicker";

// Styled Components for Buttons
const Button = styled.button`
  display: inline-block;
  padding: 12px 20px;
  font-size: 16px;
  font-weight: 600;
  text-align: center;
  border-radius: 8px;
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 8px;
  color: white;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);

  ${({ variant }) => variant === 'add' && `
    background: #228b22;
    &:hover { background: #1e7a1e; transform: translateY(-2px); }
  `}
  ${({ variant }) => variant === 'cancel' && `
    background: #dc3545;
    &:hover { background: #b02a37; transform: translateY(-2px); }
  `}
  ${({ variant }) => variant === 'submit' && `
    background: #28a745;
    &:hover { background: #218838; transform: translateY(-2px); }
  `}
  ${({ variant }) => variant === 'donate' && `
    background: #228b22;
    &:hover { background: #1e7a1e; transform: translateY(-2px); }
  `}
  ${({ variant }) => variant === 'back' && `
    background: #6c757d;
    &:hover { background: #5a6268; transform: translateY(-2px); }
  `}

  &:active {
    transform: translateY(1px);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }
`;

// Styled Component for Donation/Request Form
const DonationForm = styled.div`
  h4 {
    color: #228b22;
    font-size: 25px;
    margin-bottom: 20px;
    font-weight: 600;
  }

  div {
    margin-bottom: 15px;
  }

  label {
    display: block;
    font-weight: 500;
    color: #495057;
    margin-bottom: 6px;
    font-size: 14px;
  }

  input {
    width: 100%;
    padding: 10px 12px;
    border: 1px solid #ced4da;
    border-radius: 6px;
    font-size: 16px;
    background: #f8f9fa;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;

    &:focus {
      border-color: #17a2b8;
      box-shadow: 0 0 5px rgba(23, 162, 184, 0.3);
      outline: none;
    }
  }

  .error-message {
    color: red;
    font-size: 14px;
    margin-top: 5px;
  }
`;

const DetailsDonations = () => {
  const { id } = useParams();
  const [donation, setDonation] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [isAddingRequest, setIsAddingRequest] = useState(false);
  const user = JSON.parse(localStorage.getItem("user"));
  const [userid, setUserid] = useState();
  const [isTheOwner, setIsTheOwner] = useState(false);
  const [requestQuantities, setRequestQuantities] = useState([]);
  const [requestMealQuantities, setRequestMealQuantities] = useState([]);
  const [isMapOpen, setIsMapOpen] = useState(false);
  const [isRequestMapOpen, setIsRequestMapOpen] = useState(false); // State for request location picker
  const [address, setAddress] = useState(""); // Address for the donation
  const [requestAddress, setRequestAddress] = useState(""); // Address for the request
  const [requestLocation, setRequestLocation] = useState({ type: 'Point', coordinates: [0, 0] }); // Location for the request
  const [requestErrors, setRequestErrors] = useState({}); // Validation errors for the request
  const navigate = useNavigate();
  const isDonor = user?.role === "restaurant" || user?.role === "supermarket";
  const isRecipient = user?.role === "ong" || user?.role === "student";
  const { showAlert } = useAlert();

  const [editedDonation, setEditedDonation] = useState({
    title: "",
    location: { type: 'Point', coordinates: [0, 0] },
    address: "",
    expirationDate: "",
    type: "",
    category: "",
    description: "",
    products: [],
    meals: [],
    numberOfMeals: 0,
    donationType: 'products',
  });

  const productTypes = [
    {
      category: "Non-Perishable",
      items: [
        { value: "Canned_Goods", label: "Canned Goods (e.g., beans, soups)" },
        { value: "Dry_Goods", label: "Dry Goods (e.g., rice, pasta)" },
        { value: "Beverages", label: "Beverages (e.g., bottled water, juice)" },
        { value: "Snacks", label: "Snacks (e.g., chips, granola bars)" },
        { value: "Cereals", label: "Cereals (e.g., oatmeal, cornflakes)" },
        { value: "Baked_Goods", label: "Baked Goods (e.g., packaged bread, cookies)" },
        { value: "Condiments", label: "Condiments (e.g., ketchup, sauces)" },
      ],
    },
    {
      category: "Perishable",
      items: [
        { value: "Vegetables", label: "Vegetables (e.g., carrots, potatoes)" },
        { value: "Fruits", label: "Fruits (e.g., apples, bananas)" },
        { value: "Meat", label: "Meat (e.g., fresh beef, chicken)" },
        { value: "Fish", label: "Fish (e.g., fresh salmon, tuna)" },
        { value: "Dairy", label: "Dairy (e.g., milk, cheese)" },
        { value: "Eggs", label: "Eggs (e.g., fresh eggs)" },
      ],
    },
    {
      category: "Specialty",
      items: [
        { value: "Baby_Food", label: "Baby Food (e.g., formula, purees)" },
        { value: "Pet_Food", label: "Pet Food (e.g., dog/cat food)" },
        { value: "Other", label: "Other (Miscellaneous)" },
      ],
    },
  ];

  useEffect(() => {
    if (typeof user?.id === "number") {
      setUserid(user._id);
    } else if (typeof user?.id === "string") {
      setUserid(user.id);
    }
  }, [user]);

  useEffect(() => {
    const fetchDonation = async () => {
      try {
        const response = await getDonationById(id);
        const fetchedDonation = response.data;
        const hasProducts = fetchedDonation.products && fetchedDonation.products.length > 0;
        const hasMeals = fetchedDonation.meals && fetchedDonation.meals.length > 0;
        const donationType = hasMeals && !hasProducts ? 'meals' : 'products';

        setDonation(fetchedDonation);
        setEditedDonation({
          title: fetchedDonation.title || "",
          location: fetchedDonation.location || { type: 'Point', coordinates: [0, 0] },
          address: fetchedDonation.address || "",
          expirationDate: fetchedDonation.expirationDate || "",
          type: fetchedDonation.type || "",
          category: fetchedDonation.category || "",
          description: fetchedDonation.description || "",
          products: hasProducts
            ? fetchedDonation.products.map(item => ({
                id: item.product?.id || null,
                name: item.product?.name || '',
                quantity: item.quantity || 0,
                totalQuantity: item.product?.totalQuantity || 0,
                status: item.product?.status || 'available',
                productDescription: item.product?.productDescription || 'Default description',
                productType: item.product?.productType || 'Other',
                weightPerUnit: item.product?.weightPerUnit || 0,
                weightUnit: item.product?.weightUnit || 'kg',
              }))
            : [],
          meals: hasMeals
            ? fetchedDonation.meals.map(item => ({
                id: item.meal?.id || null,
                mealName: item.meal?.mealName || 'Unnamed Meal',
                mealDescription: item.meal?.mealDescription || 'Default meal description',
                mealType: item.meal?.mealType || 'Other',
                quantity: item.quantity || 1,
              }))
            : [],
          numberOfMeals: fetchedDonation.numberOfMeals || 0,
          donationType,
        });
        setAddress(fetchedDonation.address || "");
        setRequestQuantities((hasProducts ? fetchedDonation.products : []).map(item => item.quantity || 0));
        setRequestMealQuantities((hasMeals ? fetchedDonation.meals : []).map(item => item.quantity || 0));
      } catch (err) {
        setError(err.response?.data?.message || 'Error fetching donation data');
      } finally {
        setLoading(false);
      }
    };
    fetchDonation();
  }, [id]);

  useEffect(() => {
    if (donation && userid) {
      setIsTheOwner(userid === (donation.donor?._id || donation.donor));
    }
  }, [donation, userid]);

  const sendNotificationToDonor = async (recipientName, donationTitle, donorId) => {
    try {
      const message = `${recipientName} has created a new request for your donation "${donationTitle}" 5 minutes ago`;
      const notificationData = {
        sender: user?._id || user?.id,
        receiver: donorId,
        message: message,
        isRead: false,
      };
      await createnotification(notificationData);
      console.log('Notification sent successfully to donor');
    } catch (error) {
      console.error('Error sending notification to donor:', error);
      showAlert('warning', 'Request created, but failed to send notification to donor');
    }
  };

  const handleDeleteDonation = () => {
    deleteDonation(id)
      .then(() => {
        showAlert('success', 'Donation successfully deleted');
        window.history.back();
      })
      .catch((error) => {
        console.error("Error deleting donation:", error);
        showAlert('error', 'Failed to delete donation');
      });
  };

  const handleSaveDonation = () => {
    const invalidProduct = editedDonation.products.find(
      (item) => !item.name?.trim() || !item.productDescription?.trim() || !item.productType?.trim()
    );
    const invalidMeal = editedDonation.meals.find(
      (item) => !item.mealName?.trim() || !item.mealDescription?.trim() || !item.mealType?.trim() || item.quantity < 1
    );

    if (editedDonation.donationType === 'products' && invalidProduct) {
      showAlert('error', 'Please fill in all required fields for products.');
      return;
    }
    if (editedDonation.donationType === 'meals' && invalidMeal) {
      showAlert('error', 'Please fill in all required fields for meals, including a valid quantity.');
      return;
    }
    if (editedDonation.donationType === 'meals' && editedDonation.category === 'prepared_meals') {
      const totalMeals = editedDonation.meals.reduce((sum, meal) => sum + (Number(meal.quantity) || 0), 0);
      if (!editedDonation.meals.length || totalMeals < 1) {
        showAlert('error', 'List of meals and a valid total number of meals are required for prepared meals.');
        return;
      }
      editedDonation.numberOfMeals = totalMeals;
    }

    if (new Date(editedDonation.expirationDate) <= new Date()) {
      showAlert('error', 'Expiration date must be in the future.');
      return;
    }

    if (
      !editedDonation.location ||
      editedDonation.location.type !== 'Point' ||
      !Array.isArray(editedDonation.location.coordinates) ||
      editedDonation.location.coordinates.length !== 2 ||
      typeof editedDonation.location.coordinates[0] !== 'number' ||
      typeof editedDonation.location.coordinates[1] !== 'number'
    ) {
      showAlert('error', 'Invalid location format. Please select a valid location.');
      return;
    }

    const donationData = {
      ...editedDonation,
      location: JSON.stringify(editedDonation.location),
      address: editedDonation.address,
      products: editedDonation.donationType === 'products'
        ? editedDonation.products.map(item => ({
            id: item.id || null,
            name: item.name,
            productDescription: item.productDescription,
            productType: item.productType,
            weightPerUnit: Number(item.weightPerUnit) || 0,
            weightUnit: item.weightUnit,
            totalQuantity: Number(item.totalQuantity) || 0,
            status: item.status,
            quantity: Number(item.quantity) || 0,
          }))
        : [],
      meals: editedDonation.donationType === 'meals'
        ? editedDonation.meals.map(item => ({
            id: item.id || null,
            mealName: item.mealName,
            mealDescription: item.mealDescription,
            mealType: item.mealType,
            quantity: Number(item.quantity) || 1,
          }))
        : [],
      numberOfMeals: editedDonation.donationType === 'meals' ? Number(editedDonation.numberOfMeals) || 0 : 0,
    };

    console.log('Sending update with data:', donationData);

    updateDonation(id, donationData)
      .then((response) => {
        console.log("Server response:", response.data);
        setDonation(response.data.data);
        setIsEditing(false);
        showAlert('success', 'Donation updated successfully');
        window.location.reload();
      })
      .catch((error) => {
        console.error("Error updating donation:", error.response?.data || error);
        showAlert('error', 'Failed to update donation: ' + (error.response?.data?.message || error.message));
      });
  };

  const handleLocationSelect = (selectedLocation, selectedAddress) => {
    setEditedDonation({
      ...editedDonation,
      location: selectedLocation,
      address: selectedAddress,
    });
    setAddress(selectedAddress);
    setIsMapOpen(false);
  };

  const handleRequestLocationSelect = (selectedLocation, selectedAddress) => {
    setRequestLocation(selectedLocation);
    setRequestAddress(selectedAddress);
    setIsRequestMapOpen(false);
  };

  const handleProductChange = (index, field, value) => {
    const updatedProducts = [...editedDonation.products];
    if (field === 'quantity' || field === 'totalQuantity' || field === 'weightPerUnit') {
      value = Number(value);
    }
    updatedProducts[index] = { ...updatedProducts[index], [field]: value };
    setEditedDonation({ ...editedDonation, products: updatedProducts });
  };

  const handleMealChange = (index, field, value) => {
    const updatedMeals = [...editedDonation.meals];
    if (field === 'quantity') {
      value = Number(value);
    }
    updatedMeals[index] = { ...updatedMeals[index], [field]: value };
    setEditedDonation({ ...editedDonation, meals: updatedMeals });
  };

  const handleDeleteProduct = async (index) => {
    if (window.confirm("Are you sure you want to delete this product?")) {
      const productToDelete = editedDonation.products[index];
      if (productToDelete.id) {
        try {
          await deleteProduct(productToDelete.id);
        } catch (error) {
          console.error("Error deleting product:", error);
          showAlert('error', "Failed to delete product. Please try again.");
          return;
        }
      }
      const updatedProducts = editedDonation.products.filter((_, i) => i !== index);
      setEditedDonation({ ...editedDonation, products: updatedProducts });
    }
  };

  const handleDeleteMeal = async (index) => {
    if (window.confirm("Are you sure you want to delete this meal?")) {
      const updatedMeals = editedDonation.meals.filter((_, i) => i !== index);
      setEditedDonation({ ...editedDonation, meals: updatedMeals });
    }
  };

  const handleAddProduct = () => {
    const newProduct = {
      id: null,
      name: '',
      quantity: 0,
      totalQuantity: 0,
      status: 'available',
      productDescription: 'New product description',
      productType: 'Canned_Goods',
      weightPerUnit: 0,
      weightUnit: 'kg',
    };
    setEditedDonation({
      ...editedDonation,
      products: [...editedDonation.products, newProduct],
    });
  };

  const handleAddMeal = () => {
    const newMeal = {
      id: null,
      mealName: '',
      mealDescription: 'New meal description',
      mealType: 'Other',
      quantity: 1,
    };
    setEditedDonation({
      ...editedDonation,
      meals: [...editedDonation.meals, newMeal],
    });
  };

  const handleRequestQuantityChange = (index, value) => {
    const newQuantities = [...requestQuantities];
    const maxQuantity = donation.products[index]?.quantity || 0;
    newQuantities[index] = Math.min(Number(value), maxQuantity);
    setRequestQuantities(newQuantities);
  };

  const handleRequestMealQuantityChange = (index, value) => {
    const newQuantities = [...requestMealQuantities];
    const maxQuantity = donation.meals[index]?.quantity || 0;
    newQuantities[index] = Math.min(Number(value), maxQuantity);
    setRequestMealQuantities(newQuantities);
  };

  const validateRequest = () => {
    let tempErrors = {};
    if (
      !requestLocation ||
      requestLocation.type !== 'Point' ||
      !Array.isArray(requestLocation.coordinates) ||
      requestLocation.coordinates.length !== 2 ||
      typeof requestLocation.coordinates[0] !== 'number' ||
      typeof requestLocation.coordinates[1] !== 'number'
    ) {
      tempErrors.location = "A valid location is required for the request";
    }
    if (!requestAddress || requestAddress.trim() === '') {
      tempErrors.address = "A valid address is required for the request";
    }
    if (editedDonation.donationType === 'products') {
      const hasValidQuantity = requestQuantities.some(qty => qty > 0);
      if (!hasValidQuantity) {
        tempErrors.products = "Please specify at least one product quantity to request";
      }
      requestQuantities.forEach((qty, index) => {
        if (qty > donation.products[index].quantity) {
          tempErrors[`product_${index}`] = `Quantity (${qty}) exceeds available amount (${donation.products[index].quantity}) for ${donation.products[index].product?.name || 'product'}`;
        }
      });
    } else {
      const totalRequestedMeals = requestMealQuantities.reduce((sum, qty) => sum + Number(qty), 0);
      if (!totalRequestedMeals || totalRequestedMeals <= 0) {
        tempErrors.meals = "Total number of meals must be greater than 0";
      } else if (totalRequestedMeals > donation.numberOfMeals) {
        tempErrors.meals = `Total requested meals (${totalRequestedMeals}) exceed available meals (${donation.numberOfMeals})`;
      }
      requestMealQuantities.forEach((qty, index) => {
        if (qty > donation.meals[index].quantity) {
          tempErrors[`meal_${index}`] = `Quantity (${qty}) exceeds available amount (${donation.meals[index].quantity}) for ${donation.meals[index].meal?.mealName || 'meal'}`;
        }
      });
    }
    setRequestErrors(tempErrors);
    return Object.keys(tempErrors).length === 0;
  };

  const handleSubmitRequest = async () => {
    if (!validateRequest()) return;

    try {
      const token = localStorage.getItem('token');
      if (!token) throw new Error('No authentication token found');

      let requestedItems = [];
      let requestedMealsItems = [];

      if (editedDonation.donationType === 'products') {
        requestedItems = donation.products?.map((item, index) => ({
          product: item.product?._id || item.product,
          quantity: Number(requestQuantities[index]) || 0,
        })).filter(p => p.quantity > 0) || [];
      } else {
        requestedMealsItems = donation.meals?.map((item, index) => ({
          meal: item.meal?._id || item.meal,
          quantity: Number(requestMealQuantities[index]) || 0,
        })).filter(m => m.quantity > 0) || [];
      }

      const totalRequestedMeals = editedDonation.donationType === 'meals'
        ? requestMealQuantities.reduce((sum, qty) => sum + Number(qty), 0)
        : 0;

      const requestData = {
        donationId: id,
        requestedProducts: requestedItems,
        requestedMeals: requestedMealsItems,
        recipientId: user?._id || user?.id,
        description: editedDonation.description || '',
        numberOfMeals: totalRequestedMeals,
        location: requestLocation, // Add GeoJSON location
        address: requestAddress, // Add readable address
      };

      const response = await createRequestNeedForExistingDonation(id, requestData);
      setIsAddingRequest(false);
      setRequestQuantities(donation.products?.map(() => 0) || []);
      setRequestMealQuantities(donation.meals?.map(() => 0) || []);
      setRequestLocation({ type: 'Point', coordinates: [0, 0] }); // Reset location
      setRequestAddress(""); // Reset address

      const donorId = donation.donor?._id || donation.donor;
      const recipientName = user?.name || 'A recipient';
      const donationTitle = donation.title || 'Untitled Donation';
      await sendNotificationToDonor(recipientName, donationTitle, donorId);

      showAlert('success', 'Request submitted successfully');
    } catch (error) {
      console.error('Error submitting request:', error);
      showAlert('error', `Failed to submit request: ${error.message || 'Unknown error'}`);
    }
  };

  const handleRequestAll = async () => {
    if (!validateRequest()) return;

    try {
      const token = localStorage.getItem('token');
      if (!token) throw new Error('No authentication token found');

      let requestedItems = [];
      let requestedMealsItems = [];

      if (editedDonation.donationType === 'products') {
        requestedItems = donation.products?.map(item => ({
          product: item.product?._id || item.product,
          quantity: Number(item.quantity) || 0,
        })) || [];
      } else {
        requestedMealsItems = donation.meals?.map(item => ({
          meal: item.meal?._id || item.meal,
          quantity: Number(item.quantity) || 0,
        })) || [];
      }

      const totalRequestedMeals = editedDonation.donationType === 'meals'
        ? requestedMealsItems.reduce((sum, item) => sum + item.quantity, 0)
        : 0;

      const requestData = {
        donationId: id,
        requestedProducts: requestedItems,
        requestedMeals: requestedMealsItems,
        recipientId: user?._id || user?.id,
        description: editedDonation.description || '',
        numberOfMeals: totalRequestedMeals,
        location: requestLocation,
        address: requestAddress,
      };

      const response = await createRequestNeedForExistingDonation(id, requestData);
      setIsAddingRequest(false);
      setRequestQuantities(donation.products?.map(() => 0) || []);
      setRequestMealQuantities(donation.meals?.map(() => 0) || []);
      setRequestLocation({ type: 'Point', coordinates: [0, 0] });
      setRequestAddress("");

      const donorId = donation.donor?._id || donation.donor;
      const recipientName = user?.name || 'A recipient';
      const donationTitle = donation.title || 'Untitled Donation';
      await sendNotificationToDonor(recipientName, donationTitle, donorId);

      showAlert('success', 'Requested all items successfully');
    } catch (error) {
      console.error('Error requesting all:', error);
      showAlert('error', `Failed to request all: ${error.message || 'Unknown error'}`);
    }
  };

  if (loading) return <div>Loading...</div>;
  if (error) return <div>{error}</div>;
  if (!donation) return <div>No donation found.</div>;

  const { title, expirationDate, products, meals } = donation;
  const isExpired = new Date(expirationDate) < new Date();

  return (
    <>
      <Navbar />
      <div className="donation-details">
        {(isMapOpen || isRequestMapOpen) && <div className="donation-map-backdrop" onClick={() => { setIsMapOpen(false); setIsRequestMapOpen(false); }} />}
        <div className="donation-card-content-details">
          <img src={logo} alt="Logo" className="addDonation-logo" style={{ marginLeft: "47%" }} />

          <div style={{ display: "flex", alignItems: "center", justifyContent: "space-between" }}>
            {isEditing ? (
              <input
                type="text"
                value={editedDonation.title}
                onChange={(e) => setEditedDonation({ ...editedDonation, title: e.target.value })}
                placeholder="🛒 Donation Title"
                style={{ fontSize: "1.5rem", fontWeight: "bold", width: "60%" }}
              />
            ) : (
              <h3 className="donation-title">🛒 Donation: {title || "No Title"}</h3>
            )}
            {isTheOwner && (
              <div>
                <FaTrash className='fa-trash' onClick={handleDeleteDonation} />
                {isEditing ? (
                  <>
                    <FaSave className="fa-save" onClick={handleSaveDonation} />
                    <FaTimes className="fa-times" onClick={() => setIsEditing(false)} />
                  </>
                ) : (
                  <FaEdit className="fa-edit" onClick={() => setIsEditing(true)} />
                )}
              </div>
            )}
          </div>

          <p style={{ color:"black"}}> 
            <strong>📍 Address:</strong>{" "}
            {isEditing ? (
              <>
                <input
                  type="text"
                  value={address}
                  onChange={(e) => setAddress(e.target.value)}
                  onClick={() => setIsMapOpen(true)}
                  placeholder="📍 Enter Address"
                  readOnly
                  style={{ width: '100%', padding: '10px 12px', border: '1px solid #ced4da', borderRadius: '6px', fontSize: '16px', background: '#f8f9fa' }}
                />
                {isMapOpen && (
                  <LocationPicker
                    isOpen={isMapOpen}
                    onClose={() => setIsMapOpen(false)}
                    onLocationChange={(loc) => setEditedDonation({ ...editedDonation, location: loc })}
                    onAddressChange={setAddress}
                    onSelect={handleLocationSelect}
                    initialAddress={address}
                  />
                )}
              </>
            ) : (
              address || "Unknown address"
            )}
          </p>
          <p style={{ color:"black"}}> 
            <strong>📆 Expiration Date:</strong>{" "}
            {isEditing ? (
              <input
                type="date"
                value={editedDonation.expirationDate ? new Date(editedDonation.expirationDate).toISOString().split('T')[0] : ''}
                onChange={(e) => setEditedDonation({ ...editedDonation, expirationDate: e.target.value })}
              />
            ) : (
              expirationDate ? new Date(expirationDate).toLocaleDateString() : "Not set"
            )}
          </p>

          {editedDonation.donationType === 'meals' && isEditing && editedDonation.category === 'prepared_meals' && (
            <p style={{ color:"black"}}>
              <strong>🔢 Total Number of Meals:</strong>
              <span>{editedDonation.meals.reduce((sum, meal) => sum + (Number(meal.quantity) || 0), 0)}</span>
            </p>
          )}

          {editedDonation.donationType === 'products' ? (
            <>
              <h4>📦 Products:</h4>
              <ul className="donation-ul">
                {isEditing ? (
                  editedDonation.products.map((product, index) => (
                    <li key={index} style={{ display: "flex", alignItems: "center", marginBottom: "10px" }}>
                      <input
                        type="text"
                        value={product.name}
                        onChange={(e) => handleProductChange(index, 'name', e.target.value)}
                        placeholder="🔖 Product Name"
                      />
                      <input
                        type="text"
                        value={product.productDescription}
                        onChange={(e) => handleProductChange(index, 'productDescription', e.target.value)}
                        placeholder="📝 Description"
                        style={{ marginLeft: "10px" }}
                      />
                      <input
                        type="number"
                        value={product.quantity}
                        onChange={(e) => handleProductChange(index, 'quantity', e.target.value)}
                        placeholder="🔢 Quantity"
                        style={{ marginLeft: "10px" }}
                      />
                      <input
                        type="number"
                        value={product.weightPerUnit}
                        onChange={(e) => handleProductChange(index, 'weightPerUnit', e.target.value)}
                        placeholder="⚖️ Weight"
                        style={{ marginLeft: "10px" }}
                      />
                      <select
                        value={product.weightUnit}
                        onChange={(e) => handleProductChange(index, 'weightUnit', e.target.value)}
                        style={{ marginLeft: "10px", padding: "8px", borderRadius: "5px" }}
                      >
                        <option value="kg">kg</option>
                        <option value="g">g</option>
                        <option value="lb">lb</option>
                        <option value="oz">oz</option>
                      </select>
                      <select
                        value={product.productType}
                        onChange={(e) => handleProductChange(index, 'productType', e.target.value)}
                        style={{ marginLeft: "10px", padding: "8px", borderRadius: "5px" }}
                      >
                        {productTypes.map((group, groupIndex) => (
                          <optgroup key={groupIndex} label={group.category}>
                            {group.items.map((item, itemIndex) => (
                              <option key={itemIndex} value={item.value}>
                                {item.label}
                              </option>
                            ))}
                          </optgroup>
                        ))}
                      </select>
                      <select
                        value={product.status}
                        onChange={(e) => handleProductChange(index, 'status', e.target.value)}
                        style={{ marginLeft: "10px", padding: "8px", borderRadius: "5px" }}
                      >
                        <option value="available">Available</option>
                        <option value="pending">Pending</option>
                        <option value="delivered">Delivered</option>
                      </select>
                      <FaTimes
                        onClick={() => handleDeleteProduct(index)}
                        style={{ color: "red", cursor: "pointer", marginLeft: "10px" }}
                      />
                    </li>
                  ))
                ) : (
                  products && products.length > 0 ? (
                    products.map((item, index) => (
                      <li className="donation-li-list" key={index}>
                        <span><strong>🔖 Name:</strong> {item.product?.name || 'Not specified'}</span> <br />
                        <span><strong>📝 Description:</strong> {item.product?.productDescription || 'None'}</span> <br />
                        <span><strong>📦 Type:</strong> {item.product?.productType || 'Not specified'}</span> <br />
                        <span><strong>🔢 Quantity:</strong> {item.quantity || 0}</span> <br />
                        <span><strong>⚖️ Weight:</strong> {item.product?.weightPerUnit || 0} {item.product?.weightUnit || 'kg'}</span> <br />
                        <span><strong>🔄 Status:</strong> {item.product?.status || 'Unknown'}</span>
                      </li>
                    ))
                  ) : (
                    <li className="donation-li-list">No products available</li>
                  )
                )}
              </ul>
            </>
          ) : (
            <>
              <h4>🍽️ Meals:</h4>
              <ul className="donation-ul">
                {isEditing ? (
                  editedDonation.meals.map((meal, index) => (
                    <li key={index} style={{ display: "flex", alignItems: "center", marginBottom: "10px" }}>
                      <input
                        type="text"
                        value={meal.mealName}
                        onChange={(e) => handleMealChange(index, 'mealName', e.target.value)}
                        placeholder="🍽️ Meal Name"
                      />
                      <input
                        type="text"
                        value={meal.mealDescription}
                        onChange={(e) => handleMealChange(index, 'mealDescription', e.target.value)}
                        placeholder="📝 Description"
                        style={{ marginLeft: "10px" }}
                      />
                      <input
                        type="number"
                        min="1"
                        value={meal.quantity}
                        onChange={(e) => handleMealChange(index, 'quantity', e.target.value)}
                        placeholder="🔢 Quantity"
                        style={{ marginLeft: "10px" }}
                      />
                      <select
                        value={meal.mealType}
                        onChange={(e) => handleMealChange(index, 'mealType', e.target.value)}
                        style={{ marginLeft: "10px", padding: "8px", borderRadius: "5px" }}
                      >
                        <option value="Breakfast">Breakfast</option>
                        <option value="Lunch">Lunch</option>
                        <option value="Dinner">Dinner</option>
                        <option value="Snack">Snack</option>
                        <option value="Other">Other</option>
                      </select>
                      <FaTimes
                        onClick={() => handleDeleteMeal(index)}
                        style={{ color: "red", cursor: "pointer", marginLeft: "10px" }}
                      />
                    </li>
                  ))
                ) : (
                  meals && meals.length > 0 ? (
                    meals.map((item, index) => (
                      <li className="donation-li-list" key={index}>
                        <span><strong>🍽️ Name:</strong> {item.meal?.mealName || 'Not specified'}</span> <br />
                        <span><strong>📝 Description:</strong> {item.meal?.mealDescription || 'None'}</span> <br />
                        <span><strong>🍴 Type:</strong> {item.meal?.mealType || 'Unknown'}</span> <br />
                        <span><strong>🔢 Quantity:</strong> {item.quantity || 0}</span>
                      </li>
                    ))
                  ) : (
                    <li className="donation-li-list">No meals available</li>
                  )
                )}
              </ul>
            </>
          )}

          {isAddingRequest && (
            <DonationForm>
              <h4>Specify the Request</h4>
              <div>
                <label>📍 Request Location</label>
                <input
                  type="text"
                  value={requestAddress}
                  onChange={(e) => setRequestAddress(e.target.value)}
                  onClick={() => setIsRequestMapOpen(true)}
                  placeholder="📍 Select Request Location"
                  readOnly
                />
                {isRequestMapOpen && (
                  <LocationPicker
                    isOpen={isRequestMapOpen}
                    onClose={() => setIsRequestMapOpen(false)}
                    onLocationChange={setRequestLocation}
                    onAddressChange={setRequestAddress}
                    onSelect={handleRequestLocationSelect}
                    initialAddress={requestAddress}
                  />
                )}
                {requestErrors.location && <p className="error-message">{requestErrors.location}</p>}
                {requestErrors.address && <p className="error-message">{requestErrors.address}</p>}
              </div>
              {editedDonation.donationType === 'products' ? (
                donation.products.map((item, index) => (
                  <div key={index}>
                    <label>
                      {item.product?.name || 'Not specified'} - {item.product?.productDescription || 'None'} (Max: {item.quantity || 0})
                    </label>
                    <input
                      type="number"
                      min="0"
                      max={item.quantity}
                      value={requestQuantities[index]}
                      onChange={(e) => handleRequestQuantityChange(index, e.target.value)}
                      placeholder="Quantity to request"
                    />
                    {requestErrors[`product_${index}`] && <p className="error-message">{requestErrors[`product_${index}`]}</p>}
                  </div>
                ))
              ) : (
                donation.meals.map((item, index) => (
                  <div key={index}>
                    <label>
                      {item.meal?.mealName || 'Not specified'} - {item.meal?.mealDescription || 'None'} (Max: {item.quantity || 0})
                    </label>
                    <input
                      type="number"
                      min="0"
                      max={item.quantity}
                      value={requestMealQuantities[index]}
                      onChange={(e) => handleRequestMealQuantityChange(index, e.target.value)}
                      placeholder="Quantity to request"
                    />
                    {requestErrors[`meal_${index}`] && <p className="error-message">{requestErrors[`meal_${index}`]}</p>}
                    {requestErrors.meals && <p className="error-message">{requestErrors.meals}</p>}
                  </div>
                ))
              )}
              <Button variant="donate" onClick={handleRequestAll}>Request All</Button>
              <Button variant="donate" onClick={handleSubmitRequest}>Submit Request</Button>
            </DonationForm>
          )}

          <Button variant="back" onClick={() => window.history.back()}>🔙 Go Back</Button>

          {isTheOwner && !isEditing && (
            <Button variant="submit" as={Link} to={`/ListRequestsDonation/${id}`}>
              👀 See Requests
            </Button>
          )}

          {!isTheOwner && isRecipient && donation.status !== "fulfilled" && !isExpired && (
            <Button
              variant={isAddingRequest ? "cancel" : "add"}
              onClick={() => setIsAddingRequest(!isAddingRequest)}
            >
              {isAddingRequest ? 'Cancel' : 'Add Request'}
            </Button>
          )}

          {isEditing && (
            <Button variant="add" onClick={editedDonation.donationType === 'products' ? handleAddProduct : handleAddMeal}>
              ➕ Add {editedDonation.donationType === 'products' ? 'Product' : 'Meal'}
            </Button>
          )}
        </div>
      </div>
      <Footer />
    </>
  );
};

export default DetailsDonations;
</file>

<file path="sustainafood-frontend/src/pages/DetailsRequest.jsx">
import React, { useEffect, useState, useRef } from 'react';
import { useParams, Link } from 'react-router-dom';
import '../assets/styles/Composantdonation.css';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import { getRequestById, deleteRequest, updateRequest, addDonationToRequest } from '../api/requestNeedsService';
import { FaEdit, FaTrash, FaSave, FaTimes, FaEye } from "react-icons/fa";
import styled from 'styled-components';
import logo from "../assets/images/LogoCh.png";
import { useNavigate } from "react-router-dom";
import { useAlert } from '../contexts/AlertContext';
import Papa from "papaparse";
import axios from 'axios';
import { createnotification } from '../api/notificationService';
import LocationPicker from "../components/LocationPicker";

// Styled Components for Buttons
const Button = styled.button`
  display: inline-block;
  padding: 12px 20px;
  font-size: 16px;
  font-weight: 600;
  text-align: center;
  border-radius: 8px;
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 8px;
  color: white;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);

  ${({ variant }) => variant === 'add' && `
    background: #228b22;
    &:hover { background: #1e7b1e; transform: translateY(-2px); }
  `}
  ${({ variant }) => variant === 'cancel' && `
    background: #dc3545;
    &:hover { background: #b02a37; transform: translateY(-2px); }
  `}
  ${({ variant }) => variant === 'submit' && `
    background: #28a745;
    &:hover { background: #218838; transform: translateY(-2px); }
  `}
  ${({ variant }) => variant === 'donate' && `
    background: #228b22;
    &:hover { background: #1e7b1e; transform: translateY(-2px); }
  `}
  ${({ variant }) => variant === 'back' && `
    background: #6c757d;
    &:hover { background: #5a6268; transform: translateY(-2px); }
  `}

  &:active {
    transform: translateY(1px);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }
`;

// Styled Component for Donation Form
const DonationForm = styled.div`
  h4 {
    color: #228b22;
    font-size: 25px;
    margin-bottom: 20px;
    font-weight: 600;
  }

  div {
    margin-bottom: 15px;
  }

  label {
    display: block;
    font-weight: 500;
    color: #495057;
    margin-bottom: 6px;
    font-size: 14px;
  }

  input, select, textarea {
    width: 100%;
    padding: 10px 12px;
    border: 1px solid #ced4da;
    border-radius: 6px;
    font-size: 16px;
    background: #f8f9fa;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;

    &:focus {
      border-color: #17a2b8;
      box-shadow: 0 0 5px rgba(23, 162, 184, 0.3);
      outline: none;
    }
  }

  .manual-meal-row {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-bottom: 10px;
    align-items: center;
  }

  .manual-meal-row > * {
    flex: 1;
    min-width: 200px;
  }

  .error-message {
    color: red;
    font-size: 14px;
    margin-top: 5px;
  }

  table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 10px;
  }

  th, td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
  }

  th {
    background-color: #f2f2f2;
  }
`;

const DetailsRequest = () => {
  const { id } = useParams();
  const [request, setRequest] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [isAddingDonation, setIsAddingDonation] = useState(false);
  const user = JSON.parse(localStorage.getItem("user"));
  const [userid, setUserid] = useState("");
  const [isTheOwner, setIsTheOwner] = useState(false);
  const [isMapOpen, setIsMapOpen] = useState(false);
  const [isDonationMapOpen, setIsDonationMapOpen] = useState(false); // État pour la carte de la donation
  const [address, setAddress] = useState(""); // Adresse lisible pour la requête
  const [donationAddress, setDonationAddress] = useState(""); // Adresse lisible pour la donation
  const [donationLocation, setDonationLocation] = useState({ type: 'Point', coordinates: [0, 0] }); // Localisation GeoJSON pour la donation
  const [editedRequest, setEditedRequest] = useState({
    title: "",
    location: { type: 'Point', coordinates: [0, 0] },
    address: "",
    expirationDate: "",
    description: "",
    category: "",
    status: "",
    requestedProducts: [],
    numberOfMeals: "",
    mealName: "",
    mealDescription: "",
    mealType: "",
  });
  const [donationQuantities, setDonationQuantities] = useState([]);
  const [donationMeals, setDonationMeals] = useState([]);
  const [manualDonationMeals, setManualDonationMeals] = useState([{
    mealName: "",
    mealDescription: "",
    mealType: "Lunch",
    quantity: ""
  }]);
  const [mealsEntryMode, setMealsEntryMode] = useState("csv");
  const [donationErrors, setDonationErrors] = useState({});
  const [editableRow, setEditableRow] = useState(null);
  const [editedMeal, setEditedMeal] = useState({});
  const mealsFileInputRef = useRef(null);

  const weightUnits = ['kg', 'g', 'lb', 'oz'];
  const statuses = ['available', 'pending', 'reserved'];
  const mealTypes = ["Breakfast", "Lunch", "Dinner", "Snack", "Dessert", "Other"];
  const navigate = useNavigate();
  const { showAlert } = useAlert();

  useEffect(() => {
    if (user) {
      setUserid(user._id || user.id);
    }
  }, [user]);

  const isDonor = user?.role === "restaurant" || user?.role === "supermarket";
  const isRecipient = user?.role === "ong" || user?.role === "student";

  useEffect(() => {
    const fetchRequest = async () => {
      try {
        const response = await getRequestById(id);
        const fetchedRequest = response.data;
        setRequest(fetchedRequest);
        setEditedRequest({
          title: fetchedRequest.title || "",
          location: fetchedRequest.location || { type: 'Point', coordinates: [0, 0] },
          address: fetchedRequest.address || "",
          expirationDate: fetchedRequest.expirationDate || "",
          description: fetchedRequest.description || "",
          category: fetchedRequest.category || "",
          status: fetchedRequest.status || "",
          requestedProducts: fetchedRequest.requestedProducts ? [...fetchedRequest.requestedProducts] : [],
          numberOfMeals: fetchedRequest.numberOfMeals || "",
          mealName: fetchedRequest.mealName || "",
          mealDescription: fetchedRequest.mealDescription || "",
          mealType: fetchedRequest.mealType || "",
        });
        setAddress(fetchedRequest.address || "");
      } catch (err) {
        setError(err.response?.data?.message || 'Error fetching request data');
      } finally {
        setLoading(false);
      }
    };
    fetchRequest();
  }, [id]);

  useEffect(() => {
    if (request && userid) {
      setIsTheOwner(userid === (request.recipient?._id || request.recipient));
    }
  }, [request, userid]);

  useEffect(() => {
    if (request?.category === "prepared_meals" && mealsEntryMode === "form") {
      const total = manualDonationMeals.reduce((sum, meal) => sum + (parseInt(meal.quantity) || 0), 0);
      setEditedRequest(prev => ({ ...prev, numberOfMeals: total || "" }));
    }
  }, [manualDonationMeals, mealsEntryMode, request?.category]);

  const sendNotificationToRecipient = async (donorName, requestTitle, recipientId) => {
    try {
      const message = `${donorName} has added a new donation for your request "${requestTitle}"`;
      const notificationData = {
        sender: user?._id || user?.id,
        receiver: recipientId,
        message: message,
        isRead: false,
      };
      await createnotification(notificationData);
      console.log('Notification sent successfully');
    } catch (error) {
      console.error('Error sending notification:', error);
      showAlert('warning', 'Donation added, but failed to send notification to recipient');
    }
  };

  const validateRequestUpdate = () => {
    let errors = {};

    if (!editedRequest.title || editedRequest.title.trim() === '') {
      errors.title = "Title is required";
    }
    if (
      !editedRequest.location ||
      editedRequest.location.type !== 'Point' ||
      !Array.isArray(editedRequest.location.coordinates) ||
      editedRequest.location.coordinates.length !== 2 ||
      typeof editedRequest.location.coordinates[0] !== 'number' ||
      typeof editedRequest.location.coordinates[1] !== 'number'
    ) {
      errors.location = "A valid GeoJSON Point location is required";
    }
    if (!editedRequest.address || editedRequest.address.trim() === '') {
      errors.address = "Address is required";
    }
    if (!editedRequest.category || !['packaged_products', 'prepared_meals'].includes(editedRequest.category)) {
      errors.category = "Category must be either 'packaged_products' or 'prepared_meals'";
    }
    if (editedRequest.expirationDate && isNaN(new Date(editedRequest.expirationDate).getTime())) {
      errors.expirationDate = "Expiration Date must be a valid date";
    }
    if (editedRequest.status && !['available', 'pending', 'reserved'].includes(editedRequest.status)) {
      errors.status = "Status must be one of: available, pending, reserved";
    }

    if (editedRequest.category === 'packaged_products') {
      if (!editedRequest.requestedProducts || !Array.isArray(editedRequest.requestedProducts) || editedRequest.requestedProducts.length === 0) {
        errors.requestedProducts = "At least one product is required for packaged_products category";
      } else {
        editedRequest.requestedProducts.forEach((item, index) => {
          if (!item.product?.productType || item.product.productType.trim() === '') {
            errors[`productType_${index}`] = `Product Type is required for product ${index + 1}`;
          }
          if (!item.product?.productDescription || item.product.productDescription.trim() === '') {
            errors[`productDescription_${index}`] = `Product Description is required for product ${index + 1}`;
          }
          if (typeof item.quantity !== 'number' || item.quantity < 0) {
            errors[`quantity_${index}`] = `Quantity must be a non-negative number for product ${index + 1}`;
          }
          if (typeof item.product?.weightPerUnit !== 'number' || item.product.weightPerUnit <= 0) {
            errors[`weightPerUnit_${index}`] = `Weight per Unit must be a positive number for product ${index + 1}`;
          }
          if (!item.product?.weightUnit || !weightUnits.includes(item.product.weightUnit)) {
            errors[`weightUnit_${index}`] = `Weight Unit must be one of: ${weightUnits.join(', ')} for product ${index + 1}`;
          }
        });
      }
    } else if (editedRequest.category === 'prepared_meals') {
      if (typeof editedRequest.numberOfMeals !== 'number' || editedRequest.numberOfMeals <= 0) {
        errors.numberOfMeals = "Number of Meals must be a positive number";
      }
    }

    return errors;
  };

  const handleDeleteRequest = () => {
    deleteRequest(id)
      .then(() => {
        showAlert('success', 'Request successfully deleted');
        window.history.back();
      })
      .catch((error) => {
        console.error("Error deleting request:", error);
        showAlert('error', 'Failed to delete request');
      });
  };

  const handleSaveRequest = async () => {
    const validationErrors = validateRequestUpdate();
    if (Object.keys(validationErrors).length > 0) {
      Object.values(validationErrors).forEach(error => showAlert('error', error));
      return;
    }

    try {
      const requestData = {
        title: editedRequest.title,
        location: JSON.stringify(editedRequest.location),
        address: editedRequest.address,
        expirationDate: editedRequest.expirationDate,
        description: editedRequest.description,
        category: editedRequest.category,
        status: editedRequest.status,
        requestedProducts: editedRequest.category === 'packaged_products' ? editedRequest.requestedProducts : [],
        numberOfMeals: editedRequest.category === 'prepared_meals' ? Number(editedRequest.numberOfMeals) : undefined,
        mealName: editedRequest.category === 'prepared_meals' ? editedRequest.mealName : undefined,
        mealDescription: editedRequest.category === 'prepared_meals' ? editedRequest.mealDescription : undefined,
        mealType: editedRequest.category === 'prepared_meals' ? editedRequest.mealType : undefined,
      };

      const response = await updateRequest(id, requestData);
      setRequest(response.data.updatedRequest);
      setIsEditing(false);
      showAlert('success', 'Request updated successfully');
    } catch (error) {
      console.error("Error updating request:", error);
      const errorMessage = error.response?.data?.message || 'Failed to update request';
      showAlert('error', errorMessage);
    }
  };

  const handleLocationSelect = (selectedLocation, selectedAddress) => {
    setEditedRequest({
      ...editedRequest,
      location: selectedLocation,
      address: selectedAddress,
    });
    setAddress(selectedAddress);
    setIsMapOpen(false);
  };

  const handleDonationLocationSelect = (selectedLocation, selectedAddress) => {
    setDonationLocation(selectedLocation);
    setDonationAddress(selectedAddress);
    setIsDonationMapOpen(false);
  };

  const handleProductChange = (index, field, value) => {
    const updatedProducts = [...editedRequest.requestedProducts];
    if (field === 'quantity') {
      value = Number(value);
    }
    updatedProducts[index] = { ...updatedProducts[index], [field]: value };
    setEditedRequest({ ...editedRequest, requestedProducts: updatedProducts });
  };

  const handleDeleteProduct = (index) => {
    const updatedProducts = editedRequest.requestedProducts.filter((_, i) => i !== index);
    setEditedRequest({ ...editedRequest, requestedProducts: updatedProducts });
  };

  const handleAddProduct = () => {
    const newProduct = {
      product: {
        productType: '',
        productDescription: '',
        weightPerUnit: 0,
        weightUnit: '',
        status: 'available'
      },
      quantity: 0
    };
    setEditedRequest({
      ...editedRequest,
      requestedProducts: [...editedRequest.requestedProducts, newProduct]
    });
  };

  const handleCancelEdit = () => {
    setIsEditing(false);
    setEditedRequest({
      title: request.title || "",
      location: request.location || { type: 'Point', coordinates: [0, 0] },
      address: request.address || "",
      expirationDate: request.expirationDate || "",
      description: request.description || "",
      category: request.category || "",
      status: request.status || "",
      requestedProducts: request.requestedProducts ? [...request.requestedProducts] : [],
      numberOfMeals: request.numberOfMeals || "",
      mealName: request.mealName || "",
      mealDescription: request.mealDescription || "",
      mealType: request.mealType || "",
    });
    setAddress(request.address || "");
  };

  const handleDonationQuantityChange = (index, value) => {
    const maxQty = request.requestedProducts[index].quantity;
    const newQuantities = [...donationQuantities];
    newQuantities[index] = Math.min(Number(value) || 0, maxQty);
    setDonationQuantities(newQuantities);
  };

  const handleFileUploadMeals = (event) => {
    const file = event.target.files[0];
    if (file) {
      Papa.parse(file, {
        complete: (result) => {
          const parsedMeals = result.data.map(meal => ({
            mealName: meal.mealName,
            mealDescription: meal.mealDescription,
            mealType: meal.mealType,
            quantity: parseInt(meal.quantity) || 0
          }));
          setDonationMeals(parsedMeals);
          const total = parsedMeals.reduce((sum, meal) => sum + (meal.quantity || 0), 0);
          setEditedRequest(prev => ({ ...prev, numberOfMeals: total || "" }));
          showAlert("success", "Meals uploaded successfully.");
        },
        header: true,
        skipEmptyLines: true,
      });
    }
  };

  const handleManualMealChange = (index, field, value) => {
    const updated = [...manualDonationMeals];
    updated[index][field] = field === "quantity" ? parseInt(value) || "" : value;
    setManualDonationMeals(updated);
  };

  const handleAddManualMeal = () => {
    setManualDonationMeals([...manualDonationMeals, {
      mealName: "",
      mealDescription: "",
      mealType: "Lunch",
      quantity: ""
    }]);
    showAlert("success", "New meal entry added.");
  };

  const handleRemoveManualMeal = (index) => {
    setManualDonationMeals(manualDonationMeals.filter((_, i) => i !== index));
    showAlert("success", "Manual meal removed.");
  };

  const handleEditMealRow = (index) => {
    setEditableRow(index);
    setEditedMeal({ ...donationMeals[index] });
  };

  const handleMealRowChange = (e, field) => {
    setEditedMeal(prev => ({ ...prev, [field]: field === "quantity" ? parseInt(e.target.value) || 0 : e.target.value }));
  };

  const handleSaveMealRow = (index) => {
    const updatedMeals = [...donationMeals];
    updatedMeals[index] = editedMeal;
    setDonationMeals(updatedMeals);
    const total = updatedMeals.reduce((sum, meal) => sum + (meal.quantity || 0), 0);
    setEditedRequest(prev => ({ ...prev, numberOfMeals: total || "" }));
    setEditableRow(null);
    setEditedMeal({});
    showAlert("success", "Meal updated successfully.");
  };

  const handleDeleteMealRow = (index) => {
    const updatedMeals = donationMeals.filter((_, i) => i !== index);
    setDonationMeals(updatedMeals);
    const total = updatedMeals.reduce((sum, meal) => sum + (meal.quantity || 0), 0);
    setEditedRequest(prev => ({ ...prev, numberOfMeals: total || "" }));
    showAlert("success", "Meal removed from list.");
  };

  const validateDonation = () => {
    let tempErrors = {};
    if (!donationLocation || donationLocation.type !== 'Point' || !Array.isArray(donationLocation.coordinates) || donationLocation.coordinates.length !== 2) {
      tempErrors.location = "A valid location is required for the donation";
    }
    if (!donationAddress || donationAddress.trim() === '') {
      tempErrors.address = "A valid address is required for the donation";
    }
    if (request.category === "prepared_meals") {
      const totalMeals = mealsEntryMode === "form"
        ? manualDonationMeals.reduce((sum, meal) => sum + (parseInt(meal.quantity) || 0), 0)
        : donationMeals.reduce((sum, meal) => sum + (meal.quantity || 0), 0);
      
      if (mealsEntryMode === "csv" && donationMeals.length === 0) {
        tempErrors.meals = "Please upload a CSV file with meals";
      } else if (mealsEntryMode === "form") {
        const invalidMeals = manualDonationMeals.filter(
          meal => !meal.mealName.trim() || !meal.mealType || !meal.mealDescription.trim() || !meal.quantity || meal.quantity <= 0
        );
        if (invalidMeals.length > 0) {
          tempErrors.meals = "All meals must have a name, type, description, and valid quantity";
        }
      }
      if (!totalMeals || totalMeals <= 0) {
        tempErrors.numberOfMeals = "Total number of meals must be greater than 0";
      } else if (totalMeals > request.numberOfMeals) {
        tempErrors.numberOfMeals = `Total number of meals (${totalMeals}) exceeds requested amount (${request.numberOfMeals})`;
      }
    } else if (request.category === "packaged_products") {
      const hasValidQuantity = donationQuantities.some(qty => qty > 0);
      if (!hasValidQuantity) {
        tempErrors.products = "Please specify at least one product quantity to donate";
      }
      donationQuantities.forEach((qty, index) => {
        if (qty > request.requestedProducts[index].quantity) {
          tempErrors[`product_${index}`] = `Quantity (${qty}) exceeds requested amount (${request.requestedProducts[index].quantity}) for ${request.requestedProducts[index].product?.productType || 'product'}`;
        }
      });
    }
    setDonationErrors(tempErrors);
    return Object.keys(tempErrors).length === 0;
  };

  const handleSubmitDonation = async () => {
    if (!validateDonation()) return;

    try {
      const donationData = {
        donor: user?._id || user?.id,
        expirationDate: request.expirationDate || new Date().toISOString(),
        location: donationLocation, // Ajouter la localisation GeoJSON
        address: donationAddress, // Ajouter l'adresse lisible
      };

      if (request.category === "packaged_products") {
        const donationProducts = request.requestedProducts.map((item, index) => ({
          product: item.product?._id || item.product,
          quantity: Number(donationQuantities[index]) || 0,
        })).filter(p => p.quantity > 0);
        donationData.products = donationProducts;
      } else if (request.category === "prepared_meals") {
        const mealsToSend = mealsEntryMode === "form" ? manualDonationMeals : donationMeals;
        const formattedMeals = mealsToSend.map(meal => {
          const quantity = parseInt(meal.quantity);
          if (isNaN(quantity) || quantity <= 0) {
            throw new Error(`Invalid quantity for meal ${meal.mealName}: ${meal.quantity}`);
          }
          return {
            mealName: meal.mealName,
            mealDescription: meal.mealDescription,
            mealType: meal.mealType,
            quantity: quantity,
          };
        });
        donationData.meals = formattedMeals;
        donationData.numberOfMeals = mealsEntryMode === "form"
          ? manualDonationMeals.reduce((sum, meal) => sum + (parseInt(meal.quantity) || 0), 0)
          : donationMeals.reduce((sum, meal) => sum + (meal.quantity || 0), 0);
      }

      console.log('Submitting donation data:', donationData);

      const response = await addDonationToRequest(id, donationData);
      setIsAddingDonation(false);
      setDonationQuantities(request.requestedProducts.map(() => 0));
      setDonationMeals([]);
      setManualDonationMeals([{
        mealName: "",
        mealDescription: "",
        mealType: "Lunch",
        quantity: ""
      }]);
      setDonationLocation({ type: 'Point', coordinates: [0, 0] }); // Réinitialiser la localisation
      setDonationAddress(""); // Réinitialiser l'adresse
      setRequest(prev => ({
        ...prev,
        donations: [...(prev.donations || []), response.donation],
      }));

      const recipientId = request.recipient?._id || request.recipient;
      const donorName = user?.name || 'A donor';
      const requestTitle = request.title || 'Untitled Request';
      await sendNotificationToRecipient(donorName, requestTitle, recipientId);

      showAlert('success', 'Donation submitted successfully');
    } catch (error) {
      console.error('Error submitting donation:', error);
      showAlert('error', `Failed to submit donation: ${error.message || 'Unknown error'}`);
    }
  };

  const handleDonateAll = async () => {
    if (request.category === "prepared_meals") {
      showAlert('error', 'Cannot use "Donate all" for prepared meals. Please specify meals manually.');
      return;
    }

    try {
      const donationProducts = request.requestedProducts.map((item) => ({
        product: item.product?._id || item.product,
        quantity: Number(item.quantity) || 0,
      }));

      const donationData = {
        products: donationProducts,
        donor: userid,
        expirationDate: request.expirationDate || new Date().toISOString(),
        location: donationLocation,
        address: donationAddress,
      };

      const response = await addDonationToRequest(id, donationData);
      setIsAddingDonation(false);
      setDonationLocation({ type: 'Point', coordinates: [0, 0] });
      setDonationAddress("");
      setRequest(prev => ({
        ...prev,
        donations: [...(prev.donations || []), response.donation],
      }));

      const recipientId = request.recipient?._id || request.recipient;
      const donorName = user?.name || 'A donor';
      const requestTitle = request.title || 'Untitled Request';
      await sendNotificationToRecipient(donorName, requestTitle, recipientId);

      showAlert('success', 'Donated all products successfully');
    } catch (error) {
      console.error('Error donating all:', error);
      showAlert('error', `Failed to donate all: ${error.message || 'Unknown error'}`);
    }
  };

  if (loading) return <div>Loading...</div>;
  if (error) return <div>{error}</div>;
  if (!request) return <div>No request found.</div>;

  const {
    title,
    expirationDate,
    description,
    category,
    status,
    requestedProducts,
    numberOfMeals,
    mealName,
    mealDescription,
    mealType,
  } = request;
  const isExpired = new Date(expirationDate) < new Date();

  return (
    <>
      <Navbar />
      <div className="donation-details">
        {(isMapOpen || isDonationMapOpen) && <div className="donation-map-backdrop" onClick={() => { setIsMapOpen(false); setIsDonationMapOpen(false); }} />}
        <div className="donation-card-content-details">
          <img src={logo} alt="Logo" className="addDonation-logo" style={{ marginLeft: "47%" }} />

          <div style={{ display: "flex", alignItems: "center", justifyContent: "space-between" }}>
            {isEditing ? (
              <input
                type="text"
                value={editedRequest.title}
                onChange={(e) => setEditedRequest({ ...editedRequest, title: e.target.value })}
                placeholder="🛒 Request Title"
                style={{ fontSize: "1.5rem", fontWeight: "bold", width: "60%" }}
              />
            ) : (
              <h3 className="donation-title">
                🛒 Request: {title || "No Title"}
              </h3>
            )}
            {isTheOwner && (
              <div>
                <FaTrash className='fa-trash' onClick={handleDeleteRequest} />
                {isEditing ? (
                  <>
                    <FaSave className="fa-save" onClick={handleSaveRequest} />
                    <FaTimes className="fa-times" onClick={handleCancelEdit} />
                  </>
                ) : (
                  <FaEdit
                    className="fa-edit"
                    onClick={() => {
                      setIsEditing(true);
                      setEditedRequest({
                        ...request,
                        requestedProducts: request.requestedProducts ? [...request.requestedProducts] : []
                      });
                    }}
                  />
                )}
              </div>
            )}
          </div>

          <p style={{ color:"black"}}>
            <strong>📍 Address:</strong>{" "}
            {isEditing ? (
              <>
                <input
                  type="text"
                  value={address}
                  onChange={(e) => setAddress(e.target.value)}
                  onClick={() => setIsMapOpen(true)}
                  placeholder="📍 Enter Address"
                  readOnly
                  style={{ width: '100%', padding: '10px 12px', border: '1px solid #ced4da', borderRadius: '6px', fontSize: '16px', background: '#f8f9fa' }}
                />
                {isMapOpen && (
                  <LocationPicker
                    isOpen={isMapOpen}
                    onClose={() => setIsMapOpen(false)}
                    onLocationChange={(loc) => setEditedRequest({ ...editedRequest, location: loc })}
                    onAddressChange={setAddress}
                    onSelect={handleLocationSelect}
                    initialAddress={address}
                  />
                )}
              </>
            ) : (
              address || "Unknown address"
            )}
          </p>
          <p style={{ color:"black"}}> <strong>📆 Expiration Date:</strong> {isEditing ? <input type="date" value={editedRequest.expirationDate ? new Date(editedRequest.expirationDate).toISOString().split('T')[0] : ''} onChange={(e) => setEditedRequest({ ...editedRequest, expirationDate: e.target.value })} /> : expirationDate ? new Date(expirationDate).toLocaleDateString() : "Not set"}</p>
          <p style={{ color:"black"}}><strong>📝 Description:</strong> {isEditing ? <textarea value={editedRequest.description} onChange={(e) => setEditedRequest({ ...editedRequest, description: e.target.value })} placeholder="📝 Description" /> : description || "No description"}</p>
          <p style={{ color:"black"}}><strong>📂 Category:</strong> {isEditing ? (
            <select value={editedRequest.category} onChange={(e) => setEditedRequest({ ...editedRequest, category: e.target.value })}>
              <option value="">Select Category</option>
              <option value="packaged_products">Packaged Products</option>
              <option value="prepared_meals">Prepared Meals</option>
            </select>
          ) : category || "Not specified"}</p>
          <p style={{ color:"black"}}><strong>🔄 Status:</strong> {isEditing ? (
            <select value={editedRequest.status} onChange={(e) => setEditedRequest({ ...editedRequest, status: e.target.value })}>
              <option value="">Select Status</option>
              {statuses.map(status => <option key={status} value={status}>{status}</option>)}
            </select>
          ) : status || "Unknown"}</p>
          {category === 'prepared_meals' && (
            <>
              <p style={{ color:"black"}}><strong>🍽️ Number of Meals:</strong> {isEditing ? <input type="number" value={editedRequest.numberOfMeals} onChange={(e) => setEditedRequest({ ...editedRequest, numberOfMeals: Number(e.target.value) })} placeholder="🍽️ Number of Meals" /> : numberOfMeals || "No more meals needed"}</p>
              {mealName || mealDescription || mealType ? (
                <>
                  <p><strong>🍽️ Meal Name:</strong> {isEditing ? <input type="text" value={editedRequest.mealName} onChange={(e) => setEditedRequest({ ...editedRequest, mealName: e.target.value })} placeholder="🍽️ Meal Name" /> : mealName || "Not specified"}</p>
                  <p><strong>📝 Meal Description:</strong> {isEditing ? <textarea value={editedRequest.mealDescription} onChange={(e) => setEditedRequest({ ...editedRequest, mealDescription: e.target.value })} placeholder="📝 Meal Description" /> : mealDescription || "Not specified"}</p>
                  <p><strong>🍴 Meal Type:</strong> {isEditing ? (
                    <select value={editedRequest.mealType} onChange={(e) => setEditedRequest({ ...editedRequest, mealType: e.target.value })}>
                      <option value="">Select Meal Type</option>
                      {mealTypes.map(type => <option key={type} value={type}>{type}</option>)}
                    </select>
                  ) : mealType || "Not specified"}</p>
                </>
              ) : null}
            </>
          )}

          <h4>{category === 'prepared_meals' ? '🍽️ Prepared Meals' : '📦 Requested Products:'}</h4>
          <ul className="donation-ul">
            {isEditing ? (
              category === 'packaged_products' ? (
                editedRequest.requestedProducts.map((item, index) => (
                  <li key={index} style={{ display: "flex", alignItems: "center", marginBottom: "10px" }}>
                    <input
                      type="text"
                      value={item.product?.productType || ''}
                      onChange={(e) => {
                        const updatedProducts = [...editedRequest.requestedProducts];
                        updatedProducts[index].product = { ...updatedProducts[index].product, productType: e.target.value };
                        setEditedRequest({ ...editedRequest, requestedProducts: updatedProducts });
                      }}
                      placeholder="🔖 Product Type"
                    />
                    <input
                      type="text"
                      value={item.product?.productDescription || ''}
                      onChange={(e) => {
                        const updatedProducts = [...editedRequest.requestedProducts];
                        updatedProducts[index].product = { ...updatedProducts[index].product, productDescription: e.target.value };
                        setEditedRequest({ ...editedRequest, requestedProducts: updatedProducts });
                      }}
                      placeholder="📝 Product Description"
                      style={{ marginLeft: "10px" }}
                    />
                    <input
                      type="number"
                      value={item.quantity || 0}
                      onChange={(e) => handleProductChange(index, 'quantity', e.target.value)}
                      placeholder="🔢 Quantity"
                      style={{ marginLeft: "10px" }}
                    />
                    <input
                      type="number"
                      value={item.product?.weightPerUnit || 0}
                      onChange={(e) => {
                        const updatedProducts = [...editedRequest.requestedProducts];
                        updatedProducts[index].product = { ...updatedProducts[index].product, weightPerUnit: Number(e.target.value) };
                        setEditedRequest({ ...editedRequest, requestedProducts: updatedProducts });
                      }}
                      placeholder="⚖️ Weight per Unit"
                      style={{ marginLeft: "10px" }}
                    />
                    <select
                      value={item.product?.weightUnit || ''}
                      onChange={(e) => {
                        const updatedProducts = [...editedRequest.requestedProducts];
                        updatedProducts[index].product = { ...updatedProducts[index].product, weightUnit: e.target.value };
                        setEditedRequest({ ...editedRequest, requestedProducts: updatedProducts });
                      }}
                      style={{ marginLeft: "10px", padding: "8px", borderRadius: "5px" }}
                    >
                      <option value="">📏 Select Weight Unit</option>
                      {weightUnits.map((unit) => <option key={unit} value={unit}>{unit}</option>)}
                    </select>
                    <select
                      value={item.product?.status || 'available'}
                      onChange={(e) => {
                        const updatedProducts = [...editedRequest.requestedProducts];
                        updatedProducts[index].product = { ...updatedProducts[index].product, status: e.target.value };
                        setEditedRequest({ ...editedRequest, requestedProducts: updatedProducts });
                      }}
                      style={{ marginLeft: "10px", padding: "8px", borderRadius: "5px" }}
                    >
                      {statuses.map((status) => <option key={status} value={status}>{status}</option>)}
                    </select>
                    <FaTimes onClick={() => handleDeleteProduct(index)} style={{ color: "red", cursor: "pointer", marginLeft: "10px" }} />
                  </li>
                ))
              ) : null
            ) : (
              category === 'packaged_products' && requestedProducts && requestedProducts.length > 0 ? (
                requestedProducts.map((item, index) => (
                  <li className="donation-li-list" key={index}>
                    <span><strong>🔖 Type:</strong> {item.product?.productType || 'Not specified'}</span> <br />
                    <span><strong>📝 Description:</strong> {item.product?.productDescription || 'None'}</span> <br />
                    <span><strong>⚖️ Weight:</strong> {item.product?.weightPerUnit || 0} {item.product?.weightUnit || ''}</span> <br />
                    <span><strong>🔢 Quantity:</strong> {item.quantity || 0}</span> <br />
                    <span><strong>🔄 Status:</strong> {item.product?.status || 'Unknown'}</span>
                  </li>
                ))
              ) : (
                <li className="donation-li-list">
                  {category === 'prepared_meals'
                    ? 'No additional meal details available'
                    : 'No products requested'}
                </li>
              )
            )}
          </ul>

          {isAddingDonation && (
            <DonationForm>
              <h4>Specify the donation</h4>
              <div>
                <label>📍 Donation Location</label>
                <input
                  type="text"
                  value={donationAddress}
                  onChange={(e) => setDonationAddress(e.target.value)}
                  onClick={() => setIsDonationMapOpen(true)}
                  placeholder="📍 Select Donation Location"
                  readOnly
                />
                {isDonationMapOpen && (
                  <LocationPicker
                    isOpen={isDonationMapOpen}
                    onClose={() => setIsDonationMapOpen(false)}
                    onLocationChange={setDonationLocation}
                    onAddressChange={setDonationAddress}
                    onSelect={handleDonationLocationSelect}
                    initialAddress={donationAddress}
                  />
                )}
                {donationErrors.location && <p className="error-message">{donationErrors.location}</p>}
                {donationErrors.address && <p className="error-message">{donationErrors.address}</p>}
              </div>
              {request.category === "packaged_products" && requestedProducts.map((item, index) => (
                <div key={index}>
                  <label>
                    {item.product?.productType || 'Not specified'} - {item.product?.productDescription || 'None'} (Max: {item.quantity || 0})
                  </label>
                  <input
                    type="number"
                    min="0"
                    max={item.quantity}
                    value={donationQuantities[index]}
                    onChange={(e) => handleDonationQuantityChange(index, e.target.value)}
                    placeholder="Quantity to donate"
                  />
                  {donationErrors[`product_${index}`] && <p className="error-message">{donationErrors[`product_${index}`]}</p>}
                </div>
              ))}
              {request.category === "prepared_meals" && (
                <>
                  <div>
                    <label>Total Number of Meals (Requested: {request.numberOfMeals})</label>
                    <input
                      type="number"
                      value={editedRequest.numberOfMeals}
                      readOnly
                    />
                    {donationErrors.numberOfMeals && <p className="error-message">{donationErrors.numberOfMeals}</p>}
                  </div>
                  <div className="radio-buttons-container-adddonation"> 
                    <div className="radio-button-adddonation">
                      <input
                        name="radio-group-meals"
                        id="radio-csv-meals"
                        className="radio-button__input-adddonation"
                        type="radio"
                        checked={mealsEntryMode === "csv"}
                        onChange={() => setMealsEntryMode("csv")}
                      />
                      <label htmlFor="radio-csv-meals" className="radio-button__label-adddonation">
                        <span className="radio-button__custom-adddonation"></span>CSV File
                      </label>
                    </div>
                    <div className="radio-button-adddonation">
                      <input
                        name="radio-group-meals"
                        id="radio-form-meals"
                        className="radio-button__input-adddonation"
                        type="radio"
                        checked={mealsEntryMode === "form"}
                        onChange={() => setMealsEntryMode("form")}
                      />
                      <label htmlFor="radio-form-meals" className="radio-button__label-adddonation">
                        <span className="radio-button__custom-adddonation"></span>Form
                      </label>
                    </div>
                  </div>

                  {mealsEntryMode === "csv" && donationMeals.length === 0 && (
                    <>
                      <input
                        ref={mealsFileInputRef}
                        type="file"
                        accept=".csv"
                        onChange={handleFileUploadMeals}
                        style={{ display: "none" }}
                      />
                      <Button
                        variant="add"
                        onClick={() => mealsFileInputRef.current.click()}
                      >
                        Upload List of Meals
                      </Button>
                    </>
                  )}
                  {mealsEntryMode === "csv" && donationMeals.length > 0 && (
                    <>
                      <p style={{ color: "#8dc73f" }}>List of Meals Uploaded</p>
                      <table className="meals-table">
                        <thead>
                          <tr>
                            <th>Meal Name</th>
                            <th>Description</th>
                            <th>Type</th>
                            <th>Quantity</th>
                            <th>Actions</th>
                          </tr>
                        </thead>
                        <tbody>
                          {donationMeals.map((meal, index) => (
                            <tr key={index}>
                              {editableRow === index ? (
                                <>
                                  <td><input value={editedMeal.mealName || ""} onChange={(e) => handleMealRowChange(e, "mealName")} /></td>
                                  <td><input value={editedMeal.mealDescription || ""} onChange={(e) => handleMealRowChange(e, "mealDescription")} /></td>
                                  <td>
                                    <select value={editedMeal.mealType || ""} onChange={(e) => handleMealRowChange(e, "mealType")}>
                                      {mealTypes.map(type => <option key={type} value={type}>{type}</option>)}
                                    </select>
                                  </td>
                                  <td><input type="number" min="1" value={editedMeal.quantity || ""} onChange={(e) => handleMealRowChange(e, "quantity")} /></td>
                                  <td>
                                    <FaSave onClick={() => handleSaveMealRow(index)} style={{ cursor: "pointer", marginRight: "10px" }} />
                                    <FaTimes onClick={() => setEditableRow(null)} style={{ cursor: "pointer" }} />
                                  </td>
                                </>
                              ) : (
                                <>
                                  <td>{meal.mealName || 'Not specified'}</td>
                                  <td>{meal.mealDescription || 'None'}</td>
                                  <td>{meal.mealType || 'Unknown'}</td>
                                  <td>{meal.quantity || 0}</td>
                                  <td>
                                    <FaEdit onClick={() => handleEditMealRow(index)} style={{ cursor: "pointer", marginRight: "10px" }} />
                                    <FaTrash onClick={() => handleDeleteMealRow(index)} style={{ cursor: "pointer", color: "red" }} />
                                  </td>
                                </>
                              )}
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </>
                  )}
                  {mealsEntryMode === "form" && (
                    <div className="manual-meal-entry">
                      {manualDonationMeals.map((meal, index) => (
                        <div key={index} className="manual-meal-row">
                          <input
                            type="text"
                            placeholder="Meal Name"
                            value={meal.mealName}
                            onChange={(e) => handleManualMealChange(index, "mealName", e.target.value)}
                          />
                          <textarea
                            placeholder="Meal Description"
                            value={meal.mealDescription}
                            onChange={(e) => handleManualMealChange(index, "mealDescription", e.target.value)}
                          />
                          <select
                            value={meal.mealType}
                            onChange={(e) => handleManualMealChange(index, "mealType", e.target.value)}
                          >
                            {mealTypes.map(type => <option key={type} value={type}>{type}</option>)}
                          </select>
                          <input
                            type="number"
                            placeholder="Quantity"
                            value={meal.quantity}
                            onChange={(e) => handleManualMealChange(index, "quantity", e.target.value)}
                            min="1"
                          />
                          {manualDonationMeals.length > 1 && (
                            <Button
                              variant="cancel"
                              onClick={() => handleRemoveManualMeal(index)}
                            >
                              Remove
                            </Button>
                          )}
                        </div>
                      ))}
                      <Button
                        variant="add"
                        onClick={handleAddManualMeal}
                      >
                        Add Another Meal
                      </Button>
                    </div>
                  )}
                  {donationErrors.meals && <p className="error-message">{donationErrors.meals}</p>}
                </>
              )}
              {request.category === "packaged_products" && (
                <Button variant="donate" onClick={handleDonateAll}>Donate all</Button>
              )}
              <Button variant="donate" onClick={handleSubmitDonation}>Submit donation</Button>
            </DonationForm>
          )}

          <Button variant="back" onClick={() => window.history.back()}>🔙 Go Back</Button>

          {!isTheOwner && request.status !== "fulfilled" && !isExpired && (
            <Button
              variant={isAddingDonation ? "cancel" : "add"}
              onClick={() => setIsAddingDonation(!isAddingDonation)}
            >
              {isAddingDonation ? 'Cancel' : 'Add Donation'}
            </Button>
          )}
         
          {isTheOwner && !isEditing && (
            <Button
              variant="submit"
              as={Link}
              to={`/ListDonationsRequest/${id}`}
              style={{ textDecoration: 'none' }}
            >
              👀 View Donations
            </Button>
          )}
          {isEditing && category === 'packaged_products' && (
            <Button variant="add" onClick={handleAddProduct} className="add-product-btn">
              ➕ Add Product
            </Button>
          )}
        </div>
      </div>
      <Footer />
    </>
  );
};

export default DetailsRequest;
</file>

<file path="sustainafood-frontend/src/pages/ListRequestsDonation.jsx">
import React, { useEffect, useState } from 'react';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import { getDonationById } from '../api/donationService';
import { getDonationTransactionsByDonationId } from '../api/donationTransactionService';
import { createAndAcceptDonationTransaction, rejectDonationTransaction } from '../api/donationTransactionService';
import imgmouna from '../assets/images/imgmouna.png';
import styled, { createGlobalStyle, keyframes } from 'styled-components';
import { FaSearch } from 'react-icons/fa';
import { useAlert } from '../contexts/AlertContext';
import { useParams, useNavigate, Link } from 'react-router-dom';

// Global Styles
const GlobalStyle = createGlobalStyle`
  body {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    background: #f0f8f0;
    box-sizing: border-box;
    overflow-x: hidden;
  }
`;

// Animation keyframes
const shimmer = keyframes`
  0% { background-position: -1000px 0; }
  100% { background-position: 1000px 0; }
`;
const skeletonLoading = keyframes`
  0% { background-position: -200px 0; }
  100% { background-position: calc(200px + 100%) 0; }
`;

// Transaction container
const TransactionContainer = styled.div`
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
`;

// Transaction title
const TransactionTitle = styled.h1`
  color: #228b22;
  font-size: 40px;
  margin-bottom: 20px;
  text-align: center;
  p { font-size: 24px; color: #495057; margin: 5px 0 0; }
`;

// Controls
const Controls = styled.div`
  display: flex;
  justify-content: flex-end;
  gap: 15px;
  margin: 20px 0;
`;

// Search container
const SearchContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  background: white;
  padding: 12px 20px;
  border-radius: 30px;
  box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
  width: 320px;
  margin: 0 auto 20px;
  transition: all 0.3s ease-in-out;
  &:hover { box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15); }
`;

// Search icon
const SearchIcon = styled(FaSearch)`color: #555; margin-right: 8px;`;

// Search input
const SearchInput = styled.input`
  border: none;
  outline: none;
  font-size: 16px;
  width: 100%;
  padding: 8px;
  background: transparent;
`;

// Select
const Select = styled.select`
  font-size: 16px;
  border-radius: 30px;
  border: none;
  box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  cursor: pointer;
  background: white;
  color: #3a5a3a;
  font-weight: 600;
  padding: 12px 20px;
  appearance: none;
  background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%233a5a3a' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: right 16px center;
  background-size: 16px;
  padding-right: 40px;
  &:hover { transform: translateY(-3px); box-shadow: 0 10px 20px rgba(34, 139, 34, 0.2); }
`;

// Transaction card
const TransactionCard = styled.div`
  background: #f8f9fa;
  border-left: 4px solid #228b22;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 20px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: transform 0.2s ease-in-out;
  &:hover { transform: scale(1.02); }
  @media (max-width: 768px) { padding: 15px; }
`;

// Profile info
const ProfileInfo = styled.div`
  display: flex;
  align-items: center;
  gap: 15px;
  margin-bottom: 15px;
  @media (max-width: 768px) { flex-direction: column; align-items: flex-start; }
`;

// Profile image
const ProfileImg = styled.img`
  width: 50px;
  height: 50px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #228b22;
  cursor: pointer;
`;

// Profile text
const ProfileText = styled.p`
  margin: 0;
  font-size: 16px;
  font-weight: bold;
  color: #495057;
  cursor: pointer;
  &:hover { color: #228b22; text-decoration: underline; }
`;

// Transaction details
const TransactionDetails = styled.div`margin-bottom: 15px;`;

// Transaction detail
const TransactionDetail = styled.p`
  font-size: 14px;
  color: #495057;
  margin: 5px 0;
  strong { color: #222; font-weight: 600; }
`;

// Item section
const ItemSection = styled.div`margin-bottom: 15px;`;

// Items title
const ItemsTitle = styled.h4`
  font-size: 16px;
  color: #222;
  margin: 0 0 10px;
`;

// Item list
const ItemList = styled.ul`
  list-style: none;
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 8px;
  margin-top: 10px;
`;

// Item
const Item = styled.li`
  background: #ffffff;
  padding: 10px;
  border-left: 3px solid #228b22;
  border-radius: 5px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  font-size: 14px;
  @media (max-width: 768px) { flex-direction: column; align-items: flex-start; }
`;

// Item details
const ItemDetails = styled.div`
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  span { display: block; font-size: 13px; color: #333; }
`;

// Item quantity
const ItemQuantity = styled.span`
  font-size: 14px;
  font-weight: bold;
  color: #d9534f;
  padding: 4px 8px;
  border-radius: 4px;
  @media (max-width: 768px) { font-size: 13px; padding: 6px; }
`;

// Button container
const ButtonContainer = styled.div`
  display: flex;
  justify-content: space-evenly;
  margin-top: 15px;
`;

// Action button
const ActionButton = styled.button`
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
  font-weight: bold;
  transition: background 0.3s ease-in-out;
  &.accept-btn { background-color: #28a745; color: white; &:hover { background-color: #218838; } }
  &.reject-btn { background-color: #dc3545; color: white; &:hover { background-color: #c82333; } }
  &:disabled { opacity: 0.6; cursor: not-allowed; }
`;

// Pagination controls
const PaginationControls = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  gap: 10px;
  button {
    padding: 10px 20px;
    font-size: 14px;
    background: #228b22;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s;
    &:hover:not(:disabled) { background: #56ab2f; }
    &:disabled { background: #ccc; cursor: not-allowed; }
  }
  span { font-size: 14px; color: #333; }
`;

// Skeleton loading components
const SkeletonCard = styled.div`
  background: white;
  border-radius: 16px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
  padding: 20px;
  height: 350px;
  display: flex;
  flex-direction: column;
`;
const SkeletonImage = styled.div`
  width: 50px;
  height: 50px;
  border-radius: 50%;
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  background-size: 200px 100%;
  animation: ${skeletonLoading} 1.5s infinite;
  margin-bottom: 15px;
`;
const SkeletonText = styled.div`
  height: 15px;
  width: 70%;
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  background-size: 200px 100%;
  animation: ${skeletonLoading} 1.5s infinite;
  border-radius: 8px;
  margin-bottom: 10px;
`;
const SkeletonDetail = styled.div`
  height: 14px;
  width: 100%;
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  background-size: 200px 100%;
  animation: ${skeletonLoading} 1.5s infinite;
  border-radius: 8px;
  margin: 5px 0;
`;
const SkeletonItem = styled.div`
  background: #ffffff;
  padding: 10px;
  border-left: 3px solid #228b22;
  border-radius: 5px;
  height: 50px;
  margin-top: 10px;
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  background-size: 200px 100%;
  animation: ${skeletonLoading} 1.5s infinite;
`;

// Empty state
const EmptyState = styled.div`
  text-align: center;
  padding: 60px 20px;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 16px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
  margin: 40px auto;
  max-width: 600px;
  h3 { font-size: 24px; color: #1a7a1a; margin-bottom: 20px; }
  p { font-size: 16px; color: #3a5a3a; margin-bottom: 30px; }
`;

// Status badge
const StatusBadge = styled.span`
  display: inline-block;
  padding: 3px 8px;
  border-radius: 12px;
  font-size: 12px;
  font-weight: bold;
  margin-left: 5px;
  &.pending { background-color: #fff3cd; color: #856404; }
  &.approved { background-color: #d4edda; color: #155724; }
  &.rejected { background-color: #f8d7da; color: #721c24; }
  &.fulfilled { background-color: #cce5ff; color: #004085; }
  &.partially_fulfilled { background-color: #e2e3e5; color: #383d41; }
`;

// Rejection modal
const RejectionModal = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
`;
const ModalContent = styled.div`
  background: white;
  padding: 20px;
  border-radius: 8px;
  width: 400px;
  max-width: 90%;
`;
const ModalTextarea = styled.textarea`
  width: 100%;
  min-height: 100px;
  margin: 10px 0;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
`;
const ModalButtons = styled.div`
  display: flex;
  justify-content: flex-end;
  gap: 10px;
`;
const Spinner = styled.div`
  display: inline-block;
  width: ${props => props.size === 'sm' ? '12px' : '16px'};
  height: ${props => props.size === 'sm' ? '12px' : '16px'};
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: white;
  animation: spin 1s ease-in-out infinite;
  margin-right: 5px;
  @keyframes spin { to { transform: rotate(360deg); } }
`;

const ListRequestsDonation = () => {
  const { showAlert } = useAlert();
  const { donationId } = useParams();
  const navigate = useNavigate();
  const [transactions, setTransactions] = useState([]);
  const [filteredTransactions, setFilteredTransactions] = useState([]);
  const [donation, setDonation] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(3);
  const [filterOption, setFilterOption] = useState('all');
  const [sortOption, setSortOption] = useState('date');
  const [searchQuery, setSearchQuery] = useState('');
  const [processing, setProcessing] = useState({});
  const [rejectionReason, setRejectionReason] = useState('');
  const [currentRejectionId, setCurrentRejectionId] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      const token = localStorage.getItem('token');
      if (!token) {
        showAlert('error', 'Please log in to view transactions');
        navigate('/login');
        return;
      }

      try {
        setLoading(true);
        const donationResponse = await getDonationById(donationId);
        setDonation(donationResponse.data);

        const transactionResponse = await getDonationTransactionsByDonationId(donationId);
        const transactionsArray = Array.isArray(transactionResponse) ? transactionResponse : [];
        setTransactions(transactionsArray);
      } catch (err) {
        console.error('Fetch error:', err.response?.data || err.message);
        let errorMessage = 'Failed to fetch data';
        if (err.response) {
          if (err.response.status === 404) errorMessage = 'Donation or transactions not found';
          else if (err.response.status === 400) errorMessage = 'Invalid donation ID';
          else errorMessage = err.response.data?.message || err.response.data?.error || err.message;
        }
        setError(errorMessage);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [donationId, navigate, showAlert]);

  useEffect(() => {
    if (!donation || transactions.length === 0) return;

    let updatedTransactions = [...transactions];

    if (filterOption !== 'all') {
      updatedTransactions = updatedTransactions.filter(t => t.status === filterOption);
    }

    if (searchQuery) {
      updatedTransactions = updatedTransactions.filter(transaction => {
        const request = transaction.requestNeed;
        const productMatch = request.requestedProducts?.some(product => 
          product.product?.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
          product.product?.productType?.toLowerCase().includes(searchQuery.toLowerCase())
        );
        const mealMatch = request.requestedMeals?.some(meal => 
          meal.meal?.mealName?.toLowerCase().includes(searchQuery.toLowerCase()) ||
          meal.meal?.mealType?.toLowerCase().includes(searchQuery.toLowerCase())
        );
        const recipientMatch = request.recipient?.name?.toLowerCase().includes(searchQuery.toLowerCase());
        return productMatch || mealMatch || recipientMatch;
      });
    }

    updatedTransactions.sort((a, b) => {
      const requestA = a.requestNeed;
      const requestB = b.requestNeed;
      if (sortOption === 'title') return requestA.title.localeCompare(requestB.title);
      else if (sortOption === 'recipient') {
        const aName = requestA.recipient?.name || '';
        const bName = requestB.recipient?.name || '';
        return aName.localeCompare(bName);
      } else if (sortOption === 'status') return a.status.localeCompare(b.status);
      else return new Date(a.createdAt) - new Date(b.createdAt);
    });

    setFilteredTransactions(updatedTransactions);
    setCurrentPage(1);
  }, [transactions, donation, filterOption, sortOption, searchQuery]);

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentTransactions = filteredTransactions.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(filteredTransactions.length / itemsPerPage);

  const handleAcceptTransaction = async (transactionId) => {
    if (!window.confirm('Are you sure you want to accept this transaction?')) return;

    try {
      setProcessing(prev => ({ ...prev, [transactionId]: 'accepting' }));
      const transaction = transactions.find(t => t._id === transactionId);
      const donation = transaction.donation;
      const requestNeed = transaction.requestNeed;

      setTransactions(prev => prev.map(t => 
        t._id === transactionId ? { ...t, status: 'approved' } : t
      ));

      if (donation.category === 'prepared_meals') {
        const totalAllocated = transaction.allocatedMeals.reduce((sum, m) => sum + m.quantity, 0);
        setDonation(prev => ({
          ...prev,
          remainingMeals: prev.remainingMeals - totalAllocated
        }));
      } else if (donation.category === 'packaged_products') {
        setDonation(prev => ({
          ...prev,
          products: prev.products.map(p => {
            const allocatedProduct = transaction.allocatedProducts.find(ap => 
              ap.product._id.toString() === p.product._id.toString()
            );
            if (allocatedProduct) return { ...p, quantity: p.quantity - allocatedProduct.quantity };
            return p;
          })
        }));
      }

      const response = await createAndAcceptDonationTransaction(
        donation._id,
        requestNeed._id,
        transaction.allocatedProducts,
        transaction.allocatedMeals
      );
      const { transaction: updatedTransaction, donation: updatedDonation, request: updatedRequest } = response;
      setTransactions(prev => prev.map(t => t._id === transactionId ? updatedTransaction : t));
      setDonation(updatedDonation);
      setFilterOption('all');
      showAlert('success', 'Transaction accepted successfully!');
    } catch (error) {
      console.error('Error accepting transaction:', error.response?.data || error.message);
      const errorMessage = error.response?.data?.message || 'An unexpected error occurred while accepting the transaction.';
      setTransactions(prev => prev.map(t => t._id === transactionId ? { ...t, status: 'pending' } : t));
      setDonation(prev => ({ ...prev }));
      showAlert('error', errorMessage);
    } finally {
      setProcessing(prev => ({ ...prev, [transactionId]: false }));
    }
  };

  const handleRejectTransaction = async (transactionId) => {
    if (!rejectionReason) {
      showAlert('warning', 'Please provide a reason for rejection');
      return;
    }

    try {
      setProcessing(prev => ({ ...prev, [transactionId]: 'rejecting' }));
      await rejectDonationTransaction(transactionId, rejectionReason);
      setTransactions(prev => prev.map(t => t._id === transactionId ? { ...t, status: 'rejected', rejectionReason } : t));
      setCurrentRejectionId(null);
      setRejectionReason('');
      showAlert('success', 'Transaction rejected successfully!');
    } catch (error) {
      console.error('Error rejecting transaction:', error.response?.data || error.message);
      showAlert('error', 'Failed to reject transaction');
    } finally {
      setProcessing(prev => ({ ...prev, [transactionId]: false }));
    }
  };

  const openRejectionDialog = (transactionId) => {
    setCurrentRejectionId(transactionId);
    setRejectionReason('');
  };

  if (loading) return (
    <TransactionContainer>
      <SkeletonCard>
        <SkeletonImage />
        <SkeletonText />
        <SkeletonDetail />
        <SkeletonDetail />
        <SkeletonItem />
        <SkeletonItem />
      </SkeletonCard>
      <SkeletonCard>
        <SkeletonImage />
        <SkeletonText />
        <SkeletonDetail />
        <SkeletonDetail />
        <SkeletonItem />
        <SkeletonItem />
      </SkeletonCard>
      <SkeletonCard>
        <SkeletonImage />
        <SkeletonText />
        <SkeletonDetail />
        <SkeletonDetail />
        <SkeletonItem />
        <SkeletonItem />
      </SkeletonCard>
    </TransactionContainer>
  );

  if (error) return (
    <>
      <Navbar />
      <div style={{ textAlign: 'center', padding: '40px' }}>Error: {error}</div>
      <Footer />
    </>
  );

  if (!donation || transactions.length === 0) return (
    <>
      <Navbar />
      <EmptyState>
        <h3>No Transactions Found</h3>
        <p>No transactions found for this donation. Check back later or adjust your filters.</p>
      </EmptyState>
      <Footer />
    </>
  );

  return (
    <>
      <GlobalStyle />
      <Navbar />
      <TransactionContainer>
        <TransactionTitle>
          🤝 Transactions for Donation: <p>{donation.title}</p>
        </TransactionTitle>
        <Controls>
          <SearchContainer>
            <SearchIcon />
            <SearchInput
              type="text"
              placeholder="Search by product, meal, or recipient..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              aria-label="Search transactions"
            />
          </SearchContainer>
          <Select value={filterOption} onChange={(e) => setFilterOption(e.target.value)} aria-label="Filter by status">
            <option value="all">🟢 All Transactions</option>
            <option value="pending">🟠 Pending</option>
            <option value="approved">🟢 Approved</option>
            <option value="rejected">🔴 Rejected</option>
          </Select>
          <Select value={sortOption} onChange={(e) => setSortOption(e.target.value)} aria-label="Sort transactions">
            <option value="date">📆 Sort by Date</option>
            <option value="title">📝 Sort by Request Title</option>
            <option value="recipient">👤 Sort by Recipient</option>
            <option value="status">🔄 Sort by Status</option>
          </Select>
        </Controls>
        {currentTransactions.map((transaction) => {
          const request = transaction.requestNeed;
          const userPhoto = request.recipient?.photo
            ? `http://localhost:3000/${request.recipient.photo}`
            : imgmouna;
          return (
            <TransactionCard key={transaction._id}>
              <ProfileInfo>
                <Link to={`/ViewProfile/${request.recipient?._id}`}>
                  <ProfileImg
                    src={userPhoto}
                    alt="Recipient Profile"
                    onError={(e) => { e.target.src = imgmouna; console.error(`Failed to load recipient image: ${userPhoto}`); }}
                  />
                </Link>
                <Link to={`/ViewProfile/${request.recipient?._id}`}>
                  <ProfileText>Recipient: {request.recipient?.name || 'Unknown User'}</ProfileText>
                </Link>
                <ProfileText>{request.recipient?.role || 'Role Not Specified'}</ProfileText>
              </ProfileInfo>
              <TransactionDetails>
                <TransactionDetail><strong>Transaction ID:</strong> {transaction.id}</TransactionDetail>
                <TransactionDetail><strong>Request Title:</strong> {request.title || 'Untitled'}</TransactionDetail>
                <TransactionDetail><strong>Location:</strong> {request.address || 'Not specified'}</TransactionDetail>
                <TransactionDetail><strong>Description:</strong> {request.description || 'No description'}</TransactionDetail>
                <TransactionDetail>
                  <strong>Status:</strong>
                  <StatusBadge className={transaction.status || 'pending'}>{transaction.status || 'pending'}</StatusBadge>
                </TransactionDetail>
                {donation.category === 'prepared_meals' && (
                  <TransactionDetail>
                    <strong>Number of Meals Requested:</strong> {request.numberOfMeals || 'Not specified'}
                  </TransactionDetail>
                )}
                {transaction.rejectionReason && (
                  <TransactionDetail>
                    <strong>Rejection Reason:</strong> {transaction.rejectionReason}
                  </TransactionDetail>
                )}
              </TransactionDetails>
              <ItemSection>
                {donation.category === 'prepared_meals' ? (
                  <>
                    <ItemsTitle>Allocated Meals:</ItemsTitle>
                    <ItemList>
                      {transaction.allocatedMeals && transaction.allocatedMeals.length > 0 ? (
                        transaction.allocatedMeals.map((item, itemIndex) => (
                          <Item key={item._id || itemIndex}>
                            <ItemDetails>
                              <span><strong>Name:</strong> {item.meal?.mealName || 'Meal Not Specified'}</span>
                              <span><strong>Type:</strong> {item.meal?.mealType || 'Type Not Specified'}</span>
                              <span><strong>Description:</strong> {item.meal?.mealDescription || 'No Description'}</span>
                            </ItemDetails>
                            <ItemQuantity>Quantity: {item.quantity !== undefined ? item.quantity : 'Not specified'}</ItemQuantity>
                          </Item>
                        ))
                      ) : (
                        <Item>No meals allocated</Item>
                      )}
                    </ItemList>
                  </>
                ) : (
                  <>
                    <ItemsTitle>Allocated Products:</ItemsTitle>
                    <ItemList>
                      {transaction.allocatedProducts && transaction.allocatedProducts.length > 0 ? (
                        transaction.allocatedProducts.map((item, itemIndex) => (
                          <Item key={item._id || itemIndex}>
                            <ItemDetails>
                              <span><strong>Name:</strong> {item.product?.name || 'Product Not Found'}</span>
                              <span><strong>Type:</strong> {item.product?.productType || 'Type Not Specified'}</span>
                              <span><strong>Weight:</strong> {item.product?.weightPerUnit && item.product?.weightUnit ? `${item.product.weightPerUnit} ${item.product.weightUnit}` : 'Weight Not Specified'}</span>
                            </ItemDetails>
                            <ItemQuantity>Quantity: {item.quantity !== undefined ? item.quantity : 'Not specified'}</ItemQuantity>
                          </Item>
                        ))
                      ) : (
                        <Item>No products allocated</Item>
                      )}
                    </ItemList>
                  </>
                )}
              </ItemSection>
              {transaction.status === 'pending' && (
                <ButtonContainer>
                  <ActionButton
                    className="accept-btn"
                    onClick={() => handleAcceptTransaction(transaction._id)}
                    disabled={processing[transaction._id]}
                    aria-label="Accept transaction"
                  >
                    {processing[transaction._id] === 'accepting' ? (
                      <>
                        <Spinner size="sm" /> Processing...
                      </>
                    ) : '✔ Accept'}
                  </ActionButton>
                  <ActionButton
                    className="reject-btn"
                    onClick={() => openRejectionDialog(transaction._id)}
                    disabled={processing[transaction._id]}
                    aria-label="Reject transaction"
                  >
                    ✖ Reject
                  </ActionButton>
                </ButtonContainer>
              )}
            </TransactionCard>
          );
        })}
        {currentRejectionId && (
          <RejectionModal>
            <ModalContent>
              <h3>Reason for Rejection</h3>
              <p>Please explain why you're rejecting this transaction:</p>
              <ModalTextarea
                value={rejectionReason}
                onChange={(e) => setRejectionReason(e.target.value)}
                placeholder="Enter rejection reason (required)..."
              />
              <ModalButtons>
                <ActionButton
                  className="cancel-btn"
                  onClick={() => setCurrentRejectionId(null)}
                >
                  Cancel
                </ActionButton>
                <ActionButton
                  className="reject-btn"
                  onClick={() => handleRejectTransaction(currentRejectionId)}
                  disabled={!rejectionReason || processing[currentRejectionId]}
                >
                  {processing[currentRejectionId] === 'rejecting' ? (
                    <>
                      <Spinner size="sm" /> Submitting...
                    </>
                  ) : 'Submit Rejection'}
                </ActionButton>
              </ModalButtons>
            </ModalContent>
          </RejectionModal>
        )}
        {totalPages > 1 && (
          <PaginationControls>
            <button
              onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
              disabled={currentPage === 1}
              aria-label="Previous page"
            >
              Previous
            </button>
            <span>Page {currentPage} of {totalPages}</span>
            <button
              onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
              disabled={currentPage === totalPages}
              aria-label="Next page"
            >
              Next
            </button>
          </PaginationControls>
        )}
      </TransactionContainer>
      <Footer />
    </>
  );
};

export default ListRequestsDonation;
</file>

<file path="sustainafood-frontend/src/pages/PersonalStatus.jsx">
import React, { useState, useEffect, useRef } from "react";
import { useAuth } from "../contexts/AuthContext";
import Navbar from "../components/Navbar";
import Footer from "../components/Footer";
import { Bar } from "react-chartjs-2";
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from "chart.js";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";
import logo from '../assets/images/logooo.png';
import styled, { keyframes } from 'styled-components';
import patternBg from "../assets/images/bg.png";

// Register Chart.js components
ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

// Animations
const fadeIn = keyframes`
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
`;

const float = keyframes`
  0% { transform: translateY(0px); }
  50% { transform: translateY(-15px); }
  100% { transform: translateY(0px); }
`;

const shimmer = keyframes`
  0% { background-position: -1000px 0; }
  100% { background-position: 1000px 0; }
`;

// Styled components
const StatsContainer = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background: #f0f8f0;
  padding: 40px 20px;
  font-family: 'Poppins', sans-serif;
`;

const StatsCard = styled.div`
  background: white;
  border-radius: 20px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  padding: 40px;
  max-width: 800px;
  width: 100%;
  margin: 20px;
  position: relative;
  animation: ${fadeIn} 0.8s ease-out forwards;
  z-index: 2;
  background: 
    linear-gradient(135deg, rgba(230, 242, 230, 0.9), rgba(220, 240, 220, 0.85)),
    url(${patternBg}) repeat center center;
  background-size: 200px 200px;

  &::before {
    content: '';
    position: absolute;
    top: -50px;
    right: -50px;
    width: 200px;
    height: 200px;
    border-radius: 50%;
    background: rgba(34, 139, 34, 0.1);
    z-index: 1;
  }

  &::after {
    content: '';
    position: absolute;
    bottom: -30px;
    left: 15%;
    width: 120px;
    height: 120px;
    border-radius: 50%;
    background: rgba(34, 139, 34, 0.08);
    z-index: 1;
  }
`;

const Titlee = styled.h1`
  font-size: 2.5rem;
  font-weight: 700;
  color: #1a7a1a;
  text-align: center;
  margin-bottom: 30px;
  position: relative;

  &::after {
    content: '';
    position: absolute;
    bottom: -12px;
    left: 50%;
    transform: translateX(-50%);
    width: 80px;
    height: 4px;
    background: linear-gradient(90deg, #228b22, #56ab2f);
    border-radius: 2px;
  }
`;

const StatsText = styled.p`
  font-size: 1.1rem;
  color: #3a5a3a;
  margin: 10px 0;
  line-height: 1.6;

  strong {
    color: #1a7a1a;
    font-weight: 600;
  }
`;

const ChartContainer = styled.div`
  width: 100%;
  max-width: 600px;
  margin: 20px auto;
  padding: 20px;
  background: #f9f9f9;
  border-radius: 15px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
`;

const DownloadButton = styled.button`
  display: block;
  margin: 30px auto;
  padding: 12px 30px;
  background: linear-gradient(135deg, #228b22, #56ab2f);
  color: white;
  border: none;
  border-radius: 30px;
  font-family: 'Poppins', sans-serif;
  font-size: 1.1rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 6px 15px rgba(34, 139, 34, 0.2);
  position: relative;
  overflow: hidden;
  animation: ${float} 6s ease-in-out infinite;

  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(34, 139, 34, 0.3);
  }

  &::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.3) 50%, rgba(255, 255, 255, 0) 100%);
    transform: rotate(30deg);
    animation: ${shimmer} 3s infinite;
    pointer-events: none;
  }
`;

const ErrorMessage = styled.p`
  font-size: 1.2rem;
  color: #e63946;
  text-align: center;
  margin: 20px 0;
`;

const LoadingMessage = styled.p`
  font-size: 1.2rem;
  color: #3a5a3a;
  text-align: center;
  margin: 20px 0;
`;

const PersonalStatus = () => {
  const { authUser } = useAuth();
  const user = JSON.parse(localStorage.getItem("user") || "null");
  const [userId, setUserId] = useState("");
  const isDonor = user?.role === "restaurant" || user?.role === "supermarket" || user?.role === "personaldonor";
  const isRecipient = user?.role === "ong" || user?.role === "student";

  const [statsData, setStatsData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const chartRef = useRef(null);

  useEffect(() => {
    if (authUser && (authUser._id || authUser.id)) {
      setUserId(authUser._id || authUser.id);
      console.log("userId depuis authUser:", authUser._id || authUser.id);
    } else if (user) {
      setUserId(user._id || user.id || "");
      console.log("userId depuis localStorage:", user._id || user.id);
    }
  }, [authUser]);

  useEffect(() => {
    const fetchPersonalStats = async () => {
      if (!userId) {
        setError("User ID is not available.");
        setLoading(false);
        return;
      }

      try {
        setLoading(true);
        const endpoint = isDonor
          ? `http://localhost:3000/donation/api/personal-stats/donor/${userId}`
          : `http://localhost:3000/donation/api/personal-stats/recipient/${userId}`;
        console.log("Fetching from:", endpoint);
        const response = await fetch(endpoint);
        if (!response.ok) {
          const text = await response.text();
          console.error("Response Error:", response.status, text);
          throw new Error(`Failed to fetch personal stats: ${response.status}`);
        }
        const data = await response.json();
        console.log("Données de l'API:", data);
        setStatsData(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    if (userId && (isDonor || isRecipient)) fetchPersonalStats();
  }, [userId, isDonor, isRecipient]);

  const chartData = statsData && 
    (isDonor ? statsData.weeklyAcceptedTrends?.length > 0 : statsData.weeklyRequestTrends?.length > 0)
    ? {
        labels: isDonor
          ? statsData.weeklyAcceptedTrends.map((t) => `Week ${t._id}`)
          : statsData.weeklyRequestTrends.map((t) => `Week ${t._id}`),
        datasets: [
          {
            label: isDonor ? "Accepted Donations per Week" : "Requests per Week",
            data: isDonor
              ? statsData.weeklyAcceptedTrends.map((t) => t.count)
              : statsData.weeklyRequestTrends.map((t) => t.count),
            backgroundColor: "#56ab2f",
            borderColor: "#228b22",
            borderWidth: 1,
          },
        ],
      }
    : null;

  const chartOptions = {
    responsive: true,
    plugins: {
      legend: {
        position: "top",
        labels: {
          font: {
            family: "'Poppins', sans-serif",
            size: 14,
          },
          color: "#3a5a3a",
        },
      },
      title: {
        display: true,
        text: isDonor ? "Weekly Accepted Donations" : "Weekly Requests",
        font: {
          family: "'Poppins', sans-serif",
          size: 20,
          weight: "600",
        },
        color: "#1a7a1a",
      },
    },
    scales: {
      y: {
        beginAtZero: true,
        ticks: {
          font: {
            family: "'Poppins', sans-serif",
            size: 12,
          },
          color: "#3a5a3a",
        },
      },
      x: {
        ticks: {
          font: {
            family: "'Poppins', sans-serif",
            size: 12,
          },
          color: "#3a5a3a",
        },
      },
    },
  };

  const downloadStatusReport = () => {
    const doc = new jsPDF({
      orientation: "portrait",
      unit: "mm",
      format: "a4",
    });

    const addHeader = () => {
      doc.setFillColor(240, 248, 240);
      doc.rect(0, 0, doc.internal.pageSize.width, 30, "F");
      const imgWidth = 25, imgHeight = 25;
      doc.addImage(logo, "PNG", 5, 5, imgWidth, imgHeight);
      doc.setDrawColor(34, 139, 34);
      doc.setLineWidth(1.5);
      doc.line(0, 30, doc.internal.pageSize.width, 30);
      doc.setFontSize(20);
      doc.setTextColor(26, 122, 26);
      doc.setFont("helvetica", "bold");
      doc.text("Personal Status Report", doc.internal.pageSize.width / 2, 15, { align: "center" });
      const today = new Date().toLocaleDateString("en-US", { year: "numeric", month: "long", day: "numeric" });
      doc.setFontSize(10);
      doc.setTextColor(58, 90, 58);
      doc.text(`Generated: ${today}`, doc.internal.pageSize.width - 50, 25);
    };

    const addFooter = (page, pageCount) => {
      doc.setDrawColor(200, 200, 200);
      doc.setLineWidth(0.5);
      doc.line(15, doc.internal.pageSize.height - 20, doc.internal.pageSize.width - 15, doc.internal.pageSize.height - 20);
      doc.setTextColor(120, 120, 120);
      doc.setFontSize(8);
      doc.setFont("helvetica", "normal");
      doc.text(`Page ${page} of ${pageCount}`, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 10, { align: "center" });
      doc.text("© SustainaFood", doc.internal.pageSize.width - 45, doc.internal.pageSize.height - 10);
    };

    addHeader();

    let position = 40;
    doc.setFontSize(12);
    doc.setTextColor(26, 122, 26);
    doc.setFont("helvetica", "bold");
    doc.text("Your Personal Statistics", 10, position);
    position += 10;

    doc.setFontSize(10);
    doc.setTextColor(58, 90, 58);
    doc.setFont("helvetica", "normal");
    if (isDonor && statsData) {
      doc.text(`Role: Donor (${user?.role})`, 10, position);
      position += 5;
      doc.text(`Accepted Donations: ${statsData.acceptedDonations || 0}`, 10, position);
      position += 5;
      doc.text(`Requests for Your Donations: ${statsData.requestsForDonations || 0}`, 10, position);
    } else if (isRecipient && statsData) {
      doc.text(`Role: Recipient (${user?.role})`, 10, position);
      position += 5;
      doc.text(`Total Requests Made: ${statsData.totalRequests || 0}`, 10, position);
      position += 5;
      doc.text(`Accepted Donations: ${statsData.acceptedDonations || 0}`, 10, position);
    }
    position += 10;

    if (chartData) {
      const chartCanvas = chartRef.current?.querySelector("canvas");
      if (chartCanvas) {
        html2canvas(chartCanvas, { scale: 2 }).then((canvas) => {
          const imgData = canvas.toDataURL("image/png");
          const imgWidth = 190;
          const chartImgHeight = (canvas.height * imgWidth) / canvas.width;

          if (position + chartImgHeight > 250) {
            doc.addPage();
            addHeader();
            position = 40;
          }

          doc.setFontSize(12);
          doc.setTextColor(26, 122, 26);
          doc.setFont("helvetica", "bold");
          doc.text("Weekly Activity", 10, position);
          position += 5;
          doc.addImage(imgData, "PNG", 10, position, imgWidth, chartImgHeight);
          position += chartImgHeight + 10;

          const pageCount = doc.internal.getNumberOfPages();
          for (let i = 1; i <= pageCount; i++) {
            doc.setPage(i);
            addFooter(i, pageCount);
          }

          const today = new Date();
          doc.save(`Personal_Status_Report_${today.toISOString().split("T")[0]}.pdf`);
        });
      }
    } else {
      const pageCount = doc.internal.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        addFooter(i, pageCount);
      }
      const today = new Date();
      doc.save(`Personal_Status_Report_${today.toISOString().split("T")[0]}.pdf`);
    }
  };

  if (loading) return <StatsContainer><LoadingMessage>Loading personal status...</LoadingMessage></StatsContainer>;
  if (error) return <StatsContainer><ErrorMessage>{error}</ErrorMessage></StatsContainer>;
  if (!isDonor && !isRecipient) return <StatsContainer><ErrorMessage>Access denied.</ErrorMessage></StatsContainer>;

  console.log("chartData avant rendu:", chartData);

  return (
    <>
      <Navbar />
      <StatsContainer>
        <StatsCard>
          <Titlee>{isDonor ? "Donor Personal Status" : "Recipient Personal Status"}</Titlee>
          {isDonor ? (
            <>
              <StatsText><strong>Role:</strong> Donor ({user?.role})</StatsText>
              <StatsText><strong>Accepted Donations:</strong> {statsData?.acceptedDonations || 0}</StatsText>
              <StatsText><strong>Requests for Your Donations:</strong> {statsData?.requestsForDonations || 0}</StatsText>
            </>
          ) : (
            <>
              <StatsText><strong>Role:</strong> Recipient ({user?.role})</StatsText>
              <StatsText><strong>Total Requests Made:</strong> {statsData?.totalRequests || 0}</StatsText>
              <StatsText><strong>Accepted Donations:</strong> {statsData?.acceptedDonations || 0}</StatsText>
            </>
          )}
          {chartData && (
            <ChartContainer ref={chartRef}>
              <Bar data={chartData} options={chartOptions} />
            </ChartContainer>
          )}
          <DownloadButton onClick={downloadStatusReport}>
            Download Status Report as PDF
          </DownloadButton>
        </StatsCard>
      </StatsContainer>
      <Footer />
    </>
  );
};

export default PersonalStatus;
</file>

<file path="sustainafood-backend/app.js">
var createError = require('http-errors');
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');
var cors = require('cors');
var mongoose = require('mongoose');
var productRouter=require('./routes/productRoutes');
var indexRouter = require('./routes/index');
var usersRouter = require('./routes/users');
var donationRouter = require('./routes/donationRoutes');
var authRouter = require('./routes/authRoutes'); // 🔹 Ajouter la route auth
var requestNeedRoutes = require('./routes/requestNeedRoutes');
var donationTransactionRoutes = require('./routes/donationTransactionRoutes');
var statsRoutes = require("./routes/statsRoutes"); // Importer les routes de statistiques
var app = express();
var notificationRoutes=require('./routes/notificationRoutes');
var feedbackRoutes=require('./routes/feedbackRoutes')
var deliveryRoutes=require('./routes/deliveryRoutes');
var contactRoutes=require('./routes/ContactSubmission');
const cron = require('node-cron');
const DonationRecommender = require('./aiService/mlModel');
var preductionRoutes = require('./routes/preductions');
// var passport = require("passport"); // ✅ Importer Passport
app.use(cors());
// View engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'twig');

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use("/uploads", express.static("uploads"));

// Enable CORS
app.use(cors());

// Routes
app.use('/', indexRouter);
app.use('/api/feedback', feedbackRoutes);
app.use('/api', preductionRoutes);
app.use('/users', usersRouter);
app.use('/deliveries', deliveryRoutes);
app.use('/product', productRouter);
app.use('/donation',donationRouter);
app.use('/contact', contactRoutes); // Route pour le formulaire de contact
app.use('/auth', authRouter); // 🔹 Ajouter la route d'authentification
app.use('/notification', notificationRoutes);
app.use('/donationTransaction', donationTransactionRoutes);
app.use('/request', requestNeedRoutes);
app.use('/stats', statsRoutes); // Utiliser les routes de statistiques
// Database Connection
if (process.env.NODE_ENV !== 'test') {//pour la db de test
var mongoConfig = require('./config/database.json');
app.use(cors());
mongoose.connect(mongoConfig.url)
  .then(() => console.log("✅ Connected to MongoDB"))
  .catch(err => console.error("❌ MongoDB connection error:", err));

mongoose.connection.once('open', () => {
  console.log(" MongoDB connection established successfully");
});
}
////////////////////////////////////////////////////////////////
//require("./config/passportConfig"); // Charger la config de Passport
// app.use(passport.initialize());
////////////////////////////////////////////
// Catch 404 and forward to error handler
app.use(function (req, res, next) {
  next(createError(404));
});

// Error handler
app.use(function (err, req, res, next) {
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  res.status(err.status || 500);
  res.render('error');
});



const authRoutes = require("./routes/authRoutes");
app.use("/auth", authRoutes);
////////////////////////////


const recommender = new DonationRecommender();

// Function to train the model
const trainModel = async () => {
  console.log('Training ML model...');
  try {
    await recommender.buildInteractionMatrix();
    recommender.train(10); // Train with 10 latent factors
    console.log('Model training completed.');
  } catch (error) {
    console.error('Error during model training:', error.message);
  }
};

// Step 6: Training and Maintenance
// Initial Training: Run when the server starts
trainModel();

// Schedule Model Updates: Run daily at midnight
cron.schedule('0 0 * * *', trainModel);

module.exports = app;
</file>

<file path="sustainafood-backend/docker-compose.yml">
version: '3.8'

services:
  db:
    image: mongo:4.2
    container_name: db
    restart: always
    environment:
      MONGO_INITDB_DATABASE: sustainafood
    ports:
      - "27017:27017" # Only needed if you want to access from host
    volumes:
      - mongo-data:/data/db
      - ./data/dump:/dump

  app:
    build: .
    image: localhost:8083/nodeapp:6.0
    container_name: back
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - db
    environment:
      - MONGODB_URI=mongodb://db:27017/sustainafood
    volumes:
      - .:/app
      - /app/node_modules

  front:
    image:  mariemtouzri1/soustaina_front:2
    ports:
      - "8070:80"

volumes:
  mongo-data:
</file>

<file path="sustainafood-backend/models/Delivery.js">
// models/Delivery.js
const mongoose = require('mongoose');

const deliverySchema = new mongoose.Schema({
  donationTransaction: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'DonationTransaction',
    required: true,
  },
  transporter: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    
  },
  pickupAddress: { type: String, required: true }, // Adresse lisible du donateur
  deliveryAddress: { type: String, required: true }, // Adresse lisible du bénéficiaire
  pickupCoordinates: {
    type: {
      type: String,
      enum: ['Point'],
      default: 'Point',
    },
    coordinates: {
      type: [Number], // [longitude, latitude]
      default: [0, 0],
    },
  },
  deliveryCoordinates: {
    type: {
      type: String,
      enum: ['Point'],
      default: 'Point',
    },
    coordinates: {
      type: [Number], // [longitude, latitude]
      default: [0, 0],
    },
  },
  status: { type: String, enum: ['accepted','pending', 'picked_up', 'in_progress', 'delivered', 'failed', null], default: null },
 
  
  createdAt: {
    type: Date,
    default: Date.now,
  },
  updatedAt: {
    type: Date,
    default: Date.now,
  },
});

// Ajouter un hook pour mettre à jour updatedAt lors des modifications
deliverySchema.pre('save', function (next) {
  this.updatedAt = Date.now();
  next();
});

module.exports = mongoose.model('Delivery', deliverySchema);
</file>

<file path="sustainafood-backend/models/User.js">
// models/User.js
const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const Counter = require('./Counter');

const Sexe = Object.freeze({
  MALE: 'male',
  FEMALE: 'female',
  OTHER: 'other'
});

const OngType = Object.freeze({
  ADVOCACY: 'advocacy',
  OPERATIONAL: 'operational',
  CHARITABLE: 'charitable',
  DEVELOPMENT: 'development',
  ENVIRONMENTAL: 'environmental',
  HUMAN_RIGHTS: 'human-rights',
  RELIEF: 'relief',
  RESEARCH: 'research',
  PHILANTHROPIC: 'philanthropic',
  SOCIAL_WELFARE: 'social_welfare',
  CULTURAL: 'cultural',
  FAITH_BASED: 'faith_based'
});

const VehiculeType = Object.freeze({
  CAR: 'car',
  MOTORBIKE: 'motorbike',
  BICYCLE: 'bicycle',
  VAN: 'van',
  TRUCK: 'truck',
  SCOOTER: 'scooter'
});

const Role = Object.freeze({
  ADMIN: 'admin',
  ONG: 'ong',
  RESTAURANT: 'restaurant',
  SUPERMARKET: 'supermarket',
  STUDENT: 'student',
  TRANSPORTER: 'transporter',
  PERSONALDONOR: 'personaldonor'
});

const userSchema = new Schema({
  licenseNumber: { type: String, match: [/^\d{8}$/, 'Invalid license number'] },
  description: { type: String },
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String },
  role: { type: String, enum: Object.values(Role) },
  id: { type: Number },
  phone: { type: Number },
  address: { type: String },
  photo: { type: String },
  age: { type: Number },
  sexe: { type: String, enum: Object.values(Sexe), default: null },
  vehiculeType: { type: String, enum: Object.values(VehiculeType), default: null },
  image_carte_etudiant: { type: String },
  num_cin: { type: String },
  id_fiscale: { type: String },
  type: { type: String, enum: Object.values(OngType) },
  taxReference: { type: String },
  isBlocked: { type: Boolean, default: false },
  resetCode: { type: String },
  isActive: { type: Boolean, default: true },
  resetCodeExpires: { type: Date },
  twoFACode: { type: String },
  twoFACodeExpires: { type: Date },
  is2FAEnabled: { type: Boolean, default: false },
  // Ajouts pour les chauffeurs

  isAvailable: { type: Boolean, default: true }, // Disponibilité du chauffeur
  location: {
    type: {
      type: String,
      enum: ['Point'],
      default: 'Point',
    },
    coordinates: {
      type: [Number], // [longitude, latitude]
      default: [0, 0],
    },
  },
});

// Index géospatial pour les recherches de localisation
userSchema.index({ currentLocation: '2dsphere' });

userSchema.pre('save', async function (next) {
  if (this.isNew) {
    try {
      const counter = await Counter.findOneAndUpdate(
        { _id: 'userId' },
        { $inc: { seq: 1 } },
        { new: true, upsert: true }
      );
      this.id = counter.seq;
    } catch (err) {
      return next(err);
    }
  }
  next();
});
userSchema.index({ location: '2dsphere' }); // Enable geospatial queries
const User = mongoose.model('User', userSchema);
module.exports = User;
</file>

<file path="sustainafood-frontend/Dockerfile">
# Étape 1 : Build de l'app
FROM node:20 AS build

WORKDIR /app
COPY . .
RUN npm install
RUN npm run build

# Étape 2 : Serveur Nginx pour servir le build
FROM nginx:alpine

# Copie du build dans Nginx
COPY --from=build /app/dist /usr/share/nginx/html

# Remplacement de la config nginx pour servir sur un sous-chemin si besoin
COPY nginx.conf /etc/nginx/conf.d/default.conf 
# C'est cette ligne qui est importante

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
</file>

<file path="sustainafood-frontend/src/api/deliveryService.js">
import axios from 'axios';

const API_URL = 'http://localhost:3000/deliveries';

// Retrieve JWT token from localStorage (adjust based on your auth storage method)
const getToken = () => localStorage.getItem('token') || '';

export const getTransporterDeliveries = async (transporterId) => {
  try {
    const response = await axios.get(`${API_URL}/transporter/${transporterId}`, {
      headers: {
        Authorization: `Bearer ${getToken()}`,
      },
    });
    return response;
  } catch (error) {
    throw error.response?.data || { message: 'Failed to fetch transporter deliveries' };
  }
};

export const updateDeliveryStatus = async (deliveryId, status) => {
  try {
    const response = await axios.put(
      `${API_URL}/${deliveryId}/status`,
      { status }, // Backend expects { status }
      {
        headers: {
          Authorization: `Bearer ${getToken()}`,
        },
      }
    );
    return response;
  } catch (error) {
    throw error.response?.data || { message: 'Failed to update delivery status' };
  }
};

export const getTransporterFeedbacks = async (transporterId) => {
  // Note: This endpoint is not defined in the provided backend routes.
  // Placeholder implementation; replace with actual endpoint when available.
  try {
    const response = await axios.get(`${API_URL}/feedbacks/transporter/${transporterId}`, {
      headers: {
        Authorization: `Bearer ${getToken()}`,
      },
    });
    return response;
  } catch (error) {
    throw error.response?.data || { message: 'Failed to fetch transporter feedbacks' };
  }
};

export const createDelivery = async (donationTransactionId) => {
  try {
    const response = await axios.post(
      `${API_URL}`,
      { donationTransaction: donationTransactionId },
      {
        headers: {
          Authorization: `Bearer ${getToken()}`,
        },
      }
    );
    return response;
  } catch (error) {
    throw error.response?.data || { message: 'Failed to create delivery' };
  }
};

export const assignTransporterToDelivery = async (deliveryId, transporterId) => {
  try {
    const response = await axios.put(
      `${API_URL}/${deliveryId}/assign`,
      { transporterId },
      {
        headers: {
          Authorization: `Bearer ${getToken()}`,
        },
      }
    );
    return response;
  } catch (error) {
    throw error.response?.data || { message: 'Failed to assign transporter' };
  }
};

export const getPendingDeliveries = async () => {
  try {
    const response = await axios.get(`${API_URL}/pending`, {
      headers: {
        Authorization: `Bearer ${getToken()}`,
      },
    });
    return response;
  } catch (error) {
    throw error.response?.data || { message: 'Failed to fetch pending deliveries' };
  }
};


export const getDeliveriesByTransporter = async (transporterId, status = '') => {
  try {
    const url = status
      ? `${API_URL}/transporter/${transporterId}?status=${status}`
      : `${API_URL}/transporter/${transporterId}`;
    const response = await axios.get(url, {
      headers: {
      },
    });
    return response;
  } catch (error) {
    throw error.response?.data || { message: 'Failed to fetch deliveries by transporter' };
  }
};

// New API call for accepting or refusing a delivery
export const acceptOrRefuseDelivery = async (deliveryId, action, transporterId) => {
  return await axios.post(`${API_URL}/${deliveryId}/accept-or-refuse`, {
    action,
    transporterId, // Send transporterId in the request body
  }, {
    headers: {
      Authorization: `Bearer ${localStorage.getItem('token')}`, // Ensure token is sent for authentication
    },
  });
};
// New API call for starting a delivery journey
export const startJourney = async (deliveryId, transporterId) => {
  try {
    const response = await axios.post(
      `${API_URL}/${deliveryId}/start-journey`,
      { transporterId }, // Send transporterId in the request body
      {
        headers: {
          Authorization: `Bearer ${getToken()}`, // Keep this for consistency, though not used without middleware
        },
      }
    );
    return response;
  } catch (error) {
    throw error.response?.data || { message: 'Failed to start journey' };
  }
};
export const getDeliveriesByDonorId = async (donorId, status = '') => {
  try {
    const url = status
      ? `${API_URL}/donor/${donorId}?status=${status}`
      : `${API_URL}/donor/${donorId}`;
    const response = await axios.get(url, {
      headers: {
      },
    });
    return response;
  } catch (error) {
    throw error.response?.data || { message: 'Failed to fetch deliveries by donor' };
  }
};

// New API call for fetching deliveries by recipient ID
export const getDeliveriesByRecipientId = async (recipientId, status = '') => {
  try {
    const url = status
      ? `${API_URL}/recipient/${recipientId}?status=${status}`
      : `${API_URL}/recipient/${recipientId}`;
    const response = await axios.get(url, {
      headers: {
      },
    });
    return response;
  } catch (error) {
    throw error.response?.data || { message: 'Failed to fetch deliveries by recipient' };
  }
};
</file>

<file path="sustainafood-frontend/src/api/userService.js">
import axios from "axios";

//const API_URL = import.meta.env.VITE_API_URL + "/users";
const API_URL = "http://localhost:3000"; // Ensure this matches your backend port
// 🔹 Créer un utilisateur
export const signupUser = async (userData) => {
  return await axios.post('http://localhost:3000/users/create', userData, {
    headers: {
      "Content-Type": "multipart/form-data",
    },
  });
};
export const getUserGamificationData = async (userId) => {
  console.log(`Fetching gamification data for userId: ${userId}`);
  try {
    const response = await axios.get(`http://localhost:3000/users/${userId}/gamification`);
    return response.data;
  } catch (error) {
    console.error('Error fetching gamification data:', error);
    throw error;
  }
};
export const createuser=async(userData)=>{
  return await axios.post('http://localhost:3000/users/createUser',userData)
}
export const userwinthemailandpss = async (userData) => {
    return await axios.post('http://localhost:3000/users/userwinthemailandpss', userData);
}
// 🔹 Récupérer tous les utilisateurs
export const getUsers = async () => {
  return axios.get(`http://localhost:3000/users/list`);
};

// 🔹 Récupérer un utilisateur par ID
export const getUserById = async (id) => {
  return axios.get(`http://localhost:3000/users/details/${id}`);
};

// 🔹 Mettre à jour un utilisateur
export const onUpdateDescription = async (id, description) => {
  return axios.put(`http://localhost:3000/users/updateDescription/${id}`, { description });
};
// 🔹 Mettre à jour un utilisateur
export const updateUser = async (id, userData) => {
  return axios.put(`http://localhost:3000/users/update/${id}`, userData, {
    headers: {
      "Content-Type": "multipart/form-data",
    },
  });
};
export const updateUserwithemail = async (id, userData) => {
  return axios.put(`http://localhost:3000/users/update/${id}`, userData, {
    headers: {
      "Content-Type": "multipart/form-data",
    },
  });
};

// 🔹 Supprimer un utilisateur
export const deleteUser = async (id) => {
  return axios.delete(`http://localhost:3000/users/delete/${id}`);
};

// 🔹 Connexion utilisateur
export const loginUser = async (userData) => {
    console.log("Données envoyées :", userData); // 🔹 Vérifie si les bonnes données sont envoyées
  
    return await axios.post("http://localhost:3000/users/login", userData, {
      headers: {
        "Content-Type": "application/json",
      },
    });
  };
export const deactivateAccount = async (userId, token) => {
  return axios.put(
    `http://localhost:3000/users/deactivate-account/${userId}`,
    {},
    {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    }
  );
};

export const getTransporters = async () => {
  return await axios.get(`http://localhost:3000/users/transporters`);
};

// 🔹 Toggle 2FA Status
export const toggle2FA = async (email) => {
  return await axios.post("http://localhost:3000/users/toggle-2fa", { email },    console.log("Données envoyées :", email),
  {
    headers: {
      "Content-Type": "application/json",
    },
  });
};
// userService.js

// 🔹 Validate 2FA Code
export const validate2FACode = async (data) => {
  const token = localStorage.getItem("token"); // Adjust if using a token
  try {
      const response = await axios.post(`${API_URL}/users/validate-2fa-code`, {
          email: data.email,
          twoFACode: data.twoFACode,
      }, {
          headers: token ? { Authorization: `Bearer ${token}` } : {},
      });
      console.log("API Response:", response); // Debug the response
      return response;
  } catch (error) {
      console.error("API Error:", error);
      throw error; // Re-throw to handle in the component
  }
};
export const changePassword = async (userId, currentPassword, newPassword) => {
  return axios.put(
    `http://localhost:3000/users/change-password/${userId}`, // <-- note the "/:id"
    { currentPassword, newPassword }, // No "userId" in body now
    {
      headers: {
        "Content-Type": "application/json",
      },
    }
  );
};
export const send2FACodeforsigninwithgoogle = async (email) => {
  return axios.post("http://localhost:3000/users/send2FACodeforsigninwithgoogle", { email });
};
export const updateTransporterLocation = async (transporterId, { location, address }) => {
  try {
    const response = await axios.put(
      `http://localhost:3000/users/${transporterId}/location`,
      { location, address }, // Send location as object (backend expects JSON)
      {
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
    return response.data;
  } catch (error) {
    console.error('updateTransporterLocation error:', error.response?.data || error.message);
    throw error.response?.data || { message: 'Failed to update transporter location' };
  }
};
export const updateTransporterAvailability = async (transporterId, isAvailable) => {
  try {
    const response = await axios.put(
      `http://localhost:3000/users/update-availability/${transporterId}`,
      { isAvailable },
      {
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
    return response;
  } catch (error) {
    console.error('Error updating availability:', error);
    throw error.response?.data || { message: 'Failed to update availability' };
  }
};
export const updateUserAvailability = async (userId, isAvailable) => {
  try {
    const response = await axios.put(
      `http://localhost:3000/users/updateuseravailability/${userId}`,
      { isAvailable },
      {
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
    return response;
  } catch (error) {
    console.error('Error updating user availability:', error);
    throw error.response?.data || { message: 'Failed to update user availability' };
  }
};
export const getAllAdvertisements = () =>
  axios.get('http://localhost:3000/users/advertisements', {
    headers: {
      Authorization: `Bearer ${localStorage.getItem('token')}`,
    },
  });

export const updateAdvertisementStatus = (adId, status) =>
  axios.put(
    `http://localhost:3000/users/advertisements/${adId}/status`,
    { status },
    {
      headers: {
        Authorization: `Bearer ${localStorage.getItem('token')}`,
      },
    }
  );
</file>

<file path="sustainafood-frontend/src/pages/AddDonation.jsx">
import React, { useState, useRef, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import Navbar from "../components/Navbar";
import Footer from "../components/Footer";
import "../assets/styles/AddDonation.css";
import logo from "../assets/images/LogoCh.png";
import Papa from "papaparse";
import { FaEdit, FaTrash, FaSave } from "react-icons/fa";
import { addDonation } from "../api/donationService";
import { createrequests } from "../api/requestNeedsService";
import { useAuth } from "../contexts/AuthContext";
import { useAlert } from "../contexts/AlertContext";
import LocationPicker from "../components/LocationPicker";

export const AddDonation = () => {
  const { authUser } = useAuth();
  const navigate = useNavigate();
  const fileInputRef = useRef(null);
  const mealsFileInputRef = useRef(null);
  const { showAlert } = useAlert();

  // Form states
  const [title, setTitle] = useState("");
  const [location, setLocation] = useState({
    type: 'Point',
    coordinates: [0, 0],
  });
  const [address, setAddress] = useState("");
  const [isMapOpen, setIsMapOpen] = useState(false);
  const [expirationDate, setExpirationDate] = useState("");
  const [type, setType] = useState("donation");
  const [category, setCategory] = useState("prepared_meals");
  const [description, setDescription] = useState("");
  const [numberOfMeals, setNumberOfMeals] = useState("");

  // Error handling
  const [error, setError] = useState(null);
  const [errors, setErrors] = useState({});

  // Products and Meals state
  const [products, setProducts] = useState([]);
  const [meals, setMeals] = useState([]);
  const [manualProducts, setManualProducts] = useState([
    {
      name: "",
      productType: "Canned_Goods",
      productDescription: "",
      weightPerUnit: "",
      weightUnit: "kg",
      weightUnitTotale: "kg",
      totalQuantity: "",
      image: "",
      status: "available",
    },
  ]);
  const [manualMeals, setManualMeals] = useState([
    {
      mealName: "",
      mealDescription: "",
      mealType: "Lunch",
      quantity: "",
      image: null,
      imagePreview: "",
    },
  ]);

  // Editing state
  const [editableRow, setEditableRow] = useState(null);
  const [editedItem, setEditedItem] = useState({});
  const [editableType, setEditableType] = useState(null);

  // Entry mode
  const [productEntryMode, setProductEntryMode] = useState("csv");
  const [mealsEntryMode, setMealsEntryMode] = useState("csv");

  // User data
  const user = JSON.parse(localStorage.getItem("user"));
  const [userid, setUserid] = useState();

  const isDonner = user?.role === "restaurant" || user?.role === "supermarket" || user?.role === "personaldonor";
  const isRecipient = user?.role === "ong" || user?.role === "student";

  const productTypes = [
    "Canned_Goods",
    "Dry_Goods",
    "Beverages",
    "Snacks",
    "Cereals",
    "Baked_Goods",
    "Condiments",
    "Vegetables",
    "Fruits",
    "Meat",
    "Fish",
    "Dairy",
    "Eggs",
    "Baby_Food",
    "Pet_Food",
    "Other",
  ];
  const weightUnits = ["kg", "g", "lb", "oz", "ml", "l"];
  const statuses = ["available", "pending", "reserved", "out_of_stock"];
  const mealTypes = ["Breakfast", "Lunch", "Dinner", "Snack", "Dessert", "Other"];

  useEffect(() => {
    const fetchUser = async () => {
      if (typeof user?.id === "number") {
        if (!user || !user._id) return;
        try {
          setUserid(user._id);
        } catch (error) {
          console.error("Backend Error:", error);
        }
      } else if (typeof user?.id === "string") {
        if (!user || !user.id) return;
        try {
          setUserid(user.id);
        } catch (error) {
          console.error("Backend Error:", error);
        }
      }
    };

    if (user && (user._id || user.id)) {
      fetchUser();
    }

    if (isDonner) setType("donation");
    else if (isRecipient) setType("request");
  }, [user, isDonner, isRecipient]);

  // Update numberOfMeals whenever manualMeals changes
  useEffect(() => {
    if (mealsEntryMode === "form" && isDonner) {
      const total = manualMeals.reduce(
        (sum, meal) => sum + (parseInt(meal.quantity) || 0),
        0
      );
      setNumberOfMeals(total || "");
    }
  }, [manualMeals, mealsEntryMode, isDonner]);

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      Papa.parse(file, {
        complete: (result) => {
          console.log("Parsed CSV Products:", result.data);
          setProducts(result.data);
        },
        header: true,
        skipEmptyLines: true,
      });
      showAlert("success", "Products uploaded successfully.");
    }
  };

  const handleFileUploadMeals = (event) => {
    const file = event.target.files[0];
    if (file) {
      Papa.parse(file, {
        complete: (result) => {
          const parsedMeals = result.data.map((meal) => ({
            ...meal,
            quantity: parseInt(meal.quantity) || 0,
            image: null,
            imagePreview: "",
          }));
          setMeals(parsedMeals);
          const total = parsedMeals.reduce(
            (sum, meal) => sum + (meal.quantity || 0),
            0
          );
          setNumberOfMeals(total || "");
          showAlert("success", "Meals uploaded successfully.");
        },
        header: true,
        skipEmptyLines: true,
      });
    }
  };

  const mapPredictionToMealType = (prediction) => {
    const lowerPrediction = prediction.toLowerCase();
    if (
      lowerPrediction.includes("breakfast") ||
      lowerPrediction.includes("pancake") ||
      lowerPrediction.includes("egg")
    ) {
      return "Breakfast";
    } else if (
      lowerPrediction.includes("lunch") ||
      lowerPrediction.includes("sandwich") ||
      lowerPrediction.includes("salad")
    ) {
      return "Lunch";
    } else if (
      lowerPrediction.includes("dinner") ||
      lowerPrediction.includes("pasta") ||
      lowerPrediction.includes("steak")
    ) {
      return "Dinner";
    } else if (
      lowerPrediction.includes("snack") ||
      lowerPrediction.includes("chips") ||
      lowerPrediction.includes("nuts")
    ) {
      return "Snack";
    } else if (
      lowerPrediction.includes("dessert") ||
      lowerPrediction.includes("cake") ||
      lowerPrediction.includes("ice cream")
    ) {
      return "Dessert";
    }
    return "Other";
  };

  const handleImageUpload = async (index, file, isCsv = false) => {
    if (!file) return;

    const imagePreview = URL.createObjectURL(file);

    let updatedMeals;
    if (isCsv) {
      updatedMeals = [...meals];
      updatedMeals[index] = { ...updatedMeals[index], image: null, imagePreview };
      setMeals(updatedMeals);
    } else {
      updatedMeals = [...manualMeals];
      updatedMeals[index] = { ...updatedMeals[index], image: null, imagePreview };
      setManualMeals(updatedMeals);
    }

    const formData = new FormData();
    formData.append("file", file);

    try {
      const response = await fetch("http://localhost:5000/analyze", {
        method: "POST",
        body: formData,
      });

      if (!response.ok) {
        throw new Error("Failed to analyze image");
      }

      const data = await response.json();
      console.log("Image Analysis Results:", data);

      const topPrediction = data[0]?.description || "";
      const confidence = data[0]?.confidence || 0;

      const mealName = topPrediction
        .replace(/_/g, " ")
        .replace(/\b\w/g, (c) => c.toUpperCase());
      const predictedMealType = mapPredictionToMealType(mealName);

      updatedMeals[index] = {
        ...updatedMeals[index],
        mealName,
        mealDescription: `Predicted as ${mealName} with ${Math.round(
          confidence * 100
        )}% confidence.`,
        mealType: predictedMealType,
        image: null,
        imagePreview,
      };

      if (isCsv) {
        setMeals(updatedMeals);
        const total = updatedMeals.reduce(
          (sum, meal) => sum + (parseInt(meal.quantity) || 0),
          0
        );
        setNumberOfMeals(total || "");
      } else {
        setManualMeals(updatedMeals);
        const total = updatedMeals.reduce(
          (sum, meal) => sum + (parseInt(meal.quantity) || 0),
          0
        );
        setNumberOfMeals(total || "");
      }

      showAlert("success", "Image analyzed and fields populated!");
    } catch (err) {
      console.error("Error analyzing image:", err);
      showAlert("error", "Failed to analyze image.");
    }
  };

  const validateForm = () => {
    let tempErrors = {};
    if (!title.trim()) tempErrors.title = "Title is required";
    else if (title.length < 3)
      tempErrors.title = "Title must be at least 3 characters long";

    if (
      location.coordinates[0] === 0 &&
      location.coordinates[1] === 0
    ) {
      tempErrors.location = "Please select a valid location on the map";
    }

    if (!expirationDate) tempErrors.expirationDate = "Expiration date is required";
    else if (new Date(expirationDate) < new Date())
      tempErrors.expirationDate = "Expiration date cannot be in the past";

    if (!description.trim()) tempErrors.description = "Description is required";
    else if (description.length < 10)
      tempErrors.description =
        "Description must be at least 10 characters long";

    if (category === "prepared_meals") {
      const parsedNumberOfMeals = parseInt(numberOfMeals, 10);
      if (
        !numberOfMeals ||
        isNaN(parsedNumberOfMeals) ||
        parsedNumberOfMeals <= 0
      ) {
        tempErrors.numberOfMeals =
          "Number of meals must be a valid positive integer";
      }
      console.log("isDonner", isDonner);
      if (isDonner) {
        if (mealsEntryMode === "csv" && meals.length === 0) {
          tempErrors.meals = "Meals list is required when uploading via CSV";
        } else if (mealsEntryMode === "form") {
          const invalidMeals = manualMeals.filter(
            (meal) =>
              !meal.mealName.trim() ||
              !meal.mealType ||
              !meal.mealDescription.trim() ||
              !meal.quantity ||
              parseInt(meal.quantity) <= 0
          );
          if (invalidMeals.length > 0) {
            tempErrors.meals =
              "All meals must have a name, type, description, and valid quantity";
          }
        }

        // Calculate total meals only for donors
        const totalMeals =
          mealsEntryMode === "form"
            ? manualMeals.reduce(
                (sum, meal) => sum + (parseInt(meal.quantity) || 0),
                0
              )
            : meals.reduce(
                (sum, meal) => sum + (parseInt(meal.quantity) || 0),
                0
              );

        if (totalMeals !== parsedNumberOfMeals && isDonner) {
          tempErrors.numberOfMeals = `Total quantity of meals (${totalMeals}) must match the number of meals (${parsedNumberOfMeals})`;
        }
      }
    }

    if (category === "packaged_products") {
      if (productEntryMode === "csv" && products.length === 0) {
        tempErrors.products = "Please upload a CSV file with products";
      } else if (productEntryMode === "form") {
        const invalidProducts = manualProducts.filter(
          (p) =>
            !p.name.trim() ||
            !p.productType ||
            !p.productDescription.trim() ||
            !p.weightPerUnit ||
            p.weightPerUnit <= 0 ||
            !p.totalQuantity ||
            p.totalQuantity <= 0
        );
        if (invalidProducts.length > 0) {
          tempErrors.products =
            "All products must have a name, type, description, weight per unit, and total quantity greater than 0";
        }
      }
    }

    setErrors(tempErrors);
    console.log("Validation Errors:", tempErrors);
    return Object.keys(tempErrors).length === 0;
  };

  const handleEditRow = (index, type) => {
    setEditableRow(index);
    setEditableType(type);
    setEditedItem(type === "products" ? { ...products[index] } : { ...meals[index] });
    showAlert("warning", `Editing ${type === "products" ? "product" : "meal"} row.`);
  };

  const handleRowInputChange = (e, key) => {
    const value =
      key === "quantity" || key === "weightPerUnit" || key === "totalQuantity"
        ? parseInt(e.target.value) || ""
        : e.target.value;
    setEditedItem((prev) => ({ ...prev, [key]: value }));
  };

  const handleSaveRow = (index) => {
    if (editableType === "products") {
      const updatedProducts = [...products];
      updatedProducts[index] = editedItem;
      setProducts(updatedProducts);
      showAlert("success", "Product updated successfully!");
    } else if (editableType === "meals") {
      const updatedMeals = [...meals];
      updatedMeals[index] = { ...editedItem, image: null };
      setMeals(updatedMeals);
      const total = updatedMeals.reduce(
        (sum, meal) => sum + (parseInt(meal.quantity) || 0),
        0
      );
      setNumberOfMeals(total || "");
      showAlert("success", "Meal updated successfully!");
    }
    setEditableRow(null);
    setEditedItem({});
    setEditableType(null);
  };

  const handleDeleteRow = (index, type) => {
    if (type === "products") {
      setProducts(products.filter((_, i) => i !== index));
      showAlert("success", "Product removed from list.");
    } else if (type === "meals") {
      const updatedMeals = meals.filter((_, i) => i !== index);
      setMeals(updatedMeals);
      const total = updatedMeals.reduce(
        (sum, meal) => sum + (parseInt(meal.quantity) || 0),
        0
      );
      setNumberOfMeals(total || "");
      showAlert("success", "Meal removed from list.");
    }
  };

  const handleDeleteList = (type) => {
    if (type === "products") {
      setProducts([]);
      showAlert("success", "Product list cleared.");
    } else if (type === "meals") {
      setMeals([]);
      setNumberOfMeals("");
      showAlert("success", "Meal list cleared.");
    }
  };

  const handleManualProductChange = (index, field, value) => {
    const updated = [...manualProducts];
    updated[index][field] =
      field === "totalQuantity" || field === "weightPerUnit"
        ? parseInt(value) || ""
        : value;
    setManualProducts(updated);
  };

  const handleManualMealChange = (index, field, value) => {
    const updated = [...manualMeals];
    updated[index][field] =
      field === "quantity" ? parseInt(value) || "" : value;
    setManualMeals(updated);
  };

  const handleAddManualProduct = () => {
    setManualProducts([
      ...manualProducts,
      {
        name: "",
        productType: "Canned_Goods",
        productDescription: "",
        weightPerUnit: "",
        weightUnit: "kg",
        weightUnitTotale: "kg",
        totalQuantity: "",
        image: "",
        status: "available",
      },
    ]);
    showAlert("success", "New product entry added.");
  };

  const handleAddManualMeal = () => {
    setManualMeals([
      ...manualMeals,
      {
        mealName: "",
        mealDescription: "",
        mealType: "Lunch",
        quantity: "",
        image: null,
        imagePreview: "",
      },
    ]);
    showAlert("success", "New meal entry added.");
  };

  const handleRemoveManualProduct = (index) => {
    setManualProducts(manualProducts.filter((_, i) => i !== index));
    showAlert("success", "Manual product removed.");
  };

  const handleRemoveManualMeal = (index) => {
    setManualMeals(manualMeals.filter((_, i) => i !== index));
    showAlert("success", "Manual meal removed.");
  };

  const handleLocationSelect = (selectedLocation, selectedAddress) => {
    setLocation(selectedLocation);
    setAddress(selectedAddress);
    setIsMapOpen(false);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) {
      console.log("Form validation failed. Errors:", errors);
      return;
    }

    const donationData = new FormData();
    donationData.append("title", title);
    donationData.append("location", JSON.stringify(location));
    donationData.append("address", address);
    donationData.append("expirationDate", expirationDate);
    donationData.append("description", description);
    donationData.append("category", category);
    donationData.append("created_at", new Date().toISOString());
    donationData.append("updated_at", new Date().toISOString());
    donationData.append("status", "pending");

    if (category === "prepared_meals") {
      donationData.append("numberOfMeals", numberOfMeals);
      if (isDonner) {
        const mealsToSend = mealsEntryMode === "form" ? manualMeals : meals;
        const formattedMeals = mealsToSend.map((meal) => ({
          mealName: meal.mealName,
          mealDescription: meal.mealDescription,
          mealType: meal.mealType,
          quantity: parseInt(meal.quantity),
        }));
        console.log("Formatted Meals to Send:", formattedMeals);
        donationData.append("meals", JSON.stringify(formattedMeals));
      }
    }

    if (category === "packaged_products") {
      const productsToSend = productEntryMode === "csv" ? products : manualProducts;
      if (isDonner) {
        const formattedProducts = productsToSend.map((product) => ({
          ...product,
          totalQuantity: parseInt(product.totalQuantity),
          weightPerUnit: parseFloat(product.weightPerUnit),
        }));
        console.log("Formatted Products to Send (Donor):", formattedProducts);
        donationData.append("products", JSON.stringify(formattedProducts));
      } else if (isRecipient) {
        const formattedRequestedProducts = productsToSend.map((product) => ({
          name: product.name,
          productType: product.productType,
          productDescription: product.productDescription,
          weightPerUnit: parseFloat(product.weightPerUnit),
          weightUnit: product.weightUnit,
          weightUnitTotale: product.weightUnitTotale,
          totalQuantity: parseFloat(product.totalQuantity),
          quantity: parseInt(product.totalQuantity),
          image: product.image,
          status: product.status,
        }));
        console.log(
          "Formatted Requested Products to Send (Recipient):",
          formattedRequestedProducts
        );
        donationData.append(
          "requestedProducts",
          JSON.stringify(formattedRequestedProducts)
        );
      }
    }

    try {
      let response;
      if (isDonner) {
        donationData.append("type", type);
        donationData.append("donor", userid);
        console.log("Sending Donation Data:", [...donationData.entries()]);
        response = await addDonation(donationData);
        console.log("Donation created successfully:", response.data);
        showAlert("success", "Donation created successfully!");
        window.history.back();
      } else if (isRecipient) {
        donationData.append("recipient", userid);
        console.log("Sending Request Data:", [...donationData.entries()]);
        response = await createrequests(donationData);
        console.log("Request created successfully:", response.data);
        showAlert("success", "Request created successfully!");
        window.history.back();
      }
    } catch (err) {
      console.error("Error creating donation/request:", err);
      const errorData = err.response?.data;
      if (
        errorData?.message === "Inappropriate language detected in submission" &&
        errorData?.badWordsDetected
      ) {
        const badWordsDetails = errorData.badWordsDetected
          .map(({ field, badWord }) => `${field}: "${badWord}"`)
          .join(", ");
        setError(`Inappropriate language detected: ${badWordsDetails}`);
        errorData.badWordsDetected.forEach(({ field, badWord }) => {
          showAlert(
            "error",
            `Inappropriate language detected in ${field}: "${badWord}"`
          );
        });
      } else {
        const errorMessage =
          errorData?.message ||
          "An error occurred while creating the donation/request.";
        setError(errorMessage);
        showAlert("error", errorMessage);
      }
    }
  };

  useEffect(() => {
    if (category !== "packaged_products") {
      setProducts([]);
      setManualProducts([
        {
          name: "",
          productType: "Canned_Goods",
          productDescription: "",
          weightPerUnit: "",
          weightUnit: "kg",
          weightUnitTotale: "kg",
          totalQuantity: "",
          image: "",
          status: "available",
        },
      ]);
    }
    if (category !== "prepared_meals") {
      setMeals([]);
      setManualMeals([
        {
          mealName: "",
          mealDescription: "",
          mealType: "Lunch",
          quantity: "",
          image: null,
          imagePreview: "",
        },
      ]);
      setNumberOfMeals("");
    }
  }, [category]);

  const descriptionCharCount = description.length;

  return (
    <>
      <Navbar />
      <div className="addDonation">
        {isMapOpen && <div className="addDonation-map-backdrop" onClick={() => setIsMapOpen(false)} />}
        <form className="addDonation-form" onSubmit={handleSubmit}>
          <img src={logo} alt="Logo" className="addDonation-logo" />
          <h1 className="addDonation-h1">
            {isDonner ? "Add Donation" : "Add Request Need"}
          </h1>

          <div className="addDonation-input-container">
            <input
              className="addDonation-input"
              type="text"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder=" "
              required
            />
            <label>Title</label>
            {errors.title && <p className="addDonation-error-message">{errors.title}</p>}
          </div>

          <div className="addDonation-input-Location">
            <input 
              className="addDonation-input"
              type="text"
              value={address}
              onChange={(e) => setAddress(e.target.value)}
              onClick={() => setIsMapOpen(true)}
              placeholder=" "
              readOnly
            />
            <label style={{  position: "relative"}}>Location</label>
            {isMapOpen && (
              <LocationPicker
                isOpen={isMapOpen}
                onClose={() => setIsMapOpen(false)}
                onLocationChange={setLocation}
                onAddressChange={setAddress}
                onSelect={handleLocationSelect}
                initialAddress={address}
              />
            )}
            {errors.location && <p className="addDonation-error-message">{errors.location}</p>}
          </div>

          <div className="addDonation-input-container">
            <input
              className="addDonation-input"
              type="date"
              value={expirationDate}
              onChange={(e) => setExpirationDate(e.target.value)}
              required
            />
            <label>Expiration Date</label>
            {errors.expirationDate && (
              <p className="addDonation-error-message">{errors.expirationDate}</p>
            )}
          </div>

          <div className="addDonation-input-container">
            <select
              className="addDonation-input"
              value={category}
              onChange={(e) => setCategory(e.target.value)}
            >
              <option value="prepared_meals">Prepared Meals</option>
              <option value="packaged_products">Packaged Products</option>
            </select>
            <label>Category</label>
          </div>

          {category === "prepared_meals" && (
            <div className="addDonation-input-container">
              <input
                className="addDonation-input"
                type="number"
                value={numberOfMeals}
                onChange={(e) => setNumberOfMeals(e.target.value)}
                placeholder=" "
                readOnly={isDonner}
                min="1"
                required
              />
              <label>Total Number of Meals</label>
              {errors.numberOfMeals && (
                <p className="addDonation-error-message">{errors.numberOfMeals}</p>
              )}
            </div>
          )}

          <div className="addDonation-input-container">
            <textarea
              className="addDonation-input"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder=" "
              required
            />
            <label>Description</label>
            <p
              className="addDonation-char-count"
              style={{
                display: "block",
                width: "100%",
                textAlign: "right",
                color: "gray",
              }}
            >
              [{descriptionCharCount}]
            </p>
            {errors.description && (
              <p className="addDonation-error-message">{errors.description}</p>
            )}
          </div>

          {category === "prepared_meals" && isDonner && (
            <>
              <div className="addDonation-radio-buttons-container" style={{ display: "flex" }}>
                <div className="addDonation-radio-button">
                  <input
                    name="radio-group-meals"
                    id="radio-csv-meals"
                    className="addDonation-radio-button__input"
                    type="radio"
                    checked={mealsEntryMode === "csv"}
                    onChange={() => setMealsEntryMode("csv")}
                  />
                  <label
                    htmlFor="radio-csv-meals"
                    className="addDonation-radio-button__label"
                  >
                    <span className="addDonation-radio-button__custom"></span>
                    CSV File
                  </label>
                </div>
                <div className="addDonation-radio-button">
                  <input
                    name="radio-group-meals"
                    id="radio-form-meals"
                    className="addDonation-radio-button__input"
                    type="radio"
                    checked={mealsEntryMode === "form"}
                    onChange={() => setMealsEntryMode("form")}
                  />
                  <label
                    htmlFor="radio-form-meals"
                    className="addDonation-radio-button__label"
                  >
                    <span className="addDonation-radio-button__custom"></span>
                    Form
                  </label>
                </div>
              </div>

              {mealsEntryMode === "csv" && meals.length === 0 && (
                <>
                  <input
                    ref={mealsFileInputRef}
                    type="file"
                    accept=".csv"
                    onChange={handleFileUploadMeals}
                    style={{ display: "none" }}
                  />
                  <button
                    type="button"
                    className="addDonation-container-btn-file"
                    onClick={() => mealsFileInputRef.current.click()}
                  >
                    <svg
                      fill="#fff"
                      xmlns="http://www.w3.org/2000/svg"
                      width="20"
                      height="20"
                      viewBox="0 0 50 50"
                    >
                      <path d="M 25 2 C 12.309295 2 2 12.309295 2 25 C 2 37.690705 12.309295 48 25 48 C 37.690705 48 48 37.690705 48 25 C 48 12.309295 37.690705 2 25 2 z M 25 4 C 36.609824 4 46 13.390176 46 25 C 46 36.609824 36.609824 46 25 46 C 13.390176 46 4 36.609824 4 25 C 4 13.390176 13.390176 4 25 4 z M 24 13 L 24 24 L 13 24 L 13 26 L 24 26 L 24 37 L 26 37 L 26 26 L 37 26 L 37 24 L 26 24 L 26 13 L 24 13 z" />
                    </svg>
                    Upload List of Meals
                  </button>
                  <span className="addDonation-file-name">
                    *The CSV for meals should contain: mealName,
                    mealDescription, mealType, and quantity.
                  </span>
                </>
              )}

              {mealsEntryMode === "csv" && meals.length > 0 && (
                <>
                  <p>
                    List of meals uploaded
                  </p>
                  <div className="addDonation-file-actions">
                    <FaEdit
                      className="AddDonation-fa-edit"
                      onClick={() => mealsFileInputRef.current.click()}
                    />
                    <FaTrash
                      className="addDonation-fa-trash"
                      onClick={() => handleDeleteList("meals")}
                    />
                  </div>
                  <table className="addDonation-product-table">
                    <thead>
                      <tr>
                        <th>Meal Name</th>
                        <th>Description</th>
                        <th>Type</th>
                        <th>Quantity</th>
                        <th>Image</th>
                        <th>Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      {meals.map((row, rowIndex) => (
                        <tr key={rowIndex}>
                          {editableRow === rowIndex &&
                          editableType === "meals" ? (
                            <>
                              <td>
                                <input
                                  value={editedItem.mealName || ""}
                                  onChange={(e) =>
                                    handleRowInputChange(e, "mealName")
                                  }
                                  className="addDonation-edit-input"
                                />
                              </td>
                              <td>
                                <input
                                  value={editedItem.mealDescription || ""}
                                  onChange={(e) =>
                                    handleRowInputChange(e, "mealDescription")
                                  }
                                  className="addDonation-edit-input"
                                />
                              </td>
                              <td>
                                <select
                                  value={editedItem.mealType || ""}
                                  onChange={(e) =>
                                    handleRowInputChange(e, "mealType")
                                  }
                                  className="addDonation-edit-input"
                                >
                                  {mealTypes.map((mt) => (
                                    <option key={mt} value={mt}>
                                      {mt}
                                    </option>
                                  ))}
                                </select>
                              </td>
                              <td>
                                <input
                                  type="number"
                                  value={editedItem.quantity || ""}
                                  onChange={(e) =>
                                    handleRowInputChange(e, "quantity")
                                  }
                                  className="addDonation-edit-input"
                                  min="1"
                                />
                              </td>
                              <td>
                                <input
                                  type="file"
                                  accept="image/*"
                                  onChange={(e) =>
                                    handleImageUpload(
                                      rowIndex,
                                      e.target.files[0],
                                      true
                                    )
                                  }
                                />
                                {editedItem.imagePreview && (
                                  <img
                                    src={editedItem.imagePreview}
                                    alt="Meal Preview"
                                    style={{
                                      width: "50px",
                                      height: "50px",
                                      objectFit: "cover",
                                    }}
                                  />
                                )}
                              </td>
                              <td>
                                <FaSave
                                  className="addDonation-fa-save"
                                  onClick={() => handleSaveRow(rowIndex)}
                                />
                              </td>
                            </>
                          ) : (
                            <>
                              <td>{row.mealName}</td>
                              <td>{row.mealDescription}</td>
                              <td>{row.mealType}</td>
                              <td>{row.quantity}</td>
                              <td>
                                <input
                                  type="file"
                                  accept="image/*"
                                  onChange={(e) =>
                                    handleImageUpload(
                                      rowIndex,
                                      e.target.files[0],
                                      true
                                    )
                                  }
                                />
                                {row.imagePreview && (
                                  <img
                                    src={row.imagePreview}
                                    alt="Meal Preview"
                                    style={{
                                      width: "50px",
                                      height: "50px",
                                      objectFit: "cover",
                                    }}
                                  />
                                )}
                              </td>
                              <td>
                                <FaEdit
                                  className="addDonation-fa-edit"
                                  onClick={() =>
                                    handleEditRow(rowIndex, "meals")
                                  }
                                  style={{
                                    color: "black",
                                    cursor: "pointer",
                                    fontSize: "20px",
                                  }}
                                />
                                <FaTrash
                                  className="addDonation-fa-trash"
                                  onClick={() =>
                                    handleDeleteRow(rowIndex, "meals")
                                  }
                                  style={{
                                    color: "red",
                                    cursor: "pointer",
                                    fontSize: "20px",
                                    marginLeft: "10px",
                                  }}
                                />
                              </td>
                            </>
                          )}
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </>
              )}

              {mealsEntryMode === "form" && (
                <div className="addDonation-manual-product-entry">
                  {manualMeals.map((meal, index) => (
                    <div key={index} className="addDonation-manual-product-row">
                      <div className="addDonation-input-container">
                        <input
                          type="text"
                          value={meal.mealName}
                          onChange={(e) =>
                            handleManualMealChange(
                              index,
                              "mealName",
                              e.target.value
                            )
                          }
                          className="addDonation-input"
                          placeholder=" "
                        />
                        <label>Meal Name</label>
                      </div>
                      <div className="addDonation-input-container">
                        <textarea
                          value={meal.mealDescription}
                          onChange={(e) =>
                            handleManualMealChange(
                              index,
                              "mealDescription",
                              e.target.value
                            )
                          }
                          className="addDonation-input"
                          placeholder=" "
                        />
                        <label>Meal Description</label>
                      </div>
                      <div className="addDonation-input-container">
                        <select
                          value={meal.mealType}
                          onChange={(e) =>
                            handleManualMealChange(
                              index,
                              "mealType",
                              e.target.value
                            )
                          }
                          className="addDonation-input"
                        >
                          {mealTypes.map((type) => (
                            <option key={type} value={type}>
                              {type}
                            </option>
                          ))}
                        </select>
                        <label>Meal Type</label>
                      </div>
                      <div className="addDonation-input-container">
                        <input
                          type="number"
                          value={meal.quantity}
                          onChange={(e) =>
                            handleManualMealChange(
                              index,
                              "quantity",
                              e.target.value
                            )
                          }
                          className="addDonation-input"
                          placeholder=" "
                          min="1"
                        />
                        <label>Quantity</label>
                      </div>
                      <div className="addDonation-input-container">
                        <input
                          type="file"
                          accept="image/*"
                          onChange={(e) =>
                            handleImageUpload(index, e.target.files[0])
                          }
                          className="addDonation-input"
                        />
                        <label>Image</label>
                        {meal.imagePreview && (
                          <img
                            src={meal.imagePreview}
                            alt="Meal Preview"
                            style={{
                              width: "100px",
                              height: "100px",
                              objectFit: "cover",
                            }}
                          />
                        )}
                      </div>
                      {manualMeals.length > 1 && (
                        <button
                          type="button"
                          onClick={() => handleRemoveManualMeal(index)}
                        >
                          Remove
                        </button>
                      )}
                    </div>
                  ))}
                  <button
                    type="button"
                    onClick={handleAddManualMeal}
                    className="addDonation-button"
                  >
                    Add Another Meal
                  </button>
                </div>
              )}
              {errors.meals && <p className="addDonation-error-message">{errors.meals}</p>}
            </>
          )}

          {category === "packaged_products" && (
            <>
              <div className="addDonation-radio-buttons-container">
                <div className="addDonation-radio-button">
                  <input
                    name="radio-group-products"
                    id="radio-csv-products"
                    className="addDonation-radio-button__input"
                    type="radio"
                    checked={productEntryMode === "csv"}
                    onChange={() => setProductEntryMode("csv")}
                  />
                  <label
                    htmlFor="radio-csv-products"
                    className="addDonation-radio-button__label"
                  >
                    <span className="addDonation-radio-button__custom"></span>CSV
                    File
                  </label>
                </div>
                <div className="addDonation-radio-button">
                  <input
                    name="radio-group-products"
                    id="radio-form-products"
                    className="addDonation-radio-button__input"
                    type="radio"
                    checked={productEntryMode === "form"}
                    onChange={() => setProductEntryMode("form")}
                  />
                  <label
                    htmlFor="radio-form-products"
                    className="addDonation-radio-button__label"
                  >
                    <span className="addDonation-radio-button__custom"></span>Form
                  </label>
                </div>
              </div>

              {productEntryMode === "csv" && products.length === 0 && (
                <>
                  <input
                    ref={fileInputRef}
                    type="file"
                    accept=".csv"
                    onChange={handleFileUpload}
                    style={{ display: "none" }}
                  />
                  <button
                    type="button"
                    className="addDonation-container-btn-file"
                    onClick={() => fileInputRef.current.click()}
                  >
                    <svg
                      fill="#fff"
                      xmlns="http://www.w3.org/2000/svg"
                      width="20"
                      height="20"
                      viewBox="0 0 50 50"
                    >
                      <path d="M 25 2 C 12.309295 2 2 12.309295 2 25 C 2 37.690705 12.309295 48 25 48 C 37.690705 48 48 37.690705 48 25 C 48 12.309295 37.690705 2 25 2 z M 25 4 C 36.609824 4 46 13.390176 46 25 C 46 36.609824 36.609824 46 25 46 C 13.390176 46 4 36.609824 4 25 C 4 13.390176 13.390176 4 25 4 z M 24 13 L 24 24 L 13 24 L 13 26 L 24 26 L 24 37 L 26 37 L 26 26 L 37 26 L 37 24 L 26 24 L 26 13 L 24 13 z" />
                    </svg>
                    Upload List of Products
                  </button>
                  <span className="addDonation-file-name">
                    *The CSV for products should contain: name, weightPerUnit,
                    totalQuantity, productDescription, status, productType,
                    weightUnit, and weightUnitTotale.
                  </span>
                </>
              )}

              {productEntryMode === "form" && (
                <div className="addDonation-manual-product-entry">
                  {manualProducts.map((product, index) => (
                    <div key={index} className="addDonation-manual-product-row">
                      <div className="addDonation-input-container">
                        <input
                          type="text"
                          value={product.name}
                          onChange={(e) =>
                            handleManualProductChange(index, "name", e.target.value)
                          }
                          className="addDonation-input"
                          placeholder=" "
                        />
                        <label>Product Name</label>
                      </div>
                      <div className="addDonation-input-container">
                        <select
                          className="addDonation-input"
                          value={product.productType}
                          onChange={(e) =>
                            handleManualProductChange(
                              index,
                              "productType",
                              e.target.value
                            )
                          }
                        >
                          {productTypes.map((pt) => (
                            <option key={pt} value={pt}>
                              {pt}
                            </option>
                          ))}
                        </select>
                        <label>Product Type</label>
                      </div>
                      <div className="addDonation-input-container">
                        <textarea
                          className="addDonation-input"
                          value={product.productDescription}
                          onChange={(e) =>
                            handleManualProductChange(
                              index,
                              "productDescription",
                              e.target.value
                            )
                          }
                          placeholder=" "
                        />
                        <label>Product Description</label>
                      </div>
                      <div className="addDonation-input-container">
                        <input
                          type="number"
                          value={product.weightPerUnit}
                          onChange={(e) =>
                            handleManualProductChange(
                              index,
                              "weightPerUnit",
                              e.target.value
                            )
                          }
                          className="addDonation-input"
                          placeholder=" "
                        />
                        <label>Weight Per Unit</label>
                      </div>
                      <div className="addDonation-input-container">
                        <select
                          className="addDonation-input"
                          value={product.weightUnit}
                          onChange={(e) =>
                            handleManualProductChange(
                              index,
                              "weightUnit",
                              e.target.value
                            )
                          }
                        >
                          {weightUnits.map((wu) => (
                            <option key={wu} value={wu}>
                              {wu}
                            </option>
                          ))}
                        </select>
                        <label>Weight Unit</label>
                      </div>
                      <div className="addDonation-input-container">
                        <select
                          className="addDonation-input"
                          value={product.weightUnitTotale}
                          onChange={(e) =>
                            handleManualProductChange(
                              index,
                              "weightUnitTotale",
                              e.target.value
                            )
                          }
                        >
                          {weightUnits.map((wu) => (
                            <option key={wu} value={wu}>
                              {wu}
                            </option>
                          ))}
                        </select>
                        <label>Total Weight Unit</label>
                      </div>
                      <div className="addDonation-input-container">
                        <input
                          type="number"
                          value={product.totalQuantity}
                          onChange={(e) =>
                            handleManualProductChange(
                              index,
                              "totalQuantity",
                              e.target.value
                            )
                          }
                          className="addDonation-input"
                          placeholder=" "
                        />
                        <label>Total Quantity</label>
                      </div>
                      {manualProducts.length > 1 && (
                        <button
                          type="button"
                          onClick={() => handleRemoveManualProduct(index)}
                        >
                          Remove
                        </button>
                      )}
                    </div>
                  ))}
                  <button
                    type="button"
                    onClick={handleAddManualProduct}
                    className="addDonation-button"
                  >
                    Add Another Product
                  </button>
                </div>
              )}

              {productEntryMode === "csv" && products.length > 0 && (
                <>
                  <p style={{color: "#8dc73f" }}>
                    List of products uploaded
                  </p>
                  <div className="addDonation-file-actions">
                    <FaEdit
                      className="addDonation-fa-edit"
                      onClick={() => fileInputRef.current.click()}
                    />
                    <FaTrash
                      className="addDonation-fa-trash"
                      onClick={() => handleDeleteList("products")}
                    />
                  </div>
                  <table className="addDonation-product-table">
                    <thead>
                      <tr>
                        {Object.keys(products[0]).map((key) => (
                          <th key={key}>{key}</th>
                        ))}
                        <th>Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      {products.map((row, rowIndex) => (
                        <tr key={rowIndex}>
                          {editableRow === rowIndex &&
                          editableType === "products" ? (
                            Object.keys(row).map((key) => (
                              <td key={key}>
                                {key === "productType" ? (
                                  <select
                                    value={editedItem[key] || ""}
                                    onChange={(e) => handleRowInputChange(e, key)}
                                    className="addDonation-edit-input"
                                  >
                                    {productTypes.map((pt) => (
                                      <option key={pt} value={pt}>
                                        {pt}
                                      </option>
                                    ))}
                                  </select>
                                ) : key === "weightUnit" ||
                                  key === "weightUnitTotale" ? (
                                  <select
                                    value={editedItem[key] || ""}
                                    onChange={(e) => handleRowInputChange(e, key)}
                                    className="addDonation-edit-input"
                                  >
                                    {weightUnits.map((wu) => (
                                      <option key={wu} value={wu}>
                                        {wu}
                                      </option>
                                    ))}
                                  </select>
                                ) : key === "status" ? (
                                  <select
                                    value={editedItem[key] || ""}
                                    onChange={(e) => handleRowInputChange(e, key)}
                                    className="addDonation-edit-input"
                                  >
                                    {statuses.map((status) => (
                                      <option key={status} value={status}>
                                        {status}
                                      </option>
                                    ))}
                                  </select>
                                ) : (
                                  <input
                                    type={
                                      key === "weightPerUnit" ||
                                      key === "totalQuantity"
                                        ? "number"
                                        : "text"
                                    }
                                    value={editedItem[key] || ""}
                                    onChange={(e) => handleRowInputChange(e, key)}
                                    className="addDonation-edit-input"
                                  />
                                )}
                              </td>
                            ))
                          ) : (
                            Object.values(row).map((value, colIndex) => (
                              <td key={colIndex}>{value}</td>
                            ))
                          )}
                          <td>
                            {editableRow === rowIndex &&
                            editableType === "products" ? (
                              <FaSave
                                className="addDonation-fa-save"
                                onClick={() => handleSaveRow(rowIndex)}
                              />
                            ) : (
                              <FaEdit
                                className="addDonation-fa-edit"
                                onClick={() => handleEditRow(rowIndex, "products")}
                                style={{
                                  color: "black",
                                  cursor: "pointer",
                                  fontSize: "20px",
                                }}
                              />
                            )}
                            <FaTrash
                              className="addDonation-fa-trash"
                              onClick={() => handleDeleteRow(rowIndex, "products")}
                              style={{
                                color: "red",
                                cursor: "pointer",
                                fontSize: "20px",
                                marginLeft: "10px",
                              }}
                            />
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </>
              )}

              {errors.products && <p className="addDonation-error-message">{errors.products}</p>}
            </>
          )}

          {error && <p className="addDonation-error-message">{error}</p>}
          <button type="submit" className="addDonation-button">
            Add
          </button>
        </form>
      </div>
      <Footer />
    </>
  );
};

export default AddDonation;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/Ad.jsx">
"use client"

import { useEffect, useState } from "react"
import Sidebar from "../../components/backoffcom/Sidebar"
import Navbar from "../../components/backoffcom/Navbar"
import { toast } from "react-toastify"

const Ad = () => {
  const [ads, setAds] = useState([])
  const [loading, setLoading] = useState(true)
  const [selectedAd, setSelectedAd] = useState(null)
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [activeTab, setActiveTab] = useState("all")

  useEffect(() => {
    fetchAds()
  }, [])

  const fetchAds = async () => {
    try {
      setLoading(true)
      const response = await fetch("http://localhost:3000/users/advertisements")
      const data = await response.json()
      if (response.ok) {
        setAds(data)
      } else {
        toast.error("Failed to fetch ads")
      }
    } catch (error) {
      console.error("Error fetching ads:", error)
      toast.error("Error fetching ads")
    } finally {
      setLoading(false)
    }
  }

  const handleStatusUpdate = async (adId, status) => {
    try {
      const response = await fetch(`http://localhost:3000/users/advertisements/${adId}/status`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ status }),
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || "Failed to update status")
      }

      toast.success(`Advertisement ${status} successfully`)
      fetchAds()
      setIsModalOpen(false)
    } catch (error) {
      console.error("Error updating ad status:", error)
      toast.error(error.message || "Error updating ad status")
    }
  }

  const openModal = (ad) => {
    setSelectedAd(ad)
    setIsModalOpen(true)
  }

  const closeModal = () => {
    setIsModalOpen(false)
    setSelectedAd(null)
  }

  const formatDate = (dateString) => {
    const date = new Date(dateString)
    return date.toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    })
  }

  const filteredAds = activeTab === "all" ? ads : ads.filter((ad) => ad.status === activeTab)

  const getStatusColor = (status) => {
    switch (status) {
      case "pending":
        return "status-pending"
      case "approved":
        return "status-approved"
      case "rejected":
        return "status-rejected"
      default:
        return ""
    }
  }

  return (
    <div className="admin-dashboard">
      <Sidebar />
      <div className="profile-container">
        <Navbar />

        <div className="dashboard-content">
          <div className="dashboard-header">
            <div>
              <h1 className="dashboard-title">Advertisement Management</h1>
              <p className="dashboard-subtitle">Review and manage advertisement submissions</p>
            </div>
            <button onClick={fetchAds} className="refresh-button">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
              Refresh
            </button>
          </div>

          <div className="ads-card">
            <div className="ads-card-header">
              <div className="ads-card-title">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                  <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                  <circle cx="8.5" cy="8.5" r="1.5"></circle>
                  <polyline points="21 15 16 10 5 21"></polyline>
                </svg>
                Advertisement Dashboard
              </div>
            </div>

            <div className="ads-tabs">
              <div className="tabs-list">
                <button
                  className={`tab-button ${activeTab === "all" ? "active" : ""}`}
                  onClick={() => setActiveTab("all")}
                >
                  All Ads
                </button>
                <button
                  className={`tab-button ${activeTab === "pending" ? "active pending" : ""}`}
                  onClick={() => setActiveTab("pending")}
                >
                  Pending
                </button>
                <button
                  className={`tab-button ${activeTab === "approved" ? "active approved" : ""}`}
                  onClick={() => setActiveTab("approved")}
                >
                  Approved
                </button>
                <button
                  className={`tab-button ${activeTab === "rejected" ? "active rejected" : ""}`}
                  onClick={() => setActiveTab("rejected")}
                >
                  Rejected
                </button>
              </div>

              <div className="tab-content">
                {loading ? (
                  <div className="loading-container">
                    <div className="loading-spinner"></div>
                  </div>
                ) : filteredAds.length === 0 ? (
                  <div className="empty-state">
                    <div className="empty-icon">
                      <svg width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                        <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                        <circle cx="8.5" cy="8.5" r="1.5"></circle>
                        <polyline points="21 15 16 10 5 21"></polyline>
                      </svg>
                    </div>
                    <h3 className="empty-title">No advertisements found</h3>
                    <p className="empty-description">
                      {activeTab === "all"
                        ? "There are no advertisements in the system."
                        : `There are no ${activeTab} advertisements.`}
                    </p>
                  </div>
                ) : (
                  <div className="ads-table-container">
                    <table className="ads-table">
                      <thead>
                        <tr>
                          <th>User</th>
                          <th>Status</th>
                          <th>Created At</th>
                          <th>Actions</th>
                        </tr>
                      </thead>
                      <tbody>
                        {filteredAds.map((ad) => (
                          <tr key={ad._id}>
                            <td>
                              <div className="user-cell">
                                <div className="user-avatar">
                                  <svg
                                    width="20"
                                    height="20"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    stroke="currentColor"
                                    strokeWidth="2"
                                  >
                                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                                    <circle cx="12" cy="7" r="4"></circle>
                                  </svg>
                                </div>
                                <div className="user-info">
                                  <div className="user-name">{ad.user?.name || "Unknown User"}</div>
                                  <div className="user-email">
                                    <svg
                                      width="12"
                                      height="12"
                                      viewBox="0 0 24 24"
                                      fill="none"
                                      stroke="currentColor"
                                      strokeWidth="2"
                                    >
                                      <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
                                      <polyline points="22,6 12,13 2,6"></polyline>
                                    </svg>
                                    {ad.user?.email || "N/A"}
                                  </div>
                                </div>
                              </div>
                            </td>
                            <td>
                              <span className={`status-badge ${getStatusColor(ad.status)}`}>
                                {ad.status === "pending" && (
                                  <svg
                                    width="16"
                                    height="16"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    stroke="currentColor"
                                    strokeWidth="2"
                                  >
                                    <circle cx="12" cy="12" r="10"></circle>
                                    <polyline points="12 6 12 12 16 14"></polyline>
                                  </svg>
                                )}
                                {ad.status === "approved" && (
                                  <svg
                                    width="16"
                                    height="16"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    stroke="currentColor"
                                    strokeWidth="2"
                                  >
                                    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                                    <polyline points="22 4 12 14.01 9 11.01"></polyline>
                                  </svg>
                                )}
                                {ad.status === "rejected" && (
                                  <svg
                                    width="16"
                                    height="16"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    stroke="currentColor"
                                    strokeWidth="2"
                                  >
                                    <circle cx="12" cy="12" r="10"></circle>
                                    <line x1="15" y1="9" x2="9" y2="15"></line>
                                    <line x1="9" y1="9" x2="15" y2="15"></line>
                                  </svg>
                                )}
                                {ad.status.charAt(0).toUpperCase() + ad.status.slice(1)}
                              </span>
                            </td>
                            <td className="date-cell">{formatDate(ad.createdAt)}</td>
                            <td>
                              <button onClick={() => openModal(ad)} className="view-button">
                                <svg
                                  width="16"
                                  height="16"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                  stroke="currentColor"
                                  strokeWidth="2"
                                >
                                  <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                                  <circle cx="12" cy="12" r="3"></circle>
                                </svg>
                                View
                              </button>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Modal for viewing ad details */}
      {isModalOpen && selectedAd && (
        <div className="modal-overlay" onClick={closeModal}>
          <div className="ad-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>Advertisement Details</h3>
              <button onClick={closeModal} className="close-button">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                  <line x1="18" y1="6" x2="6" y2="18"></line>
                  <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
              </button>
            </div>

            <div className="modal-body">
              <div className="modal-grid">
                <div className="modal-column">
                  <div className="info-section">
                    <h4 className="section-title">User Information</h4>
                    <div className="info-card">
                      <div className="user-profile">
                        <div className="user-avatar-large">
                          <svg
                            width="20"
                            height="20"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            strokeWidth="2"
                          >
                            <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                            <circle cx="12" cy="7" r="4"></circle>
                          </svg>
                        </div>
                        <div>
                          <div className="user-name-large">{selectedAd.user?.name || "Unknown User"}</div>
                          <div className="user-role">{selectedAd.user?.role || "N/A"}</div>
                        </div>
                      </div>

                      <div className="info-item">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                        >
                          <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
                          <polyline points="22,6 12,13 2,6"></polyline>
                        </svg>
                        <span>{selectedAd.user?.email || "N/A"}</span>
                      </div>

                      <div className="info-item">
                        <svg
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                        >
                          <circle cx="12" cy="12" r="10"></circle>
                          <polyline points="12 6 12 12 16 14"></polyline>
                        </svg>
                        <span>Created: {formatDate(selectedAd.createdAt)}</span>
                      </div>

                      <div className="info-item">
                        <span className={`status-badge ${getStatusColor(selectedAd.status)}`}>
                          {selectedAd.status === "pending" && (
                            <svg
                              width="16"
                              height="16"
                              viewBox="0 0 24 24"
                              fill="none"
                              stroke="currentColor"
                              strokeWidth="2"
                            >
                              <circle cx="12" cy="12" r="10"></circle>
                              <polyline points="12 6 12 12 16 14"></polyline>
                            </svg>
                          )}
                          {selectedAd.status === "approved" && (
                            <svg
                              width="16"
                              height="16"
                              viewBox="0 0 24 24"
                              fill="none"
                              stroke="currentColor"
                              strokeWidth="2"
                            >
                              <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                              <polyline points="22 4 12 14.01 9 11.01"></polyline>
                            </svg>
                          )}
                          {selectedAd.status === "rejected" && (
                            <svg
                              width="16"
                              height="16"
                              viewBox="0 0 24 24"
                              fill="none"
                              stroke="currentColor"
                              strokeWidth="2"
                            >
                              <circle cx="12" cy="12" r="10"></circle>
                              <line x1="15" y1="9" x2="9" y2="15"></line>
                              <line x1="9" y1="9" x2="15" y2="15"></line>
                            </svg>
                          )}
                          {selectedAd.status.charAt(0).toUpperCase() + selectedAd.status.slice(1)}
                        </span>
                      </div>
                    </div>
                  </div>

                  {selectedAd.status === "pending" && (
                    <div className="info-section">
                      <h4 className="section-title">Actions</h4>
                      <div className="info-card">
                        <div className="action-buttons">
                          <button
                            onClick={() => handleStatusUpdate(selectedAd._id, "approved")}
                            className="approve-button"
                          >
                            <svg
                              width="16"
                              height="16"
                              viewBox="0 0 24 24"
                              fill="none"
                              stroke="currentColor"
                              strokeWidth="2"
                            >
                              <path d="M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"></path>
                            </svg>
                            Approve
                          </button>
                          <button
                            onClick={() => handleStatusUpdate(selectedAd._id, "rejected")}
                            className="reject-button"
                          >
                            <svg
                              width="16"
                              height="16"
                              viewBox="0 0 24 24"
                              fill="none"
                              stroke="currentColor"
                              strokeWidth="2"
                            >
                              <path d="M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"></path>
                            </svg>
                            Reject
                          </button>
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                <div className="modal-column">
                  <div className="info-section">
                    <h4 className="section-title">Advertisement Image</h4>
                    <div className="image-card">
                      <div className="ad-image-container">
                        <img
                          src={`http://localhost:3000/${selectedAd.imagePath}`}
                          alt="Advertisement"
                          className="ad-image"
                        />
                      </div>
                      <div className="image-footer">
                        <div className="image-label">Advertisement Preview</div>
                        <span className="image-badge">Image</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      <style jsx>{`
        /* Base styles */
        .admin-dashboard {
          display: flex;
          min-height: 100vh;
          background: linear-gradient(to bottom right, #f0f8f0, #e9ecef);
        }

        .profile-container {
          flex: 1;
          display: flex;
          flex-direction: column;
        }

        .dashboard-content {
          flex: 1;
          padding: 24px;
        }

        /* Dashboard header */
        .dashboard-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 24px;
        }

        .dashboard-title {
          font-size: 28px;
          font-weight: 700;
          color: #1a7a1a;
          margin: 0;
          line-height: 1.2;
        }

        .dashboard-subtitle {
          color: #3a5a3a;
          margin-top: 4px;
          font-size: 14px;
        }

        .refresh-button {
          display: flex;
          align-items: center;
          gap: 8px;
          padding: 8px 16px;
          background-color: white;
          border: 1px solid #c8e6c9;
          border-radius: 6px;
          font-size: 14px;
          color: #1a7a1a;
          cursor: pointer;
          transition: all 0.2s;
        }

        .refresh-button:hover {
          background-color: #f1f8f1;
          border-color: #a5d6a7;
        }

        /* Card styles */
        .ads-card {
          background: white;
          border-radius: 12px;
          box-shadow: 0 4px 20px rgba(34, 139, 34, 0.08);
          overflow: hidden;
        }

        .ads-card-header {
          background: linear-gradient(to right, #228b22, #56ab2f);
          padding: 24px;
          color: white;
        }

        .ads-card-title {
          display: flex;
          align-items: center;
          gap: 12px;
          font-size: 18px;
          font-weight: 600;
        }

        /* Tabs */
        .ads-tabs {
          display: flex;
          flex-direction: column;
        }

        .tabs-list {
          display: flex;
          border-bottom: 1px solid #e8f5e9;
          padding: 0 24px;
        }

        .tab-button {
          padding: 16px 20px;
          background: none;
          border: none;
          font-size: 14px;
          font-weight: 500;
          color: #3a5a3a;
          cursor: pointer;
          position: relative;
          transition: color 0.2s;
        }

        .tab-button:hover {
          color: #1a7a1a;
        }

        .tab-button.active {
          color: #228b22;
          font-weight: 600;
        }

        .tab-button.active::after {
          content: '';
          position: absolute;
          bottom: -1px;
          left: 0;
          right: 0;
          height: 2px;
          background-color: #228b22;
        }

        .tab-button.active.pending {
          color: #f59e0b;
        }

        .tab-button.active.pending::after {
          background-color: #f59e0b;
        }

        .tab-button.active.approved {
          color: #228b22;
        }

        .tab-button.active.approved::after {
          background-color: #228b22;
        }

        .tab-button.active.rejected {
          color: #ef4444;
        }

        .tab-button.active.rejected::after {
          background-color: #ef4444;
        }

        /* Loading state */
        .loading-container {
          display: flex;
          justify-content: center;
          align-items: center;
          padding: 48px;
        }

        .loading-spinner {
          width: 40px;
          height: 40px;
          border: 4px solid rgba(34, 139, 34, 0.1);
          border-left-color: #228b22;
          border-radius: 50%;
          animation: spin 1s linear infinite;
        }

        @keyframes spin {
          to {
            transform: rotate(360deg);
          }
        }

        /* Empty state */
        .empty-state {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          padding: 48px;
          text-align: center;
        }

        .empty-icon {
          display: flex;
          align-items: center;
          justify-content: center;
          width: 64px;
          height: 64px;
          background-color: #e8f5e9;
          border-radius: 50%;
          color: #228b22;
          margin-bottom: 16px;
        }

        .empty-title {
          font-size: 18px;
          font-weight: 600;
          margin-bottom: 8px;
          color: #1a7a1a;
        }

        .empty-description {
          color: #3a5a3a;
          font-size: 14px;
        }

        /* Table styles */
        .ads-table-container {
          overflow-x: auto;
        }

        .ads-table {
          width: 100%;
          border-collapse: collapse;
          text-align: left;
        }

        .ads-table th {
          padding: 16px 24px;
          font-size: 12px;
          text-transform: uppercase;
          letter-spacing: 0.05em;
          font-weight: 600;
          color: #3a5a3a;
          background-color: #f1f8f1;
          border-bottom: 1px solid #e8f5e9;
        }

        .ads-table td {
          padding: 16px 24px;
          border-bottom: 1px solid #e8f5e9;
          vertical-align: middle;
        }

        .ads-table tr:hover {
          background-color: #f1f8f1;
        }

        /* User cell */
        .user-cell {
          display: flex;
          align-items: center;
          gap: 12px;
        }

        .user-avatar {
          display: flex;
          align-items: center;
          justify-content: center;
          width: 40px;
          height: 40px;
          background-color: #e0f2e0;
          color:rgb(0, 0, 0);
          border-radius: 50%;
          flex-shrink: 0;
        }

        .user-info {
          display: flex;
          flex-direction: column;
        }

        .user-name {
          font-weight: 500;
          color: #1a7a1a;
        }

        .user-email {
          display: flex;
          align-items: center;
          gap: 4px;
          font-size: 12px;
          color: #3a5a3a;
          margin-top: 2px;
        }

        /* Status badge */
        .status-badge {
          display: inline-flex;
          align-items: center;
          gap: 6px;
          padding: 6px 10px;
          border-radius: 9999px;
          font-size: 12px;
          font-weight: 500;
        }

        .status-pending {
          background-color:rgb(150, 150, 150);
          color:rgb(251, 255, 0);
          border: 1px solid #ffedd5;
        }

        .status-approved {
          background-color:rgb(83, 83, 83);
          color:rgb(210, 255, 74);
          border: 1px solidrgb(246, 255, 151);
        }

        .status-rejected {
          background-color: #fef2f2;
          color: #b91c1c;
          border: 1px solid #fee2e2;
        }

        /* Date cell */
        .date-cell {
          font-size: 13px;
          color: #3a5a3a;
        }

        /* View button */
        .view-button {
          display: inline-flex;
          align-items: center;
          gap: 6px;
          padding: 8px 12px;
          background-color:rgb(217, 249, 255);
          color:rgb(59, 114, 255);
          border: none;
          border-radius: 6px;
          font-size: 13px;
          font-weight: 500;
          cursor: pointer;
          transition: all 0.2s;
        }

        .view-button:hover {
          background-color: #c8e6c9;
        }

        /* Modal styles */
        .modal-overlay {
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background-color: rgba(0, 0, 0, 0.5);
          backdrop-filter: blur(4px);
          display: flex;
          justify-content: center;
          align-items: center;
          z-index: 1000;
        }

        .ad-modal {
          background: white;
          border-radius: 12px;
          width: 90%;
          max-width: 900px;
          max-height: 90vh;
          overflow-y: auto;
          box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }

        .modal-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 16px 24px;
          border-bottom: 1px solid #e8f5e9;
          position: sticky;
          top: 0;
          background: white;
          z-index: 10;
        }

        .modal-header h3 {
          margin: 0;
          font-size: 18px;
          font-weight: 600;
          color: #1a7a1a;
        }

        .close-button {
          display: flex;
          align-items: center;
          justify-content: center;
          width: 32px;
          height: 32px;
          border-radius: 50%;
          border: none;
          background: none;
          cursor: pointer;
          color: #3a5a3a;
          transition: all 0.2s;
        }

        .close-button:hover {
          background-color: #e8f5e9;
          color: #1a7a1a;
        }

        .modal-body {
          padding: 24px;
        }

        .modal-grid {
          display: grid;
          grid-template-columns: 1fr 1fr;
          gap: 24px;
        }

        @media (max-width: 768px) {
          .modal-grid {
            grid-template-columns: 1fr;
          }
        }

        .info-section {
          margin-bottom: 24px;
        }

        .section-title {
          font-size: 14px;
          font-weight: 500;
          color: #3a5a3a;
          margin-bottom: 12px;
        }

        .info-card {
          background-color: #f1f8f1;
          border-radius: 8px;
          padding: 16px;
        }

        .user-profile {
          display: flex;
          align-items: center;
          gap: 12px;
          margin-bottom: 16px;
        }

        .user-avatar-large {
          display: flex;
          align-items: center;
          justify-content: center;
          width: 48px;
          height: 48px;
          background-color: #e0f2e0;
          color:rgb(0, 0, 0);
          border-radius: 50%;
          flex-shrink: 0;
        }

        .user-name-large {
          font-weight: 600;
          color: #1a7a1a;
        }

        .user-role {
          font-size: 12px;
          color: #3a5a3a;
        }

        .info-item {
          display: flex;
          align-items: center;
          gap: 8px;
          margin-bottom: 12px;
          font-size: 13px;
          color: #3a5a3a;
        }

        .info-item:last-child {
          margin-bottom: 0;
        }

        /* Image card */
        .image-card {
          background-color: white;
          border-radius: 8px;
          overflow: hidden;
          border: 1px solid #e8f5e9;
        }

        .ad-image-container {
          aspect-ratio: 16/9;
          background-color: #f1f8f1;
          display: flex;
          align-items: center;
          justify-content: center;
        }

        .ad-image {
          max-width: 100%;
          max-height: 100%;
          object-fit: contain;
        }

        .image-footer {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 12px 16px;
          border-top: 1px solid #e8f5e9;
        }

        .image-label {
          font-size: 13px;
          color:rgb(88, 90, 58);
        }

        .image-badge {
          font-size: 12px;
          padding: 4px 8px;
          background-color: #f1f8f1;
          border-radius: 4px;
          color: #3a5a3a;
        }

        /* Action buttons */
        .action-buttons {
          display: flex;
          gap: 12px;
        }

        .approve-button, .reject-button {
          flex: 1;
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
          padding: 10px 16px;
          border-radius: 6px;
          font-weight: 500;
          cursor: pointer;
          transition: all 0.2s;
          border: none;
        }

        .approve-button {
          background-color: #228b22 !important;
          color: white;
        } 

        
        .reject-button {
          background-color: #ef4444 !important;
          color: white;
        }


        /* Responsive adjustments */
        @media (max-width: 768px) {
          .dashboard-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 16px;
          }

          .tabs-list {
            overflow-x: auto;
            padding: 0 16px;
          }

          .tab-button {
            padding: 16px 12px;
            white-space: nowrap;
          }

          .ads-table th, 
          .ads-table td {
            padding: 12px 16px;
          }

          .user-cell {
            flex-direction: column;
            align-items: flex-start;
            gap: 8px;
          }

          .user-avatar {
            margin-bottom: 4px;
          }
        }
      `}</style>
    </div>
  )
}

export default Ad
</file>

<file path="sustainafood-frontend/src/pages/backoffice/AdminProfile.jsx">
"use client"

import { useEffect, useState } from "react"
import Sidebar from "../../components/backoffcom/Sidebar"
import Navbar from "../../components/backoffcom/Navbar"
import "../../assets/styles/backoffcss/adminProfile.css" // Import the new CSS file
import { FaCamera, FaEdit, FaTimes, FaSave } from "react-icons/fa"
import { useAuth } from "../../contexts/AuthContext"
import { getUserById, updateUser } from "../../api/userService"

const AdminProfile = () => {
  const { user: authUser, token } = useAuth()
  const [admin, setAdmin] = useState({
    name: "",
    email: "",
    address: "",
    phone: "",
    photo: "",
  })
  const [profilePhotoFile, setProfilePhotoFile] = useState(null)
  const [isEditModalOpen, setIsEditModalOpen] = useState(false)
  const [editedData, setEditedData] = useState({ ...admin })
  const [errors, setErrors] = useState({})

  useEffect(() => {
    if (!token) {
      console.error("No token found. User is not authenticated.")
      return
    }
        const userId = authUser._id || authUser.id;
    const fetchUserData = async () => {
      try {
        if (!authUser || !authUser.id ) {
          console.error("⛔ authUser id is undefined!")
          return
        }
        const response = await getUserById(userId)
        const userData = response.data
        setAdmin({
          name: userData.name || "",
          email: userData.email || "",
          address: userData.address || "",
          phone: userData.phone || "",
          photo: userData.photo ? `http://localhost:3000/${userData.photo}` : "/src/assets/admin.jpg",
        })
      } catch (error) {
        console.error("❌ Backend Error:", error)
      }
    }
    fetchUserData()
  }, [authUser, token])

  const handleImageUpload = (event) => {
    const file = event.target.files[0]
    if (file) {
      setAdmin((prev) => ({
        ...prev,
        photo: URL.createObjectURL(file),
      }))
      setProfilePhotoFile(file)
    }
  }

  const handleSaveImage = async (e) => {
    e.preventDefault()
    try {
      if (!authUser || !authUser.id) {
        console.error("⛔ authUser id is undefined!")
        alert("User authentication error. Please log in again.")
        return
      }
      if (!profilePhotoFile) {
        alert("Please select an image to upload.")
        return
      }
      const formData = new FormData()
      formData.append("photo", profilePhotoFile)
      console.log("Uploading file:", formData.get("photo"))
      const response = await updateUser(authUser.id, formData)
      if (response.status === 200) {
        const updatedUser = response.data
        setAdmin((prev) => ({
          ...prev,
          photo: updatedUser.photo ? `http://localhost:3000/${updatedUser.photo}` : prev.photo,
        }))
        setProfilePhotoFile(null)
        alert("Profile image updated successfully!")
      } else {
        alert("Failed to update profile image. Status: " + response.status)
      }
    } catch (error) {
      console.error("❌ Error updating profile image:", error)
      alert("An error occurred while updating the profile image.")
    }
  }

  const openEditModal = () => {
    setEditedData({ ...admin })
    setErrors({})
    setIsEditModalOpen(true)
  }
  const closeModal = () => {
    setIsEditModalOpen(false)
    setErrors({})
  }

  const isValidEmail = (email) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    return emailRegex.test(email)
  }

  const isValidPhone = (phone) => {
    const phoneRegex = /^\+?[\d\s-]{7,}$/
    return phoneRegex.test(phone)
  }

  const validateFields = (data) => {
    const newErrors = {}

    if (!data.name) {
      newErrors.name = "Name is required."
    } else if (data.name.length < 2) {
      newErrors.name = "Name must be at least 2 characters."
    }

    if (!data.email) {
      newErrors.email = "Email is required."
    } else if (!isValidEmail(data.email)) {
      newErrors.email = "A valid email is required."
    }

    if (!data.address) {
      newErrors.address = "Address is required."
    }

    if (!data.phone) {
      newErrors.phone = "Phone number is required."
    } else if (!isValidPhone(data.phone)) {
      newErrors.phone = "Invalid phone number format (e.g., +1234567890)."
    }

    return newErrors
  }

  const handleSaveChanges = async () => {
    const validationErrors = validateFields(editedData)

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors)
      return
    }

    setErrors({})
    try {
      if (!authUser || !authUser.id) {
        console.error("⛔ authUser id is undefined!")
        alert("User authentication error. Please log in again.")
        return
      }
      const updatedData = {
        name: editedData.name,
        email: editedData.email,
        address: editedData.address,
        phone: editedData.phone,
      }
      const response = await updateUser(authUser.id, updatedData)
      if (response.status === 200) {
        setAdmin((prev) => ({
          ...prev,
          name: editedData.name,
          email: editedData.email,
          address: editedData.address,
          phone: editedData.phone,
        }))
        alert("Profile updated successfully!")
      } else {
        alert("Failed to update profile. Status: " + response.status)
      }
    } catch (error) {
      console.error("❌ Error updating profile:", error)
      alert("An error occurred while updating the profile.")
    } finally {
      closeModal()
    }
  }

  return (
    <div className="profAttachment-admin-dashboard">
      <Sidebar />
      <div className="profAttachment-profile-container">
        <Navbar />
        <div className="profAttachment-profile-header">
          <h2>My Profile</h2>
          <div className="profAttachment-profile-line"></div>
        </div>
        <div className="profAttachment-profile-card">
          <form onSubmit={handleSaveImage} className="profAttachment-profile-pic-container">
            <div className="profAttachment-profile-pic">
              <img src={admin.photo || "/placeholder.svg"} alt="Profile" />
              <label className="profAttachment-upload-icon">
                <FaCamera />
                <input type="file" accept="image/*" onChange={handleImageUpload} className="file-input" />
              </label>
            </div>
            <button type="submit" className="profAttachment-save-image-btn">
              <FaSave className="profAttachment-save-icon" /> Save Image
            </button>
          </form>
          <div>
            <h2>Name: {admin.name}</h2>
            <p>Email: {admin.email}</p>
            <p>Address: {admin.address}</p>
            <p>Phone Number: {admin.phone}</p>
          </div>
        </div>
        <div className="profAttachment-info-section">
          <div className="profAttachment-section-header">
            <h3>Personal Information</h3>
            <button className="profAttachment-edit-btn" onClick={openEditModal}>
              <FaEdit /> Edit
            </button>
          </div>
          <div className="profAttachment-profile-line"></div>
          <div className="profAttachment-info-grid">
            <div>
              <p className="profAttachment-label">Name</p>
              <p>{admin.name}</p>
            </div>
            <div>
              <p className="profAttachment-label">Email Address</p>
              <p>{admin.email}</p>
            </div>
            <div>
              <p className="profAttachment-label">Address</p>
              <p>{admin.address}</p>
            </div>
            <div>
              <p className="profAttachment-label">Phone Number</p>
              <p>{admin.phone}</p>
            </div>
          </div>
        </div>
        {isEditModalOpen && (
          <div className="profAttachment-modal-overlay">
            <div className="profAttachment-modal-content">
              <div className="profAttachment-modal-header">
                <h3>Edit Personal Information</h3>
                <button className="profAttachment-close-btn" onClick={closeModal}>
                  <FaTimes />
                </button>
              </div>
              <div className="profAttachment-modal-body">
                <label>Name</label>
                <input
                  type="text"
                  value={editedData.name}
                  onChange={(e) => setEditedData({ ...editedData, name: e.target.value })}
                />
                {errors.name && <p className="profAttachment-error">{errors.name}</p>}
                <label>Email Address</label>
                <input
                  type="email"
                  value={editedData.email}
                  onChange={(e) => setEditedData({ ...editedData, email: e.target.value })}
                />
                {errors.email && <p className="profAttachment-error">{errors.email}</p>}
                <label>Address</label>
                <input
                  type="text"
                  value={editedData.address}
                  onChange={(e) => setEditedData({ ...editedData, address: e.target.value })}
                />
                {errors.address && <p className="profAttachment-error">{errors.address}</p>}
                <label>Phone Number</label>
                <input
                  type="text"
                  value={editedData.phone}
                  onChange={(e) => setEditedData({ ...editedData, phone: e.target.value })}
                />
                {errors.phone && <p className="profAttachment-error">{errors.phone}</p>}
              </div>
              <div className="profAttachment-modal-footer">
                <button className="profAttachment-save-btn" onClick={handleSaveChanges}>
                  Save Changes
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default AdminProfile
</file>

<file path="sustainafood-frontend/src/pages/backoffice/DeliveryView.jsx">
import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axios from "axios";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import DeleveryMap from "../../components/DeleveryMap";
import "/src/assets/styles/backoffcss/transporterList.css";

// Styles adaptés pour le backoffice
const DeliveryViewContainer = {
    padding: "20px",
    maxWidth: "1000px",
    margin: "0 auto",
    background: "#fff",
    borderRadius: "8px",
    boxShadow: "0 2px 4px rgba(0, 0, 0, 0.1)",
};

const Title = {
    color: "#228b22",
    fontSize: "28px",
    marginBottom: "20px",
    textAlign: "center",
};

const Section = {
    marginBottom: "20px",
    padding: "15px",
    borderLeft: "4px solid #228b22",
    borderRadius: "5px",
    background: "#f8f9fa",
};

const ProfileInfo = {
    display: "flex",
    alignItems: "center",
    gap: "15px",
    marginBottom: "15px",
};

const ProfileImg = {
    width: "50px",
    height: "50px",
    borderRadius: "50%",
    objectFit: "cover",
    border: "2px solid #228b22",
};

const ProfileText = {
    margin: 0,
    fontSize: "16px",
    fontWeight: "bold",
    color: "#495057",
};

const Detail = {
    fontSize: "14px",
    color: "#495057",
    margin: "5px 0",
};

const Strong = {
    color: "#222",
    fontWeight: 600,
};

const ItemSection = {
    marginBottom: "15px",
};

const ItemsTitle = {
    fontSize: "16px",
    color: "#222",
    margin: "0 0 10px",
};

const ItemList = {
    listStyle: "none",
    padding: 0,
    display: "flex",
    flexDirection: "column",
    gap: "8px",
    marginTop: "10px",
};

const Item = {
    background: "#ffffff",
    padding: "10px",
    borderLeft: "3px solid #228b22",
    borderRadius: "5px",
    display: "flex",
    alignItems: "center",
    justifyContent: "space-between",
    boxShadow: "0 1px 3px rgba(0, 0, 0, 0.1)",
    fontSize: "14px",
};

const ItemDetails = {
    display: "flex",
    flexDirection: "column",
    flexGrow: 1,
};

const ItemDetailSpan = {
    display: "block",
    fontSize: "13px",
    color: "#333",
};

const ItemQuantity = {
    fontSize: "14px",
    fontWeight: "bold",
    color: "#d9534f",
    padding: "4px 8px",
    borderRadius: "4px",
};

const StatusBadge = {
    display: "inline-block",
    padding: "3px 8px",
    borderRadius: "12px",
    fontSize: "12px",
    fontWeight: "bold",
    marginLeft: "5px",
};

const statusStyles = {
    "no-status": { backgroundColor: "#e9ecef", color: "#495057" },
    pending: { backgroundColor: "#fff3cd", color: "#856404" },
    picked_up: { backgroundColor: "#e2e3e5", color: "#383d41" },
    in_progress: { backgroundColor: "#d4edda", color: "#155724" },
    delivered: { backgroundColor: "#cce5ff", color: "#004085" },
    failed: { backgroundColor: "#f8d7da", color: "#721c24" },
};

const ButtonContainer = {
    display: "flex",
    justifyContent: "center",
    marginTop: "15px",
};

const ActionButton = {
    padding: "10px 20px",
    border: "none",
    borderRadius: "5px",
    cursor: "pointer",
    fontSize: "16px",
    fontWeight: "bold",
    transition: "background 0.3s ease-in-out",
    backgroundColor: "#28a745",
    color: "white",
    margin: "0 10px",
};

const RouteInfo = {
    marginTop: "10px",
    padding: "10px",
    background: "#e9ecef",
    borderRadius: "5px",
    fontSize: "14px",
    color: "#333",
};

const LoadingMessage = {
    fontSize: "18px",
    color: "#555",
    textAlign: "center",
    padding: "40px",
};

const ErrorMessage = {
    fontSize: "18px",
    color: "#d32f2f",
    textAlign: "center",
    padding: "40px",
};

const DeliveryView = () => {
    const { id } = useParams();
    const navigate = useNavigate();
    const [delivery, setDelivery] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [isMapOpen, setIsMapOpen] = useState(false);
    const [routeInfo, setRouteInfo] = useState(null);
    const [transporterLocation, setTransporterLocation] = useState({ type: "Point", coordinates: [0, 0] });

    // Fetch delivery details
    useEffect(() => {
        const fetchDelivery = async () => {
            try {
                setLoading(true);
                const token = localStorage.getItem("token");
                if (!token) {
                    throw new Error("Please log in to view delivery details");
                }

                const response = await axios.get(`http://localhost:3000/deliveries/${id}`);
                const deliveryData = response.data.data;

                if (!deliveryData) {
                    throw new Error("Delivery not found");
                }

                // Fetch donor and recipient details if needed
                const donation = deliveryData.donationTransaction?.donation || {};
                const requestNeed = deliveryData.donationTransaction?.requestNeed || {};

                let donor = donation.donor || { name: "Unknown Donor", phone: "Not provided", photo: null };
                if (donation.donor && typeof donation.donor === "object" && donation.donor._id) {
                    try {
                        const donorRes = await axios.get(`http://localhost:3000/users/details/${donation.donor._id}`);
                        donor = donorRes.data || donor;
                    } catch (err) {
                        console.error(`Failed to fetch donor ${donation.donor._id}:`, err);
                    }
                }

                let recipient = requestNeed.recipient || { name: "Unknown Recipient", phone: "Not provided", photo: null };
                if (requestNeed.recipient && typeof requestNeed.recipient === "object" && requestNeed.recipient._id) {
                    try {
                        const recipientRes = await axios.get(`http://localhost:3000/users/details/${requestNeed.recipient._id}`);
                        recipient = recipientRes.data || recipient;
                    } catch (err) {
                        console.error(`Failed to fetch recipient ${requestNeed.recipient._id}:`, err);
                    }
                }

                // Fetch transporter details (assuming delivery has transporterId)
                let transporter = { location: { type: "Point", coordinates: [0, 0] } };
                if (deliveryData.transporterId) {
                    try {
                        const transporterRes = await axios.get(`http://localhost:3000/users/details/${deliveryData.transporterId}`);
                        transporter = transporterRes.data || transporter;
                    } catch (err) {
                        console.error(`Failed to fetch transporter ${deliveryData.transporterId}:`, err);
                    }
                }

                setTransporterLocation(transporter.location || { type: "Point", coordinates: [0, 0] });

                // Enrich delivery data
                const enrichedDelivery = {
                    ...deliveryData,
                    donationTransaction: {
                        ...deliveryData.donationTransaction,
                        donation: { ...donation, donor },
                        requestNeed: { ...requestNeed, recipient },
                    },
                    pickupCoordinates: deliveryData.pickupCoordinates || { type: "Point", coordinates: [0, 0] },
                    deliveryCoordinates: deliveryData.deliveryCoordinates || { type: "Point", coordinates: [0, 0] },
                };

                setDelivery(enrichedDelivery);
            } catch (err) {
                console.error("Fetch error:", err);
                setError(err.message || "Failed to fetch delivery details");
            } finally {
                setLoading(false);
            }
        };

        fetchDelivery();
    }, [id]);

    // Calculate route using OSRM
    const calculateRoute = async () => {
        if (!delivery) return;

        try {
            const pickupCoords = delivery.pickupCoordinates;
            const deliveryCoords = delivery.deliveryCoordinates;

            if (
                transporterLocation.coordinates[0] === 0 ||
                pickupCoords.coordinates[0] === 0 ||
                deliveryCoords.coordinates[0] === 0
            ) {
                setRouteInfo({ error: "Invalid coordinates" });
                return;
            }

            // Route from transporter to pickup
            const toPickupUrl = `http://router.project-osrm.org/route/v1/driving/${transporterLocation.coordinates[0]},${transporterLocation.coordinates[1]};${pickupCoords.coordinates[0]},${pickupCoords.coordinates[1]}?overview=full&geometries=geojson`;
            const toPickupRes = await axios.get(toPickupUrl);
            const toPickupRoute = toPickupRes.data.routes[0];
            const toPickupDuration = toPickupRoute.duration / 60; // Convert seconds to minutes
            const toPickupDistance = toPickupRoute.distance / 1000; // Convert meters to kilometers

            // Route from pickup to delivery
            const toDeliveryUrl = `http://router.project-osrm.org/route/v1/driving/${pickupCoords.coordinates[0]},${pickupCoords.coordinates[1]};${deliveryCoords.coordinates[0]},${deliveryCoords.coordinates[1]}?overview=full&geometries=geojson`;
            const toDeliveryRes = await axios.get(toDeliveryUrl);
            const toDeliveryRoute = toDeliveryRes.data.routes[0];
            const toDeliveryDuration = toDeliveryRoute.duration / 60; // Convert seconds to minutes
            const toDeliveryDistance = toDeliveryRoute.distance / 1000; // Convert meters to kilometers

            setRouteInfo({
                toPickup: { duration: toPickupDuration, distance: toPickupDistance, geometry: toPickupRoute.geometry },
                toDelivery: { duration: toDeliveryDuration, distance: toDeliveryDistance, geometry: toDeliveryRoute.geometry },
            });
        } catch (err) {
            console.error("Failed to calculate route:", err);
            setRouteInfo({ error: "Failed to calculate route" });
        }
    };

    const handleOpenMap = () => {
        setIsMapOpen(true);
        calculateRoute();
    };

    if (loading) return <div style={LoadingMessage}>Loading...</div>;

    if (error) return <div style={ErrorMessage}>Error: {error}</div>;

    if (!delivery) return <div style={ErrorMessage}>Delivery not found</div>;

    const donation = delivery.donationTransaction?.donation || {};
    const recipient = delivery.donationTransaction?.requestNeed?.recipient || {};
    const donor = donation.donor || {};
    const userPhoto = recipient.photo ? `http://localhost:3000/${recipient.photo}` : "/src/assets/User_icon_2.svg.png";

    return (
        <div className="dashboard-container">
            <Sidebar />
            <div className="dashboard-content">
                <Navbar />
                <div style={DeliveryViewContainer}>
                    <h1 style={Title}>Delivery Details 🚚</h1>

                    <div style={Section}>
                        <div style={ProfileInfo}>
                            <img
                                src={userPhoto}
                                alt="Recipient Profile"
                                style={ProfileImg}
                                onError={(e) => (e.target.src = "/src/assets/User_icon_2.svg.png")}
                            />
                            <p style={ProfileText}>Recipient: {recipient.name || "Unknown Recipient"}</p>
                        </div>
                        <div>
                            <p style={Detail}><span style={Strong}>Delivery ID:</span> {delivery._id}</p>
                            <p style={Detail}><span style={Strong}>Donation Title:</span> {donation.title || "Untitled"}</p>
                            <p style={Detail}><span style={Strong}>Pickup Address:</span> {delivery.pickupAddress || "Not specified"}</p>
                            <p style={Detail}><span style={Strong}>Delivery Address:</span> {delivery.deliveryAddress || "Not specified"}</p>
                            <p style={Detail}><span style={Strong}>Donor Name:</span> {donor.name || "Unknown Donor"}</p>
                            <p style={Detail}><span style={Strong}>Donor Phone:</span> {donor.phone || "Not provided"}</p>
                            <p style={Detail}><span style={Strong}>Recipient Phone:</span> {recipient.phone || "Not provided"}</p>
                            <p style={Detail}><span style={Strong}>Transporter Name:</span> {delivery.transporter?.name || "Not provided"}</p>

                            <p style={Detail}>
                                <span style={Strong}>Status:</span>{" "}
                                <span
                                    style={{
                                        ...StatusBadge,
                                        ...(statusStyles[delivery.status || "no-status"] || statusStyles["no-status"]),
                                    }}
                                >
                                    {delivery.status || "No Status"}
                                </span>
                            </p>
                        </div>
                    </div>

                    <div style={ItemSection}>
                        <h4 style={ItemsTitle}>Allocated Items:</h4>
                        <ul style={ItemList}>
                            <li style={Item}>
                                <div style={ItemDetails}>
                                    <span style={ItemDetailSpan}><strong>Title:</strong> {donation.title || "Untitled"}</span>
                                    <span style={ItemDetailSpan}><strong>Category:</strong> {donation.category || "Not specified"}</span>
                                </div>
                                <span style={ItemQuantity}>1 item</span>
                            </li>
                        </ul>
                    </div>

                    {routeInfo && (
                        <div style={RouteInfo}>
                            {routeInfo.error ? (
                                <p>Error: {routeInfo.error}</p>
                            ) : (
                                <>
                                    <p><strong>To Pickup:</strong> {routeInfo.toPickup.distance.toFixed(2)} km, {routeInfo.toPickup.duration.toFixed(2)} mins</p>
                                    <p><strong>To Delivery:</strong> {routeInfo.toDelivery.distance.toFixed(2)} km, {routeInfo.toDelivery.duration.toFixed(2)} mins</p>
                                </>
                            )}
                        </div>
                    )}

                    <div style={ButtonContainer}>
                        <button
                            style={ActionButton}
                            onClick={handleOpenMap}
                        >
                            View Map
                        </button>
                        <button
                            style={{ ...ActionButton, backgroundColor: "#007bff" }}
                            onClick={() => navigate("/Delivery")}
                        >
                            Back to List
                        </button>
                    </div>

                    {isMapOpen && (
                        <DeleveryMap
                            isOpen={isMapOpen}
                            onClose={() => setIsMapOpen(false)}
                            onLocationChange={() => {}}
                            onAddressChange={() => {}}
                            onSelect={() => {}}
                            initialAddress={delivery.pickupAddress}
                            pickupCoordinates={delivery.pickupCoordinates}
                            deliveryCoordinates={delivery.deliveryCoordinates}
                            transporterCoordinates={transporterLocation}
                            donorName={donor.name}
                            recipientName={recipient.name}
                            transporterName={delivery.transporterId ? "Transporter" : "Unknown Transporter"}
                        />
                    )}
                </div>
            </div>
        </div>
    );
};

export default DeliveryView;
</file>

<file path="sustainafood-frontend/src/pages/PreductionForDonor.jsx">
import React, { useState, useEffect, useRef } from "react";
import { useAuth } from "../contexts/AuthContext";
import Navbar from "../components/Navbar";
import Footer from "../components/Footer";
import { Line } from "react-chartjs-2";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";
import logo from '../assets/images/logooo.png';
import axios from 'axios';
import { Chart as ChartJS, CategoryScale, LinearScale, LineElement, PointElement, Title, Tooltip, Legend } from 'chart.js';
import styled, { keyframes } from 'styled-components';
import patternBg from "../assets/images/bg.png";

// Register Chart.js components
ChartJS.register(CategoryScale, LinearScale, LineElement, PointElement, Title, Tooltip, Legend);

// Animations
const fadeIn = keyframes`
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
`;

const float = keyframes`
  0% { transform: translateY(0px); }
  50% { transform: translateY(-15px); }
  100% { transform: translateY(0px); }
`;

const shimmer = keyframes`
  0% { background-position: -1000px 0; }
  100% { background-position: 1000px 0; }
`;

// Styled components
const ForecastContainer = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background: #f0f8f0;
  padding: 40px 20px;
  font-family: 'Poppins', sans-serif;
`;

const ForecastCard = styled.div`
  background: white;
  border-radius: 20px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  padding: 40px;
  max-width: 1300px;
  width: 100%;
  margin: 20px;
  position: relative;
  animation: ${fadeIn} 0.8s ease-out forwards;
  z-index: 2;
  background: 
    linear-gradient(135deg, rgba(230, 242, 230, 0.9), rgba(220, 240, 220, 0.85)),
    url(${patternBg}) repeat center center;
  background-size: 200px 200px;

  &::before {
    content: '';
    position: absolute;
    top: -50px;
    right: -50px;
    width: 200px;
    height: 200px;
    border-radius: 50%;
    background: rgba(34, 139, 34, 0.1);
    z-index: 1;
  }

  &::after {
    content: '';
    position: absolute;
    bottom: -30px;
    left: 15%;
    width: 120px;
    height: 120px;
    border-radius: 50%;
    background: rgba(34, 139, 34, 0.08);
    z-index: 1;
  }
`;

const Titlee = styled.h1`
  font-size: 2.5rem;
  font-weight: 700;
  color: #1a7a1a;
  text-align: center;
  margin-bottom: 30px;
  position: relative;

  &::after {
    content: '';
    position: absolute;
    bottom: -12px;
    left: 50%;
    transform: translateX(-50%);
    width: 80px;
    height: 4px;
    background: linear-gradient(90deg, #228b22, #56ab2f);
    border-radius: 2px;
  }
`;

const Subtitle = styled.h2`
  font-size: 1.8rem;
  font-weight: 600;
  color: #3a5a3a;
  margin-bottom: 20px;
  text-align: center;
`;

const DetailsTitle = styled.h3`
  font-size: 1.5rem;
  font-weight: 600;
  color: #1a7a1a;
  margin-top: 40px;
  margin-bottom: 20px;
  text-align: center;
`;

const ChartWrapper = styled.div`
  width: 100%;
  max-width: 1200px;
  height: 500px;
  margin: 0 auto 30px;
  padding: 20px;
  background: #f9f9f9;
  border-radius: 15px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
`;

const ForecastList = styled.ul`
  list-style: none;
  padding: 0;
  margin: 0;
`;

const ForecastListItem = styled.li`
  background: #f9f9f9;
  border-radius: 10px;
  padding: 15px 20px;
  margin-bottom: 10px;
  font-family: 'Poppins', sans-serif;
  font-size: 1rem;
  color: #3a5a3a;
  display: flex;
  align-items: center;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  transition: transform 0.2s ease;
  border-left: 3px solid #228b22;

  &:hover {
    transform: translateX(5px);
  }
`;

const ForecastDate = styled.span`
  font-weight: 600;
  color: #1a7a1a;
  margin-right: 10px;
`;

const ForecastValue = styled.span`
  font-weight: 600;
  color: #56ab2f;
  margin: 0 5px;
`;

const DownloadButton = styled.button`
  display: block;
  margin: 30px auto;
  padding: 12px 30px;
  background: linear-gradient(135deg, #228b22, #56ab2f);
  color: white;
  border: none;
  border-radius: 30px;
  font-family: 'Poppins', sans-serif;
  font-size: 1.1rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 6px 15px rgba(34, 139, 34, 0.2);
  position: relative;
  overflow: hidden;
  animation: ${float} 6s ease-in-out infinite;

  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(34, 139, 34, 0.3);
  }

  &::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.3) 50%, rgba(255, 255, 255, 0) 100%);
    transform: rotate(30deg);
    animation: ${shimmer} 3s infinite;
    pointer-events: none;
  }
`;

const LoadingMessage = styled.p`
  font-size: 1.2rem;
  color: #3a5a3a;
  text-align: center;
`;

const ErrorMessage = styled.p`
  font-size: 1.2rem;
  color: #e63946;
  text-align: center;
`;

const PredictionForDonor = () => {
  const { authUser, user } = useAuth();
  const [userId, setuserId] = useState("");
  const [donationForecast, setDonationForecast] = useState([]);
  const [requestForecast, setRequestForecast] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const chartContainerRef = useRef(null);
  const isDonor = user?.role === "restaurant" || user?.role === "supermarket" || user?.role === "personaldonor";
  const isRecipient = user?.role === "ong" || user?.role === "student";

  useEffect(() => {
    if (authUser && (authUser._id || authUser.id)) {
      setuserId(authUser._id || authUser.id);
      console.log("userId from authUser:", authUser._id || authUser.id);
    } else if (user) {
      setuserId(user._id || user.id || "");
      console.log("userId from localStorage:", user._id || user.id);
    }
  }, [authUser]);

  useEffect(() => {
    const fetchForecasts = async () => {
      try {
        setLoading(true);
        const donationResponse = await axios.get('http://localhost:3000/api/api/forecast/donations?days=7');
        const requestResponse = await axios.get('http://localhost:3000/api/api/forecast/requests?days=7');
        setDonationForecast(donationResponse.data);
        setRequestForecast(requestResponse.data);
        setError(null);
      } catch (err) {
        setError('Error fetching forecasts: ' + err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchForecasts();
  }, []);

  const chartData = isDonor ? {
    labels: requestForecast.map(entry => entry.ds),
    datasets: [
      {
        label: 'Request Forecast',
        data: requestForecast.map(entry => entry.yhat),
        borderColor: '#228b22',
        backgroundColor: 'rgba(34, 139, 34, 0.2)',
        fill: true,
        tension: 0.4,
        pointBackgroundColor: '#228b22',
        pointBorderColor: '#228b22',
        pointRadius: 5,
      },
    ],
  } : {
    labels: donationForecast.map(entry => entry.ds),
    datasets: [
      {
        label: 'Donation Forecast',
        data: donationForecast.map(entry => entry.yhat),
        borderColor: '#228b22',
        backgroundColor: 'rgba(34, 139, 34, 0.2)',
        fill: true,
        tension: 0.4,
        pointBackgroundColor: '#228b22',
        pointBorderColor: '#228b22',
        pointRadius: 5,
      },
    ],
  };

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'top',
        labels: {
          font: {
            size: 14,
            family: "'Poppins', sans-serif",
          },
          color: '#3a5a3a',
        },
      },
      title: {
        display: true,
        text: isDonor ? 'Request Forecast (Next 7 Days)' : 'Donation Forecast (Next 7 Days)',
        font: {
          size: 20,
          family: "'Poppins', sans-serif",
          weight: '600',
        },
        color: '#1a7a1a',
        padding: {
          top: 20,
          bottom: 20,
        },
      },
      tooltip: {
        backgroundColor: '#fff',
        titleColor: '#3a5a3a',
        bodyColor: '#3a5a3a',
        borderColor: '#228b22',
        borderWidth: 1,
        titleFont: {
          family: "'Poppins', sans-serif",
          size: 14,
        },
        bodyFont: {
          family: "'Poppins', sans-serif",
          size: 12,
        },
      },
    },
    scales: {
      y: {
        beginAtZero: true,
        title: {
          display: true,
          text: 'Predicted Count',
          font: {
            size: 16,
            family: "'Poppins', sans-serif",
            weight: '500',
          },
          color: '#3a5a3a',
        },
        ticks: {
          font: {
            size: 12,
            family: "'Poppins', sans-serif",
          },
          color: '#3a5a3a',
        },
        grid: {
          color: 'rgba(0, 0, 0, 0.05)',
        },
      },
      x: {
        title: {
          display: true,
          text: 'Date',
          font: {
            size: 16,
            family: "'Poppins', sans-serif",
            weight: '500',
          },
          color: '#3a5a3a',
        },
        ticks: {
          font: {
            size: 12,
            family: "'Poppins', sans-serif",
          },
          color: '#3a5a3a',
        },
        grid: {
          display: false,
        },
      },
    },
  };

  const downloadPDF = () => {
    const doc = new jsPDF({
      orientation: "portrait",
      unit: "mm",
      format: "a4",
    });

    // Header setup
    const addHeader = () => {
      doc.setFillColor(245, 245, 245);
      doc.rect(0, 0, doc.internal.pageSize.width, 40, "F");
      doc.setDrawColor(144, 196, 60);
      doc.setLineWidth(1.5);
      doc.line(0, 40, doc.internal.pageSize.width, 40);
      doc.addImage(logo, "PNG", 10, 5, 30, 30);
      doc.setFontSize(18);
      doc.setTextColor(34, 139, 34);
      doc.setFont("helvetica", "bold");
      doc.text(isDonor ? "Request Forecast Report" : "Donation Forecast Report", doc.internal.pageSize.width / 2, 20, { align: "center" });
      const today = new Date();
      const dateStr = today.toLocaleDateString("en-US", {
        year: "numeric",
        month: "long",
        day: "numeric",
      });
      doc.setFontSize(10);
      doc.setTextColor(80, 80, 80);
      doc.text(`Generated: ${dateStr}`, doc.internal.pageSize.width - 50, 35);
    };

    // Footer setup
    const addFooter = (page, pageCount) => {
      doc.setDrawColor(200, 200, 200);
      doc.setLineWidth(0.5);
      doc.line(15, doc.internal.pageSize.height - 20, doc.internal.pageSize.width - 15, doc.internal.pageSize.height - 20);
      doc.setFillColor(144, 196, 60);
      doc.roundedRect(doc.internal.pageSize.width / 2 - 15, doc.internal.pageSize.height - 18, 30, 12, 3, 3, "F");
      doc.setTextColor(255, 255, 255);
      doc.setFontSize(9);
      doc.text(`Page ${page} of ${pageCount}`, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 10, { align: "center" });
      doc.setTextColor(120, 120, 120);
      doc.setFontSize(8);
      doc.setFont("helvetica", "italic");
      doc.text("Confidential - For internal use only", 15, doc.internal.pageSize.height - 10);
      doc.text("© SustainaFood", doc.internal.pageSize.width - 45, doc.internal.pageSize.height - 10);
    };

    // Add header to the first page
    addHeader();

    // Capture the chart
    setTimeout(() => {
      if (chartContainerRef.current) {
        const canvas = chartContainerRef.current.querySelector('canvas');
        if (canvas) {
          html2canvas(canvas, { scale: 2 }).then((capturedCanvas) => {
            const chartImgData = capturedCanvas.toDataURL('image/png');
            const imgWidth = 190;
            const chartImgHeight = (capturedCanvas.height * imgWidth) / capturedCanvas.width;

            // Add chart to PDF
            let yPosition = 50;
            doc.addImage(chartImgData, 'PNG', 10, yPosition, imgWidth, chartImgHeight);
            yPosition += chartImgHeight + 20;

            // Add forecast details
            doc.setFontSize(14);
            doc.setTextColor(34, 139, 34);
            doc.setFont("helvetica", "bold");
            doc.text(isDonor ? "Request Forecast Details" : "Donation Forecast Details", 10, yPosition);
            yPosition += 10;

            doc.setFontSize(10);
            doc.setTextColor(0, 0, 0);
            doc.setFont("helvetica", "normal");
            const forecastData = isDonor ? requestForecast : donationForecast;
            forecastData.forEach((entry) => {
              if (yPosition > 250) {
                doc.addPage();
                addHeader();
                yPosition = 50;
              }
              doc.text(
                `${entry.ds}: ${entry.yhat.toFixed(2)} (Range: ${entry.yhat_lower.toFixed(2)} - ${entry.yhat_upper.toFixed(2)})`,
                10,
                yPosition
              );
              yPosition += 8;
            });

            // Add footer to all pages
            const pageCount = doc.internal.getNumberOfPages();
            for (let i = 1; i <= pageCount; i++) {
              doc.setPage(i);
              addFooter(i, pageCount);
            }

            // Save the PDF
            doc.save(isDonor ? "request_forecast.pdf" : "donation_forecast.pdf");
          }).catch((err) => {
            console.error("Error capturing chart:", err);
            alert("Failed to capture chart for PDF. Please try again.");
          });
        } else {
          console.error("Canvas not found in chart container");
          alert("Chart canvas not found. Please ensure the chart is rendered before exporting.");
        }
      } else {
        console.error("Chart container reference not found");
        alert("Chart container not found. Please try again.");
      }
    }, 1000); // Increased delay to ensure chart rendering
  };

  if (loading) return <ForecastContainer><LoadingMessage>Loading analytics...</LoadingMessage></ForecastContainer>;
  if (error) return <ForecastContainer><ErrorMessage>{error}</ErrorMessage></ForecastContainer>;
  if (!isDonor && !isRecipient) return <ForecastContainer><ErrorMessage>Access denied.</ErrorMessage></ForecastContainer>;

  return (
    <>
      <Navbar />
      <ForecastContainer>
        <ForecastCard>
          <Titlee>{isDonor ? "Donor Analytics" : "Recipient Analytics"}</Titlee>
          {isDonor ? (
            <>
              <div>
                <Subtitle>Request Forecast</Subtitle>
                <ChartWrapper ref={chartContainerRef}>
                  <Line data={chartData} options={chartOptions} />
                </ChartWrapper>
                <DownloadButton onClick={downloadPDF}>
                  Download PDF Report
                </DownloadButton>
                <DetailsTitle>Request Forecast Details</DetailsTitle>
                <ForecastList>
                  {requestForecast.map((entry, index) => (
                    <ForecastListItem key={index}>
                      <ForecastDate>{entry.ds}</ForecastDate>: Predicted Requests: <ForecastValue>{entry.yhat.toFixed(2)}</ForecastValue> (Range: {entry.yhat_lower.toFixed(2)} - {entry.yhat_upper.toFixed(2)})
                    </ForecastListItem>
                  ))}
                </ForecastList>
              </div>
            </>
          ) : (
            <>
              <div>
                <Subtitle>Donation Forecast</Subtitle>
                <ChartWrapper ref={chartContainerRef}>
                  <Line data={chartData} options={chartOptions} />
                </ChartWrapper>
                <DownloadButton onClick={downloadPDF}>
                  Download PDF Report
                </DownloadButton>
                <DetailsTitle>Donation Forecast Details</DetailsTitle>
                <ForecastList>
                  {donationForecast.map((entry, index) => (
                    <ForecastListItem key={index}>
                      <ForecastDate>{entry.ds}</ForecastDate>: Predicted Donations: <ForecastValue>{entry.yhat.toFixed(2)}</ForecastValue> (Range: {entry.yhat_lower.toFixed(2)} - {entry.yhat_upper.toFixed(2)})
                    </ForecastListItem>
                  ))}
                </ForecastList>
              </div>
            </>
          )}
        </ForecastCard>
      </ForecastContainer>
      <Footer />
    </>
  );
};

export default PredictionForDonor;
</file>

<file path="sustainafood-backend/routes/deliveryRoutes.js">
const express = require('express');
const router = express.Router();
const deliveryController = require('../controllers/deliveryController');
const feedbackController = require('../controllers/feedbackController'); // New controller
// Create a new delivery
router.post('/',  deliveryController.createDelivery);
router.get('/',  deliveryController.getAllDeliveries);
router.get('/:deliveryId',  deliveryController.getDeliveriesById);
router.put('/:deliveryId/assign-nearest', deliveryController.assignNearestTransporter);
// Assign a transporter to a delivery (admin only)
router.put('/:deliveryId/assign', deliveryController.assignTransporter);

// Get all deliveries for a specific transporter
router.get('/transporter/:transporterId',  deliveryController.getTransporterDeliveries);

// Update delivery status
router.put('/:deliveryId/status',  deliveryController.updateDeliveryStatus);

// Get all pending deliveries without an assigned transporter
router.get('/pending',  deliveryController.getPendingDeliveries);
// New routes for feedback
router.post('/:deliveryId/feedback',  feedbackController.createFeedback);
router.get('/feedbacks/transporter/:transporterId', feedbackController.getTransporterFeedbacks);
router.get('/transporter/:transporterId', deliveryController.getDeliveriesByTransporter);
router.post('/:deliveryId/accept-or-refuse', deliveryController.acceptOrRefuseDelivery);
router.post('/:deliveryId/start-journey', deliveryController.startJourney);
router.get('/donor/:donorId', deliveryController.getDeliveriesByDonorId); // New route
router.get('/recipient/:recipientId', deliveryController.getDeliveriesByRecipientId); // New route
module.exports = router;
</file>

<file path="sustainafood-frontend/src/components/Navbar.jsx">
// src/components/Navbar.jsx
import { useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import { FaSignOutAlt, FaBell, FaSignInAlt, FaUserPlus } from "react-icons/fa";
import logo from "../assets/images/logooo.png";
import imgmouna from "../assets/images/imgmouna.png";
import { useAuth } from "../contexts/AuthContext";
import { getUserById } from "../api/userService";
import { getNotificationsByReceiver, markNotificationAsRead } from "../api/notificationService";
import "../assets/styles/Navbar.css";

const Navbar = () => {
  const { user: authUser, token, logout } = useAuth();
  const [user, setUser] = useState(authUser);
  const [menuOpen, setMenuOpen] = useState(false);
  const [dropdownOpen, setDropdownOpen] = useState(null);
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [notifications, setNotifications] = useState([]);
  const [notificationDropdownOpen, setNotificationDropdownOpen] = useState(false);
  const navigate = useNavigate();

  const profilePhotoUrl = user?.photo ? `http://localhost:3000/${user.photo}` : imgmouna;

  // Fetch user details
  useEffect(() => {
    const fetchUser = async () => {
      if (!authUser || (!authUser._id && !authUser.id)) return;

      const userId = authUser._id || authUser.id;
      try {
        const response = await getUserById(userId);
        setUser(response.data);
      } catch (error) {
        console.error("Backend Error:", error);
      }
    };

    if (authUser) {
      fetchUser();
    }
  }, [authUser]);

  // Fetch notifications for the logged-in user
  useEffect(() => {
    const fetchNotifications = async () => {
      if (!authUser || !token) return;
      const userId = authUser._id || authUser.id;
      if (!userId) return;

      try {
        const response = await getNotificationsByReceiver(userId, token);
        setNotifications(response.notifications || []);
      } catch (error) {
        console.error("Error fetching notifications:", error);
      }
    };

    fetchNotifications();
  }, [authUser, token]);

  // Handle marking a notification as read
  const handleMarkAsRead = async (notificationId) => {
    try {
      await markNotificationAsRead(notificationId, token);
      setNotifications((prevNotifications) =>
        prevNotifications.map((notif) =>
          notif._id === notificationId ? { ...notif, isRead: true } : notif
        )
      );
    } catch (error) {
      console.error("Error marking notification as read:", error);
    }
  };

  const handleLogout = () => {
    logout();
    navigate("/login");
    localStorage.clear();
  };

  const isDonner = user?.role === "restaurant" || user?.role === "supermarket" || user?.role === "personaldonor";
  const isRecipient = user?.role === "ong" || user?.role === "student";
  const isAdmin = user?.role === "admin";
  const isTransporter = user?.role === "transporter";

  return (
    <nav className="navbarfront">
      <div className="logo-container">
        <img src={logo || "/placeholder.svg"} alt="SustainaFood Logo" className="logo" />
        <h1 className="title">SustainaFood</h1>
      </div>

      {/* Menu Burger */}
      <div
        className={`menu-toggle ${mobileMenuOpen ? "open" : ""}`}
        onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
      >
        <span className="bar"></span>
        <span className="bar"></span>
        <span className="bar"></span>
      </div>

      {/* Navigation Links */}
      <ul className={`nav-links ${mobileMenuOpen ? "open" : ""}`}>
        <Link to="/" className="nav-link">
          Home
        </Link>
        <Link to="/About" className="nav-link">
          About
        </Link>
        <Link to="/Contact" className="nav-link">
          Contact
        </Link>

        {authUser ? (
          <>
            {!isTransporter && (
              <div
                className="dropdown"
                onMouseEnter={() => setDropdownOpen("donations")}
                onMouseLeave={() => setDropdownOpen(null)}
              >
                <span className="dropdown-toggle">Donations</span>
                {dropdownOpen === "donations" && (
                  <div className="dropdown-content">
                    <Link to="/ListOfDonations">List of Donations</Link>
                    <Link to="/ListOfRequests">List of Requests</Link>
                    {isRecipient && <Link to="/myrequest">My Requests</Link>}
                    {isDonner && <Link to="/mydonations">My Donations</Link>}
                    {isDonner && <Link to="/addDonation">Add Donation</Link>}
                    {isRecipient && <Link to="/addDonation">Add Request</Link>}
                    {isDonner && <Link to="/DonationRecommendations">Donation Recommendations</Link>}
                    {isDonner && <Link to={`/donor/${user?._id || user?.id}/requests`}>My Donation Transactions</Link>}
                    {isRecipient && <Link to={`/recipient/${user?._id || user?.id}/transactions`}>My Requests Transactions</Link>}
                  </div>
                )}
              </div>
            )}
            <div
              className="dropdown"
              onMouseEnter={() => setDropdownOpen("transporter")}
              onMouseLeave={() => setDropdownOpen(null)}
            >
              <span className="dropdown-toggle">Transporter</span>
              {dropdownOpen === "transporter" && (
                <div className="dropdown-content">
                  {isTransporter && (
                    <Link to={`/transporter/${user?._id || user?.id}/dashboard`}>
                      Transporter Dashboard
                    </Link>
                  )}
                  {isTransporter && <Link to={`/deliveries/${user?._id || user?.id}`}>Assigned Deliveries</Link>}
                  {isTransporter && <Link to="#">Route Optimization</Link>}
                  {!isTransporter && <Link to="/Deliveries">Deliveries</Link>}
                </div>
              )}
            </div>
            {!isTransporter && (
              <div
                className="dropdown"
                onMouseEnter={() => setDropdownOpen("analytics")}
                onMouseLeave={() => setDropdownOpen(null)}
              >
                <span className="dropdown-toggle">Analytics & Reporting</span>
                {dropdownOpen === "analytics" && (
                  <div className="dropdown-content">
                    {isRecipient && <Link to="/analytics">Request Statistics</Link>}
                    {isDonner && <Link to="/analytics">Donation Statistics</Link>}
                    <Link to="/PersonalStatus">Personal Stats</Link>
                    <Link to="/Preduction">Preduction</Link>
                  </div>
                )}
              </div>
            )}
           

            {/* Notification Bell with Dropdown */}
            <div className="social-icons">
              <div
                className="notification-bell"
                onClick={() => setNotificationDropdownOpen(!notificationDropdownOpen)}
              >
                <FaBell />
                {notifications.filter((notif) => !notif.isRead).length > 0 && (
                  <span className="notification-count">
                    {notifications.filter((notif) => !notif.isRead).length}
                  </span>
                )}
              </div>
              {notificationDropdownOpen && (
                <div className="notification-dropdown">
                  {notifications.length > 0 ? (
                    notifications.map((notification) => {
                      // Safely handle sender photo
                      const senderPhotoUrl = notification.sender?.photo
                        ? `http://localhost:3000/${notification.sender.photo}`
                        : imgmouna;

                      return (
                        <div
                          key={notification._id}
                          className={`notification-item ${notification.isRead ? "read" : "unread"}`}
                          onClick={() => handleMarkAsRead(notification._id)}
                        >
                          {/* Avatar à gauche */}
                          <img
                            src={senderPhotoUrl}
                            alt="Sender"
                            className="notification-avatar"
                            onError={(e) => (e.target.src = imgmouna)} // Fallback on error
                          />

                          {/* Contenu à droite */}
                          <div className="notification-content">
                            <p>
                              <strong>{notification.sender?.name || "Unknown User"}</strong>{" "}
                              {notification.message}
                            </p>
                            <small>{new Date(notification.createdAt).toLocaleString()}</small>
                          </div>

                          {/* Indicateur de non-lu */}
                          {!notification.isRead && <div className="notification-status"></div>}
                        </div>
                      );
                    })
                  ) : (
                    <div className="notification-item">
                      <p>No notifications</p>
                    </div>
                  )}
                </div>
              )}
            </div>

            {/* Render Profile Menu Only for Non-Admin Users */}
            {!isAdmin && (
              <div className="profile-menu" onClick={() => setMenuOpen(!menuOpen)}>
                <img
                  src={profilePhotoUrl || "/placeholder.svg"}
                  alt="Profile"
                  className="profile-img"
                />
                <div className={`dropdown-menu ${menuOpen ? "active" : ""}`}>
                  <div className="profile-info">
                    <img
                      src={profilePhotoUrl || "/placeholder.svg"}
                      alt="Profile"
                      className="dropdown-img"
                    />
                    <div>
                      <p className="user-name">{user?.name || "Loading..."}</p>
                      <p className="user-email">{user?.email || "Loading..."}</p>
                    </div>
                  </div>
                  <hr />
                  <button onClick={() => navigate("/profile")} className="menu-item">
                    Profile and visibility
                  </button>
                  <button
                    className="menu-item"
                    onClick={() => navigate("/account-settings")}
                  >
                    Account Settings
                  </button>
                  <button
                    className="menu-item"
                    onClick={() => navigate("/edit-profile")}
                  >
                    Edit Profile
                  </button>
                  <hr />
                  <button onClick={handleLogout} className="menu-item logout">
                    <FaSignOutAlt /> LogOut
                  </button>
                </div>
              </div>
            )}
          </>
        ) : (
          <div className="auth-buttons">
            <Link to="/login" className="auth-button signin">
              <FaSignInAlt /> Sign In
            </Link>
            <Link to="/signup" className="auth-button signup">
              <FaUserPlus /> Sign Up
            </Link>
          </div>
        )}
      </ul>
    </nav>
  );
};

export default Navbar;
</file>

<file path="sustainafood-frontend/src/pages/Deliveries.jsx">
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import styled, { createGlobalStyle, keyframes } from 'styled-components';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import donation1 from "../assets/images/home1.png";
import donation2 from "../assets/images/home2.png";
import donation3 from "../assets/images/home3.png";
import patternBg from '../assets/images/bg.png';
import { FaSearch, FaFilter } from "react-icons/fa";
import { getUserById } from "../api/userService";
import { getDeliveriesByDonorId, getDeliveriesByRecipientId, getDeliveriesByTransporter } from "../api/deliveryService";
import { createFeedback } from '../api/feedbackService';
import imgmouna from '../assets/images/imgmouna.png';
import StarRating from '../components/StarRating';

// Global styles
const GlobalStyle = createGlobalStyle`
  body {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    background: #f0f8f0;
    box-sizing: border-box;
  }
`;

// Animations
const fadeSlide = keyframes`
  0% { opacity: 0; transform: scale(1.05); }
  8% { opacity: 1; transform: scale(1); }
  33% { opacity: 1; transform: scale(1); }
  41% { opacity: 0; transform: scale(1.05); }
  100% { opacity: 0; transform: scale(1.05); }
`;

const float = keyframes`
  0% { transform: translateY(0px); }
  50% { transform: translateY(-15px); }
  100% { transform: translateY(0px); }
`;

// Layout components
const HomeContainer = styled.div`
  display: flex;
  flex-direction: column;
  gap: 0;
`;

const HeroSection = styled.section`
  position: relative;
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: space-between;
  padding: 80px 80px 120px;
  gap: 40px;
  background: 
    linear-gradient(135deg, rgba(230, 242, 230, 0.9), rgba(220, 240, 220, 0.85)),
    url(${patternBg}) repeat center center;
  background-size: 200px 200px;
  overflow: hidden;

  &::before {
    content: '';
    position: absolute;
    top: -50px;
    right: -50px;
    width: 200px;
    height: 200px;
    border-radius: 50%;
    background: rgba(34, 139, 34, 0.1);
    z-index: 1;
  }

  &::after {
    content: '';
    position: absolute;
    bottom: -30px;
    left: 15%;
    width: 120px;
    height: 120px;
    border-radius: 50%;
    background: rgba(34, 139, 34, 0.08);
    z-index: 1;
  }
`;

const HeroText = styled.div`
  flex: 1 1 500px;
  z-index: 2;

  h1 {
    font-size: 52px;
    font-weight: 800;
    color: #1a7a1a;
    margin-bottom: 20px;
    position: relative;

    &::after {
      content: '';
      position: absolute;
      bottom: -10px;
      left: 0;
      width: 80px;
      height: 4px;
      background: linear-gradient(90deg, #228b22, #56ab2f);
      border-radius: 2px;
    }
  }

  p {
    font-size: 20px;
    color: #3a5a3a;
    margin-bottom: 35px;
    line-height: 1.6;
    max-width: 90%;
  }
`;

const SliderContainer = styled.div`
  position: relative;
  flex: 1 1 500px;
  width: 100%;
  height: 420px;
  overflow: hidden;
  z-index: 2;
  transform-style: preserve-3d;
  perspective: 1000px;
  animation: ${float} 6s ease-in-out infinite;
`;

const SlideImage = styled.img`
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 20px;
  opacity: 0;
  animation: ${fadeSlide} 12s infinite;
  animation-fill-mode: forwards;
  filter: brightness(1.05) contrast(1.05);
`;

const Slide1 = styled(SlideImage)`
  animation-delay: 0s;
`;
const Slide2 = styled(SlideImage)`
  animation-delay: 4s;
`;
const Slide3 = styled(SlideImage)`
  animation-delay: 8s;
`;

const Wave = styled.svg`
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: auto;
  z-index: 1;
  filter: drop-shadow(0 -5px 5px rgba(0, 0, 0, 0.03));
`;

const SectionWrapper = styled.section`
  padding: 60px 80px;
  text-align: left;
  position: relative;
  overflow: hidden;

  &::before {
    content: '';
    position: absolute;
    top: 20px;
    left: -60px;
    width: 150px;
    height: 150px;
    border-radius: 50%;
    background: #ffffff;
    z-index: 0;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
  }

  &::after {
    content: '';
    position: absolute;
    bottom: 30px;
    right: -50px;
    width: 120px;
    height: 120px;
    border-radius: 50%;
    background: #ffffff;
    z-index: 0;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
  }
`;

const Container = styled.div`
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
  text-align: left;
  position: relative;
  z-index: 1;
`;

const Title = styled.h1`
  color: #228b22;
  font-size: 40px;
  margin-bottom: 20px;
  text-align: center;
`;

const SearchContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  background: white;
  padding: 8px;
  border-radius: 25px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  width: 320px;
  margin: 0 auto 20px auto;
  transition: all 0.3s ease-in-out;

  &:hover {
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }
`;

const SearchIcon = styled(FaSearch)`
  color: #555;
  margin-right: 8px;
`;

const SearchInput = styled.input`
  border: none;
  outline: none;
  font-size: 16px;
  width: 100%;
  padding: 8px;
  background: transparent;
  text-align: left;
`;

const Controls = styled.div`
  display: flex;
  justify-content: center;
  gap: 15px;
  margin: 20px 0;

  @media (max-width: 768px) {
    flex-direction: column;
    align-items: center;
  }
`;

const Select = styled.select`
  font-size: 16px;
  border-radius: 25px;
  border: 1px solid #ccc;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  transition: 0.3s;
  cursor: pointer;
  background: white;
  color: #333;
  font-weight: bold;
  padding: 10px 10px 10px 3px;
  text-align: left;
  
  &:hover {
    border-color: #228b22;
    transform: scale(1.05);
  }
`;

const PaginationControls = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  gap: 10px;

  button {
    padding: 10px 20px;
    font-size: 14px;
    background: #228b22;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s;

    &:hover:not(:disabled) {
      background: #56ab2f;
    }

    &:disabled {
      background: #ccc;
      cursor: not-allowed;
    }
  }

  span {
    font-size: 14px;
    color: #333;
  }
`;

// Animation keyframes
const slideIn = keyframes`
  0% { opacity: 0; transform: translateY(30px) scale(0.95); }
  100% { opacity: 1; transform: translateY(0) scale(1); }
`;
const glow = keyframes`
  0% { box-shadow: 0 0 5px rgba(34, 139, 34, 0.2); }
  50% { box-shadow: 0 0 20px rgba(34, 139, 34, 0.4); }
  100% { box-shadow: 0 0 5px rgba(34, 139, 34, 0.2); }
`;
const shimmer = keyframes`
  0% { background-position: -1000px 0; }
  100% { background-position: 1000px 0; }
`;

// Content list (container for cards)
const ContentList = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 40px;
  padding: 30px;
  background: linear-gradient(145deg, #f0f8f0, #e6f2e6);
  border-radius: 20px;
  margin: 20px 0;
  justify-content: center;
  @media (max-width: 768px) {
    flex-direction: column;
    padding: 15px;
  }
`;

// Loading message
const LoadingMessage = styled.div`
  text-align: center;
  font-size: 20px;
  color: #228b22;
  padding: 50px;
  background: #ffffff;
  border-radius: 15px;
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.05);
  font-weight: 500;
  letter-spacing: 0.5px;
`;

// No deliveries message (empty state)
const NoDeliveries = styled.div`
  text-align: center;
  padding: 80px 30px;
  background: linear-gradient(135deg, #ffffff, #f8f9fa);
  border-radius: 20px;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.05);
  margin: 40px auto;
  max-width: 700px;
  font-size: 20px;
  color: #3a5a3a;
  font-weight: 500;
  position: relative;
  overflow: hidden;
  &::before {
    content: '🌱';
    position: absolute;
    top: -30px;
    right: -30px;
    font-size: 100px;
    opacity: 0.1;
    transform: rotate(20deg);
  }
`;

// Delivery card
const DeliveryCard = styled.div`
  background: #ffffff;
  border-radius: 20px;
  padding: 30px;
  position: relative;
  overflow: hidden;
  animation: ${slideIn} 0.6s ease-out forwards;
  border: 1px solid rgba(34, 139, 34, 0.1);
  transition: transform 0.4s ease, box-shadow 0.4s ease;
  width: 100%;
  max-width: 1158px;
  flex-direction: row;
  gap: 30px;
  flex-wrap: wrap;
  align-items: flex-start;
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 5px;
    background: linear-gradient(90deg, #228b22, #56ab2f);
    border-radius: 20px 20px 0 0;
  }
  &:hover {
    transform: translateY(-8px);
    animation: ${glow} 2s infinite;
  }
  @media (max-width: 768px) {
    flex-direction: column;
    padding: 20px;
    max-width: 100%;
  }
`;

// Profile info section (donor, transporter, recipient)
const ProfileInfo = styled.div`
  flex: 1;
  min-width: 200px;
  display: flex;
  align-items: center;
  gap: 15px;
  padding: 10px 15px;
  margin-bottom: 12px;
  background: linear-gradient(135deg, #e6f2e6, #f0f8f0);
  border-radius: 10px;
  border-left: 4px solid #56ab2f;
  transition: transform 0.3s ease, background 0.3s ease;
  &:hover {
    transform: translateX(5px);
    background: linear-gradient(135deg, #f0f8f0, #e6f2e6);
  }
  @media (max-width: 768px) {
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
    min-width: 100%;
  }
`;

// Profile image
const ProfileImg = styled.img`
  width: 45px;
  height: 45px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #228b22;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  &:hover {
    transform: scale(1.1);
    box-shadow: 0 0 10px rgba(34, 139, 34, 0.3);
  }
`;

// Profile text
const ProfileText = styled.p`
  margin: 0;
  font-size: 15px;
  color: #2e4a2e;
  font-weight: 600;
  display: flex;
  align-items: center;
  gap: 5px;
  transition: color 0.3s ease;
  &:hover {
    color: #228b22;
  }
  &::before {
    font-size: 14px;
  }
  @media (max-width: 768px) {
    font-size: 14px;
  }
`;

// Delivery details section
const DeliveryDetails = styled.div`
  flex: 2;
  min-width: 300px;
  padding: 15px;
  background: linear-gradient(145deg, #fafafa, #f5f5f5);
  border-radius: 12px;
  position: relative;
  overflow: hidden;
  display: flex;
  margin-bottom: 12px;
  flex-wrap: wrap;
  gap: 15px;
  @media (max-width: 768px) {
    flex-direction: column;
    min-width: 100%;
  }
`;

// Delivery detail
const DeliveryDetail = styled.p`
  font-size: 14px;
  color: #3a5a3a;
  margin: 8px 0;
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  gap: 8px;
  padding: 8px 12px;
  background: #ffffff;
  border-radius: 8px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
  transition: transform 0.3s ease, background 0.3s ease;
  flex: 1;
  min-width: 200px;
  &:hover {
    transform: scale(1.02);
    background: #f0f8f0;
  }
  strong {
    color: #1a7a1a;
    font-weight: 600;
    display: inline-flex;
    align-items: center;
    gap: 5px;
    &::before {
      content: '📌';
      font-size: 14px;
    }
  }
  @media (max-width: 768px) {
    min-width: 100%;
  }
`;

// Delivery status badge
const DeliveryStatus = styled.span`
  display: inline-flex;
  align-items: center;
  padding: 4px 10px;
  border-radius: 15px;
  font-size: 12px;
  font-weight: 600;
  &.pending {
    background: linear-gradient(90deg, #fff3cd, #ffeeba);
    color: #856404;
  }
  &.in_transit {
    background: linear-gradient(90deg, #cce5ff, #b8daff);
    color: #004085;
  }
  &.delivered {
    background: linear-gradient(90deg, #d4edda, #c3e6cb);
    color: #155724;
  }
  &.cancelled {
    background: linear-gradient(90deg, #f8d7da, #f5c6cb);
    color: #721c24;
  }
  &::before {
    content: '🚛';
    margin-right: 5px;
    font-size: 14px;
  }
`;

// Item section
const ItemSection = styled.div`
  flex: 1;
  min-width: 250px;
  padding: 15px;
  background: #f0f8f0;
  border-radius: 12px;
  position: relative;
  overflow: hidden;
  @media (max-width: 768px) {
    min-width: 100%;
  }
  &::before {
    content: '🍴';
    position: absolute;
    top: 10px;
    right: 10px;
    font-size: 30px;
    opacity: 0.1;
  }
`;

// Items title
const ItemsTitle = styled.h4`
  font-size: 17px;
  color: #228b22;
  margin: 0 0 15px;
  font-weight: 600;
  position: relative;
  display: inline-block;
  &::after {
    content: '';
    position: absolute;
    bottom: -5px;
    left: 0;
    width: 50%;
    height: 2px;
    background: linear-gradient(90deg, #228b22, #56ab2f);
    border-radius: 2px;
  }
`;

// Item list
const ItemList = styled.ul`
  list-style: none;
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 12px;
`;

// Item
const Item = styled.li`
  background: #ffffff;
  padding: 15px;
  border-radius: 10px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
  transition: transform 0.3s ease, background 0.3s ease;
  border-left: 3px solid #56ab2f;
  &:hover {
    transform: translateX(5px);
    background: #e6f2e6;
  }
  @media (max-width: 768px) {
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
  }
`;

// Item details
const ItemDetails = styled.div`
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  span {
    font-size: 15px;
    color: #3a5a3a;
    strong {
      color: #228b22;
      font-weight: 600;
    }
  }
`;

// Item quantity
const ItemQuantity = styled.span`
  font-size: 15px;
  font-weight: 600;
  color: #d9534f;
  padding: 5px 10px;
  border-radius: 15px;
  background: rgba(217, 83, 79, 0.1);
  display: inline-flex;
  align-items: center;
  gap: 5px;
  &::before {
    content: '📦';
    font-size: 14px;
  }
  @media (max-width: 768px) {
    font-size: 14px;
  }
`;

// Feedback buttons container
const FeedbackButtons = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 15px;
  justify-content: center;
  margin-top: 25px;
  padding-top: 15px;
  border-top: 1px solid rgba(0, 0, 0, 0.05);
  width: 100%;
`;

// Feedback button
const FeedbackButton = styled.button`
  padding: 12px 25px;
  border: none;
  border-radius: 25px;
  background: linear-gradient(135deg, #228b22, #56ab2f);
  color: white;
  font-size: 15px;
  font-weight: 600;
  cursor: pointer;
  transition: transform 0.3s ease, box-shadow 0.3s ease, background 0.3s ease;
  position: relative;
  overflow: hidden;
  box-shadow: 0 5px 15px rgba(34, 139, 34, 0.2);
  &:hover:not(:disabled) {
    transform: scale(1.05);
    box-shadow: 0 8px 20px rgba(34, 139, 34, 0.3);
    background: linear-gradient(135deg, #56ab2f, #228b22);
  }
  &:disabled {
    background: #cccccc;
    cursor: not-allowed;
    box-shadow: none;
  }
  &::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.2) 50%, rgba(255, 255, 255, 0) 100%);
    transform: rotate(30deg);
    animation: ${shimmer} 3s infinite;
    pointer-events: none;
  }
  @media (max-width: 768px) {
    font-size: 14px;
    padding: 10px 20px;
  }
`;

const ModalOverlay = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
`;

const ModalContent = styled.div`
  background: #fff;
  padding: 20px;
  border-radius: 8px;
  width: 90%;
  max-width: 500px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  position: relative;
`;

const CloseButton = styled.button`
  position: absolute;
  top: 10px;
  right: 10px;
  background: none;
  border: none;
  font-size: 18px;
  cursor: pointer;
  color: #333;
`;

const FeedbackForm = styled.form`
  display: flex;
  flex-direction: column;
  gap: 10px;
`;

const FormGroup = styled.div`
  display: flex;
  flex-direction: column;
  gap: 5px;
`;

const FormLabel = styled.label`
  font-size: 14px;
  color: #333;
  font-weight: bold;
`;

const FeedbackTextarea = styled.textarea`
  width: 100%;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 5px;
  resize: vertical;
  font-size: 14px;
  font-family: 'Poppins', sans-serif;
  min-height: 80px;
`;

const SubmitButton = styled.button`
  padding: 8px 16px;
  background: #228b22;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 14px;
  align-self: flex-start;

  &:hover:not(:disabled) {
    background: #56ab2f;
  }

  &:disabled {
    background: #ccc;
    cursor: not-allowed;
  }
`;

const FeedbackMessage = styled.p`
  font-size: 14px;
  color: ${props => (props.error ? '#721c24' : '#155724')};
  margin: 5px 0;
`;

const Deliveries = () => {
  const [user, setUser] = useState(null);
  const [deliveries, setDeliveries] = useState([]);
  const [filteredDeliveries, setFilteredDeliveries] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [sortOption, setSortOption] = useState('date');
  const [currentPage, setCurrentPage] = useState(1);
  const [feedbackModal, setFeedbackModal] = useState(null);
  const [feedbackState, setFeedbackState] = useState({});
  const itemsPerPage = 3;

  const initializeFeedbackState = (deliveryId, targetRole) => ({
    rating: 0,
    comment: '',
    submitted: false,
    error: '',
    success: '',
  });

  const handleFeedbackChange = (deliveryId, targetRole, field, value) => {
    setFeedbackState(prev => ({
      ...prev,
      [deliveryId]: {
        ...prev[deliveryId],
        [targetRole]: {
          ...prev[deliveryId][targetRole],
          [field]: value,
        },
      },
    }));
  };

  const handleFeedbackSubmit = async (deliveryId, targetRole, recipientId) => {
    const feedback = feedbackState[deliveryId]?.[targetRole];
    if (!feedback) return;

    if (feedback.rating < 1 || feedback.rating > 5) {
      setFeedbackState(prev => ({
        ...prev,
        [deliveryId]: {
          ...prev[deliveryId],
          [targetRole]: {
            ...prev[deliveryId][targetRole],
            error: 'Please select a rating between 1 and 5 stars',
            success: '',
          },
        },
      }));
      return;
    }

    if (!feedback.comment.trim()) {
      setFeedbackState(prev => ({
        ...prev,
        [deliveryId]: {
          ...prev[deliveryId],
          [targetRole]: {
            ...prev[deliveryId][targetRole],
            error: 'Please enter a comment',
            success: '',
          },
        },
      }));
      return;
    }

    try {
      const token = localStorage.getItem('token');
      await createFeedback(
        recipientId,
        feedback.rating,
        feedback.comment,
        user._id,
        token
      );
      setFeedbackState(prev => ({
        ...prev,
        [deliveryId]: {
          ...prev[deliveryId],
          [targetRole]: {
            ...prev[deliveryId][targetRole],
            submitted: true,
            error: '',
            success: 'Feedback submitted successfully!',
          },
        },
      }));
    } catch (error) {
      setFeedbackState(prev => ({
        ...prev,
        [deliveryId]: {
          ...prev[deliveryId],
          [targetRole]: {
            ...prev[deliveryId][targetRole],
            error: error.message || 'Failed to submit feedback',
            success: '',
          },
        },
      }));
    }
  };

  const openFeedbackModal = (deliveryId, targetRole, targetId, targetName) => {
    setFeedbackModal({ deliveryId, targetRole, targetId, targetName });
  };

  const closeFeedbackModal = () => {
    setFeedbackModal(null);
  };

  useEffect(() => {
    const fetchUserAndDeliveries = async () => {
      try {
        setLoading(true);
        const storedUser = JSON.parse(localStorage.getItem('user'));
        const token = localStorage.getItem('token');

        const userResponse = await getUserById(storedUser._id || storedUser.id, token);
        setUser(userResponse.data);

        let deliveryResponse;
        if (userResponse.data.role === 'transporter') {
          deliveryResponse = await getDeliveriesByTransporter(userResponse.data._id || userResponse.data.id, token);
        } else if (['restaurant', 'supermarket', 'personaldonor'].includes(userResponse.data.role)) {
          deliveryResponse = await getDeliveriesByDonorId(userResponse.data._id || userResponse.data.id, token);
        } else if (['student', 'ong'].includes(userResponse.data.role)) {
          deliveryResponse = await getDeliveriesByRecipientId(userResponse.data._id, token);
        } else {
          throw new Error('Role not supported for viewing deliveries');
        }

        const fetchedDeliveries = deliveryResponse.data.data || [];
        setDeliveries(fetchedDeliveries);
        setFilteredDeliveries(fetchedDeliveries);

        const initialFeedbackState = {};
        fetchedDeliveries.forEach(delivery => {
          if (delivery.status === 'delivered') {
            initialFeedbackState[delivery._id] = {};
            const isDonor = ['restaurant', 'supermarket', 'personaldonor'].includes(userResponse.data.role);
            const isRecipient = ['student', 'ong'].includes(userResponse.data.role);
            if (isDonor) {
              initialFeedbackState[delivery._id].recipient = initializeFeedbackState(delivery._id, 'recipient');
              initialFeedbackState[delivery._id].transporter = initializeFeedbackState(delivery._id, 'transporter');
            } else if (isRecipient) {
              initialFeedbackState[delivery._id].donor = initializeFeedbackState(delivery._id, 'donor');
              initialFeedbackState[delivery._id].transporter = initializeFeedbackState(delivery._id, 'transporter');
            }
          }
        });
        setFeedbackState(initialFeedbackState);
      } catch (error) {
        console.error('Error fetching data:', error);
        setDeliveries([]);
        setFilteredDeliveries([]);
      } finally {
        setLoading(false);
      }
    };

    fetchUserAndDeliveries();
  }, []);

  useEffect(() => {
    let updatedDeliveries = [...deliveries];

    if (searchQuery) {
      updatedDeliveries = updatedDeliveries.filter((delivery) => {
        const donationTitle = delivery.donationTransaction?.donation?.title || '';
        const pickupAddress = delivery.pickupAddress || '';
        const deliveryAddress = delivery.deliveryAddress || '';
        const transporterName = delivery.transporter?.name || '';
        const donorName = delivery.donationTransaction?.donation?.donor?.name || '';
        const recipientName = delivery.donationTransaction?.requestNeed?.recipient?.name || '';
        return (
          donationTitle.toLowerCase().includes(searchQuery.toLowerCase()) ||
          pickupAddress.toLowerCase().includes(searchQuery.toLowerCase()) ||
          deliveryAddress.toLowerCase().includes(searchQuery.toLowerCase()) ||
          transporterName.toLowerCase().includes(searchQuery.toLowerCase()) ||
          donorName.toLowerCase().includes(searchQuery.toLowerCase()) ||
          recipientName.toLowerCase().includes(searchQuery.toLowerCase())
        );
      });
    }

    if (statusFilter !== 'all') {
      updatedDeliveries = updatedDeliveries.filter(
        (delivery) => delivery.status === statusFilter
      );
    }

    updatedDeliveries.sort((a, b) => {
      if (sortOption === 'date') {
        return new Date(b.createdAt) - new Date(a.createdAt);
      } else if (sortOption === 'title') {
        const titleA = a.donationTransaction?.donation?.title || '';
        const titleB = b.donationTransaction?.donation?.title || '';
        return titleA.localeCompare(titleB);
      } else if (sortOption === 'status') {
        return a.status.localeCompare(b.status);
      }
      return 0;
    });

    setFilteredDeliveries(updatedDeliveries);
    setCurrentPage(1);
  }, [searchQuery, statusFilter, sortOption, deliveries]);

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentDeliveries = filteredDeliveries.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(filteredDeliveries.length / itemsPerPage);

  return (
    <>
      <GlobalStyle />
      <Navbar />
      <HomeContainer>
        <HeroSection>
          <HeroText>
            <h1>Empowering Communities with Every Meal</h1>
            <p>
              Join SustainaFood to donate, deliver, or receive surplus food—together, we reduce waste and spread hope!
            </p>
          </HeroText>
          <SliderContainer>
            <Slide1 src={donation2} alt="Donation 1" />
            <Slide2 src={donation3} alt="Donation 2" />
            <Slide3 src={donation1} alt="Donation 3" />
          </SliderContainer>
          <Wave viewBox="0 0 1440 320">
            <path
              fill="#ffffff"
              fillOpacity="1"
              d="M0,96L30,90C60,85,120,75,180,64C240,53,300,43,360,64C420,85,480,139,540,170.7C600,203,660,213,720,224C780,235,840,245,900,240C960,235,1020,213,1080,181.3C1140,149,1200,107,1260,112C1320,117,1380,171,1410,197.3L1440,224L1440,320L1410,320C1380,320,1320,320,1260,320C1200,320,1140,320,1080,320C1020,320,960,320,900,320C840,320,780,320,720,320C660,320,600,320,540,320C480,320,420,320,360,320C300,320,240,320,180,320C120,320,60,320,30,320L0,320Z"
            />
          </Wave>
        </HeroSection>

        <SectionWrapper>
          <Container>
            <Title>List of your Deliveries</Title>
            <SearchContainer>
              <SearchIcon />
              <SearchInput
                type="text"
                placeholder="Search deliveries..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </SearchContainer>
            <Controls>
              <Select value={sortOption} onChange={(e) => setSortOption(e.target.value)}>
                <option value="date">📆 Sort by Date</option>
                <option value="title">🔠 Sort by Donation Title</option>
                <option value="status">🔄 Sort by Status</option>
              </Select>
              <Select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>
                <option value="all">🟢 All Statuses</option>
                <option value="pending">🕒 Pending</option>
                <option value="accepted">✅ Accepted</option>
                <option value="picked_up">📍 Picked Up</option>
                <option value="in_progress">🚚 In Progress</option>
                <option value="delivered">📦 Delivered</option>
                <option value="failed">❌ Failed</option>
              </Select>
            </Controls>
            
            <ContentList>
              {loading ? (
                <LoadingMessage>Loading...</LoadingMessage>
              ) : currentDeliveries.length > 0 ? (
                currentDeliveries.map((delivery) => {
                  const transporterPhoto = delivery.transporter?.photo
                    ? `http://localhost:3000/${delivery.transporter.photo}`
                    : imgmouna;
                    
                  const isDonor = ['restaurant', 'supermarket', 'personaldonor'].includes(user?.role);
                  const isRecipient = ['student', 'ong'].includes(user?.role);
                  const recipient = delivery.donationTransaction?.requestNeed?.recipient;
                  const donor = delivery.donationTransaction?.donation?.donor;
                  const donation = delivery.donationTransaction?.donation || {};
                  const allocatedProducts = delivery.donationTransaction?.allocatedProducts || [];
                  const allocatedMeals = delivery.donationTransaction?.allocatedMeals || [];

                  return (
                    <DeliveryCard key={delivery._id}>
                      {delivery.transporter ? (
                        <ProfileInfo>
                          <Link to={`/ViewProfile/${delivery.transporter?._id}`}>
                            <ProfileImg
                              src={transporterPhoto}
                              alt="Transporter Profile"
                              onError={(e) => {
                                e.target.src = imgmouna;
                                console.error(`Failed to load transporter image: ${transporterPhoto}`);
                              }}
                            />
                          </Link>
                          <Link to={`/ViewProfile/${delivery.transporter?._id}`}>
                            <ProfileText>
                              Transporter: {delivery.transporter?.name || 'Unknown Transporter'}
                            </ProfileText>
                          </Link>
                          <ProfileText>Email: {delivery.transporter?.email || 'Email Not Specified'}</ProfileText>
                          <ProfileText>Phone Number: {delivery.transporter?.phone || 'Phone Not Specified'}</ProfileText>
                        </ProfileInfo>
                      ) : (
                        <ProfileInfo>
                          <ProfileText>No transporter assigned</ProfileText>
                        </ProfileInfo>
                      )}

                      {isDonor && recipient && (
                        <ProfileInfo>
                          <Link to={`/ViewProfile/${recipient?._id}`}>
                            <ProfileText>
                              Recipient: {recipient?.name || 'Unknown Recipient'}
                            </ProfileText>
                          </Link>
                          <ProfileText>Email: {recipient?.email || 'Email Not Specified'}</ProfileText>
                        </ProfileInfo>
                      )}
                      {isRecipient && donor && (
                        <ProfileInfo>
                          <Link to={`/ViewProfile/${donor?._id}`}>
                            <ProfileText>
                              Donor: {donor?.name || 'Unknown Donor'}
                            </ProfileText>
                          </Link>
                          <ProfileText>Email: {donor?.email || 'Email Not Specified'}</ProfileText>
                        </ProfileInfo>
                      )}

                      <DeliveryDetails>
                        <DeliveryDetail>
                          <strong>Donation Title:</strong>{' '}
                          {donation.title || 'Untitled Delivery'}
                        </DeliveryDetail>
                        <DeliveryDetail>
                          <strong>Pickup Address:</strong> {delivery.pickupAddress || 'N/A'}
                        </DeliveryDetail>
                        <DeliveryDetail>
                          <strong>Delivery Address:</strong> {delivery.deliveryAddress || 'N/A'}
                        </DeliveryDetail>
                        <DeliveryDetail>
                          <strong>Status:</strong>{' '}
                          <DeliveryStatus className={delivery.status}>
                            {delivery.status ? delivery.status.charAt(0).toUpperCase() + delivery.status.slice(1).replace('_', ' ') : 'N/A'}
                          </DeliveryStatus>
                        </DeliveryDetail>
                        <DeliveryDetail>
                          <strong>Created:</strong>{' '}
                          {new Date(delivery.createdAt).toLocaleDateString()}
                        </DeliveryDetail>
                      </DeliveryDetails>

                      {allocatedProducts.length > 0 && (
                        <ItemSection>
                          <ItemsTitle>Allocated Products:</ItemsTitle>
                          <ItemList>
                            {allocatedProducts.map((item, index) => (
                              <Item key={index}>
                                <ItemDetails>
                                  <span><strong>Name:</strong> {item.product?.name || 'Unnamed Product'}</span>
                                </ItemDetails>
                                <ItemQuantity>
                                  {item.quantity || 0} item{item.quantity !== 1 ? 's' : ''}
                                </ItemQuantity>
                              </Item>
                            ))}
                          </ItemList>
                        </ItemSection>
                      )}

                      {allocatedMeals.length > 0 && (
                        <ItemSection>
                          <ItemsTitle>Allocated Meals:</ItemsTitle>
                          <ItemList>
                            {allocatedMeals.map((item, index) => (
                              <Item key={index}>
                                <ItemDetails>
                                  <span><strong>Name:</strong> {item.meal?.mealName || 'Unnamed Meal'}</span>
                                </ItemDetails>
                                <ItemQuantity>
                                  {item.quantity || 0} meal{item.quantity !== 1 ? 's' : ''}
                                </ItemQuantity>
                              </Item>
                            ))}
                          </ItemList>
                        </ItemSection>
                      )}

                      {allocatedProducts.length == 0 && allocatedMeals.length == 0 && (
                        <ItemSection>
                          <ItemsTitle>Items:</ItemsTitle>
                          <ItemList>
                            <Item>
                              <ItemDetails>
                                <span>No allocated products or meals</span>
                              </ItemDetails>
                            </Item>
                          </ItemList>
                        </ItemSection>
                      )}

                      {delivery.status === 'delivered' && (isDonor || isRecipient) && (
                        <FeedbackButtons>
                          {(isDonor || isRecipient) && delivery.transporter && (
                            <FeedbackButton
                              onClick={() => openFeedbackModal(
                                delivery._id,
                                'transporter',
                                delivery.transporter._id,
                                delivery.transporter.name || 'Unknown Transporter'
                              )}
                              disabled={feedbackState[delivery._id]?.transporter?.submitted}
                            >
                              {feedbackState[delivery._id]?.transporter?.submitted
                                ? 'Feedback for Transporter Submitted'
                                : 'Add Feedback for Transporter'}
                            </FeedbackButton>
                          )}
                          {isDonor && recipient && (
                            <FeedbackButton
                              onClick={() => openFeedbackModal(
                                delivery._id,
                                'recipient',
                                recipient._id,
                                recipient.name || 'Unknown Recipient'
                              )}
                              disabled={feedbackState[delivery._id]?.recipient?.submitted}
                            >
                              {feedbackState[delivery._id]?.recipient?.submitted
                                ? 'Feedback for Recipient Submitted'
                                : 'Add Feedback for Recipient'}
                            </FeedbackButton>
                          )}
                          {isRecipient && donor && (
                            <FeedbackButton
                              onClick={() => openFeedbackModal(
                                delivery._id,
                                'donor',
                                donor._id,
                                donor.name || 'Unknown Donor'
                              )}
                              disabled={feedbackState[delivery._id]?.donor?.submitted}
                            >
                              {feedbackState[delivery._id]?.donor?.submitted
                                ? 'Feedback for Donor Submitted'
                                : 'Add Feedback for Donor'}
                            </FeedbackButton>
                          )}
                        </FeedbackButtons>
                      )}
                    </DeliveryCard>
                  );
                })
              ) : (
                <NoDeliveries>No matching deliveries found.</NoDeliveries>
              )}
            </ContentList>
            {totalPages > 1 && (
              <PaginationControls>
                <button
                  onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                  disabled={currentPage === 1}
                >
                  Previous
                </button>
                <span>Page {currentPage} of {totalPages}</span>
                <button
                  onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
                  disabled={currentPage === totalPages}
                >
                  Next
                </button>
              </PaginationControls>
            )}
          </Container>
        </SectionWrapper>
      </HomeContainer>

      {feedbackModal && (
        <ModalOverlay>
          <ModalContent>
            <CloseButton onClick={closeFeedbackModal}>×</CloseButton>
            <FeedbackForm onSubmit={(e) => {
              e.preventDefault();
              handleFeedbackSubmit(
                feedbackModal.deliveryId,
                feedbackModal.targetRole,
                feedbackModal.targetId
              );
            }}>
              <FormGroup>
                <FormLabel>Feedback for {feedbackModal.targetRole.charAt(0).toUpperCase() + feedbackModal.targetRole.slice(1)} ({feedbackModal.targetName}):</FormLabel>
                <StarRating
                  rating={feedbackState[feedbackModal.deliveryId]?.[feedbackModal.targetRole]?.rating || 0}
                  setRating={(rating) => handleFeedbackChange(feedbackModal.deliveryId, feedbackModal.targetRole, 'rating', rating)}
                  interactive={!feedbackState[feedbackModal.deliveryId]?.[feedbackModal.targetRole]?.submitted}
                />
              </FormGroup>
              <FormGroup>
                <FeedbackTextarea
                  value={feedbackState[feedbackModal.deliveryId]?.[feedbackModal.targetRole]?.comment || ''}
                  onChange={(e) => handleFeedbackChange(feedbackModal.deliveryId, feedbackModal.targetRole, 'comment', e.target.value)}
                  placeholder={`Write your feedback for the ${feedbackModal.targetRole}...`}
                  disabled={feedbackState[feedbackModal.deliveryId]?.[feedbackModal.targetRole]?.submitted}
                />
              </FormGroup>
              {feedbackState[feedbackModal.deliveryId]?.[feedbackModal.targetRole]?.error && (
                <FeedbackMessage error>{feedbackState[feedbackModal.deliveryId][feedbackModal.targetRole].error}</FeedbackMessage>
              )}
              {feedbackState[feedbackModal.deliveryId]?.[feedbackModal.targetRole]?.success && (
                <FeedbackMessage>{feedbackState[feedbackModal.deliveryId][feedbackModal.targetRole].success}</FeedbackMessage>
              )}
              <SubmitButton
                type="submit"
                disabled={feedbackState[feedbackModal.deliveryId]?.[feedbackModal.targetRole]?.submitted}
              >
                {feedbackState[feedbackModal.deliveryId]?.[feedbackModal.targetRole]?.submitted ? 'Feedback Submitted' : 'Submit Feedback'}
              </SubmitButton>
            </FeedbackForm>
          </ModalContent>
        </ModalOverlay>
      )}
      <Footer />
    </>
  );
};

export default Deliveries;
</file>

<file path="sustinia-ai/app.py">
from flask import Flask, request, jsonify
from flask_cors import CORS
from tensorflow.keras.applications.mobilenet_v2 import MobileNetV2, preprocess_input, decode_predictions
from tensorflow.keras.preprocessing import image
import numpy as np
from PIL import Image
from prophet import Prophet
import pandas as pd
import joblib
import logging

app = Flask(__name__)

# Configure CORS to allow requests from the frontend
CORS(app, resources={r"*": {"origins": "http://localhost:5173"}})

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load the pre-trained image analysis model
model = MobileNetV2(weights='imagenet')

# Load Prophet models for forecasting
try:
    model_donations = joblib.load('donation_forecast_model2.pkl')
    model_requests = joblib.load('request_forecast_model2.pkl')
except FileNotFoundError as e:
    logger.error(f"Failed to load Prophet models: {e}")
    model_donations = None
    model_requests = None

# Load traffic prediction model, weather encoder, and vehicle encoder
try:
    traffic_model = joblib.load('traffic_model.pkl')
    weather_encoder = joblib.load('weather_encoder.pkl')
    vehicle_encoder = joblib.load('vehicle_encoder.pkl')
except FileNotFoundError as e:
    logger.error(f"Failed to load traffic model or encoders: {e}")
    traffic_model = None
    weather_encoder = None
    vehicle_encoder = None

# Route for image analysis
@app.route('/analyze', methods=['POST'])
def analyze_image():
    if 'file' not in request.files:
        return jsonify({'error': 'No file provided'}), 400

    file = request.files['file']

    try:
        img = Image.open(file.stream).convert('RGB').resize((224, 224))
    except Exception as e:
        logger.error(f"Error opening image: {e}")
        return jsonify({'error': f'Failed to process image: {str(e)}'}), 400

    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)

    predictions = model.predict(img_array)
    decoded = decode_predictions(predictions, top=3)[0]

    results = [{'description': desc, 'confidence': float(prob)} for (_, desc, prob) in decoded]
    return jsonify(results)

# Route for donation forecasting
@app.route('/forecast/donations', methods=['GET'])
def forecast_donations():
    if not model_donations:
        return jsonify({'error': 'Donation forecast model not loaded'}), 500

    try:
        days = int(request.args.get('days', 30))
        if days <= 0:
            return jsonify({'error': 'Days must be a positive integer'}), 400

        future = model_donations.make_future_dataframe(periods=days)
        forecast = model_donations.predict(future)
        forecast_data = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(days)
        forecast_data['ds'] = forecast_data['ds'].dt.strftime('%Y-%m-%d')
        return jsonify(forecast_data.to_dict(orient='records'))
    except Exception as e:
        logger.error(f"Error in donation forecast: {e}")
        return jsonify({'error': f'Failed to generate donation forecast: {str(e)}'}), 500

# Route for request forecasting
@app.route('/forecast/requests', methods=['GET'])
def forecast_requests():
    if not model_requests:
        return jsonify({'error': 'Request forecast model not loaded'}), 500

    try:
        days = int(request.args.get('days', 30))
        if days <= 0:
            return jsonify({'error': 'Days must be a positive integer'}), 400

        future = model_requests.make_future_dataframe(periods=days)
        forecast = model_requests.predict(future)
        forecast_data = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(days)
        forecast_data['ds'] = forecast_data['ds'].dt.strftime('%Y-%m-%d')
        return jsonify(forecast_data.to_dict(orient='records'))
    except Exception as e:
        logger.error(f"Error in request forecast: {e}")
        return jsonify({'error': f'Failed to generate request forecast: {str(e)}'}), 500

# Route for predicting route duration
@app.route('/predict_duration', methods=['POST'])
def predict_duration():
    if not traffic_model or not weather_encoder or not vehicle_encoder:
        return jsonify({'error': 'Traffic prediction model or encoders not loaded'}), 500

    try:
        data = request.get_json()
        logger.info(f"Received data for duration prediction: {data}")

        # Validate required fields
        required_fields = ['distance', 'osrmDuration', 'hour', 'weather', 'vehicleType']
        missing_fields = [field for field in required_fields if field not in data]
        if missing_fields:
            return jsonify({'error': f'Missing required fields: {", ".join(missing_fields)}'}), 400

        distance = float(data['distance'])  # in km
        osrm_duration = float(data['osrmDuration'])  # in seconds
        hour = int(data['hour'])
        weather = data['weather'].title()  # e.g., 'Clear', 'Clouds'
        vehicle_type = data['vehicleType'].title()  # e.g., 'Car', 'Motorcycle'

        # Validate input ranges
        if distance <= 0:
            return jsonify({'error': 'Distance must be positive'}), 400
        if osrm_duration <= 0:
            return jsonify({'error': 'OSRM duration must be positive'}), 400
        if hour < 0 or hour > 23:
            return jsonify({'error': 'Hour must be between 0 and 23'}), 400

        # Validate weather category
        known_weather_categories = weather_encoder.classes_
        if weather not in known_weather_categories:
            return jsonify({
                'error': f'Invalid weather value: "{weather}". Expected one of: {", ".join(known_weather_categories)}'
            }), 400

        # Validate vehicle type
        known_vehicle_types = vehicle_encoder.classes_
        if vehicle_type not in known_vehicle_types:
            return jsonify({
                'error': f'Invalid vehicle type: "{vehicle_type}". Expected one of: {", ".join(known_vehicle_types)}'
            }), 400

        # Encode features
        weather_encoded = weather_encoder.transform([weather])[0]
        vehicle_encoded = vehicle_encoder.transform([vehicle_type])[0]
        logger.info(f"Encoded values: weather={weather_encoded}, vehicle_type={vehicle_encoded}")

        # Normalize features
        distance_meters = distance * 1000  # Convert km to meters
        osrm_duration_minutes = osrm_duration / 60  # Convert seconds to minutes
        hour_normalized = hour / 23.0  # Normalize hour to [0, 1]

        # Prepare features for prediction
        features = np.array([[distance_meters, osrm_duration_minutes, hour_normalized, weather_encoded, vehicle_encoded]])
        logger.info(f"Normalized features for prediction: {features}")

        # Make prediction using the traffic model
        try:
            predicted_duration = traffic_model.predict(features)[0]
            logger.info(f"Model predicted duration (minutes): {predicted_duration}")
            predicted_duration = predicted_duration * 60  # Convert minutes to seconds
        except Exception as e:
            logger.error(f"Model prediction failed: {e}")
            return jsonify({'error': f'Failed to predict duration: {str(e)}'}), 500

        # Ensure positive duration
        predicted_duration = max(predicted_duration, 60)  # Minimum 1 minute
        logger.info(f"Final predicted duration (seconds): {predicted_duration}")

        return jsonify({'predictedDuration': float(predicted_duration)})
    except ValueError as ve:
        logger.error(f"Value error in duration prediction: {ve}")
        return jsonify({'error': f'Invalid input format: {str(ve)}'}), 400
    except Exception as e:
        logger.error(f"Error in duration prediction: {e}")
        return jsonify({'error': f'Failed to predict duration: {str(e)}'}), 500

if __name__ == '__main__':
    app.run(debug=True, port=5000)
</file>

<file path="sustainafood-frontend/src/pages/ViewProfile.jsx">
import { useEffect, useState } from 'react';
import '../assets/styles/Profile.css';
import pdp from '../assets/images/pdp.png';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import edit from '../assets/images/edit.png';
import { Link, useNavigate, useParams } from 'react-router-dom';
import { getUserById, getUserGamificationData } from "../api/userService";
import { useAuth } from "../contexts/AuthContext";
import RoleSpecificProfile from '../components/RoleSpecificProfile';
import { FaEdit, FaPlus } from "react-icons/fa";
import StarRating from '../components/StarRating';
import { createFeedback, getFeedbackByUserId } from '../api/feedbackService';

const ViewProfile = () => {
  const navigate = useNavigate();
  const { id } = useParams();
  const { user: authUser, token, clearWelcomeMessage } = useAuth();
  const [user, setUser] = useState(null);
  const [error, setError] = useState("");
  const [welcomeMessage, setWelcomeMessage] = useState("");
  const [isEditing, setIsEditing] = useState(false);
  const [description, setDescription] = useState("");
  const [descriptionError, setDescriptionError] = useState("");
  const [feedbacks, setFeedbacks] = useState([]);
  const [newFeedback, setNewFeedback] = useState({
    rating: 0,
    comment: '',
  });
  const [feedbackError, setFeedbackError] = useState("");
  const [gamificationData, setGamificationData] = useState({ rank: null, score: 0 });
  const [gamificationError, setGamificationError] = useState("");

  const isOwnProfile = authUser && (authUser._id === id || authUser.id === id);

  useEffect(() => {
    const fetchUserAndFeedback = async () => {
      if (!id) {
        setError("No user ID provided");
        return;
      }

      try {
        // Fetch user data
        const userResponse = await getUserById(id);
        setUser(userResponse.data);
        setDescription(userResponse.data.description || "");
        if (isOwnProfile && userResponse.data.welcomeMessage) {
          setWelcomeMessage(userResponse.data.welcomeMessage);
        }

        // Fetch feedback for the user
        const feedbackResponse = await getFeedbackByUserId(id);
        setFeedbacks(feedbackResponse);

        // Fetch gamification data for the user
        try {
          const gamificationResponse = await getUserGamificationData(id);
          setGamificationData({
            rank: gamificationResponse.rank,
            score: gamificationResponse.score,
          });
          setGamificationError("");
        } catch (gamificationErr) {
          console.error("Error fetching gamification data:", gamificationErr);
          setGamificationError(
            gamificationErr.response?.data?.error || "Failed to load gamification data."
          );
          setGamificationData({ rank: null, score: 0 });
        }
      } catch (error) {
        console.error("Error fetching user or feedback:", error);
        setError("Failed to load user profile or feedback");
      }
    };

    fetchUserAndFeedback();
  }, [id, isOwnProfile]);

  useEffect(() => {
    if (welcomeMessage) {
      const timer = setTimeout(() => {
        setWelcomeMessage("");
        if (isOwnProfile) {
          clearWelcomeMessage();
        }
      }, 5000);

      return () => clearTimeout(timer);
    }
  }, [welcomeMessage, clearWelcomeMessage, isOwnProfile]);

  const handleSave = async () => {
    try {
      await onUpdateDescription(id, description);
      setUser(prevUser => ({ ...prevUser, description }));
      setIsEditing(false);
      setDescriptionError("");
    } catch (error) {
      console.error("Error updating description:", error);
      setDescriptionError("Failed to update description. Please try again.");
    }
  };

  const handleFeedbackSubmit = async (e) => {
    e.preventDefault();
    if (newFeedback.rating < 1 || newFeedback.rating > 5) {
      setFeedbackError('Please select a rating between 1 and 5 stars');
      return;
    }
    if (!newFeedback.comment.trim()) {
      setFeedbackError('Please enter a comment');
      return;
    }

    try {
      const reviewerId = authUser._id || authUser.id; // Get reviewer ID from authUser
      const feedback = await createFeedback(id, newFeedback.rating, newFeedback.comment, reviewerId, token);
      setFeedbacks([feedback, ...feedbacks]); // Add new feedback to the top
      setNewFeedback({ rating: 0, comment: '' }); // Reset form
      setFeedbackError('');
    } catch (error) {
      console.error('Error submitting feedback:', error);
      setFeedbackError('Failed to submit feedback. Please try again.');
    }
  };

  if (error) {
    return (
      <>
        <Navbar />
        <div className="pff-container-profile">
          <p className="pff-error-message">{error}</p>
        </div>
        <Footer />
      </>
    );
  }

  if (!user) {
    return (
      <>
        <Navbar />
        <div className="pff-container-profile">
          <p>Loading...</p>
        </div>
        <Footer />
      </>
    );
  }

  const profilePhotoUrl = user?.photo ? `http://localhost:3000/${user.photo}` : pdp;

  const getTrophySvg = (rank) => {
    if (rank === 1) {
      return (
        <svg className="pff-winner-icon pff-winner-trophy" viewBox="0 0 1024 1024" width="160" height="160">
          <path d="M469.333333 682.666667h85.333334v128h-85.333334zM435.2 810.666667h153.6c4.693333 0 8.533333 3.84 8.533333 8.533333v34.133333h-170.666666v-34.133333c0-4.693333 3.84-8.533333 8.533333-8.533333z" fill="#ea9518"></path>
          <path d="M384 853.333333h256a42.666667 42.666667 0 0 1 42.666667 42.666667v42.666667H341.333333v-42.666667a42.666667 42.666667 0 0 1 42.666667-42.666667z" fill="#6e4a32"></path>
          <path d="M213.333333 256v85.333333a42.666667 42.666667 0 0 0 85.333334 0V256H213.333333zM170.666667 213.333333h170.666666v128a85.333333 85.333333 0 1 1-170.666666 0V213.333333zM725.333333 256v85.333333a42.666667 42.666667 0 0 0 85.333334 0V256h-85.333334z m-42.666666-42.666667h170.666666v128a85.333333 85.333333 0 1 1-170.666666 0V213.333333z" fill="#f4ea2a"></path>
          <path d="M298.666667 85.333333h426.666666a42.666667 42.666667 0 0 1 42.666667 42.666667v341.333333a256 256 0 1 1-512 0V128a42.666667 42.666667 0 0 1 42.666667-42.666667z" fill="#f2be45"></path>
          <path d="M512 469.333333l-100.309333 52.736 19.157333-111.701333-81.152-79.104 112.128-16.298667L512 213.333333l50.176 101.632 112.128 16.298667-81.152 79.104 19.157333 111.701333z" fill="#FFF2A0"></path>
        </svg>
      );
    } else if (rank === 2) {
      return (
        <svg className="pff-winner-icon pff-winner-trophy" viewBox="0 0 1024 1024" width="160" height="160">
          <path d="M469.333333 682.666667h85.333334v128h-85.333334zM435.2 810.666667h153.6c4.693333 0 8.533333 3.84 8.533333 8.533333v34.133333h-170.666666v-34.133333c0-4.693333 3.84-8.533333 8.533333-8.533333z" fill="#A9A9A9"></path>
          <path d="M384 853.333333h256a42.666667 42.666667 0 0 1 42.666667 42.666667v42.666667H341.333333v-42.666667a42.666667 42.666667 0 0 1 42.666667-42.666667z" fill="#6e4a32"></path>
          <path d="M213.333333 256v85.333333a42.666667 42.666667 0 0 0 85.333334 0V256H213.333333zM170.666667 213.333333h170.666666v128a85.333333 85.333333 0 1 1-170.666666 0V213.333333zM725.333333 256v85.333333a42.666667 42.666667 0 0 0 85.333334 0V256h-85.333334z m-42.666666-42.666667h170.666666v128a85.333333 85.333333 0 1 1-170.666666 0V213.333333z" fill="#D3D3D3"></path>
          <path d="M298.666667 85.333333h426.666666a42.666667 42.666667 0 0 1 42.666667 42.666667v341.333333a256 256 0 1 1-512 0V128a42.666667 42.666667 0 0 1 42.666667-42.666667z" fill="#C0C0C0"></path>
          <path d="M512 469.333333l-100.309333 52.736 19.157333-111.701333-81.152-79.104 112.128-16.298667L512 213.333333l50.176 101.632 112.128 16.298667-81.152 79.104 19.157333 111.701333z" fill="#FFFFFF"></path>
        </svg>
      );
    } else if (rank === 3) {
      return (
        <svg className="pff-winner-icon pff-winner-trophy" viewBox="0 0 1024 1024" width="160" height="160">
          <path d="M469.333333 682.666667h85.333334v128h-85.333334zM435.2 810.666667h153.6c4.693333 0 8.533333 3.84 8.533333 8.533333v34.133333h-170.666666v-34.133333c0-4.693333 3.84-8.533333 8.533333-8.533333z" fill="#B87333"></path>
          <path d="M384 853.333333h256a42.666667 42.666667 0 0 1 42.666667 42.666667v42.666667H341.333333v-42.666667a42.666667 42.666667 0 0 1 42.666667-42.666667z" fill="#6e4a32"></path>
          <path d="M213.333333 256v85.333333a42.666667 42.666667 0 0 0 85.333334 0V256H213.333333zM170.666667 213.333333h170.666666v128a85.333333 85.333333 0 1 1-170.666666 0V213.333333zM725.333333 256v85.333333a42.666667 42.666667 0 0 0 85.333334 0V256h-85.333334z m-42.666666-42.666667h170.666666v128a85.333333 85.333333 0 1 1-170.666666 0V213.333333z" fill="#E4A362"></path>
          <path d="M298.666667 85.333333h426.666666a42.666667 42.666667 0 0 1 42.666667 42.666667v341.333333a256 256 0 1 1-512 0V128a42.666667 42.666667 0 0 1 42.666667-42.666667z" fill="#CD7F32"></path>
          <path d="M512 469.333333l-100.309333 52.736 19.157333-111.701333-81.152-79.104 112.128-16.298667L512 213.333333l50.176 101.632 112.128 16.298667-81.152 79.104 19.157333 111.701333z" fill="#FFF2A0"></path>
        </svg>
      );
    } else {
      return null;
    }
  };

  const getMedalSvg = (rank) => {
    if (rank === 1) {
      return (
        <svg className="pff-winner-icon pff-winner-medals pff-winner-slide-in-top" viewBox="0 0 1024 1024" width="80" height="80">
          <path d="M896 42.666667h-128l-170.666667 213.333333h128z" fill="#FF4C4C"></path>
          <path d="M768 42.666667h-128l-170.666667 213.333333h128z" fill="#3B8CFF"></path>
          <path d="M640 42.666667h-128L341.333333 256h128z" fill="#F1F1F1"></path>
          <path d="M128 42.666667h128l170.666667 213.333333H298.666667z" fill="#FF4C4C"></path>
          <path d="M256 42.666667h128l170.666667 213.333333h-128z" fill="#3B8CFF"></path>
          <path d="M384 42.666667h128l170.666667 213.333333h-128z" fill="#FBFBFB"></path>
          <path d="M298.666667 256h426.666666v213.333333H298.666667z" fill="#E3A815"></path>
          <path d="M512 661.333333m-320 0a320 320 0 1 0 640 0 320 320 0 1 0-640 0Z" fill="#FDDC3A"></path>
          <path d="M512 661.333333m-256 0a256 256 0 1 0 512 0 256 256 0 1 0-512 0Z" fill="#E3A815"></path>
          <path d="M512 661.333333m-213.333333 0a213.333333 213.333333 0 1 0 426.666666 0 213.333333 213.333333 0 1 0-426.666666 0Z" fill="#F5CF41"></path>
          <path d="M277.333333 256h469.333334a21.333333 21.333333 0 0 1 0 42.666667h-469.333334a21.333333 0 0 1 0-42.666667z" fill="#D19A0E"></path>
          <path d="M277.333333 264.533333a12.8 12.8 0 1 0 0 25.6h469.333334a12.8 12.8 0 1 0 0-25.6h-469.333334z m0-17.066666h469.333334a29.866667 29.866667 0 1 1 0 59.733333h-469.333334a29.866667 29.866667 0 1 1 0-59.733333z" fill="#F9D525"></path>
          <path d="M512 746.666667l-100.309333 52.736 19.157333-111.701334-81.152-79.104 112.128-16.298666L512 490.666667l50.176 101.632 112.128 16.298666-81.152 79.104 19.157333 111.701334z" fill="#FFF2A0"></path>
        </svg>
      );
    } else if (rank === 2) {
      return (
        <svg className="pff-winner-icon pff-winner-medals pff-winner-slide-in-top" viewBox="0 0 1024 1024" width="80" height="80">
          <path d="M896 42.666667h-128l-170.666667 213.333333h128z" fill="#FF4C4C"></path>
          <path d="M768 42.666667h-128l-170.666667 213.333333h128z" fill="#3B8CFF"></path>
          <path d="M640 42.666667h-128L341.333333 256h128z" fill="#F1F1F1"></path>
          <path d="M128 42.666667h128l170.666667 213.333333H298.666667z" fill="#FF4C4C"></path>
          <path d="M256 42.666667h128l170.666667 213.333333h-128z" fill="#3B8CFF"></path>
          <path d="M384 42.666667h128l170.666667 213.333333h-128z" fill="#FBFBFB"></path>
          <path d="M298.666667 256h426.666666v213.333333H298.666667z" fill="#C0C0C0"></path>
          <path d="M512 661.333333m-320 0a320 320 0 1 0 640 0 320 320 0 1 0-640 0Z" fill="#D3D3D3"></path>
          <path d="M512 661.333333m-256 0a256 256 0 1 0 512 0 256 256 0 1 0-512 0Z" fill="#C0C0C0"></path>
          <path d="M512 661.333333m-213.333333 0a213.333333 213.333333 0 1 0 426.666666 0 213.333333 213.333333 0 1 0-426.666666 0Z" fill="#D3D3D3"></path>
          <path d="M277.333333 256h469.333334a21.333333 21.333333 0 0 1 0 42.666667h-469.333334a21.333333 0 0 1 0-42.666667z" fill="#A9A9A9"></path>
          <path d="M277.333333 264.533333a12.8 12.8 0 1 0 0 25.6h469.333334a12.8 12.8 0 1 0 0-25.6h-469.333334z m0-17.066666h469.333334a29.866667 29.866667 0 1 1 0 59.733333h-469.333334a29.866667 29.866667 0 1 1 0-59.733333z" fill="#B0B0B0"></path>
          <path d="M512 746.666667l-100.309333 52.736 19.157333-111.701334-81.152-79.104 112.128-16.298666L512 490.666667l50.176 101.632 112.128 16.298666-81.152 79.104 19.157333 111.701334z" fill="#FFFFFF"></path>
        </svg>
      );
    } else if (rank === 3) {
      return (
        <svg className="pff-winner-icon pff-winner-medals pff-winner-slide-in-top" viewBox="0 0 1024 1024" width="80" height="80">
          <path d="M896 42.666667h-128l-170.666667 213.333333h128z" fill="#FF4C4C"></path>
          <path d="M768 42.666667h-128l-170.666667 213.333333h128z" fill="#3B8CFF"></path>
          <path d="M640 42.666667h-128L341.333333 256h128z" fill="#F1F1F1"></path>
          <path d="M128 42.666667h128l170.666667 213.333333H298.666667z" fill="#FF4C4C"></path>
          <path d="M256 42.666667h128l170.666667 213.333333h-128z" fill="#3B8CFF"></path>
          <path d="M384 42.666667h128l170.666667 213.333333h-128z" fill="#FBFBFB"></path>
          <path d="M298.666667 256h426.666666v213.333333H298.666667z" fill="#CD7F32"></path>
          <path d="M512 661.333333m-320 0a320 320 0 1 0 640 0 320 320 0 1 0-640 0Z" fill="#E4A362"></path>
          <path d="M512 661.333333m-256 0a256 256 0 1 0 512 0 256 256 0 1 0-512 0Z" fill="#CD7F32"></path>
          <path d="M512 661.333333m-213.333333 0a213.333333 213.333333 0 1 0 426.666666 0 213.333333 213.333333 0 1 0-426.666666 0Z" fill="#E4A362"></path>
          <path d="M277.333333 256h469.333334a21.333333 21.333333 0 0 1 0 42.666667h-469.333334a21.333333 0 0 1 0-42.666667z" fill="#B87333"></path>
          <path d="M277.333333 264.533333a12.8 12.8 0 1 0 0 25.6h469.333334a12.8 12.8 0 1 0 0-25.6h-469.333334z m0-17.066666h469.333334a29.866667 29.866667 0 1 1 0 59.733333h-469.333334a29.866667 29.866667 0 1 1 0-59.733333z" fill="#C68E55"></path>
          <path d="M512 746.666667l-100.309333 52.736 19.157333-111.701334-81.152-79.104 112.128-16.298666L512 490.666667l50.176 101.632 112.128 16.298666-81.152 79.104 19.157333 111.701334z" fill="#FFF2A0"></path>
        </svg>
      );
    } else {
      return null;
    }
  };

  return (
    <>
      <Navbar />
      <div className="pff-container-profile">
        {welcomeMessage && isOwnProfile && (
          <div className="pff-welcome-message">
            <div className="pff-welcome-message-content">
              <div className="pff-welcome-icon">🎉</div>
              <span>{welcomeMessage}</span>
            </div>
            <div className="pff-confetti-container">
              {Array.from({ length: 20 }).map((_, i) => (
                <div
                  key={i}
                  className={`pff-confetti pff-confetti-${i % 5}`}
                  style={{
                    left: `${Math.random() * 100}%`,
                    animationDelay: `${Math.random() * 3}s`,
                    animationDuration: `${3 + Math.random() * 2}s`,
                  }}
                ></div>
              ))}
            </div>
          </div>
        )}
        <header>
          <div className="pff-profile-header">
            <h1>{isOwnProfile ? "My Profile" : `${user.name}'s Profile`}</h1>
            {isOwnProfile && (
              <div className="pff-date-switcher">
                <button className='pff-btnProfile'>
                  <Link to="/edit-profile">
                    <img style={{ marginRight: '8px', marginTop: '6px' }} width="18px" src={edit} alt="Edit Profile" />
                  </Link>
                  Edit
                </button>
              </div>
            )}
          </div>
        </header>

        <div className="pff-main">
          <div className="pff-left-column">
            <div className="pff-profile-card">
              <div className="pff-card-white">
                <div className="pff-profile-pic">
                  <img src={profilePhotoUrl} alt="Profile" />
                </div>
                <div className="pff-bottom">
                  <div className="pff-content">
                    <div style={{ display: "flex" }}>
                      <div><span className="pff-name">Description</span></div>
                      {isOwnProfile && (
                        <div>
                          <button
                            className='pff-bottom-editdesc pff-name'
                            onClick={() => {
                              setIsEditing(true);
                              setDescriptionError("");
                            }}
                          >
                            {description ? <FaEdit /> : <FaPlus />}
                          </button>
                        </div>
                      )}
                    </div>
                    {isOwnProfile && isEditing ? (
                      <input
                        type="text"
                        className="pff-description-input"
                        value={description}
                        onChange={(e) => setDescription(e.target.value)}
                        onBlur={handleSave}
                        placeholder="Enter your description"
                        autoFocus
                      />
                    ) : (
                      <span className="pff-about-me">{description || "No description yet..."}</span>
                    )}
                    {descriptionError && isOwnProfile && (
                      <p className="pff-error-message">{descriptionError}</p>
                    )}
                  </div>
                  <div className="pff-bottom-bottom">
                    <h1 className='pff-userrole'>
                      {user?.role || 'Loading...'}
                    </h1>
                  </div>
                </div>
              </div>
            </div>

            <div className="pff-detailed-info">
              <h3>Detailed Information</h3>
              <ul>
                <li><strong>:</strong> {user?.name || 'Loading...'}</li>
                <li><strong>:</strong> {user?.email || 'Not provided'}</li>
                <li><strong>:</strong> {user?.phone || 'Not provided'}</li>
                <li><strong>:</strong> {user?.address || 'Not provided'}</li>
              </ul>
            </div>
          </div>

          <div className="pff-center-column">
            <RoleSpecificProfile user={user} />
          </div>

          <div className="pff-right-column">
            <div className="pff-winner-cards">
              <div
                className={`pff-winner-outlinePage ${
                  gamificationData.rank === 1
                    ? "pff-winner-outlinePage-gold"
                    : gamificationData.rank === 2
                    ? "pff-winner-outlinePage-silver"
                    : gamificationData.rank === 3
                    ? "pff-winner-outlinePage-bronze"
                    : "pff-winner-outlinePage-none"
                }`}
              >
                {gamificationData.rank <= 3 && gamificationData.rank > 0 ? getTrophySvg(gamificationData.rank) : null}
                {gamificationError ? (
                  <p className="pff-winner-ranking_number">{gamificationError}</p>
                ) : gamificationData.rank === 0 ? (
                  <p
                    className="pff-no-activity-message"
                    dangerouslySetInnerHTML={{
                      __html:
                        user?.role === "transporter"
                          ? "Join the challenge to see your score!<br />No deliveries completed yet!"
                          : user?.role === "student" || user?.role === "ong"
                          ? "Join the challenge to see your score!<br />No requests posted yet!"
                          : user?.role === "restaurant" || user?.role === "supermarket" || user?.role === "personaldonor"
                          ? "Join the challenge to see your score!<br />No donations made yet!"
                          : "Gamification not applicable",
                    }}
                  />
                ) : (
                  <p className="pff-winner-ranking_number">
                    {gamificationData.rank !== null ? gamificationData.rank : "N/A"}
                    <span className="pff-winner-ranking_word">
                      {gamificationData.rank === 1
                        ? "st"
                        : gamificationData.rank === 2
                        ? "nd"
                        : gamificationData.rank === 3
                        ? "rd"
                        : "th"}
                    </span>
                  </p>
                )}
                <div className="pff-winner-splitLine"></div>
                <svg className="pff-winner-icon pff-winner-userAvatar" viewBox="0 0 1024 1024" width="25" height="25">
                  <path
                    d="M512 0C228.693 0 0 228.693 0 512s228.693 512 512 512 512-228.693 512-512S795.307 0 512 0z m0 69.973c244.053 0 442.027 197.973 442.027 442.027 0 87.04-25.6 168.96-69.973 237.227-73.387-78.507-170.667-133.12-281.6-151.893 69.973-34.133 119.467-105.813 119.467-187.733 0-116.053-93.867-209.92-209.92-209.92s-209.92 93.867-209.92 209.92c0 83.627 47.787 155.307 119.467 187.733-110.933 20.48-208.213 75.093-281.6 153.6-44.373-68.267-69.973-150.187-69.973-238.933 0-244.053 197.973-442.027 442.027-442.027z"
                    fill="#8a8a8a"
                  ></path>
                </svg>
                <p className="pff-winner-userName">{user?.name || 'Loading...'}</p>
              </div>
              <div className="pff-winner-detailPage">
                {getMedalSvg(gamificationData.rank)}
                <div className="pff-winner-gradesBox">
                  <svg className="pff-winner-icon pff-winner-gradesIcon" viewBox="0 0 1024 1024" width="60" height="60">
                    <path d="M382.6 805H242.2c-6.7 0-12.2-5.5-12.2-12.2V434.3c0-6.7 5.5-12.2 12.2-12.2h140.4c6.7 0 12.2 5.5 12.2 12.2v358.6c0 6.6-5.4 12.1-12.2 12.1z" fill="#ea9518"></path>
                    <path d="M591.1 805H450.7c-6.7 0-12.2-5.5-12.2-12.2V254.9c0-6.7 5.5-12.2 12.2-12.2h140.4c6.7 0 12.2 5.5 12.2 12.2v537.9c0 6.7-5.5 12.2-12.2 12.2z" fill="#f2be45"></path>
                    <path d="M804.4 805H663.9c-6.7 0-12.2-5.5-12.2-12.2v-281c0-6.7 5.5-12.2 12.2-12.2h140.4c6.7 0 12.2 5.5 12.2 12.2v281c0.1 6.7-5.4 12.2-12.1 12.2z" fill="#ea9518"></path>
                  </svg>
                  <p className="pff-winner-gradesBoxLabel">
                    {user?.role === "transporter"
                      ? "DELIVERY SCORE"
                      : user?.role === "student" || user?.role === "ong"
                      ? "REQUEST SCORE"
                      : "DONATION SCORE"}
                  </p>
                  <p className="pff-winner-gradesBoxNum">{gamificationData.score || 0}</p>
                </div>
              </div>
            </div>

            <div className="pff-inbox-section">
              <h3>Feedbacks</h3>
              {!isOwnProfile && (
                <div className="pff-feedback-form">
                  <h4>Add Feedback</h4>
                  <form onSubmit={handleFeedbackSubmit}>
                    <div className="pff-form-group">
                      <label>Rating:</label>
                      <StarRating
                        rating={newFeedback.rating}
                        setRating={(rating) => setNewFeedback({ ...newFeedback, rating })}
                        interactive={true}
                      />
                    </div>
                    <div className="pff-form-group">
                      <label>Comment:</label>
                      <textarea
                        value={newFeedback.comment}
                        onChange={(e) => setNewFeedback({ ...newFeedback, comment: e.target.value })}
                        placeholder="Write your feedback here..."
                        rows="3"
                      />
                    </div>
                    {feedbackError && <p className="pff-error-message">{feedbackError}</p>}
                    <button type="submit" className="pff-submit-feedback-btn">Submit Feedback</button>
                  </form>
                </div>
              )}
          <div className="pff-inbox-section">
  <h3>Feedbacks</h3>
  <div className="pff-feedback-container">
    {feedbacks.length > 0 ? (
      <div className="pff-feedback-scroll">
        {feedbacks.map((feedback) => (
          <div className="pff-feedback-card" key={feedback._id}>
            <div className="pff-message">
              <div className="pff-message-header pff-feedback-tip">
                <img
                  src={feedback.reviewer?.photo ? `http://localhost:3000/${feedback.reviewer.photo}` : pdp}
                  alt="Avatar"
                />
                <div>
                  <strong>{feedback.reviewer?.name || "Anonymous"}</strong>
                  <StarRating rating={feedback.rating} interactive={false} />
                  <p>{feedback.comment}</p>
                </div>
              </div>
              <span className="pff-time">{new Date(feedback.createdAt).toLocaleString()}</span>
            </div>
          </div>
        ))}
      </div>
    ) : (
      <p>No feedback yet.</p>
    )}
  </div>
</div>
            </div>
          </div>
        </div>
      </div>
      <Footer />
    </>
  );
};

export default ViewProfile;
</file>

<file path="sustainafood-backend/routes/users.js">
var express=require('express');
const router = express.Router();
const userController=require('../controllers/UserController');
// Import de votre config Multer
const upload = require("../Middleware/Upload");


// Use Multer to handle file uploads for both "photo" and "image_carte_etudiant"
router.post(
  '/create',
  upload.fields([
    { name: "photo", maxCount: 1 },
    { name: "image_carte_etudiant", maxCount: 1 }
  ]),
  userController.addUser
);
router.get('/list', userController.getUsers);
router.get('/details/:id', userController.getUserById);
router.delete('/delete/:id', userController.deleteUser);

// Route de mise à jour d'un utilisateur (avec upload Multer)
router.put(
    "/update/:id",
    upload.fields([
      { name: "photo", maxCount: 1 },                 // Pour la photo de profil
      { name: "image_carte_etudiant", maxCount: 1 },  // Pour la carte étudiante (optionnel)
    ]),
    userController.updateUser
  );
  router.put(
    "/updateDescription/:id",
    userController.onUpdateDescription
  );
  router.get('/transporters', userController.getTransporters);

router.post('/login', userController.user_signin);
router.post('/userwinthemailandpss', userController.getUserByEmailAndPassword);
router.post('/forgot-password', userController.sendResetCode);
router.post('/reset-code', userController.validateResetCode);
router.post('/reset-password', userController.resetPassword);

router.put('/toggle-block/:id', userController.toggleBlockUser);
router.get('/view/:id', userController.viewStudent);
router.get('/view/:id', userController.viewRestaurant);
router.get('/view/:id', userController.viewSupermarket);
router.get('/view/:id', userController.viewNGO);
router.get('/view/:id', userController.viewTransporter);
router.put("/update-user/:email", userController.updateUserWithEmail);
router.post('/createUser' , userController.createUser);
router.put('/deactivate-account/:id', userController.deactivateAccount);
router.put('/change-password/:id', userController.changePassword);
router.post("/send-2fa-code", userController.send2FACode);
router.post("/validate-2fa-code", userController.validate2FACode);
router.post("/toggle-2fa", userController.toggle2FA);
router.post("/send2FACodeforsigninwithgoogle", userController.send2FACodeforsigninwithgoogle);
router.put('/:transporterId/location', userController.updateTransporterLocation);
router.put('/update-availability/:transporterId', userController.updateTransporterAvailability);
router.put('/updateuseravailability/:userId', userController.updateUserAvailability);
router.get('/:id/gamification', userController.getUserGamificationData);
//advertisement routes

router.get('/top-donor-ad', userController.getTopDonorAdvertisement);
router.post('/:id/upload-ad', upload.single('advertisementImage'), userController.uploadAdvertisement);

router.get('/advertisements', userController.getAllAdvertisements);
router.put('/advertisements/:id/status', userController.updateAdvertisementStatus);
//
router.get('/top-transporter', userController.getTopTransporter);
module.exports = router;
</file>

<file path="sustainafood-frontend/src/components/backoffcom/Sidebar.jsx">
"use client"

import { Link, useLocation } from "react-router-dom"
import { useState } from "react"
import {
  FaUsers,
  FaChartBar,
  FaCogs,
  FaTruck,
  FaAppleAlt,
  FaChevronDown,
  FaChevronUp,
  FaUniversity,
  FaHandsHelping,
  FaFileAlt,
} from "react-icons/fa"
import logo from "../../assets/images/logooo.png"
import "/src/assets/styles/backoffcss/sidebar.css"

// Sidebar component for navigation
const Sidebar = () => {
  // State to manage dropdown visibility
  const [showUserManagement, setShowUserManagement] = useState(false)
  const [showRecipients, setShowRecipients] = useState(false)
  const [showDonors, setShowDonors] = useState(false)
  const [showFoodDonationManagement, setShowFoodDonationManagement] = useState(false)
  const [showFoodDonation, setShowFoodDonation] = useState(false)

  const location = useLocation() // Get current location

  // Check if the current path is related to contact submissions
  const isContactSubmissionsActive = location.pathname.startsWith("/contact/submissions")

  return (
    <div className="admin-sidebar">
      {/* Sidebar header with logo and title */}
      <div className="admin-sidebar-header">
        <div className="admin-sidebar-logo-container">
          <img src={logo || "/placeholder.svg"} alt="Logo" className="admin-sidebar-logo" />
        </div>
        <h2>SustainaFood</h2>
        <div className="admin-sidebar-subtitle">Admin Portal</div>
      </div>
      <nav>
        {/* Dashboard link */}
        <Link to="/dashboard" className={location.pathname === "/dashboard" ? "active" : ""}>
          <FaChartBar className="icon" /> <span>Dashboard</span>
        </Link>

        {/* Contact Submissions link */}
        <Link to="/contact/submissions" className={isContactSubmissionsActive ? "active" : ""}>
          <FaFileAlt className="icon" /> <span>Contact Submissions</span>
        </Link>

        {/* User Management dropdown */}
        <div className="admin-sidebar-dropdown">
          <button onClick={() => setShowUserManagement(!showUserManagement)}>
            <FaUsers className="icon" /> <span>User Management</span>
            {showUserManagement ? <FaChevronUp /> : <FaChevronDown />}
          </button>
          {showUserManagement && (
            <div className="admin-sidebar-dropdown-content">
              {/* Recipients submenu */}
              <button className="admin-sidebar-sub-dropdown" onClick={() => setShowRecipients(!showRecipients)}>
                <FaHandsHelping className="icon" /> <span>Recipients</span>
                {showRecipients ? <FaChevronUp /> : <FaChevronDown />}
              </button>
              {showRecipients && (
                <ul className="admin-sidebar-sub-dropdown-content" id="recipients-dropdown" role="menu">
                  <li>
                    <Link
                      to="/recipients/students"
                      className={location.pathname === "/recipients/students" ? "active" : ""}
                      role="menuitem"
                    >
                      Students
                    </Link>
                  </li>
                  <li>
                    <Link
                      to="/recipients/ngos"
                      className={location.pathname === "/recipients/ngos" ? "active" : ""}
                      role="menuitem"
                    >
                      NGOs
                    </Link>
                  </li>
                </ul>
              )}

              {/* Donors submenu */}
              <button className="admin-sidebar-sub-dropdown" onClick={() => setShowDonors(!showDonors)}>
                <FaUniversity className="icon" /> <span>Donors</span>
                {showDonors ? <FaChevronUp /> : <FaChevronDown />}
              </button>
              {showDonors && (
                <ul className="admin-sidebar-sub-dropdown-content" id="donors-dropdown" role="menu">
                  <li>
                    <Link
                      to="/donors/supermarkets"
                      className={location.pathname === "/donors/supermarkets" ? "active" : ""}
                      role="menuitem"
                    >
                      Supermarkets
                    </Link>
                  </li>
                  <li>
                    <Link
                      to="/donors/restaurants"
                      className={location.pathname === "/donors/restaurants" ? "active" : ""}
                      role="menuitem"
                    >
                      Restaurants
                    </Link>
                  </li>
                  <li>
                    <Link
                      to="/PersonnelList"
                      className={location.pathname === "/PersonnelList" ? "active" : ""}
                      role="menuitem"
                    >
                      Personnel Donors
                    </Link>
                  </li>
                </ul>
              )}

              <Link
                to="/transporters"
                className={location.pathname === "/transporters" ? "active" : ""}
                role="menuitem"
              >
                Transporters
              </Link>
              <Link
                to="/advertisements"
                className={location.pathname === "/advertisements" ? "active" : ""}
                role="menuitem"
              >
                Advertisements
              </Link>
            </div>
          )}
        </div>

        {/* Food Donation Management dropdown */}
        <div className="admin-sidebar-dropdown">
          <button onClick={() => setShowFoodDonationManagement(!showFoodDonationManagement)}>
            <FaAppleAlt className="icon" /> <span>Food Donation Management</span>
            {showFoodDonationManagement ? <FaChevronUp /> : <FaChevronDown />}
          </button>
          {showFoodDonationManagement && (
            <div className="admin-sidebar-dropdown-content">
              <Link to="/Donations">Donation Management</Link>
              <Link
                to="/food-donation/requests"
                className={location.pathname === "/food-donation/requests" ? "active" : ""}
                role="menuitem"
              >
                Request Management
              </Link>
              <Link to="/DonationTransList">Donation Transaction Management</Link>
              <Link to="/PredictionsDashboard">Donation Predictions Dashboard</Link>
              <Link to="/AnomaliesDashbord">Anomaly Management Dashboard</Link>
            </div>
          )}
        </div>

        {/* Logistics & Transport link */}
        <Link to="/Delivery">
          <FaTruck className="icon" /> <span>Logistics & Transport</span>
        </Link>
        {/* Settings link */}
        <Link to="/admin-profile">
          <FaCogs className="icon" /> <span>Settings</span>
        </Link>
      </nav>
    </div>
  )
}

export default Sidebar
</file>

<file path="sustainafood-frontend/src/pages/AssignedDeliveries.jsx">
"use client"

import { useEffect, useState } from "react"
import { FaSearch, FaCheckCircle, FaTimesCircle, FaTruck, FaChevronDown } from "react-icons/fa"
import { Link, useNavigate, useParams } from "react-router-dom"
import {
  acceptOrRefuseDelivery,
  getDeliveriesByTransporter,
  startJourney,
  updateDeliveryStatus,
} from "../api/deliveryService"
import { createFeedback } from "../api/feedbackService"
import { getRequestById } from "../api/requestNeedsService"
import { getUserById, updateTransporterLocation } from "../api/userService"
import imgmouna from "../assets/images/imgmouna.png"
import DeleveryMap from "../components/DeleveryMap"
import Footer from "../components/Footer"
import Navbar from "../components/Navbar"
import StarRating from "../components/StarRating"
import { useAlert } from "../contexts/AlertContext"
import "../assets/styles/assigned-deliveries.css"

const AssignedDeliveries = () => {
  const { showAlert } = useAlert()
  const { transporterId } = useParams()
  const navigate = useNavigate()
  const [deliveries, setDeliveries] = useState([])
  const [filteredDeliveries, setFilteredDeliveries] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [currentPage, setCurrentPage] = useState(1)
  const [itemsPerPage] = useState(3)
  const [filterOption, setFilterOption] = useState("all")
  const [sortOption, setSortOption] = useState("date")
  const [searchQuery, setSearchQuery] = useState("")
  const [processing, setProcessing] = useState({})
  const [isMapOpen, setIsMapOpen] = useState(null)
  const [transporterLocation, setTransporterLocation] = useState({ type: "Point", coordinates: [0, 0] })
  const [feedbackModal, setFeedbackModal] = useState(null)
  const [feedbackState, setFeedbackState] = useState({})

  const initializeFeedbackState = (deliveryId, targetRole) => ({
    rating: 0,
    comment: "",
    submitted: false,
    error: "",
    success: "",
  })

  const handleFeedbackChange = (deliveryId, targetRole, field, value) => {
    setFeedbackState((prev) => ({
      ...prev,
      [deliveryId]: {
        ...prev[deliveryId],
        [targetRole]: {
          ...prev[deliveryId]?.[targetRole],
          [field]: value,
        },
      },
    }))
  }

  const handleFeedbackSubmit = async (deliveryId, targetRole, recipientId) => {
    const feedback = feedbackState[deliveryId]?.[targetRole]
    if (!feedback) return

    if (feedback.rating < 1 || feedback.rating > 5) {
      setFeedbackState((prev) => ({
        ...prev,
        [deliveryId]: {
          ...prev[deliveryId],
          [targetRole]: {
            ...prev[deliveryId][targetRole],
            error: "Please select a rating between 1 and 5 stars",
            success: "",
          },
        },
      }))
      return
    }

    if (!feedback.comment.trim()) {
      setFeedbackState((prev) => ({
        ...prev,
        [deliveryId]: {
          ...prev[deliveryId],
          [targetRole]: {
            ...prev[deliveryId][targetRole],
            error: "Please enter a comment",
            success: "",
          },
        },
      }))
      return
    }

    try {
      const token = localStorage.getItem("token")
      await createFeedback(recipientId, feedback.rating, feedback.comment, transporterId, token)
      setFeedbackState((prev) => ({
        ...prev,
        [deliveryId]: {
          ...prev[deliveryId],
          [targetRole]: {
            ...prev[deliveryId][targetRole],
            submitted: true,
            error: "",
            success: "Feedback submitted successfully!",
          },
        },
      }))
    } catch (error) {
      setFeedbackState((prev) => ({
        ...prev,
        [deliveryId]: {
          ...prev[deliveryId],
          [targetRole]: {
            ...prev[deliveryId][targetRole],
            error: error.message || "Failed to submit feedback",
            success: "",
          },
        },
      }))
    }
  }

  const openFeedbackModal = (deliveryId, targetRole, targetId, targetName) => {
    setFeedbackModal({ deliveryId, targetRole, targetId, targetName })
  }

  const closeFeedbackModal = () => {
    setFeedbackModal(null)
  }

  useEffect(() => {
    const fetchTransporterLocation = async () => {
      try {
        const user = JSON.parse(localStorage.getItem("user"))
        if (user?.location) {
          setTransporterLocation(user.location)
        } else if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
            ({ coords }) => {
              const newLocation = { type: "Point", coordinates: [coords.longitude, coords.latitude] }
              setTransporterLocation(newLocation)
              updateTransporterLocation(transporterId, { location: newLocation, address: "Current Location" })
            },
            () => console.error("Failed to get initial geolocation"),
          )
        }
      } catch (err) {
        console.error("Error fetching transporter location:", err)
      }
    }
    fetchTransporterLocation()
  }, [transporterId])

  useEffect(() => {
    const fetchData = async () => {
      const token = localStorage.getItem("token")
      if (!token) {
        showAlert("error", "Please log in to view deliveries")
        navigate("/login")
        return
      }

      try {
        setLoading(true)
        const response = await getDeliveriesByTransporter(transporterId, filterOption !== "all" ? filterOption : "")
        const deliveriesArray = Array.isArray(response.data.data) ? response.data.data : []

        const enrichedDeliveries = await Promise.all(
          deliveriesArray.map(async (delivery) => {
            let pickupCoordinates = delivery.pickupCoordinates
            let deliveryCoordinates = delivery.deliveryCoordinates

            if (!pickupCoordinates) {
              pickupCoordinates = await geocodeAddress(delivery.pickupAddress)
            }
            if (!deliveryCoordinates) {
              deliveryCoordinates = await geocodeAddress(delivery.deliveryAddress)
            }

            return {
              ...delivery,
              pickupCoordinates: pickupCoordinates || { type: "Point", coordinates: [0, 0] },
              deliveryCoordinates: deliveryCoordinates || { type: "Point", coordinates: [0, 0] },
            }
          }),
        )

        const userIds = new Set()
        const requestNeedIds = new Set()
        enrichedDeliveries.forEach((delivery) => {
          const donation = delivery.donationTransaction?.donation || {}
          const requestNeed = delivery.donationTransaction?.requestNeed
          if (donation.donor) userIds.add(donation.donor)
          if (requestNeed) requestNeedIds.add(requestNeed)
        })

        const requestNeedPromises = Array.from(requestNeedIds).map((id) =>
          getRequestById(id).catch((err) => {
            console.error(`Failed to fetch requestNeed ${id}:`, err)
            return { _id: id, recipient: null }
          }),
        )
        const requestNeeds = await Promise.all(requestNeedPromises)
        const requestNeedMap = requestNeeds.reduce((map, rn) => {
          const requestNeedData = rn.data ? rn.data : rn
          map[requestNeedData._id] = requestNeedData
          return map
        }, {})

        requestNeeds.forEach((rn) => {
          const recipient = rn.data ? rn.data.recipient : rn.recipient
          if (recipient && recipient._id) userIds.add(recipient._id)
        })

        const userPromises = Array.from(userIds).map((id) =>
          getUserById(id).catch((err) => {
            console.error(`Failed to fetch user ${id}:`, err)
            return { _id: id, name: "Unknown", phone: "Not provided", photo: null, isAvailable: false, isActive: true }
          }),
        )
        const users = await Promise.all(userPromises)
        const userMap = users.reduce((map, user) => {
          const userData = user.data ? user.data : user
          map[userData._id] = userData
          return map
        }, {})

        const finalDeliveries = enrichedDeliveries.map((delivery) => {
          const donation = delivery.donationTransaction?.donation || {}
          const requestNeedId = delivery.donationTransaction?.requestNeed
          const requestNeed = requestNeedMap[requestNeedId] || { recipient: null }
          const recipient = requestNeed.recipient || null
          return {
            ...delivery,
            donationTransaction: {
              ...delivery.donationTransaction,
              donation: {
                ...donation,
                donor: userMap[donation.donor] || {
                  name: "Unknown Donor",
                  phone: "Not provided",
                  photo: null,
                  isAvailable: false,
                  isActive: true,
                },
              },
              requestNeed: {
                recipient: userMap[recipient?._id] || {
                  name: "Unknown Recipient",
                  phone: "Not provided",
                  photo: null,
                  isAvailable: false,
                  isActive: true,
                },
              },
            },
          }
        })

        setDeliveries(finalDeliveries)
        setFilteredDeliveries(finalDeliveries)

        const initialFeedbackState = {}
        finalDeliveries.forEach((delivery) => {
          if (delivery.status === "picked_up" || delivery.status === "delivered") {
            initialFeedbackState[delivery._id] = {}
            if (delivery.status === "picked_up" || delivery.status === "delivered") {
              initialFeedbackState[delivery._id].donor = initializeFeedbackState(delivery._id, "donor")
            }
            if (delivery.status === "delivered") {
              initialFeedbackState[delivery._id].recipient = initializeFeedbackState(delivery._id, "recipient")
            }
          }
        })
        setFeedbackState(initialFeedbackState)
      } catch (err) {
        console.error("Fetch error:", err)
        let errorMessage = "Failed to fetch deliveries"
        if (err.response) {
          if (err.response.status === 404) {
            errorMessage = "No deliveries found for this transporter"
          } else if (err.response.status === 400) {
            errorMessage = "Invalid transporter ID"
          } else {
            errorMessage = err.message || "An unexpected error occurred"
          }
        }
        setError(errorMessage)
      } finally {
        setLoading(false)
      }
    }

    fetchData()
  }, [transporterId, navigate, showAlert, filterOption])

  const geocodeAddress = async (address) => {
    try {
      const res = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`)
      const data = await res.json()
      if (data.length > 0) {
        return { type: "Point", coordinates: [Number.parseFloat(data[0].lon), Number.parseFloat(data[0].lat)] }
      }
      return null
    } catch (err) {
      console.error(`Failed to geocode address ${address}:`, err)
      return null
    }
  }

  const handleAcceptOrRefuse = async (deliveryId, action) => {
    if (!transporterId) {
      showAlert("error", "Transporter ID is missing. Please try again or log in.")
      return
    }

    if (!window.confirm(`Are you sure you want to ${action} this delivery?`)) return

    try {
      setProcessing((prev) => ({ ...prev, [deliveryId]: true }))
      const response = await acceptOrRefuseDelivery(deliveryId, action, transporterId)

      if (action === "accept") {
        setDeliveries((prev) => prev.map((d) => (d._id === deliveryId ? { ...d, status: "accepted" } : d)))
        showAlert("success", "Delivery accepted successfully!")
      } else {
        setDeliveries((prev) => prev.filter((d) => d._id !== deliveryId))
        showAlert("success", response.data.message || "Delivery refused and removed from your list.")
      }
    } catch (error) {
      console.error(`Error ${action}ing delivery:`, error)
      const errorMessage = error.response?.data?.message || error.message || `Failed to ${action} delivery`
      showAlert("error", errorMessage)
    } finally {
      setProcessing((prev) => ({ ...prev, [deliveryId]: false }))
    }
  }

  const handleStartJourney = async (deliveryId) => {
    if (!window.confirm("Are you sure you want to start the delivery journey?")) return

    try {
      setProcessing((prev) => ({ ...prev, [deliveryId]: true }))

      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          async ({ coords }) => {
            const newLocation = { type: "Point", coordinates: [coords.longitude, coords.latitude] }
            await updateTransporterLocation(transporterId, {
              location: newLocation,
              address: await reverseGeocode(coords.longitude, coords.latitude),
            })
            setTransporterLocation(newLocation)
          },
          () => showAlert("error", "Failed to get current location"),
        )
      }

      await startJourney(deliveryId, transporterId)
      setDeliveries((prev) => prev.map((d) => (d._id === deliveryId ? { ...d, status: "in_progress" } : d)))
      showAlert("success", "Journey started successfully!")
    } catch (error) {
      console.error("Error starting journey:", error)
      showAlert("error", error.message || "Failed to start journey")
    } finally {
      setProcessing((prev) => ({ ...prev, [deliveryId]: false }))
    }
  }

  const handleUpdateStatus = async (deliveryId, newStatus) => {
    if (!window.confirm(`Are you sure you want to mark this delivery as ${newStatus}?`)) return

    try {
      setProcessing((prev) => ({ ...prev, [deliveryId]: true }))

      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          async ({ coords }) => {
            const newLocation = { type: "Point", coordinates: [coords.longitude, coords.latitude] }
            await updateTransporterLocation(transporterId, {
              location: newLocation,
              address: await reverseGeocode(coords.longitude, coords.latitude),
            })
            setTransporterLocation(newLocation)
          },
          () => showAlert("error", "Failed to get current location"),
        )
      }

      await updateDeliveryStatus(deliveryId, newStatus, transporterId)
      setDeliveries((prev) => prev.map((d) => (d._id === deliveryId ? { ...d, status: newStatus } : d)))
      setFeedbackState((prev) => {
        const updated = { ...prev }
        if (newStatus === "picked_up") {
          updated[deliveryId] = { ...updated[deliveryId], donor: initializeFeedbackState(deliveryId, "donor") }
        } else if (newStatus === "delivered") {
          updated[deliveryId] = {
            ...updated[deliveryId],
            donor: initializeFeedbackState(deliveryId, "donor"),
            recipient: initializeFeedbackState(deliveryId, "recipient"),
          }
        }
        return updated
      })
      showAlert("success", `Delivery marked as ${newStatus} successfully!`)
    } catch (error) {
      console.error(`Error updating status to ${newStatus}:`, error)
      showAlert("error", error.message || `Failed to update status to ${newStatus}`)
    } finally {
      setProcessing((prev) => ({ ...prev, [deliveryId]: false }))
    }
  }

  const reverseGeocode = async (lng, lat) => {
    try {
      const res = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lon=${lng}&lat=${lat}`)
      const data = await res.json()
      return data.display_name || "Unknown Location"
    } catch {
      return "Unknown Location"
    }
  }

  const handleOpenMap = (delivery) => {
    setIsMapOpen(delivery._id)
  }

  useEffect(() => {
    if (!deliveries.length) return

    let updatedDeliveries = [...deliveries]

    if (searchQuery) {
      updatedDeliveries = updatedDeliveries.filter((delivery) => {
        const donation = delivery.donationTransaction?.donation || {}
        const recipient = delivery.donationTransaction?.requestNeed?.recipient || {}
        const donor = donation.donor || {}
        const titleMatch = donation.title?.toLowerCase().includes(searchQuery.toLowerCase())
        const categoryMatch = donation.category?.toLowerCase().includes(searchQuery.toLowerCase())
        const recipientMatch = recipient.name?.toLowerCase().includes(searchQuery.toLowerCase())
        const donorMatch = donor.name?.toLowerCase().includes(searchQuery.toLowerCase())
        const addressMatch =
          delivery.pickupAddress?.toLowerCase().includes(searchQuery.toLowerCase()) ||
          delivery.deliveryAddress?.toLowerCase().includes(searchQuery.toLowerCase())
        return titleMatch || categoryMatch || recipientMatch || donorMatch || addressMatch
      })
    }

    updatedDeliveries.sort((a, b) => {
      const donationA = a.donationTransaction?.donation || {}
      const donationB = b.donationTransaction?.donation || {}
      const recipientA = a.donationTransaction?.requestNeed?.recipient || {}
      const recipientB = b.donationTransaction?.requestNeed?.recipient || {}
      if (sortOption === "title") {
        return (donationA.title || "").localeCompare(donationB.title || "")
      } else if (sortOption === "recipient") {
        return (recipientA.name || "").localeCompare(recipientB.name || "")
      } else if (sortOption === "status") {
        return (a.status || "pending").localeCompare(b.status || "pending")
      } else {
        return new Date(a.createdAt) - new Date(b.createdAt)
      }
    })

    setFilteredDeliveries(updatedDeliveries)
    setCurrentPage(1)
  }, [deliveries, sortOption, searchQuery])

  const indexOfLastItem = currentPage * itemsPerPage
  const indexOfFirstItem = indexOfLastItem - itemsPerPage
  const currentDeliveries = filteredDeliveries.slice(indexOfFirstItem, indexOfLastItem)
  const totalPages = Math.ceil(filteredDeliveries.length / itemsPerPage)

  const paginate = (pageNumber) => setCurrentPage(pageNumber)

  if (loading) return <div className="assigneddel-loading-message">Loading...</div>

  if (error)
    return (
      <>
        <Navbar />
        <div className="assigneddel-error-container">Error: {error}</div>
        <Footer />
      </>
    )

  if (!deliveries.length)
    return (
      <>
        <Navbar />
        <div className="assigneddel-error-container">No deliveries found for this transporter</div>
        <Footer />
      </>
    )

  return (
    <>
      <Navbar />
      <div className="assigneddel-container">
        <div className="assigneddel-header-section">
          <div className="assigneddel-title-container">
            <FaTruck className="assigneddel-title-icon" />
            <h1 className="assigneddel-title">Assigned Deliveries</h1>
          </div>

          <div className="assigneddel-controls-container">
            <div className="assigneddel-search-container">
              <FaSearch className="assigneddel-search-icon" />
              <input
                type="text"
                className="assigneddel-search-input"
                placeholder="Search by title, category, recipient, donor, or address..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                aria-label="Search deliveries"
              />
            </div>

            <div className="assigneddel-filter-container">
              <div className="assigneddel-select-wrapper">
                <select
                  className="assigneddel-select"
                  value={filterOption}
                  onChange={(e) => setFilterOption(e.target.value)}
                  aria-label="Filter by status"
                >
                  <option value="all">
                    <span className="assigneddel-status-dot"></span>All Deliveries
                  </option>
                  <option value="pending">Pending</option>
                  <option value="accepted">Accepted</option>
                  <option value="in_progress">In Progress</option>
                  <option value="picked_up">Picked Up</option>
                  <option value="delivered">Delivered</option>
                  <option value="failed">Failed</option>
                </select>
                <FaChevronDown className="assigneddel-select-icon" />
              </div>

              <div className="assigneddel-select-wrapper">
                <select
                  className="assigneddel-select"
                  value={sortOption}
                  onChange={(e) => setSortOption(e.target.value)}
                  aria-label="Sort deliveries"
                >
                  <option value="date">Sort by Date</option>
                  <option value="title">Sort by Donation Title</option>
                  <option value="recipient">Sort by Recipient</option>
                  <option value="status">Sort by Status</option>
                </select>
                <FaChevronDown className="assigneddel-select-icon" />
              </div>
            </div>
          </div>
        </div>

        {currentDeliveries.length > 0 ? (
          currentDeliveries.map((delivery) => {
            const donation = delivery.donationTransaction?.donation || {}
            const recipient = delivery.donationTransaction?.requestNeed?.recipient || {}
            const donor = donation.donor || {}

            const userPhoto = recipient.photo ? `http://localhost:3000/${recipient.photo}` : imgmouna

            // Determine if "Start Journey" should be enabled
            const canStartJourney = donor.isAvailable && recipient.isAvailable

            // Determine donor and recipient status
            const donorStatus = !donor.isActive ? "Inactive" : !donor.isAvailable ? "Unavailable" : "Available"
            const recipientStatus = !recipient.isActive
              ? "Inactive"
              : !recipient.isAvailable
                ? "Unavailable"
                : "Available"

            return (
              <div className="assigneddel-card" key={delivery._id}>
                <div className="assigneddel-profile-info">
                  <img
                    src={userPhoto || "/placeholder.svg"}
                    alt="Recipient Profile"
                    className="assigneddel-profile-img"
                    onError={(e) => {
                      e.target.src = imgmouna
                      console.error(`Failed to load image: ${userPhoto}`)
                    }}
                  />
                  <p className="assigneddel-profile-text">
                    Recipient:{" "}
                    <Link to={`/ViewProfile/${recipient._id}`} className="assigneddel-profile-link">
                      {recipient.name || "Unknown Recipient"}
                    </Link>
                  </p>
                </div>

                <div className="assigneddel-availability-section">
                  <h4 className="assigneddel-availability-title">Availability Status</h4>
                  <div
                    className={`assigneddel-availability-status ${donorStatus === "Available" ? "available" : "unavailable"}`}
                  >
                    {donorStatus === "Available" ? <FaCheckCircle /> : <FaTimesCircle />}
                    <strong>Donor:</strong> {donorStatus}
                  </div>
                  <div
                    className={`assigneddel-availability-status ${recipientStatus === "Available" ? "available" : "unavailable"}`}
                  >
                    {recipientStatus === "Available" ? <FaCheckCircle /> : <FaTimesCircle />}
                    <strong>Recipient:</strong> {recipientStatus}
                  </div>
                </div>

                <div className="assigneddel-delivery-details">
                  <p className="assigneddel-delivery-detail">
                    <strong>Delivery ID:</strong> {delivery._id}
                  </p>
                  <p className="assigneddel-delivery-detail">
                    <strong>Donation Title:</strong> {donation.title || "Untitled"}
                  </p>
                  <p className="assigneddel-delivery-detail">
                    <strong>Pickup Address:</strong> {delivery.pickupAddress || "Not specified"}
                  </p>
                  <p className="assigneddel-delivery-detail">
                    <strong>Delivery Address:</strong> {delivery.deliveryAddress || "Not specified"}
                  </p>
                  <p className="assigneddel-delivery-detail">
                    <strong>Donor Name:</strong>{" "}
                    <Link to={`/ViewProfile/${donor._id}`} className="assigneddel-profile-link">
                      {donor.name || "Unknown Donor"}
                    </Link>
                  </p>
                  <p className="assigneddel-delivery-detail">
                    <strong>Donor Phone:</strong> {donor.phone || "Not provided"}
                  </p>
                  <p className="assigneddel-delivery-detail">
                    <strong>Recipient Phone:</strong> {recipient.phone || "Not provided"}
                  </p>
                  <p className="assigneddel-delivery-detail">
                    <strong>Recipient Name:</strong>{" "}
                    <Link to={`/ViewProfile/${recipient._id}`} className="assigneddel-profile-link">
                      {recipient.name || "Unknown Recipient"}
                    </Link>
                  </p>
                  <p className="assigneddel-delivery-detail">
                    <strong>Status:</strong>
                    <span className={`assigneddel-status-badge ${delivery.status || "pending"}`}>
                      {delivery.status || "Pending"}
                    </span>
                  </p>
                </div>
                <div className="assigneddel-item-section">
                  <h4 className="assigneddel-items-title">Allocated Items:</h4>
                  <ul className="assigneddel-item-list">
                    <li className="assigneddel-item">
                      <div className="assigneddel-item-details">
                        <span>
                          <strong>Title:</strong> {donation.title || "Untitled"}
                        </span>
                        <span>
                          <strong>Category:</strong> {donation.category || "Not specified"}
                        </span>
                      </div>
                      <span className="assigneddel-item-quantity">1 item</span>
                    </li>
                  </ul>
                </div>
                <div className="assigneddel-button-container">
                  {(!delivery.status || delivery.status === "pending") && (
                    <>
                      <button
                        className="assigneddel-action-button accept-btn"
                        onClick={() => handleAcceptOrRefuse(delivery._id, "accept")}
                        disabled={processing[delivery._id]}
                        aria-label="Accept delivery"
                      >
                        {processing[delivery._id] ? (
                          <>
                            <div className="assigneddel-spinner sm"></div> Accepting...
                          </>
                        ) : (
                          "Accept"
                        )}
                      </button>
                      <button
                        className="assigneddel-action-button refuse-btn"
                        onClick={() => handleAcceptOrRefuse(delivery._id, "refuse")}
                        disabled={processing[delivery._id]}
                        aria-label="Refuse delivery"
                      >
                        {processing[delivery._id] ? (
                          <>
                            <div className="assigneddel-spinner sm"></div> Refusing...
                          </>
                        ) : (
                          "Refuse"
                        )}
                      </button>
                    </>
                  )}
                  {delivery.status === "accepted" && (
                    <button
                      className="assigneddel-action-button start-btn"
                      onClick={() => handleStartJourney(delivery._id)}
                      disabled={processing[delivery._id] || !canStartJourney}
                      aria-label="Start journey"
                      title={
                        canStartJourney
                          ? "Start the delivery journey"
                          : "Cannot start journey: Donor or Recipient is not available"
                      }
                    >
                      {processing[delivery._id] ? (
                        <>
                          <div className="assigneddel-spinner sm"></div> Starting...
                        </>
                      ) : (
                        "Start Journey"
                      )}
                    </button>
                  )}
                  {delivery.status === "in_progress" && (
                    <button
                      className="assigneddel-action-button picked-up-btn"
                      onClick={() => handleUpdateStatus(delivery._id, "picked_up")}
                      disabled={processing[delivery._id]}
                      aria-label="Mark as picked up"
                    >
                      {processing[delivery._id] ? (
                        <>
                          <div className="assigneddel-spinner sm"></div> Marking...
                        </>
                      ) : (
                        "Mark Picked Up"
                      )}
                    </button>
                  )}
                  {delivery.status === "picked_up" && (
                    <>
                      <button
                        className="assigneddel-action-button delivered-btn"
                        onClick={() => handleUpdateStatus(delivery._id, "delivered")}
                        disabled={processing[delivery._id]}
                        aria-label="Mark as delivered"
                      >
                        {processing[delivery._id] ? (
                          <>
                            <div className="assigneddel-spinner sm"></div> Marking...
                          </>
                        ) : (
                          "Mark Delivered"
                        )}
                      </button>
                      <button
                        className="assigneddel-action-button feedback-btn"
                        onClick={() =>
                          openFeedbackModal(delivery._id, "donor", donor._id, donor.name || "Unknown Donor")
                        }
                        disabled={feedbackState[delivery._id]?.donor?.submitted}
                        aria-label="Add feedback for donor"
                      >
                        {feedbackState[delivery._id]?.donor?.submitted
                          ? "Feedback for Donor Submitted"
                          : "Add Feedback for Donor"}
                      </button>
                    </>
                  )}
                  {delivery.status === "delivered" && (
                    <>
                      <button
                        className="assigneddel-action-button feedback-btn"
                        onClick={() =>
                          openFeedbackModal(delivery._id, "donor", donor._id, donor.name || "Unknown Donor")
                        }
                        disabled={feedbackState[delivery._id]?.donor?.submitted}
                        aria-label="Add feedback for donor"
                      >
                        {feedbackState[delivery._id]?.donor?.submitted
                          ? "Feedback for Donor Submitted"
                          : "Add Feedback for Donor"}
                      </button>
                      <button
                        className="assigneddel-action-button feedback-btn"
                        onClick={() =>
                          openFeedbackModal(
                            delivery._id,
                            "recipient",
                            recipient._id,
                            recipient.name || "Unknown Recipient",
                          )
                        }
                        disabled={feedbackState[delivery._id]?.recipient?.submitted}
                        aria-label="Add feedback for recipient"
                      >
                        {feedbackState[delivery._id]?.recipient?.submitted
                          ? "Feedback for Recipient Submitted"
                          : "Add Feedback for Recipient"}
                      </button>
                    </>
                  )}
                  <button
                    className="assigneddel-action-button map-btn"
                    onClick={() => handleOpenMap(delivery)}
                    aria-label="View map"
                  >
                    Get Map
                  </button>
                </div>
                {isMapOpen === delivery._id && (
                  <DeleveryMap
                    isOpen={isMapOpen === delivery._id}
                    onClose={() => setIsMapOpen(null)}
                    pickupCoordinates={delivery.pickupCoordinates}
                    deliveryCoordinates={delivery.deliveryCoordinates}
                    transporterCoordinates={transporterLocation}
                    donorName={donor.name}
                    recipientName={recipient.name}
                    transporterName={JSON.parse(localStorage.getItem("user"))?.name || "Transporter"}
                  />
                )}
              </div>
            )
          })
        ) : (
          <p className="assigneddel-no-deliveries">No matching deliveries found.</p>
        )}

        {feedbackModal && (
          <div className="assigneddel-modal-overlay">
            <div className="assigneddel-modal-content">
              <button className="assigneddel-close-button" onClick={closeFeedbackModal}>
                ×
              </button>
              <form
                className="assigneddel-feedback-form"
                onSubmit={(e) => {
                  e.preventDefault()
                  handleFeedbackSubmit(feedbackModal.deliveryId, feedbackModal.targetRole, feedbackModal.targetId)
                }}
              >
                <div className="assigneddel-form-group">
                  <label className="assigneddel-form-label">
                    Feedback for {feedbackModal.targetRole.charAt(0).toUpperCase() + feedbackModal.targetRole.slice(1)}{" "}
                    ({feedbackModal.targetName}):
                  </label>
                  <StarRating
                    rating={feedbackState[feedbackModal.deliveryId]?.[feedbackModal.targetRole]?.rating || 0}
                    setRating={(rating) =>
                      handleFeedbackChange(feedbackModal.deliveryId, feedbackModal.targetRole, "rating", rating)
                    }
                    interactive={!feedbackState[feedbackModal.deliveryId]?.[feedbackModal.targetRole]?.submitted}
                  />
                </div>
                <div className="assigneddel-form-group">
                  <textarea
                    className="assigneddel-feedback-textarea"
                    value={feedbackState[feedbackModal.deliveryId]?.[feedbackModal.targetRole]?.comment || ""}
                    onChange={(e) =>
                      handleFeedbackChange(
                        feedbackModal.deliveryId,
                        feedbackModal.targetRole,
                        "comment",
                        e.target.value,
                      )
                    }
                    placeholder={`Write your feedback for the ${feedbackModal.targetRole}...`}
                    disabled={feedbackState[feedbackModal.deliveryId]?.[feedbackModal.targetRole]?.submitted}
                  />
                </div>
                {feedbackState[feedbackModal.deliveryId]?.[feedbackModal.targetRole]?.error && (
                  <p className="assigneddel-feedback-message error">
                    {feedbackState[feedbackModal.deliveryId][feedbackModal.targetRole].error}
                  </p>
                )}
                {feedbackState[feedbackModal.deliveryId]?.[feedbackModal.targetRole]?.success && (
                  <p className="assigneddel-feedback-message">
                    {feedbackState[feedbackModal.deliveryId][feedbackModal.targetRole].success}
                  </p>
                )}
                <button
                  className="assigneddel-submit-button"
                  type="submit"
                  disabled={feedbackState[feedbackModal.deliveryId]?.[feedbackModal.targetRole]?.submitted}
                >
                  {feedbackState[feedbackModal.deliveryId]?.[feedbackModal.targetRole]?.submitted
                    ? "Feedback Submitted"
                    : "Submit Feedback"}
                </button>
              </form>
            </div>
          </div>
        )}

        {totalPages > 1 && (
          <div className="assigneddel-pagination-controls">
            <button onClick={() => paginate(currentPage - 1)} disabled={currentPage === 1} aria-label="Previous page">
              Previous
            </button>
            <span>
              Page {currentPage} of {totalPages}
            </span>
            <button
              onClick={() => paginate(currentPage + 1)}
              disabled={currentPage === totalPages}
              aria-label="Next page"
            >
              Next
            </button>
          </div>
        )}
      </div>
      <Footer />
    </>
  )
}

export default AssignedDeliveries
</file>

<file path="sustainafood-frontend/src/pages/Home.jsx">
"use client"

import { useEffect, useState, useCallback } from "react"
import styled, { createGlobalStyle, keyframes, css } from "styled-components"
import Navbar from "../components/Navbar"
import Footer from "../components/Footer"
import donation1 from "../assets/images/home1.png"
import donation2 from "../assets/images/home2.png"
import donation3 from "../assets/images/home3.png"
import { useAuth } from "../contexts/AuthContext"
import patternBg from "../assets/images/bg.png"

const GlobalStyle = createGlobalStyle`
  body {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    background: #f0f8f0;
    box-sizing: border-box;
    overflow-x: hidden;
  }
`

const fadeIn = keyframes`
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
`

const fadeSlide = keyframes`
  0% { opacity: 0; transform: scale(1.05); }
  8% { opacity: 1; transform: scale(1); }
  33% { opacity: 1; transform: scale(1); }
  41% { opacity: 0; transform: scale(1.05); }
  100% { opacity: 0; transform: scale(1.05); }
`

const float = keyframes`
  0% { transform: translateY(0px); }
  50% { transform: translateY(-15px); }
  100% { transform: translateY(0px); }
`

const shimmer = keyframes`
  0% { background-position: -1000px 0; }
  100% { background-position: 1000px 0; }
`

const glowPulse = keyframes`
  0% { box-shadow: 0 0 10px rgba(34, 139, 34, 0.3), 0 0 20px rgba(34, 139, 34, 0.2); }
  50% { box-shadow: 0 0 20px rgba(34, 139, 34, 0.5), 0 0 30px rgba(34, 139, 34, 0.3); }
  100% { box-shadow: 0 0 10px rgba(34, 139, 34, 0.3), 0 0 20px rgba(34, 139, 34, 0.2); }
`

const starTwinkle = keyframes`
  0% { transform: scale(1); opacity: 0.8; }
  50% { transform: scale(1.2); opacity: 1; }
  100% { transform: scale(1); opacity: 0.8; }
`

const HomeContainer = styled.div`
  display: flex;
  flex-direction: column;
  gap: 60px;
  
  & > section {
    opacity: 0;
    animation: ${fadeIn} 0.8s ease-out forwards;
  }
  
  & > section:nth-child(2) {
    animation-delay: 0.2s;
  }
  
  & > section:nth-child(3) {
    animation-delay: 0.4s;
  }
  & > section:nth-child(4) {
    animation-delay: 0.6s;
  }
  & > section:nth-child(5) {
    animation-delay: 0.8s;
  }
`

const HeroSection = styled.section`
  position: relative;
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: space-between;
  padding: 80px 80px 120px;
  gap: 40px;
  background: 
    linear-gradient(135deg, rgba(230, 242, 230, 0.9), rgba(220, 240, 220, 0.85)),
    url(${patternBg}) repeat center center;
  background-size: 200px 200px;
  overflow: hidden;
  
  &::before {
    content: '';
    position: absolute;
    top: -50px;
    right: -50px;
    width: 200px;
    height: 200px;
    border-radius: 50%;
    background: rgba(34, 139, 34, 0.1);
    z-index: 1;
  }
  
  &::after {
    content: '';
    position: absolute;
    bottom: -30px;
    left: 15%;
    width: 120px;
    height: 120px;
    border-radius: 50%;
    background: rgba(34, 139, 34, 0.08);
    z-index: 1;
  }
`

const SponsorText = styled.p`
  margin-top: 25px;
  font-size: 18px;
  color: #2a4a2a;
  font-weight: 500;
  padding: 12px 24px;
  background: rgba(34, 139, 34, 0.05);
  border-radius: 30px;
  display: inline-block;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.03);
  transition: all 0.3s ease;
  
  &:hover {
    background: rgba(34, 139, 34, 0.08);
    transform: translateY(-2px);
  }
`

const CarouselContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 20px;
  position: relative;
  background: linear-gradient(135deg, #ffffff, #f0f8f0);
  padding: 30px;
  border-radius: 20px;
  box-shadow: 0 10px 30px rgba(34, 139, 34, 0.1);
  animation: ${float} 6s ease-in-out infinite;
`

const TopTransporterBadge = styled.div`
  position: absolute;
  top: -12px;
  right: -12px;
  background: linear-gradient(135deg, #ffd700, #ffaa00);
  color: #3e2723;
  font-weight: 600;
  padding: 6px 14px;
  border-radius: 24px;
  font-size: 14px;
  line-height: 1.5;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  display: inline-flex;
  align-items: center;
  gap: 8px;
  z-index: 10;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  border: 1px solid rgba(255, 255, 255, 0.2);
  text-transform: uppercase;
  letter-spacing: 0.5px;
  white-space: nowrap;

  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
  }

  &::before {
    content: '★';
    font-size: 16px;
    color: #fff;
    filter: drop-shadow(0 1px 1px rgba(0, 0, 0, 0.3));
  }

  &::after {
    content: 'Top 1';
  }

  @media (max-width: 768px) {
    font-size: 12px;
    padding: 5px 12px;
    gap: 6px;

    &::before {
      font-size: 14px;
    }
  }

  /* Accessibility: Ensure sufficient contrast */
  @media (prefers-contrast: high) {
    background: #ffcc00;
    color: #1a1a1a;
    border: 1px solid #1a1a1a;
  }
`

const TransporterImage = styled.img`
  width: 140px;
  height: 140px;
  border-radius: 50%;
  object-fit: cover;
  border: 5px solid #228b22;
  transition: transform 0.3s ease;
  position: relative;
  
  &:hover {
    transform: scale(1.08);
  }
`

const TransporterInfo = styled.div`
  margin-top: 20px;
  font-size: 22px;
  color: #1a7a1a;
  font-weight: 700;
`

const ThankYouMessage = styled.p`
  margin-top: 15px;
  font-size: 16px;
  color: #3a5a3a;
  line-height: 1.6;
  max-width: 600px;
  margin-left: auto;
  margin-right: auto;
  background: rgba(255, 255, 255, 0.7);
  padding: 15px;
  border-radius: 10px;
`

const HeroText = styled.div`
  flex: 1 1 500px;
  z-index: 2;
  
  h1 {
    font-size: 52px;
    font-weight: 800;
    color: #1a7a1a;
    margin-bottom: 20px;
    position: relative;
    
    &::after {
      content: '';
      position: absolute;
      bottom: -10px;
      left: 0;
      width: 80px;
      height: 4px;
      background: linear-gradient(90deg, #228b22, #56ab2f);
      border-radius: 2px;
    }
  }
  
  p {
    font-size: 20px;
    color: #3a5a3a;
    margin-bottom: 35px;
    line-height: 1.6;
    max-width: 90%;
  }
`

const CallToAction = styled.a`
  display: inline-block;
  padding: 16px 36px;
  font-size: 18px;
  font-weight: 600;
  background: linear-gradient(135deg, #228b22, #56ab2f);
  color: white;
  border-radius: 30px;
  text-decoration: none;
  transition: all 0.3s ease;
  box-shadow: 0 6px 15px rgba(34, 139, 34, 0.2);
  position: relative;
  overflow: hidden;
  
  &:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(34, 139, 34, 0.3);
  }
  
  &::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 0.3) 50%, rgba(255, 255, 255, 0) 100%);
    transform: rotate(30deg);
    animation: ${shimmer} 3s infinite;
    pointer-events: none;
  }
`

const SliderContainer = styled.div`
  position: relative;
  flex: 1 1 500px;
  width: 100%;
  height: 420px;
  overflow: hidden;
  z-index: 2;
  transform-style: preserve-3d;
  perspective: 1000px;
  
  &::before {
    content: '';
    position: absolute;
    inset: 0;
    padding: 3px;
    mask-composite: exclude;
    z-index: 3;
    pointer-events: none;
  }
`

const SlideImage = styled.img`
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 20px;
  opacity: 0;
  animation: ${fadeSlide} 12s infinite;
  animation-fill-mode: forwards;
  filter: brightness(1.05) contrast(1.05);
`

const Slide1 = styled(SlideImage)`
  animation-delay: 0s;
`
const Slide2 = styled(SlideImage)`
  animation-delay: 4s;
`
const Slide3 = styled(SlideImage)`
  animation-delay: 8s;
`

const Wave = styled.svg`
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: auto;
  z-index: 1;
  filter: drop-shadow(0 -5px 5px rgba(0, 0, 0, 0.03));
`

const SectionWrapper = styled.section`
  padding: 80px;
  background: ${(props) => props.bgColor || "#fff"};
  text-align: ${(props) => props.align || "center"};
  position: relative;
  overflow: hidden;
  
  ${(props) =>
    props.bgColor &&
    css`
    &::before {
      content: '';
      position: absolute;
      top: -100px;
      right: -100px;
      width: 300px;
      height: 300px;
      border-radius: 50%;
      background: rgba(34, 139, 34, 0.05);
      z-index: 0;
    }
    
    &::after {
      content: '';
      position: absolute;
      bottom: -80px;
      left: -80px;
      width: 250px;
      height: 250px;
      border-radius: 50%;
      background: rgba(34, 139, 34, 0.05);
      z-index: 0;
    }
  `}
`

const SectionTitle = styled.h2`
  font-size: 40px;
  font-weight: 700;
  color: #1a7a1a;
  margin-bottom: 50px;
  position: relative;
  display: inline-block;
  z-index: 1;
   
  &::after {
    content: '';
    position: absolute;
    bottom: -12px;
    left: 50%;
    transform: translateX(-50%);
    width: 80px;
    height: 4px;
    background: linear-gradient(90deg, #228b22, #56ab2f);
    border-radius: 2px;
  }
  
  ${(props) =>
    props.align === "left" &&
    css`
    &::after {
      left: 0;
      transform: none;
    }
  `}
`

const FeaturesGrid = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 30px;
  justify-content: center;
  position: relative;
  z-index: 1;
`

const FeatureCard = styled.div`
  background: #ffffff;
  border-radius: 16px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
  padding: 30px;
  flex: 1 1 250px;
  max-width: 300px;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
  
  &:hover {
    transform: translateY(-10px);
    box-shadow: 0 15px 35px rgba(34, 139, 34, 0.1);
  }
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 5px;
    height: 0;
    background: linear-gradient(to bottom, #228b22, #56ab2f);
    transition: height 0.3s ease;
  }
  
  &:hover::before {
    height: 100%;
  }
  
  h3 {
    font-size: 24px;
    font-weight: 600;
    color: #1a7a1a;
    margin-bottom: 15px;
    transition: color 0.3s ease;
  }
  
  p {
    font-size: 16px;
    color: #3a5a3a;
    line-height: 1.6;
    transition: color 0.3s ease;
  }
`

const ProposedSolutionList = styled.ul`
  list-style: none;
  margin-left: 10px;
  font-size: 18px;
  color: #3a5a3a;
  position: relative;
  z-index: 1;
  
  li {
    margin-bottom: 20px;
    line-height: 1.6;
    position: relative;
    padding-left: 35px;
    transition: transform 0.3s ease;
    
    &:hover {
      transform: translateX(5px);
    }
    
    &::before {
      content: '';
      position: absolute;
      left: 0;
      top: 8px;
      width: 20px;
      height: 20px;
      background: linear-gradient(135deg, #228b22, #56ab2f);
      border-radius: 50%;
      opacity: 0.2;
    }
    
    &::after {
      content: '✓';
      position: absolute;
      left: 6px;
      top: 4px;
      color: #228b22;
      font-weight: bold;
    }
    
    strong {
      color: #1a7a1a;
      font-weight: 600;
    }
  }
`

const SummaryText = styled.p`
  font-size: 18px;
  color: #3a5a3a;
  margin-top: 30px;
  line-height: 1.7;
  padding: 20px;
  background: rgba(255, 255, 255, 0.7);
  border-radius: 12px;
  border-left: 4px solid #228b22;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
  position: relative;
  z-index: 1;
`

const TwoColumnSection = styled.section`
  display: flex;
  flex-wrap: wrap;
  gap: 40px;
  padding: 60px 80px;
  justify-content: center;
  background: linear-gradient(to bottom, #fff, #f9fdf9);
  margin: 0 20px;
`

const ColumnSection = styled.div`
  flex: 1 1 500px;
  background: linear-gradient(to bottom, #fff, #f9fdf9);
  text-align: center;
  position: relative;
  z-index: 1;
  border-radius: 20px;
  box-shadow: 0 5px 20px rgba(0, 0, 0, 0.03);
  padding: 40px;
  min-width: 0;
  
  &::before {
    content: '';
    position: absolute;
    top: 20px;
    right: 20px;
    width: 80px;
    height: 100px;
    border-radius: 50%;
    background: rgba(34, 139, 34, 0.05);
    z-index: 0;
  }
  
  &::after {
    content: '';
    position: absolute;
    bottom: 20px;
    left: 20px;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: rgba(34, 139, 34, 0.05);
    z-index: 0;
  }
`

// Clean title styling to match the reference image
const DonorSectionTitle = styled.h2`
  font-size: 40px;
  font-weight: 700;
  color: #228b22;
  margin-bottom: 30px;
  position: relative;
  display: inline-block;
  z-index: 1;
  
  &::after {
    content: '';
    position: absolute;
    bottom: -12px;
    left: 50%;
    transform: translateX(-50%);
    width: 80px;
    height: 4px;
    background: #228b22;
    border-radius: 2px;
  }
`

// Update the AdCarouselContainer for a cleaner look with cream background
const AdCarouselContainer = styled.div`
  position: relative;
  width: 100%;
  margin: 0 auto;
  overflow: hidden;
  border-radius: 16px;
  background-color: #fff8e1;
    animation: ${float} 6s ease-in-out infinite;

`

// Make the AdCarouselTrack taller to accommodate larger images
const AdCarouselTrack = styled.div`
  display: flex;
  transition: transform 0.5s ease-in-out;
  height: 450px;
`

// Update the AdSlide for a cleaner background
const AdSlide = styled.div`
  min-width: 100%;
  position: relative;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 20px;
  background: ${(props) => {
    if (props.rank === 0) return "#fff8e1" // Gold background for 1st
    if (props.rank === 1) return "#f5f5f5" // Silver background for 2nd
    if (props.rank === 2) return "#fff0e6" // Bronze background for 3rd
    return "transparent"
  }};
  border-radius: 16px;
`

// Make the AdImageEnhanced bigger
const AdImageEnhanced = styled.img`
  width: 100%;
  height: 280px;
  object-fit: contain;
  border-radius: 12px;
`

// Update the DonorInfo for a cleaner look
const DonorInfo = styled.div`
  text-align: center;
  position: relative;
  z-index: 1;
  border-radius: 12px;
`

// Update the DonorName for a cleaner look
const DonorName = styled.h3`
  font-size: 24px;
  font-weight: 600;
  color: ${(props) => {
    if (props.rank === 0) return "#d4af37" // Gold
    if (props.rank === 1) return "#717171" // Silver
    if (props.rank === 2) return "#a05a2c" // Bronze
    return "#333333"
  }};
  margin-bottom: 10px;
`

// Update the DonorRank for a cleaner look
const DonorRank = styled.span`
  display: inline-block;
  padding: 6px 6px;
  background: ${(props) => {
    if (props.rank === 0) return "#ffd800" // Gold
    if (props.rank === 1) return "#c0c0c0" // Silver
    if (props.rank === 2) return "#cd7f32" // Bronze
    return "#4caf50"
  }};
  color: ${(props) => (props.rank === 1 ? "#333" : "white")};
  border-radius: 20px;
  font-size: 10px;
  font-weight: 600;
`

// Update the TopDonorBadge to match the reference image
const TopDonorBadge = styled.div`
  position: absolute;
  top: 15px;
  right: 15px;
  background: ${(props) => {
    if (props.rank === 0) return "#ffd700" // Gold
    if (props.rank === 1) return "#c0c0c0" // Silver
    if (props.rank === 2) return "#cd7f32" // Bronze
    return "#ff9800"
  }};
  color: ${(props) => (props.rank === 1 ? "#333" : "white")};
  font-weight: bold;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 10;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  
  &::before {
    content: '';
    display: block;
    width: 24px;
    height: 24px;
    background-image: ${(props) => {
      if (props.rank === 0)
        return "url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M12 8.5L9.75 13.5L4.5 14.25L8.25 18L7.25 23.25L12 20.75L16.75 23.25L15.75 18L19.5 14.25L14.25 13.5L12 8.5Z'/%3E%3Cpath d='M12 1.5C12.5 1.5 13 1.75 13.25 2.25L14.5 4.75C14.75 5.25 15.25 5.5 15.75 5.5H18.5C19 5.5 19.5 5.75 19.75 6.25C20 6.75 20 7.25 19.75 7.75L17.75 10.5C17.5 11 17.5 11.5 17.75 12L19.75 14.75C20 15.25 20 15.75 19.75 16.25C19.5 16.75 19 17 18.5 17H15.75C15.25 17 14.75 17.25 14.5 17.75L13.25 20.25C13 20.75 12.5 21 12 21C11.5 21 11 20.75 10.75 20.25L9.5 17.75C9.25 17.25 8.75 17 8.25 17H5.5C5 17 4.5 16.75 4.25 16.25C4 15.75 4 15.25 4.25 14.75L6.25 12C6.5 11.5 6.5 11 6.25 10.5L4.25 7.75C4 7.25 4 6.75 4.25 6.25C4.5 5.75 5 5.5 5.5 5.5H8.25C8.75 5.5 9.25 5.25 9.5 4.75L10.75 2.25C11 1.75 11.5 1.5 12 1.5Z'/%3E%3C/svg%3E\")"
      if (props.rank === 1)
        return "url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23333333'%3E%3Cpath d='M12 15L7.5 18L9 12.75L5 9L10.25 8.5L12 3.5L13.75 8.5L19 9L15 12.75L16.5 18L12 15Z'/%3E%3Cpath d='M20 2H4V4L10 6L12 12L14 6L20 4V2Z'/%3E%3C/svg%3E\")"
      return "url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3E%3Cpath d='M12 17L6 21L8 14L2 10L9.5 9.5L12 3L14.5 9.5L22 10L16 14L18 21L12 17Z'/%3E%3C/svg%3E\")"
    }};
    background-repeat: no-repeat;
    background-position: center;
    background-size: contain;
  }
`

// Update the CarouselControls to position arrows on the sides
const CarouselControls = styled.div`
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 15px;
  pointer-events: none;
  z-index: 5;
`

// Update the CarouselButton for side positioning
const CarouselButton = styled.button`
  background: rgba(255, 255, 255, 0.8);
  color: #228b22;
  border: none;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.2s ease;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  pointer-events: auto;

  &:hover {
    background: white;
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  svg {
    width: 20px;
    height: 20px;
    stroke: currentColor;
    stroke-width: 2;
    fill: none;
  }
`

// Update the CarouselDots to be at the bottom
const CarouselDots = styled.div`
  position: absolute;
  bottom: 15px;
  left: 0;
  right: 0;
  display: flex;
  justify-content: center;
  gap: 8px;
  z-index: 5;
  pointer-events: auto;
`

// Update the CarouselDot for a cleaner look
const CarouselDot = styled.button`
  width: ${(props) => (props.isActive ? "10px" : "8px")};
  height: ${(props) => (props.isActive ? "10px" : "8px")};
  border-radius: 50%;
  background: ${(props) => (props.isActive ? "#228b22" : "#cccccc")};
  border: none;
  cursor: pointer;
  transition: all 0.2s ease;
  padding: 0;

  &:hover {
    background: ${(props) => (props.isActive ? "#228b22" : "#999999")};
  }
`

const ErrorMessage = styled.p`
  font-size: 18px;
  color: #d32f2f;
  margin-top: 20px;
  padding: 10px 20px;
  background: rgba(211, 47, 47, 0.05);
  border-radius: 8px;
`

// Add a new styled component for the thank you/promotional message
const DonorPromoMessage = styled.div`
  margin-top: 10px;
  padding: 12px 15px;
  background: ${(props) => {
    if (props.rank === 0) return "rgba(255, 215, 0, 0.1)" // Gold
    if (props.rank === 1) return "rgba(192, 192, 192, 0.1)" // Silver
    if (props.rank === 2) return "rgba(205, 127, 50, 0.1)" // Bronze
    return "rgba(76, 175, 80, 0.1)"
  }};
  border: 1px solid ${(props) => {
    if (props.rank === 0) return "rgba(255, 215, 0, 0.3)" // Gold
    if (props.rank === 1) return "rgba(192, 192, 192, 0.3)" // Silver
    if (props.rank === 2) return "rgba(205, 127, 50, 0.3)" // Bronze
    return "rgba(76, 175, 80, 0.3)"
  }};
  border-radius: 8px;
  font-size: 14px;
  color: #333;
  text-align: center;
  max-width: 90%;
  margin-left: auto;
  margin-right: auto;
`

const DonorPromoTitle = styled.p`
  font-weight: 600;
  margin-bottom: 5px;
  color: ${(props) => {
    if (props.rank === 0) return "#d4af37" // Gold
    if (props.rank === 1) return "#717171" // Silver
    if (props.rank === 2) return "#a05a2c" // Bronze
    return "#1a7a1a"
  }};
`

const DonorPromoButton = styled.a`
  display: inline-block;
  margin-top: 8px;
  padding: 6px 12px;
  background: ${(props) => {
    if (props.rank === 0) return "#ffd700" // Gold
    if (props.rank === 1) return "#c0c0c0" // Silver
    if (props.rank === 2) return "#cd7f32" // Bronze
    return "#4caf50"
  }};
  color: ${(props) => (props.rank === 1 ? "#333" : "white")};
  border-radius: 20px;
  font-size: 13px;
  font-weight: 500;
  text-decoration: none;
  transition: all 0.2s ease;
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.15);
  }
`

const Home = () => {
  const { user: authUser, token } = useAuth()
  const [advertisements, setAdvertisements] = useState([])
  const [topTransporter, setTopTransporter] = useState(null)
  const [currentAdIndex, setCurrentAdIndex] = useState(0)
  const [adError, setAdError] = useState("")
  const [transporterError, setTransporterError] = useState("")
  const [isAutoPlaying, setIsAutoPlaying] = useState(true)
  const [touchStart, setTouchStart] = useState(null)
  const [touchEnd, setTouchEnd] = useState(null)

  useEffect(() => {
      const fetchAdvertisements = async () => {
        try {
          const response = await fetch("http://localhost:3000/users/top-donor-ad", {
            headers: { Authorization: `Bearer ${token}` },
          });
          const data = await response.json();
          if (response.ok) {
            console.log("Fetched advertisements:", data); // Debug log
            setAdvertisements(data);
            setAdError("");
          } else {
            console.log("Fetch error response:", data); // Debug error details
            setAdError(data.error || "Failed to fetch advertisements");
          }
        } catch (error) {
          console.error("Error fetching advertisements:", error);
          setAdError("Failed to fetch advertisements");
        }
      };
      fetchAdvertisements();
    }, [token]);

  useEffect(() => {
    const fetchTopTransporter = async () => {
      try {
        const response = await fetch("http://localhost:3000/users/top-transporter", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        })
        const data = await response.json()
        if (response.ok) {
          setTopTransporter(data)
          setTransporterError("")
        } else {
          setTransporterError(data.error || "Failed to fetch top transporter")
        }
      } catch (error) {
        console.error("Error fetching top transporter:", error)
        setTransporterError("Failed to fetch top transporter")
      }
    }
    fetchTopTransporter()
  }, [token])

  useEffect(() => {
    const sections = document.querySelectorAll("section")
    const revealSection = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.style.opacity = "1"
        }
      })
    }
    const sectionObserver = new IntersectionObserver(revealSection, {
      root: null,
      threshold: 0.15,
    })
    sections.forEach((section) => {
      sectionObserver.observe(section)
    })
    return () => {
      sections.forEach((section) => {
        sectionObserver.unobserve(section)
      })
    }
  }, [])

  useEffect(() => {
    if (advertisements.length > 1 && isAutoPlaying) {
      const interval = setInterval(() => {
        setCurrentAdIndex((prevIndex) => (prevIndex === advertisements.length - 1 ? 0 : prevIndex + 1))
      }, 5000)
      return () => clearInterval(interval)
    }
  }, [advertisements, isAutoPlaying])

  const handlePrevAd = useCallback(() => {
    setCurrentAdIndex((prevIndex) => (prevIndex === 0 ? advertisements.length - 1 : prevIndex - 1))
  }, [advertisements])

  const handleNextAd = useCallback(() => {
    setCurrentAdIndex((prevIndex) => (prevIndex === advertisements.length - 1 ? 0 : prevIndex + 1))
  }, [advertisements])

  const goToAd = (index) => {
    setCurrentAdIndex(index)
  }

  const handleTouchStart = (e) => {
    setTouchStart(e.targetTouches[0].clientX)
  }

  const handleTouchMove = (e) => {
    setTouchEnd(e.targetTouches[0].clientX)
  }

  const handleTouchEnd = () => {
    if (!touchStart || !touchEnd) return
    const difference = touchStart - touchEnd
    if (difference > 50) {
      handleNextAd()
    } else if (difference < -50) {
      handlePrevAd()
    }
  }

  const getRankText = (index) => {
    switch (index) {
      case 0:
        return "Top 1 Donor"
      case 1:
        return "Top 2 Donor"
      case 2:
        return "Top 3 Donor"
      default:
        return `${index + 1}th Donor`
    }
  }

  return (
    <>
      <GlobalStyle />
      <Navbar />
      <HomeContainer>
        <HeroSection>
          <HeroText>
            <h1>Welcome to SustainaFood</h1>
            <p>
              Connecting donors, recipients, and transporters to reduce food waste and bring help where it's needed
              most.
            </p>
            {!authUser && <CallToAction href="/signup">Join Us Today</CallToAction>}
          </HeroText>
          <SliderContainer>
            <Slide1 src={donation2} alt="Donation 1" />
            <Slide2 src={donation3} alt="Donation 2" />
            <Slide3 src={donation1} alt="Donation 3" />
          </SliderContainer>
          <Wave viewBox="0 0 1440 320">
            <path
              fill="#ffffff"
              fillOpacity="1"
              d="M0,96L30,90C60,85,120,75,180,64C240,53,300,43,360,64C420,85,480,139,540,170.7C600,203,660,213,720,224C780,235,840,245,900,240C960,235,1020,213,1080,181.3C1140,149,1200,107,1260,112C1320,117,1380,171,1410,197.3L1440,224L1440,320L1410,320C1380,320,1320,320,1260,320C1200,320,1140,320,1080,320C1020,320,960,320,900,320C840,320,780,320,720,320C660,320,600,320,540,320C480,320,420,320,360,320C300,320,240,320,180,320C120,320,60,320,30,320L0,320Z"
            />
          </Wave>
        </HeroSection>
        <TwoColumnSection>
          <ColumnSection>
            <DonorSectionTitle>Our Heartfelt Heroes</DonorSectionTitle>
            {adError ? (
              <ErrorMessage>{adError}</ErrorMessage>
            ) : advertisements.length > 0 ? (
              <div
                onMouseEnter={() => setIsAutoPlaying(false)}
                onMouseLeave={() => setIsAutoPlaying(true)}
                style={{ position: "relative" }}
              >
                <AdCarouselContainer
                  onTouchStart={handleTouchStart}
                  onTouchMove={handleTouchMove}
                  onTouchEnd={handleTouchEnd}
                >
                  <AdCarouselTrack style={{ transform: `translateX(-${currentAdIndex * 100}%)` }}>
  {advertisements.map((ad) => (
    <AdSlide key={ad._id} rank={ad.rank}>
      <TopDonorBadge rank={ad.rank} />
      <AdImageEnhanced
        src={`http://localhost:3000/${ad.advertisementImage}`}
        alt={`Advertisement by ${ad.name}`}
      />
      <DonorInfo>
        <DonorName rank={ad.rank}>{ad.name}</DonorName>
        <DonorRank rank={ad.rank}>{getRankText(ad.rank)}</DonorRank>
      </DonorInfo>
      <DonorPromoMessage rank={ad.rank}>
        <DonorPromoTitle rank={ad.rank}>
          {ad.rank === 0
            ? "🏆 Gold Donor Spotlight"
            : ad.rank === 1
            ? "🥈 Silver Donor Highlight"
            : ad.rank === 2
            ? "🥉 Bronze Donor Feature"
            : "✨ Featured Donor"}
        </DonorPromoTitle>
        <p>
          {ad.rank === 0
            ? "Support this top donor's business! Their generous contributions make a significant impact on our mission to reduce food waste."
            : ad.rank === 1
            ? "This silver-tier donor helps us connect surplus food with those who need it most. Consider supporting their business!"
            : ad.rank === 2
            ? "Our bronze donor plays a vital role in our community. Visit their business to show your appreciation!"
            : "Thank you to this valued donor for supporting our cause. Your patronage of their business helps our community!"}
        </p>
      </DonorPromoMessage>
    </AdSlide>
  ))}
</AdCarouselTrack>

                  {advertisements.length > 1 && (
                    <>
                      <CarouselControls>
                        <CarouselButton onClick={handlePrevAd} aria-label="Previous advertisement">
                          <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                            <path d="M15 18L9 12L15 6" stroke="currentColor" strokeWidth="2" />
                          </svg>
                        </CarouselButton>
                        <CarouselButton onClick={handleNextAd} aria-label="Next advertisement">
                          <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                            <path d="M9 18L15 12L9 6" stroke="currentColor" strokeWidth="2" />
                          </svg>
                        </CarouselButton>
                      </CarouselControls>
                      
                    </>
                  )}
                </AdCarouselContainer>
              </div>
            ) : (
              <SponsorText>No advertisements available</SponsorText>
            )}
          </ColumnSection>
          <ColumnSection>
            <SectionTitle>Our Compassionate Courier</SectionTitle>
            {transporterError ? (
              <ErrorMessage>{transporterError}</ErrorMessage>
            ) : topTransporter ? (
              <CarouselContainer>
                <TopTransporterBadge />
                <TransporterImage
                  src={`http://localhost:3000/${topTransporter.photo}`}
                  alt={`Profile picture of ${topTransporter.name}`}
                />
                <TransporterInfo>
                  {topTransporter.name} - {topTransporter.deliveryCount} Deliveries
                </TransporterInfo>
                <ThankYouMessage>
                  Thank you, {topTransporter.name}, for your dedication in delivering food to those in need. Your
                  efforts help reduce waste and strengthen our community!
                </ThankYouMessage>
              </CarouselContainer>
            ) : (
              <SponsorText>No top transporter data available</SponsorText>
            )}
          </ColumnSection>
        </TwoColumnSection>
        <SectionWrapper>
          <SectionTitle>Our Key Features</SectionTitle>
          <FeaturesGrid>
            <FeatureCard>
              <h3>User Management</h3>
              <p>Seamlessly register, authenticate, and manage your profile with our intuitive interface.</p>
            </FeatureCard>
            <FeatureCard>
              <h3>Food Donation Management</h3>
              <p>Donate, track, and manage food donations easily with real-time updates and notifications.</p>
            </FeatureCard>
            <FeatureCard>
              <h3>Logistics & AI Routing</h3>
              <p>Efficiently schedule and optimize deliveries with our advanced AI algorithms for minimal waste.</p>
            </FeatureCard>
            <FeatureCard>
              <h3>Notifications & Feedback</h3>
              <p>Stay updated with real-time notifications and provide valuable feedback to improve our services.</p>
            </FeatureCard>
          </FeaturesGrid>
        </SectionWrapper>
        <SectionWrapper bgColor="#e8f5e9" align="left">
          <SectionTitle align="left">Our Proposed Solution</SectionTitle>
          <ProposedSolutionList>
            <li>
              <strong>Real-time Analytics:</strong> Track the impact of actions and adjust strategies as needed with
              comprehensive dashboards and reports.
            </li>
            <li>
              <strong>Free Services for All Stakeholders:</strong> Completely free services for NGOs, partner companies,
              and other stakeholders to maximize participation.
            </li>
            <li>
              <strong>Artificial Intelligence:</strong> Optimize routes and stock management to reduce logistics costs
              and improve efficiency with cutting-edge AI technology.
            </li>
            <li>
              <strong>Gamification:</strong> Reward both consumers and merchants to encourage active participation
              through points, badges, and recognition.
            </li>
            <li>
              <strong>Awareness Campaign:</strong> Collaborate with local associations to expand the partner network and
              maximize national impact through targeted outreach.
            </li>
          </ProposedSolutionList>
          <SummaryText>
            In summary, SustainaFood offers a flexible, intelligent, and scalable solution to effectively combat food
            waste in Tunisia/Setif while building a stronger, more connected community.
          </SummaryText>
        </SectionWrapper>
      </HomeContainer>
      <Footer />
    </>
  )
}

export default Home
</file>

<file path="sustainafood-frontend/src/components/DonorProfile.jsx">
"use client"

import { useState, useEffect } from "react"
import { getDonationByUserId } from "../api/donationService"
import { Link } from "react-router-dom"
import { updateUserAvailability } from "../api/userService"

const DonorProfile = ({ user }) => {
  const userid = user?._id || user?.id
  let loggedInUser = null
  try {
    const userData = localStorage.getItem("user")
    loggedInUser = userData ? JSON.parse(userData) : null
  } catch (err) {
    console.error("Error parsing loggedInUser from localStorage:", err)
  }
  const loggedInUserId = loggedInUser?._id || loggedInUser?.id
  const isOwnProfile = loggedInUser && userid && String(userid) === String(loggedInUserId)

  const [donations, setDonations] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [searchTerm, setSearchTerm] = useState("")
  const [statusFilter, setStatusFilter] = useState("")
  const [currentPage, setCurrentPage] = useState(1)
  const itemsPerPage = 2

  const [isAvailable, setIsAvailable] = useState(user?.isAvailable || false)
  const [availabilityLoading, setAvailabilityLoading] = useState(false)
  const [availabilityError, setAvailabilityError] = useState(null)

  useEffect(() => {
    setIsAvailable(user?.isAvailable || false)
  }, [user?.isAvailable])

  useEffect(() => {
    const fetchDonations = async () => {
      if (!userid) {
        setError("User ID not found")
        setLoading(false)
        return
      }

      try {
        console.log("Fetching donations for user ID:", userid)
        const response = await getDonationByUserId(userid)
        console.log("Donations response:", response.data)
        setDonations(response.data || [])
      } catch (err) {
        console.error("Error fetching donations:", err)
        setError(err.response?.data?.message || "Error fetching donation data")
      } finally {
        setLoading(false)
      }
    }

    fetchDonations()
  }, [userid])

  const filteredDonations = donations
    .filter(
      (donation) =>
        donation.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        donation.description?.toLowerCase().includes(searchTerm.toLowerCase()),
    )
    .filter((donation) => (statusFilter ? donation.status === statusFilter : true))

  const totalPages = Math.ceil(filteredDonations.length / itemsPerPage)
  const indexOfLastItem = currentPage * itemsPerPage
  const indexOfFirstItem = indexOfLastItem - itemsPerPage
  const currentDonations = filteredDonations.slice(indexOfFirstItem, indexOfLastItem)

  const handlePageChange = (page) => {
    if (page >= 1 && page <= totalPages) {
      setCurrentPage(page)
    }
  }

  // Pagination logic to show limited page numbers with ellipses
  const renderPaginationButtons = () => {
    const pageButtons = []
    const maxVisibleButtons = 5 // Maximum number of page buttons to show

    // Always show first page button
    pageButtons.push(
      <button
        key={1}
        onClick={() => handlePageChange(1)}
        style={{
          background: currentPage === 1 ? "#228b22" : "#f5f5f5",
          color: currentPage === 1 ? "white" : "#555",
          border: "none",
          padding: "8px 14px",
          borderRadius: "6px",
          cursor: "pointer",
          transition: "background 0.3s",
          margin: "0 4px",
          fontWeight: currentPage === 1 ? "bold" : "normal",
        }}
        onMouseEnter={(e) => {
          e.currentTarget.style.background = currentPage === 1 ? "#1e7a1e" : "#e0e0e0"
        }}
        onMouseLeave={(e) => {
          e.currentTarget.style.background = currentPage === 1 ? "#228b22" : "#f5f5f5"
        }}
      >
        1
      </button>,
    )

    // Calculate range of visible page buttons
    let startPage = Math.max(2, currentPage - Math.floor(maxVisibleButtons / 2))
    const endPage = Math.min(totalPages - 1, startPage + maxVisibleButtons - 3)

    if (endPage - startPage < maxVisibleButtons - 3) {
      startPage = Math.max(2, endPage - (maxVisibleButtons - 3) + 1)
    }

    // Add ellipsis after first page if needed
    if (startPage > 2) {
      pageButtons.push(
        <span key="ellipsis1" style={{ margin: "0 4px", color: "#555" }}>
          ...
        </span>,
      )
    }

    // Add page buttons between start and end
    for (let i = startPage; i <= endPage; i++) {
      pageButtons.push(
        <button
          key={i}
          onClick={() => handlePageChange(i)}
          style={{
            background: currentPage === i ? "#228b22" : "#f5f5f5",
            color: currentPage === i ? "white" : "#555",
            border: "none",
            padding: "8px 14px",
            borderRadius: "6px",
            cursor: "pointer",
            transition: "background 0.3s",
            margin: "0 4px",
            fontWeight: currentPage === i ? "bold" : "normal",
          }}
          onMouseEnter={(e) => {
            e.currentTarget.style.background = currentPage === i ? "#1e7a1e" : "#e0e0e0"
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.background = currentPage === i ? "#228b22" : "#f5f5f5"
          }}
        >
          {i}
        </button>,
      )
    }

    // Add ellipsis before last page if needed
    if (endPage < totalPages - 1) {
      pageButtons.push(
        <span key="ellipsis2" style={{ margin: "0 4px", color: "#555" }}>
          ...
        </span>,
      )
    }

    // Always show last page button if there's more than one page
    if (totalPages > 1) {
      pageButtons.push(
        <button
          key={totalPages}
          onClick={() => handlePageChange(totalPages)}
          style={{
            background: currentPage === totalPages ? "#228b22" : "#f5f5f5",
            color: currentPage === totalPages ? "white" : "#555",
            border: "none",
            padding: "8px 14px",
            borderRadius: "6px",
            cursor: "pointer",
            transition: "background 0.3s",
            margin: "0 4px",
            fontWeight: currentPage === totalPages ? "bold" : "normal",
          }}
          onMouseEnter={(e) => {
            e.currentTarget.style.background = currentPage === totalPages ? "#1e7a1e" : "#e0e0e0"
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.background = currentPage === totalPages ? "#228b22" : "#f5f5f5"
          }}
        >
          {totalPages}
        </button>,
      )
    }

    return pageButtons
  }

  const handleToggleAvailability = async () => {
    if (!user?._id) {
      setAvailabilityError("User ID is missing. Cannot update availability.")
      return
    }

    setAvailabilityLoading(true)
    setAvailabilityError(null)

    try {
      const newAvailability = !isAvailable
      await updateUserAvailability(user._id, newAvailability)
      setIsAvailable(newAvailability)
    } catch (err) {
      let errorMessage = "Failed to update availability"

      if (err.response && err.response.data) {
        if (typeof err.response.data.message === "string") {
          errorMessage = err.response.data.message
        } else if (err.response.data.error) {
          errorMessage =
            typeof err.response.data.error === "string"
              ? err.response.data.error
              : "An error occurred while updating availability"
        }
      } else if (err.message) {
        errorMessage = err.message
      }

      setAvailabilityError(errorMessage)
      console.error("Error updating availability:", err)
    } finally {
      setAvailabilityLoading(false)
    }
  }

  if (loading) return <div>Loading...</div>
  if (error) return <div>{error}</div>

  return (
    <div style={{ background: "#f5f9f5", padding: "20px 0" }}>
      <div
        style={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "flex-start",
          maxWidth: "1200px",
          margin: "0 auto 20px",
          padding: "0 20px",
        }}
      >
   

        {isOwnProfile && (
          <div
            style={{
              background: "#ffffff",
              borderRadius: "12px",
              overflow: "hidden",
              border: "1px solid rgba(34, 139, 34, 0.12)",
              width: "530px",
            }}
          >
            <div
              style={{
                padding: "10px 16px",
                borderBottom: "1px solid rgba(34, 139, 34, 0.08)",
                display: "flex",
                alignItems: "center",
                gap: "10px",
              }}
            >
              <div
                style={{
                  width: "10px",
                  height: "10px",
                  borderRadius: "50%",
                  background: isAvailable ? "#4CAF50" : "#9e9e9e",
                  boxShadow: isAvailable ? "0 0 0 3px rgba(76, 175, 80, 0.2)" : "none",
                }}
              ></div>
              <h4
                style={{
                  color: "#2e7d32",
                  fontSize: "16px",
                  fontWeight: "600",
                  margin: 0,
                }}
              >
                Availability Status
              </h4>
            </div>

            <div
              style={{
                padding: "12px 16px",
                display: "flex",
                alignItems: "center",
                justifyContent: "space-between",
              }}
            >
              <p
                style={{
                  color: "#555",
                  margin: 0,
                  fontSize: "14px",
                  fontWeight: "500",
                }}
              >
                {isAvailable ? "Status: Available" : "Status: Not Available"}
              </p>

              <div style={{ display: "flex", alignItems: "center", gap: "10px" }}>
                <div
                  style={{
                    fontSize: "13px",
                    fontWeight: "600",
                    color: isAvailable ? "#4CAF50" : "#9e9e9e",
                    padding: "3px 8px",
                    borderRadius: "12px",
                    background: isAvailable ? "rgba(76, 175, 80, 0.1)" : "rgba(158, 158, 158, 0.1)",
                    display: "none", // Hidden as per the reference image
                  }}
                >
                  {isAvailable ? "Available" : "Unavailable"}
                </div>

                <button
                  onClick={handleToggleAvailability}
                  disabled={availabilityLoading}
                  style={{
                    padding: "6px 12px",
                    border: "none",
                    borderRadius: "8px",
                    fontSize: "14px",
                    fontWeight: "600",
                    cursor: availabilityLoading ? "not-allowed" : "pointer",
                    transition: "all 0.2s ease",
                    background: "#f0f0f0",
                    color: "#333",
                    opacity: availabilityLoading ? 0.7 : 1,
                    whiteSpace: "nowrap",
                  }}
                >
                  {availabilityLoading ? (
                    <span style={{ display: "flex", alignItems: "center", justifyContent: "center", gap: "8px" }}>
                      <span
                        style={{
                          width: "12px",
                          height: "12px",
                          borderRadius: "50%",
                          border: "2px solid rgba(0,0,0,0.1)",
                          borderTopColor: "#333",
                          animation: "spin 1s linear infinite",
                        }}
                      ></span>
                      Updating...
                    </span>
                  ) : isAvailable ? (
                    "Set Unavailable"
                  ) : (
                    "Set Available"
                  )}
                </button>
              </div>
            </div>

            {availabilityError && (
              <div
                style={{
                  padding: "0 16px 12px",
                  color: "#d32f2f",
                  fontSize: "13px",
                }}
              >
                {availabilityError}
              </div>
            )}
          </div>
        )}
      </div>

      <div style={{ maxWidth: "1200px", margin: "0 auto", padding: "0 20px" }}>
        <div
          style={{
            display: "flex",
            justifyContent: "space-between",
            marginBottom: "20px",
            gap: "10px",
            width: "100%",
          }}
        >
          <div style={{ position: "relative", flex: 1 }}>
            <span style={{ position: "absolute", left: "12px", top: "12px", color: "#666" }}>🔍</span>
            <input
              type="text"
              placeholder="Search donations..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              style={{
                width: "100%",
                padding: "12px 12px 12px 36px",
                fontSize: "16px",
                border: "2px solid #ddd",
                borderRadius: "6px",
                outline: "none",
                transition: "all 0.3s",
                background: "white",
              }}
              onFocus={(e) => {
                e.target.style.borderColor = "#228b22"
                e.target.style.boxShadow = "0px 0px 5px rgba(34, 139, 34, 0.3)"
              }}
              onBlur={(e) => {
                e.target.style.borderColor = "#ddd"
                e.target.style.boxShadow = "none"
              }}
            />
          </div>
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            style={{
              padding: "12px",
              fontSize: "16px",
              border: "2px solid #ddd",
              borderRadius: "6px",
              outline: "none",
              background: "white",
              minWidth: "150px",
            }}
          >
            <option value="">🟢 All Statuses</option>
            <option value="pending">🕒 Pending</option>
            <option value="approved">✅ Accepted</option>
            <option value="rejected">❌ Rejected</option>
          </select>
        </div>

        <div
          style={{
            display: "grid",
            gridTemplateColumns: "repeat(auto-fit, minmax(350px, 1fr))",
            gap: "20px",
            width: "100%",
          }}
        >
          {currentDonations.length > 0 ? (
            currentDonations.map((donation) => (
              <div
                key={donation._id}
                style={{
                  background: "white",
                  borderRadius: "12px",
                  boxShadow: "0 2px 10px rgba(0, 0, 0, 0.05)",
                  padding: "20px",
                  transition: "transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out",
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.transform = "translateY(-5px)"
                  e.currentTarget.style.boxShadow = "0px 8px 15px rgba(0, 0, 0, 0.1)"
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.transform = "translateY(0)"
                  e.currentTarget.style.boxShadow = "0 2px 10px rgba(0, 0, 0, 0.05)"
                }}
              >
                <h5
                  style={{
                    fontSize: "22px",
                    fontWeight: "bold",
                    color: "#228b22",
                    marginBottom: "10px",
                    display: "flex",
                    alignItems: "center",
                    gap: "8px",
                  }}
                >
                  <span style={{ fontSize: "24px" }}>🛒</span> {donation.title || "Untitled"}
                </h5>
                <p
                  style={{
                    fontSize: "16px",
                    color: "#444",
                    lineHeight: "1.6",
                    margin: "5px 0",
                    display: "flex",
                    alignItems: "flex-start",
                    gap: "8px",
                  }}
                >
                  <span style={{ color: "#ff4081", fontSize: "18px", marginTop: "2px" }}>📍</span>
                  <span>
                    <strong>Location:</strong> {donation.address || "Not specified"}
                  </span>
                </p>
                <p
                  style={{
                    fontSize: "16px",
                    color: "#444",
                    lineHeight: "1.6",
                    margin: "5px 0",
                    display: "flex",
                    alignItems: "center",
                    gap: "8px",
                  }}
                >
                  <span style={{ color: "#2196f3", fontSize: "18px" }}>📆</span>
                  <span>
                    <strong>Expiration Date:</strong>{" "}
                    {donation.expirationDate
                      ? new Date(donation.expirationDate).toISOString().split("T")[0]
                      : "Not set"}
                  </span>
                </p>
                <p
                  style={{
                    fontSize: "16px",
                    color: "#444",
                    lineHeight: "1.6",
                    margin: "5px 0",
                    display: "flex",
                    alignItems: "center",
                    gap: "8px",
                  }}
                >
                  <span style={{ color: "#ff9800", fontSize: "18px" }}>🚚</span>
                  <span>
                    <strong>Delivery:</strong> {donation.delivery ? "Yes" : "No"}
                  </span>
                </p>
                <p
                  style={{
                    fontSize: "16px",
                    color: "#444",
                    lineHeight: "1.6",
                    margin: "5px 0",
                    display: "flex",
                    alignItems: "center",
                    gap: "8px",
                  }}
                >
                  <span style={{ color: "#03a9f4", fontSize: "18px" }}>🔄</span>
                  <span>
                    <strong>Status:</strong>{" "}
                    <span
                      style={{
                        display: "inline-block",
                        padding: "4px 10px",
                        borderRadius: "18px",
                        fontSize: "14px",
                        fontWeight: "bold",
                        color: "white",
                        background:
                          donation.status === "pending"
                            ? "orange"
                            : donation.status === "approved"
                              ? "#228b22"
                              : donation.status === "rejected"
                                ? "red"
                                : "#666",
                      }}
                    >
                      {donation.status || "Unknown"}
                    </span>
                  </span>
                </p>

                <div
                  style={{
                    marginTop: "15px",
                    borderTop: "1px solid #e0e0e0",
                    paddingTop: "15px",
                    display: "flex",
                    flexDirection: "column",
                    gap: "10px",
                  }}
                >
                  <h4
                    style={{
                      fontSize: "16px",
                      fontWeight: "600",
                      color: "#333",
                      margin: "0 0 5px 0",
                      display: "flex",
                      alignItems: "center",
                      gap: "8px",
                    }}
                  >
                    <span style={{ color: "#ff9800", fontSize: "18px" }}>📦</span> Available Products:
                  </h4>

                  <div
                    style={{
                      background: "#f8f8f8",
                      borderRadius: "8px",
                      padding: "12px",
                    }}
                  >
                    {Array.isArray(donation.products) && donation.products.length > 0 ? (
                      donation.products.map((pro, index) => (
                        <div
                          key={index}
                          style={{
                            backgroundColor: "#e8f5e9",
                            color: "#2e7d32",
                            padding: "10px 15px",
                            borderRadius: "8px",
                            fontSize: "14px",
                            marginBottom: index < donation.products.length - 1 ? "8px" : 0,
                          }}
                        >
                          <div style={{ display: "flex", justifyContent: "space-between", marginBottom: "5px" }}>
                            <span>
                              <strong>Name:</strong> {pro.product?.name || "Not specified"}
                            </span>
                            <span>
                              <strong>Quantity:</strong> {pro.quantity || 0}{" "}
                              {pro.product?.weightUnitTotale || pro.product?.weightUnit || ""}
                            </span>
                          </div>
                          <div>
                            <span>
                              <strong>Status:</strong> {pro.product?.status || "Unknown"}
                            </span>
                          </div>
                        </div>
                      ))
                    ) : (
                      <div
                        style={{
                          backgroundColor: "#e8f5e9",
                          color: "#2e7d32",
                          padding: "10px 15px",
                          borderRadius: "8px",
                          fontSize: "14px",
                        }}
                      >
                        {donation.category === "prepared_meals"
                          ? `🍽️ Number of meals: ${donation.numberOfMeals || "Not specified"}`
                          : "No products available"}
                      </div>
                    )}
                  </div>
                </div>

                <Link
                  to={`/DetailsDonations/${donation._id}`}
                  style={{
                    display: "block",
                    textDecoration: "none",
                    padding: "12px",
                    fontSize: "16px",
                    fontWeight: "bold",
                    borderRadius: "8px",
                    background: "#228b22",
                    color: "white",
                    textAlign: "center",
                    marginTop: "15px",
                    transition: "background 0.3s ease-in-out",
                  }}
                  onMouseEnter={(e) => (e.currentTarget.style.background = "#1e7a1e")}
                  onMouseLeave={(e) => (e.currentTarget.style.background = "#228b22")}
                >
                  See More
                </Link>
              </div>
            ))
          ) : (
            <div
              style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                padding: "40px",
                background: "white",
                borderRadius: "12px",
                boxShadow: "0px 8px 15px rgba(0, 0, 0, 0.1)",
                textAlign: "center",
                margin: "20px auto",
                gridColumn: "1 / -1",
              }}
            >
              <p style={{ fontSize: "18px", color: "#444", lineHeight: "1.6", marginBottom: "20px" }}>
                {user?._id === loggedInUserId
                  ? "It looks like you haven't made any donations yet! Share your generosity and join us in making an impact—your contribution could change someone's life!"
                  : `${user?.name || "User"} has not made any donations yet.`}
              </p>
              {user?._id === loggedInUserId && (
                <Link
                  to="/addDonation"
                  style={{
                    display: "inline-block",
                    textDecoration: "none",
                    padding: "12px 24px",
                    fontSize: "16px",
                    fontWeight: "bold",
                    borderRadius: "8px",
                    background: "#228b22",
                    color: "white",
                    transition: "background 0.3s ease-in-out",
                  }}
                  onMouseEnter={(e) => (e.currentTarget.style.background = "#1e7a1e")}
                  onMouseLeave={(e) => (e.currentTarget.style.background = "#228b22")}
                >
                  Add a Donation
                </Link>
              )}
            </div>
          )}
        </div>

        {totalPages > 1 && (
          <div style={{ display: "flex", justifyContent: "center", marginTop: "20px", gap: "10px", flexWrap: "wrap" }}>
            <button
              onClick={() => handlePageChange(currentPage - 1)}
              disabled={currentPage === 1}
              style={{
                background: currentPage === 1 ? "#e0e0e0" : "#228b22",
                color: currentPage === 1 ? "#999" : "white",
                border: "none",
                padding: "8px 16px",
                borderRadius: "6px",
                cursor: currentPage === 1 ? "not-allowed" : "pointer",
                transition: "background 0.3s",
                fontWeight: "bold",
              }}
              onMouseEnter={(e) => {
                if (currentPage !== 1) e.currentTarget.style.background = "#1e7a1e"
              }}
              onMouseLeave={(e) => {
                if (currentPage !== 1) e.currentTarget.style.background = "#228b22"
              }}
            >
              Previous
            </button>

            {renderPaginationButtons()}

            <button
              onClick={() => handlePageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
              style={{
                background: currentPage === totalPages ? "#e0e0e0" : "#228b22",
                color: currentPage === totalPages ? "#999" : "white",
                border: "none",
                padding: "8px 16px",
                borderRadius: "6px",
                cursor: currentPage === totalPages ? "not-allowed" : "pointer",
                transition: "background 0.3s",
                fontWeight: "bold",
              }}
              onMouseEnter={(e) => {
                if (currentPage !== totalPages) e.currentTarget.style.background = "#1e7a1e"
              }}
              onMouseLeave={(e) => {
                if (currentPage !== totalPages) e.currentTarget.style.background = "#228b22"
              }}
            >
              Next
            </button>
          </div>
        )}
      </div>

      <style>
        {`
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        `}
      </style>
    </div>
  )
}

export default DonorProfile
</file>

<file path="sustainafood-frontend/src/components/RecipientProfile.jsx">
"use client"

import { useState, useEffect } from "react"
import { getRequestsByRecipientId } from "../api/requestNeedsService"
import { Link } from "react-router-dom"
import { updateUserAvailability } from "../api/userService"

const RecipientProfile = ({ user }) => {
  const userid = user?._id || user?.id
  let loggedInUser = null
  try {
    const userData = localStorage.getItem("user")
    loggedInUser = userData ? JSON.parse(userData) : null
  } catch (err) {
    console.error("Error parsing loggedInUser from localStorage:", err)
  }
  const loggedInUserId = loggedInUser?._id || loggedInUser?.id
  const isOwnProfile = loggedInUser && userid && String(userid) === String(loggedInUserId)

  const [requests, setRequests] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [searchTerm, setSearchTerm] = useState("")
  const [statusFilter, setStatusFilter] = useState("")
  const [currentPage, setCurrentPage] = useState(1)
  const itemsPerPage = 2

  const [isAvailable, setIsAvailable] = useState(user?.isAvailable || false)
  const [availabilityLoading, setAvailabilityLoading] = useState(false)
  const [availabilityError, setAvailabilityError] = useState(null)

  useEffect(() => {
    setIsAvailable(user?.isAvailable || false)
  }, [user?.isAvailable])

  useEffect(() => {
    const fetchRequests = async () => {
      if (!userid) {
        setError("User ID not found")
        setLoading(false)
        return
      }

      try {
        console.log("Fetching requests for user ID:", userid)
        const response = await getRequestsByRecipientId(userid)
        console.log("Requests Data:", response.data)
        setRequests(response.data || [])
      } catch (err) {
        if (err.response?.status === 404 && err.response?.data?.message === "No requests found for this recipient") {
          setRequests([])
        } else {
          console.error("Fetch Error:", err)
          setError(err.response?.data?.message || "Error fetching request data")
        }
      } finally {
        setLoading(false)
      }
    }

    fetchRequests()
  }, [userid])

  const filteredRequests = requests
    .filter(
      (request) =>
        (request.title?.toLowerCase() || "").includes(searchTerm.toLowerCase()) ||
        (request.description?.toLowerCase() || "").includes(searchTerm.toLowerCase()),
    )
    .filter((request) => (statusFilter ? request.status === statusFilter : true))

  const totalPages = Math.ceil(filteredRequests.length / itemsPerPage)
  const indexOfLastItem = currentPage * itemsPerPage
  const indexOfFirstItem = indexOfLastItem - itemsPerPage
  const currentRequests = filteredRequests.slice(indexOfFirstItem, indexOfLastItem)

  const handlePageChange = (page) => {
    if (page >= 1 && page <= totalPages) {
      setCurrentPage(page)
    }
  }

  // Pagination logic to show limited page numbers with ellipses
  const renderPaginationButtons = () => {
    const pageButtons = []
    const maxVisibleButtons = 5 // Maximum number of page buttons to show

    // Always show first page button
    pageButtons.push(
      <button
        key={1}
        onClick={() => handlePageChange(1)}
        style={{
          background: currentPage === 1 ? "#228b22" : "#f5f5f5",
          color: currentPage === 1 ? "white" : "#555",
          border: "none",
          padding: "8px 14px",
          borderRadius: "6px",
          cursor: "pointer",
          transition: "background 0.3s",
          margin: "0 4px",
          fontWeight: currentPage === 1 ? "bold" : "normal",
        }}
        onMouseEnter={(e) => {
          e.currentTarget.style.background = currentPage === 1 ? "#1e7a1e" : "#e0e0e0"
        }}
        onMouseLeave={(e) => {
          e.currentTarget.style.background = currentPage === 1 ? "#228b22" : "#f5f5f5"
        }}
      >
        1
      </button>,
    )

    // Calculate range of visible page buttons
    let startPage = Math.max(2, currentPage - Math.floor(maxVisibleButtons / 2))
    const endPage = Math.min(totalPages - 1, startPage + maxVisibleButtons - 3)

    if (endPage - startPage < maxVisibleButtons - 3) {
      startPage = Math.max(2, endPage - (maxVisibleButtons - 3) + 1)
    }

    // Add ellipsis after first page if needed
    if (startPage > 2) {
      pageButtons.push(
        <span key="ellipsis1" style={{ margin: "0 4px", color: "#555" }}>
          ...
        </span>,
      )
    }

    // Add page buttons between start and end
    for (let i = startPage; i <= endPage; i++) {
      pageButtons.push(
        <button
          key={i}
          onClick={() => handlePageChange(i)}
          style={{
            background: currentPage === i ? "#228b22" : "#f5f5f5",
            color: currentPage === i ? "white" : "#555",
            border: "none",
            padding: "8px 14px",
            borderRadius: "6px",
            cursor: "pointer",
            transition: "background 0.3s",
            margin: "0 4px",
            fontWeight: currentPage === i ? "bold" : "normal",
          }}
          onMouseEnter={(e) => {
            e.currentTarget.style.background = currentPage === i ? "#1e7a1e" : "#e0e0e0"
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.background = currentPage === i ? "#228b22" : "#f5f5f5"
          }}
        >
          {i}
        </button>,
      )
    }

    // Add ellipsis before last page if needed
    if (endPage < totalPages - 1) {
      pageButtons.push(
        <span key="ellipsis2" style={{ margin: "0 4px", color: "#555" }}>
          ...
        </span>,
      )
    }

    // Always show last page button if there's more than one page
    if (totalPages > 1) {
      pageButtons.push(
        <button
          key={totalPages}
          onClick={() => handlePageChange(totalPages)}
          style={{
            background: currentPage === totalPages ? "#228b22" : "#f5f5f5",
            color: currentPage === totalPages ? "white" : "#555",
            border: "none",
            padding: "8px 14px",
            borderRadius: "6px",
            cursor: "pointer",
            transition: "background 0.3s",
            margin: "0 4px",
            fontWeight: currentPage === totalPages ? "bold" : "normal",
          }}
          onMouseEnter={(e) => {
            e.currentTarget.style.background = currentPage === totalPages ? "#1e7a1e" : "#e0e0e0"
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.background = currentPage === totalPages ? "#228b22" : "#f5f5f5"
          }}
        >
          {totalPages}
        </button>,
      )
    }

    return pageButtons
  }

  const handleToggleAvailability = async () => {
    if (!user?._id) {
      setAvailabilityError("User ID is missing. Cannot update availability.")
      return
    }

    setAvailabilityLoading(true)
    setAvailabilityError(null)

    try {
      const newAvailability = !isAvailable
      await updateUserAvailability(user._id, newAvailability)
      setIsAvailable(newAvailability)
    } catch (err) {
      let errorMessage = "Failed to update availability"

      if (err.response && err.response.data) {
        if (typeof err.response.data.message === "string") {
          errorMessage = err.response.data.message
        } else if (err.response.data.error) {
          errorMessage =
            typeof err.response.data.error === "string"
              ? err.response.data.error
              : "An error occurred while updating availability"
        }
      } else if (err.message) {
        errorMessage = err.message
      }

      setAvailabilityError(errorMessage)
      console.error("Error updating availability:", err)
    } finally {
      setAvailabilityLoading(false)
    }
  }

  if (loading) return <div>Loading...</div>
  if (error) return <div>{error}</div>

  return (
    <div style={{ background: "#f5f9f5", padding: "20px 0" }}>
      <div
        style={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "flex-start",
          maxWidth: "1200px",
          margin: "0 auto 20px",
          padding: "0 20px",
        }}
      >
  

        {isOwnProfile && (
          <div
            style={{
              background: "#ffffff",
              borderRadius: "12px",
              overflow: "hidden",
              boxShadow: "0 2px 10px rgba(34, 139, 34, 0.08)",
              border: "1px solid rgba(34, 139, 34, 0.12)",
              width: "530px",
            }}
          >
            <div
              style={{
                padding: "10px 16px",
                borderBottom: "1px solid rgba(34, 139, 34, 0.08)",
                display: "flex",
                alignItems: "center",
                gap: "10px",
              }}
            >
              <div
                style={{
                  width: "10px",
                  height: "10px",
                  borderRadius: "50%",
                  background: isAvailable ? "#4CAF50" : "#9e9e9e",
                  boxShadow: isAvailable ? "0 0 0 3px rgba(76, 175, 80, 0.2)" : "none",
                }}
              ></div>
              <h4
                style={{
                  color: "#2e7d32",
                  fontSize: "16px",
                  fontWeight: "600",
                  margin: 0,
                }}
              >
                Availability Status
              </h4>
            </div>

            <div
              style={{
                padding: "12px 16px",
                display: "flex",
                alignItems: "center",
                justifyContent: "space-between",
              }}
            >
              <p
                style={{
                  color: "#555",
                  margin: 0,
                  fontSize: "14px",
                  fontWeight: "500",
                }}
              >
                {isAvailable ? "Status: Available" : "Status: Not Available"}
              </p>

              <div style={{ display: "flex", alignItems: "center", gap: "10px" }}>
                <button
                  onClick={handleToggleAvailability}
                  disabled={availabilityLoading}
                  style={{
                    padding: "6px 12px",
                    border: "none",
                    borderRadius: "8px",
                    fontSize: "14px",
                    fontWeight: "600",
                    cursor: availabilityLoading ? "not-allowed" : "pointer",
                    transition: "all 0.2s ease",
                    background: "#f0f0f0",
                    color: "#333",
                    opacity: availabilityLoading ? 0.7 : 1,
                    whiteSpace: "nowrap",
                  }}
                >
                  {availabilityLoading ? (
                    <span style={{ display: "flex", alignItems: "center", justifyContent: "center", gap: "8px" }}>
                      <span
                        style={{
                          width: "12px",
                          height: "12px",
                          borderRadius: "50%",
                          border: "2px solid rgba(0,0,0,0.1)",
                          borderTopColor: "#333",
                          animation: "spin 1s linear infinite",
                        }}
                      ></span>
                      Updating...
                    </span>
                  ) : isAvailable ? (
                    "Set Unavailable"
                  ) : (
                    "Set Available"
                  )}
                </button>
              </div>
            </div>

            {availabilityError && (
              <div
                style={{
                  padding: "0 16px 12px",
                  color: "#d32f2f",
                  fontSize: "13px",
                }}
              >
                {availabilityError}
              </div>
            )}
          </div>
        )}
        
      </div>

      <div style={{ maxWidth: "1200px", margin: "0 auto", padding: "0 20px" }}>
        <div
          style={{
            display: "flex",
            justifyContent: "space-between",
            marginBottom: "20px",
            gap: "10px",
            width: "100%",
          }}
        >
          <div style={{ position: "relative", flex: 1 }}>
            <span style={{ position: "absolute", left: "12px", top: "12px", color: "#666" }}>🔍</span>
            <input
              type="text"
              placeholder="Search requests..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              style={{
                width: "100%",
                padding: "12px 12px 12px 36px",
                fontSize: "16px",
                border: "2px solid #ddd",
                borderRadius: "6px",
                outline: "none",
                transition: "all 0.3s",
                background: "white",
              }}
              onFocus={(e) => {
                e.target.style.borderColor = "#228b22"
                e.target.style.boxShadow = "0px 0px 5px rgba(34, 139, 34, 0.3)"
              }}
              onBlur={(e) => {
                e.target.style.borderColor = "#ddd"
                e.target.style.boxShadow = "none"
              }}
            />
          </div>
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            style={{
              padding: "12px",
              fontSize: "16px",
              border: "2px solid #ddd",
              borderRadius: "6px",
              outline: "none",
              background: "white",
              minWidth: "150px",
            }}
          >
            <option value="">🟢 All Statuses</option>
            <option value="pending">🕒 Pending</option>
            <option value="approved">✅ Accepted</option>
            <option value="rejected">❌ Rejected</option>
          </select>
        </div>

        <div
          style={{
            display: "grid",
            gridTemplateColumns: "repeat(auto-fit, minmax(350px, 1fr))",
            gap: "20px",
            width: "100%",
          }}
        >
          {currentRequests.length > 0 ? (
            currentRequests.map((request) => (
              <div
                key={request._id}
                style={{
                  background: "white",
                  borderRadius: "12px",
                  boxShadow: "0 2px 10px rgba(0, 0, 0, 0.05)",
                  padding: "20px",
                  transition: "transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out",
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.transform = "translateY(-5px)"
                  e.currentTarget.style.boxShadow = "0px 8px 15px rgba(0, 0, 0, 0.1)"
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.transform = "translateY(0)"
                  e.currentTarget.style.boxShadow = "0 2px 10px rgba(0, 0, 0, 0.05)"
                }}
              >
                <h5
                  style={{
                    fontSize: "22px",
                    fontWeight: "bold",
                    color: "#228b22",
                    marginBottom: "10px",
                    display: "flex",
                    alignItems: "center",
                    gap: "8px",
                  }}
                >
                  <span style={{ fontSize: "24px" }}>🛒</span> {request.title || "Untitled"}
                </h5>
                <p
                  style={{
                    fontSize: "16px",
                    color: "#444",
                    lineHeight: "1.6",
                    margin: "5px 0",
                    display: "flex",
                    alignItems: "flex-start",
                    gap: "8px",
                  }}
                >
                  <span style={{ color: "#ff4081", fontSize: "18px", marginTop: "2px" }}>📍</span>
                  <span>
                    <strong>Location:</strong> {request.address || "Not specified"}
                  </span>
                </p>
                <p
                  style={{
                    fontSize: "16px",
                    color: "#444",
                    lineHeight: "1.6",
                    margin: "5px 0",
                    display: "flex",
                    alignItems: "center",
                    gap: "8px",
                  }}
                >
                  <span style={{ color: "#2196f3", fontSize: "18px" }}>📆</span>
                  <span>
                    <strong>Before Date:</strong>{" "}
                    {request.expirationDate ? new Date(request.expirationDate).toISOString().split("T")[0] : "Not set"}
                  </span>
                </p>
                <p
                  style={{
                    fontSize: "16px",
                    color: "#444",
                    lineHeight: "1.6",
                    margin: "5px 0",
                    display: "flex",
                    alignItems: "center",
                    gap: "8px",
                  }}
                >
                  <span style={{ color: "#9c27b0", fontSize: "18px" }}>📑</span>
                  <span>
                    <strong>Details:</strong> {request.description || "No description"}
                  </span>
                </p>
                <p
                  style={{
                    fontSize: "16px",
                    color: "#444",
                    lineHeight: "1.6",
                    margin: "5px 0",
                    display: "flex",
                    alignItems: "center",
                    gap: "8px",
                  }}
                >
                  <span style={{ color: "#03a9f4", fontSize: "18px" }}>🔄</span>
                  <span>
                    <strong>Status:</strong>{" "}
                    <span
                      style={{
                        display: "inline-block",
                        padding: "4px 10px",
                        borderRadius: "18px",
                        fontSize: "14px",
                        fontWeight: "bold",
                        color: "white",
                        background:
                          request.status === "pending"
                            ? "orange"
                            : request.status === "approved"
                              ? "#228b22"
                              : request.status === "rejected"
                                ? "red"
                                : "#666",
                      }}
                    >
                      {request.status || "Unknown"}
                    </span>
                  </span>
                </p>

                <div
                  style={{
                    marginTop: "15px",
                    borderTop: "1px solid #e0e0e0",
                    paddingTop: "15px",
                    display: "flex",
                    flexDirection: "column",
                    gap: "10px",
                  }}
                >
                  <h4
                    style={{
                      fontSize: "16px",
                      fontWeight: "600",
                      color: "#333",
                      margin: "0 0 5px 0",
                      display: "flex",
                      alignItems: "center",
                      gap: "8px",
                    }}
                  >
                    <span style={{ color: "#ff9800", fontSize: "18px" }}>📦</span> Requested Products:
                  </h4>

                  <div
                    style={{
                      background: "#f8f8f8",
                      borderRadius: "8px",
                      padding: "12px",
                    }}
                  >
                    {Array.isArray(request.requestedProducts) && request.requestedProducts.length > 0 ? (
                      request.requestedProducts.map((item, index) => (
                        <div
                          key={index}
                          style={{
                            backgroundColor: "#e8f5e9",
                            color: "#2e7d32",
                            padding: "10px 15px",
                            borderRadius: "8px",
                            fontSize: "14px",
                            marginBottom: index < request.requestedProducts.length - 1 ? "8px" : 0,
                          }}
                        >
                          <div style={{ display: "flex", justifyContent: "space-between", marginBottom: "5px" }}>
                            <span>
                              <strong>Type:</strong> {item.product?.productType || "Not specified"}
                            </span>
                            <span>
                              <strong>Weight:</strong> {item.product?.weightPerUnit || 0}{" "}
                              {item.product?.weightUnit || ""}
                            </span>
                          </div>
                          <div style={{ display: "flex", justifyContent: "space-between" }}>
                            <span>
                              <strong>Quantity:</strong> {item.product?.totalQuantity || 0}
                            </span>
                            <span>
                              <strong>Status:</strong> {item.product?.status || "Unknown"}
                            </span>
                          </div>
                        </div>
                      ))
                    ) : (
                      <div
                        style={{
                          backgroundColor: "#e8f5e9",
                          color: "#2e7d32",
                          padding: "10px 15px",
                          borderRadius: "8px",
                          fontSize: "14px",
                        }}
                      >
                        {request.category === "prepared_meals"
                          ? `🍽️ Number of meals: ${request.numberOfMeals || "Not specified"}`
                          : "No requested products"}
                      </div>
                    )}
                  </div>
                </div>

                <Link
                  to={`/DetailsRequest/${request._id}`}
                  style={{
                    display: "block",
                    textDecoration: "none",
                    padding: "12px",
                    fontSize: "16px",
                    fontWeight: "bold",
                    borderRadius: "8px",
                    background: "#228b22",
                    color: "white",
                    textAlign: "center",
                    marginTop: "15px",
                    transition: "background 0.3s ease-in-out",
                  }}
                  onMouseEnter={(e) => (e.currentTarget.style.background = "#1e7a1e")}
                  onMouseLeave={(e) => (e.currentTarget.style.background = "#228b22")}
                >
                  See More
                </Link>
              </div>
            ))
          ) : (
            <div
              style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                padding: "40px",
                background: "white",
                borderRadius: "12px",
                boxShadow: "0px 8px 15px rgba(0, 0, 0, 0.1)",
                textAlign: "center",
                margin: "20px auto",
                gridColumn: "1 / -1",
              }}
            >
              <p style={{ fontSize: "18px", color: "#444", lineHeight: "1.6", marginBottom: "20px" }}>
                {user?._id === loggedInUserId
                  ? "It looks like you haven't made any requests yet! Share your needs and join us in making a difference—your next step could help someone in need!"
                  : `${user?.name || "User"} has not made any requests yet.`}
              </p>
              {user?._id === loggedInUserId && (
                <Link
                  to="/addRequest"
                  style={{
                    display: "inline-block",
                    textDecoration: "none",
                    padding: "12px 24px",
                    fontSize: "16px",
                    fontWeight: "bold",
                    borderRadius: "8px",
                    background: "#228b22",
                    color: "white",
                    transition: "background 0.3s ease-in-out",
                  }}
                  onMouseEnter={(e) => (e.currentTarget.style.background = "#1e7a1e")}
                  onMouseLeave={(e) => (e.currentTarget.style.background = "#228b22")}
                >
                  Add a Request
                </Link>
              )}
            </div>
          )}
        </div>

        {totalPages > 1 && (
          <div style={{ display: "flex", justifyContent: "center", marginTop: "20px", gap: "10px", flexWrap: "wrap" }}>
            <button
              onClick={() => handlePageChange(currentPage - 1)}
              disabled={currentPage === 1}
              style={{
                background: currentPage === 1 ? "#e0e0e0" : "#228b22",
                color: currentPage === 1 ? "#999" : "white",
                border: "none",
                padding: "8px 16px",
                borderRadius: "6px",
                cursor: currentPage === 1 ? "not-allowed" : "pointer",
                transition: "background 0.3s",
                fontWeight: "bold",
              }}
              onMouseEnter={(e) => {
                if (currentPage !== 1) e.currentTarget.style.background = "#1e7a1e"
              }}
              onMouseLeave={(e) => {
                if (currentPage !== 1) e.currentTarget.style.background = "#228b22"
              }}
            >
              Previous
            </button>

            {renderPaginationButtons()}

            <button
              onClick={() => handlePageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
              style={{
                background: currentPage === totalPages ? "#e0e0e0" : "#228b22",
                color: currentPage === totalPages ? "#999" : "white",
                border: "none",
                padding: "8px 16px",
                borderRadius: "6px",
                cursor: currentPage === totalPages ? "not-allowed" : "pointer",
                transition: "background 0.3s",
                fontWeight: "bold",
              }}
              onMouseEnter={(e) => {
                if (currentPage !== totalPages) e.currentTarget.style.background = "#1e7a1e"
              }}
              onMouseLeave={(e) => {
                if (currentPage !== totalPages) e.currentTarget.style.background = "#228b22"
              }}
            >
              Next
            </button>
          </div>
        )}
      </div>

      <style>
        {`
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        `}
      </style>
    </div>
  )
}

export default RecipientProfile
</file>

<file path="sustainafood-backend/controllers/UserController.js">
const express = require("express");
const bcrypt = require("bcryptjs");
const User = require("../models/User");
const jwt = require("jsonwebtoken");
const nodemailer = require("nodemailer");
const twilio = require('twilio');
const mongoose = require("mongoose");
const RequestNeed = require("../models/RequestNeed"); // Add this import
const crypto = require("crypto"); // For generating random reset codes
const { console } = require("inspector");
const Delivery = require("../models/Delivery");
const multer = require('multer');
const path = require('path');
const Advertisement = require("../models/Advertisement"); // Add missing import

require("dotenv").config(); // Load environment variables

// Initialize Twilio client
const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);
const verifyServiceSid = process.env.TWILIO_VERIFY_SERVICE_SID;

// Generate a 6-digit code (used for both reset and 2FA)
const generateCode = () => Math.floor(100000 + Math.random() * 900000).toString();
/////////////////////////////////

/////////////////////////////////////////////////////////
async function createUser(req, res) {
    try {
        const { name, email, photo } = req.body;   
        const existingUser = await User.findOne({ email });

        if (existingUser) {
            return res.status(200).json({ id: existingUser._id.toString() }); 
            // 🔹 Assure un ObjectId valide pour éviter l'erreur
        }

        const user = new User({ name, email, photo });
        await user.save();

        console.log("✅ Utilisateur créé avec ID:", user._id.toString()); // 🔹 Log l'ID correctement
        res.status(201).json({ id: user._id.toString() });

    } catch (error) {
        console.error("❌ Erreur API :", error.message);
        res.status(500).json({ message: "Error creating user" });
    }
}





// Generate a 6-digit reset code
const generateResetCode = () => Math.floor(100000 + Math.random() * 900000).toString(); 

// Function to generate a reset code and send it via email
// 🚀 Send Reset Code (Forgot Password)
async function sendResetCode(req, res) {
    const { email } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) return res.status(404).json({ error: "User not found" });

        // Generate reset code
        const resetCode = generateResetCode();

        // Store reset code & expiration
        user.resetCode = resetCode;
        user.resetCodeExpires = Date.now() + 10 * 60 * 1000; // Expires in 10 minutes
        await user.save();

        // Configure email transporter
        const transporter = nodemailer.createTransport({
            service: "gmail",
            auth: {
                user: process.env.EMAIL_USER, 
                pass: process.env.EMAIL_PASS, 
            },
            tls: {
                rejectUnauthorized: false, // Désactive la vérification SSL
            },
        });
        

        // Email details
        const mailOptions = {
            from: process.env.EMAIL_USER,
            to: email,
            subject: "Password Reset Code",
            text: `Your password reset code is: ${resetCode}. This code is valid for 10 minutes.`,
        };

        // Send email
        await transporter.sendMail(mailOptions);

        res.status(200).json({ message: "Reset code sent successfully" });

    } catch (error) {
        console.error("Error sending reset code:", error);
        res.status(500).json({ error: "Error sending reset code" });
    }
}

// 🚀 Validate Reset Code
async function validateResetCode(req, res) {
    const { email, resetCode } = req.body;

    try {
        const user = await User.findOne({ email });

        if (!user || user.resetCode !== resetCode || user.resetCodeExpires < Date.now()) {
            return res.status(400).json({ error: "Invalid or expired reset code" });
        }

        res.status(200).json({ message: "Reset code verified" });

    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Server error" });
    }
}

// 🚀 Reset Password
async function resetPassword(req, res) {
    const { email, newPassword } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) return res.status(404).json({ error: "User not found" });

        // Hash the new password
        const hashedPassword = await bcrypt.hash(newPassword, 10);

        // Update user password & clear reset code
        user.password = hashedPassword;
        user.resetCode = undefined;
        user.resetCodeExpires = undefined;
        await user.save();

        res.status(200).json({ message: "Password successfully reset" });

    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Server error" });
    }
}





async function addUser(req, res) {
    try {
      const { email, password, confirmPassword, phone, name, address, role } = req.body;
  
      // Vérifier si tous les champs sont remplis
      if (!email || !password || !confirmPassword || !phone || !name || !address || !role) {
        return res.status(400).json({ error: "Veuillez remplir tous les champs." });
      }
  
      // Vérifier si les mots de passe correspondent
      if (password !== confirmPassword) {
        return res.status(400).json({ error: "Passwords do not match" });
      }
      // ✅ Vérifier si l'email existe déjà
      const existingUser = await User.findOne({ email });
      if (existingUser) {
        return res.status(400).json({ error: "Email already exists" });
      }
  
      // Hacher le mot de passe avant de le stocker
      const hashedPassword = await bcrypt.hash(password, 10);
  
      // Construire l'objet utilisateur à partir de req.body
      const userData = { ...req.body, password: hashedPassword };
  
      // Si un fichier "photo" est uploadé, utilisez le chemin fourni par Multer
      if (req.files && req.files.photo && req.files.photo[0]) {
        userData.photo = req.files.photo[0].path;
      }
  
      // Si l'utilisateur est un étudiant et qu'un fichier "image_carte_etudiant" est uploadé, ajoutez-le
      if (role === 'student') {
        if (req.files && req.files.image_carte_etudiant && req.files.image_carte_etudiant[0]) {
          userData.image_carte_etudiant = req.files.image_carte_etudiant[0].path;
        }
      }
  
      // Créer l'utilisateur avec les données et le mot de passe haché
      const user = new User(userData);
      await user.save();
      res.status(201).json(user);
    } catch (error) {
      res.status(400).json({ error: error.message });
    }
  }
  

// Get all users
async function getUsers(req, res) {
    try {
        const users = await User.find();
        res.status(200).json(users);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
}

// Get a user by ID
async function getUserById(req, res) {
    try {
        const user = await User.findById(req.params.id);
        if (!user) {
            return res.status(404).json({ error: "User not found" });
        }
        res.status(200).json(user);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
}

async function getUserByEmailAndPassword(req, res) {
    const { email, password } = req.body; // Récupérer l'email et le mot de passe depuis le corps de la requête

    try {
        // Trouver l'utilisateur par email
        const user = await User.findOne({ email: email });
        if (!user) {
            return res.status(404).json({ error: "User not found" });
        }

        // Vérifier le mot de passe
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(401).json({ error: "Invalid password" });
        }
        ////////////////////2fo
 // Étape 1 réussie : Envoyer un code de vérification
 await sendTwoFactorCode(user);

 res.status(200).json({ message: "Verification code sent to email", email });
 ////////////////////////////////
        // Si l'utilisateur est trouvé et le mot de passe est correct, renvoyer les détails de l'utilisateur
        res.status(200).json(user);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
}
// Update a user
const updateUser = async (req, res) => {
    try {
      // Récupération des champs texte depuis le corps de la requête
      const {
        description,
        role,
        name,
        email,
        phone,
        address,
        photo, // optionnel si aucun fichier n'est envoyé
        age,
        sexe,
        image_carte_etudiant, // optionnel si aucun fichier n'est envoyé
        num_cin,
        id_fiscale,
        type,
        vehiculeType,
        taxReference,
        isBlocked,
        resetCode,
        resetCodeExpires
      } = req.body;
  
      // Construction de l'objet de mise à jour
      const updateData = {};
      if (description) updateData.description = description;
      if (name) updateData.name = name;
      if (email) updateData.email = email;
      if (phone && !isNaN(phone)) updateData.phone = phone;
      if (address) updateData.address = address;
  
      // Si un fichier "photo" est uploadé, on utilise le chemin fourni par Multer,
      // sinon, on garde la valeur provenant du corps de la requête (si présente)
      if (req.files && req.files.photo && req.files.photo[0]) {
        updateData.photo = req.files.photo[0].path;
      } else if (photo) {
        updateData.photo = photo;
      }
  
      if (age && !isNaN(age)) updateData.age = age;
      if (sexe) updateData.sexe = sexe;
  
      // Pour "image_carte_etudiant" : priorité au fichier uploadé par Multer
      if (req.files && req.files.image_carte_etudiant && req.files.image_carte_etudiant[0]) {
        updateData.image_carte_etudiant = req.files.image_carte_etudiant[0].path;
      } else if (image_carte_etudiant) {
        updateData.image_carte_etudiant = image_carte_etudiant;
      }
  
      if (num_cin) updateData.num_cin = num_cin;
      if (id_fiscale) updateData.id_fiscale = id_fiscale;
      if (type) updateData.type = type;
      if (vehiculeType) updateData.vehiculeType = vehiculeType;
      if (taxReference) updateData.taxReference = taxReference;
      if (typeof isBlocked === "boolean") updateData.isBlocked = isBlocked;
      if (resetCode) updateData.resetCode = resetCode;
      if (resetCodeExpires) updateData.resetCodeExpires = resetCodeExpires;
  
      // Vérifier si l'utilisateur existe
      const user = await User.findById(req.params.id);
      if (!user) {
        return res.status(404).json({ error: "User not found" });
      }
  
      // Vérification pour empêcher la modification du rôle par un utilisateur non autorisé
     // if (req.body.role && req.user.role !== "admin") {
       // return res.status(403).json({ error: "Unauthorized to update role" });
     // }
      if (req.body.role) updateData.role = req.body.role;
  
      // Ne pas permettre la modification du mot de passe via cette méthode
      if (req.body.password) {
        return res.status(400).json({ error: "Password cannot be updated this way" });
      }
  
      // Mise à jour de l'utilisateur en BDD
      const updatedUser = await User.findByIdAndUpdate(req.params.id, updateData, { new: true });
      res.status(200).json(updatedUser);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  };
  // Update Description Controller
  const onUpdateDescription = async (req, res) => {
    try {
      const { id } = req.params; // Correct parameter name
      const { description } = req.body; // Expect description in body
  
      // Validate input
      if (!description || typeof description !== 'string') {
        return res.status(400).json({ message: 'Description is required and must be a string' });
      }
      if (description.length > 500) {
        return res.status(400).json({ message: 'Description cannot exceed 500 characters' });
      }
  
      // Update User
      const updatedUser = await User.findOneAndUpdate(
        { _id: id },
        { description },
        { new: true, runValidators: true }
      );
  
      if (!updatedUser) {
        return res.status(404).json({ message: 'User not found' });
      }
  
      res.status(200).json({
        message: 'Description updated successfully',
        user: updatedUser
      });
    } catch (error) {
      console.error('Error updating description:', error);
      res.status(500).json({ message: 'Server error while updating description' });
    }
  };

  const updateUserWithEmail = async (req, res) => {
      try {
          const { email } = req.params;
          if (!email) {
              return res.status(400).json({ error: "Email is required" });
          }
  
          const {
              phone,
              address,
              photo,
              age,
              sexe,
              image_carte_etudiant,
              num_cin,
              id_fiscal,
              type,
              vehiculeType,
              taxReference,
              isBlocked,
              resetCode,
              resetCodeExpires,
              role
          } = req.body;
  
          const user = await User.findOne({ email: email });
          if (!user) {
              return res.status(404).json({ error: "User not found" });
          }
  
          if (role && req.user.role !== "admin") {
              return res.status(403).json({ error: "Unauthorized to update role" });
          }
  
          if (req.body.password) {
              return res.status(400).json({ error: "Password cannot be updated this way" });
          }
  
          const updateData = {};
          if (phone && !isNaN(phone)) updateData.phone = phone;
          if (address) updateData.address = address;
          if (age && !isNaN(age)) updateData.age = age;
          if (sexe) updateData.sexe = sexe;
          if (num_cin) updateData.num_cin = num_cin;
          if (id_fiscal) updateData.id_fiscal = id_fiscal;
          if (type) updateData.type = type;
          if (vehiculeType) updateData.vehiculeType = vehiculeType;
          if (taxReference) updateData.taxReference = taxReference;
          if (typeof isBlocked === "boolean") updateData.isBlocked = isBlocked;
          if (resetCode) updateData.resetCode = resetCode;
          if (resetCodeExpires) updateData.resetCodeExpires = resetCodeExpires;
          if (role) updateData.role = role;
  
          if (req.files?.photo?.[0]?.path) {
              updateData.photo = req.files.photo[0].path;
          } else if (photo) {
              updateData.photo = photo;
          }
  
          if (req.files?.image_carte_etudiant?.[0]?.path) {
              updateData.image_carte_etudiant = req.files.image_carte_etudiant[0].path;
          } else if (image_carte_etudiant) {
              updateData.image_carte_etudiant = image_carte_etudiant;
          }
  
          const updatedUser = await User.findOneAndUpdate(
              { email: email },
              updateData,
              { new: true }
          );
  
          if (!updatedUser) {
              return res.status(500).json({ error: "User update failed" });
          }
  
          // 🛑 Génération du token après mise à jour 🛑
          const token = jwt.sign(
              { id: updatedUser._id, email: updatedUser.email, role: updatedUser.role },
              process.env.JWT_SECRET, // Remplace par ta clé secrète
              { expiresIn: "1h" }
          );
  
          res.status(200).json({ user: updatedUser, token });
      } catch (error) {
          res.status(500).json({ error: error.message });
      }
  };
  


// 🚀 Block or Unblock User
async function toggleBlockUser(req, res) {
    try {
        const { id } = req.params; // Get user ID from request parameters

        // Find the user by ID
        const user = await User.findById(id);
        if (!user) {
            return res.status(404).json({ error: "User not found" });
        }

        // Toggle the isBlocked field
        user.isBlocked = !user.isBlocked;
        await user.save();

        res.status(200).json({ message: `User ${user.isBlocked ? "blocked" : "unblocked"} successfully`, isBlocked: user.isBlocked });
    } catch (error) {
        console.error("Erreur lors de la mise à jour de l'utilisateur:", error);
        res.status(500).json({ error: error.message });
    }
    
}


// Delete a user
async function deleteUser(req, res) {
    try {
        const user = await User.findByIdAndDelete(req.params.id);
        if (!user) {
            return res.status(404).json({ error: "User not found" });
        }
        res.status(200).json({ message: "User deleted successfully" });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
}
///////////////////////////////////////////hedhy badltha ///////////////////////////////////////////
// Signin (generate JWT token)
// Signin (generate JWT token)

async function user_signin(req, res) {
    console.log("Requête reçue :", req.body);

    const { email, password } = req.body;

    try {
        if (!email || !password) {
            return res.status(400).json({ error: "Email and password are required" });
        }

        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ error: "Invalid credentials" });
        }

        if (user.isBlocked) {
            return res.status(403).json({ error: "Your account is blocked. Please contact support." });
        }

        let welcomeMessage = null;
        if (!user.isActive) {
            user.isActive = true;
            await user.save();
            welcomeMessage = "Your account has been reactivated. Welcome back!";
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ error: "Invalid credentials" });
        }

        if (user.is2FAEnabled) {
            if (!user.phone || isNaN(user.phone)) {
                console.error("Invalid phone number in database:", user.phone);
                return res.status(500).json({ error: "User phone number is missing or invalid" });
            }

            const phoneWithPrefix = `+216${user.phone.toString()}`;
            console.log("Sending 2FA to:", phoneWithPrefix);

            try {
                const verification = await client.verify.v2
                    .services(verifyServiceSid)
                    .verifications.create({ to: phoneWithPrefix, channel: "sms" });
                console.log("Verification SID:", verification.sid);
            } catch (verifyError) {
                console.error("Verify API error:", verifyError.message, verifyError.stack);
                return res.status(500).json({ error: "Failed to send 2FA code via Verify API", details: verifyError.message });
            }

            return res.status(200).json({ message: "2FA code sent to your phone", requires2FA: true });
        }

        const payload = {
            userId: user._id,
            role: user.role,
        };

        const token = jwt.sign(payload, process.env.JWT_SECRET || "your_jwt_secret", { expiresIn: "1h" });
        res.status(200).json({
            token,
            role: user.role,
            id: user._id,
            message: welcomeMessage,
            is2FAEnabled: user.is2FAEnabled,
        });
    } catch (error) {
        console.error("Erreur serveur détaillée :", {
            message: error.message,
            stack: error.stack,
            requestBody: req.body,
        });
        res.status(500).json({ error: "Server error", details: error.message });
    }
}



  
// 🚀 View Student by ID
async function viewStudent(req, res) {
    try {
        // Retrieve student ID from request parameters
        const studentId = req.params.id;

        // Find the student by ID
        const student = await User.findById(studentId); // Assuming you're storing student data in the User model
        if (!student) {
            return res.status(404).json({ error: "Student not found" });
        }

        // Send the student details in the response
        res.status(200).json(student);

    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Server error" });
    }
}

async function viewRestaurant(req, res) {
    try {
        // Retrieve restaurant ID from request parameters
        const restaurantId = req.params.id;

        // Find the restaurant by ID (assuming you're storing restaurant data in the User model)
        const restaurant = await User.findById(restaurantId);
        
        // Check if the restaurant exists
        if (!restaurant) {
            return res.status(404).json({ error: "Restaurant not found" });
        }

        // Send the restaurant details in the response
        res.status(200).json(restaurant);

    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Server error" });
    }
}
async function viewSupermarket(req, res) {
    try {
        // Retrieve supermarket ID from request parameters
        const supermarketId = req.params.id;

        // Find the supermarket by ID (assuming you're storing supermarket data in the User model)
        const supermarket = await User.findById(supermarketId);
        
        // Check if the supermarket exists
        if (!supermarket) {
            return res.status(404).json({ error: "Supermarket not found" });
        }

        // Send the supermarket details in the response
        res.status(200).json(supermarket);

    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Server error" });
    }
}
async function viewNGO(req, res) {
    try {
        // Récupérer l'ID de l'ONG depuis les paramètres de la requête
        const ongId = req.params.id;

        // Trouver l'ONG par ID (en supposant que les ONG sont stockées dans le modèle User)
        const ong = await User.findById(ongId);
        
        // Vérifier si l'ONG existe
        if (!ong) {
            return res.status(404).json({ error: "ONG not found" });
        }

        // Envoyer les détails de l'ONG dans la réponse
        res.status(200).json(ong);

    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Server error" });
    }
}

async function viewTransporter(req, res) {
    try {
        // Récupérer l'ID du transporteur depuis les paramètres de la requête
        const transporterId = req.params.id;

        // Trouver le transporteur par ID (en supposant que les transporteurs sont stockés dans le modèle User)
        const transporter = await User.findById(transporterId);
        
        // Vérifier si le transporteur existe
        if (!transporter) {
            return res.status(404).json({ error: "Transporter not found" });
        }

        // Envoyer les détails du transporteur dans la réponse
        res.status(200).json(transporter);

    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Server error" });
    }
}
// 🚀 Deactivate Account
async function deactivateAccount(req, res) {
    try {
        const { id } = req.params; // Get user ID from request parameters

        // Check if ID is valid
        if (!id) {
            return res.status(400).json({ error: "User ID is required" });
        }

        // Find and update the user
        const user = await User.findByIdAndUpdate(id, { isActive: false }, { new: true });

        if (!user) {
            return res.status(404).json({ error: "User not found" });
        }

        res.status(200).json({ message: "Account deactivated successfully", isActive: user.isActive });
    } catch (error) {
        console.error("Error deactivating account:", error);
        res.status(500).json({ error: "Server error" });
    }
}

// change password


async function changePassword(req, res) {
    try {
      // 1. Get the user ID from the route param
      const { id } = req.params; 
      const { currentPassword, newPassword } = req.body;
  
      if (!id) {
        return res.status(400).json({ error: "Missing user ID in route param." });
      }
  
      // 2. Find the user by ID
      const user = await User.findById(id);
      if (!user) {
        return res.status(404).json({ error: "User not found." });
      }
  
      // 3. Compare the current password
      const isMatch = await bcrypt.compare(currentPassword, user.password);
      if (!isMatch) {
        return res.status(400).json({ error: "Current password is incorrect." });
      }
  
      // 4. Hash the new password
      user.password = await bcrypt.hash(newPassword, 10);
  
      // 5. Save and respond
      await user.save();
      return res.status(200).json({ message: "Password changed successfully." });
  
    } catch (error) {
      console.error("Error changing password:", error);
      return res.status(500).json({ error: "Server error." });
    }
  }
  
  
// Generate a 6-digit 2FA code
const generate2FACode = () => Math.floor(100000 + Math.random() * 900000).toString();

// Send 2FA code via Verify API
async function send2FACode(req, res) {
    const { email } = req.body;
    try {
        const user = await User.findOne({ email });
        if (!user) return res.status(404).json({ error: "User not found" });

        if (!user.phone || isNaN(user.phone)) {
            return res.status(500).json({ error: "User phone number is missing or invalid" });
        }

        const phoneWithPrefix = `+216${user.phone.toString()}`;
        const twoFACode = generateCode();
        user.twoFACode = twoFACode;
        user.twoFACodeExpires = Date.now() + 10 * 60 * 1000;
        await user.save();

        try {
            const verification = await client.verify.v2
                .services(verifyServiceSid)
                .verifications.create({ to: phoneWithPrefix, channel: "sms" });
            console.log("Verification SID:", verification.sid);
        } catch (verifyError) {
            console.error("Verify API error:", verifyError.message, verifyError.stack);
            return res.status(500).json({ error: "Failed to send 2FA code via Verify API", details: verifyError.message });
        }

        res.status(200).json({ message: "2FA code sent successfully via SMS" });
    } catch (error) {
        console.error("Error sending 2FA code:", error);
        res.status(500).json({ error: "Error sending 2FA code", details: error.message });
    }
}
// Generate a 6-digit code (used for both reset and 2FA)
// Validate 2FA code
// Validate 2FA code
async function validate2FACode(req, res) {
    const { email, twoFACode } = req.body;
    console.log("Validating 2FA code:", { email, twoFACode, typeOfEmail: typeof email, typeOfTwoFACode: typeof twoFACode });

    // Validate input
    if (typeof email !== "string" || typeof twoFACode !== "string") {
        return res.status(400).json({ error: "Email and twoFACode must be strings" });
    }

    try {
        const user = await User.findOne({ email });
        if (!user) return res.status(400).json({ error: "User not found" });

        if (!user.phone || isNaN(user.phone)) {
            return res.status(400).json({ error: "User phone number is missing or invalid" });
        }

        const phoneWithPrefix = `+216${user.phone.toString()}`;
        console.log("Verifying 2FA for:", phoneWithPrefix);

        // Use Twilio Verify to check the code
        let verificationCheck;
        try {
            verificationCheck = await client.verify.v2
                .services(verifyServiceSid)
                .verificationChecks.create({ to: phoneWithPrefix, code: twoFACode });
            console.log("Verification Check Status:", verificationCheck.status);
        } catch (verifyError) {
            console.error("Verify Check API error:", verifyError.message, verifyError.stack);
            return res.status(500).json({ error: "Failed to verify 2FA code via Verify API", details: verifyError.message });
        }

        if (verificationCheck.status !== "approved") {
            return res.status(400).json({ error: "Invalid or expired 2FA code" });
        }

        // Debug user data before token generation
        console.log("User data for token:", {
            _id: user._id,
            email: user.email,
            role: user.role,
        });

        // Check JWT_SECRET
        if (!process.env.JWT_SECRET) {
            console.error("JWT_SECRET is not configured");
            return res.status(500).json({ error: "JWT_SECRET is not configured" });
        }

        // Generate JWT token
        const token = jwt.sign({ id: user._id, email: user.email, role: user.role }, process.env.JWT_SECRET, { expiresIn: "1h" });
        console.log("Token generated:", token);

        res.status(200).json({ token, role: user.role, id: user._id.toString() });
    } catch (error) {
        console.error("Error in validate2FACode:", {
            message: error.message,
            stack: error.stack,
            requestBody: req.body,
        });
        res.status(500).json({ error: "Server error", details: error.message });
    }
}
// Toggle 2FA status
async function toggle2FA(req, res) {
    const { email } = req.body;
    try {
        const user = await User.findOne({ email });
        if (!user) return res.status(404).json({ error: "User not found" });

        user.is2FAEnabled = !user.is2FAEnabled;
        await user.save();
        res.status(200).json({ message: `2FA ${user.is2FAEnabled ? "enabled" : "disabled"}` });
    } catch (error) {
        console.error("Error toggling 2FA:", error);
        res.status(500).json({ error: "Error toggling 2FA" });
    }
}

// Send 2FA code for Google sign-in via Verify API
const send2FACodeforsigninwithgoogle = async (req, res) => {
    try {
        const { email, phone } = req.body;

        if (!phone) return res.status(400).json({ error: "Phone number is required for SMS 2FA" });

        const user = await User.findOne({ email });
        if (!user) return res.status(404).json({ message: "User not found" });

        if (!user.is2FAEnabled) return res.status(400).json({ message: "2FA not enabled for this user", requires2FA: false });

        const twoFACode = generateCode();
        user.twoFACode = twoFACode;
        user.twoFACodeExpires = Date.now() + 10 * 60 * 1000;
        await user.save();

        const phoneWithPrefix = `+216${phone.toString()}`;
        try {
            const verification = await client.verify.v2
                .services(verifyServiceSid)
                .verifications.create({ to: phoneWithPrefix, channel: "sms" });
            console.log("Verification SID:", verification.sid);
        } catch (verifyError) {
            console.error("Verify API error:", verifyError.message, verifyError.stack);
            return res.status(500).json({ message: "Failed to send 2FA code via Verify API", details: verifyError.message });
        }

        return res.status(200).json({ message: "2FA code sent to your phone", requires2FA: true });
    } catch (error) {
        console.error("❌ Error sending 2FA code via SMS:", error);
        return res.status(500).json({ message: "Failed to send 2FA code via SMS", details: error.message });
    }
};
const getTransporters = async (req, res) => {
    try {
      const transporters = await User.find({ role: 'transporter' });
      res.status(200).json({ data: transporters });
    } catch (error) {
      res.status(500).json({ message: 'Erreur serveur.', error: error.message });
    }
  };
  const updateTransporterLocation = async (req, res) => {
    try {
      const { transporterId } = req.params;
      const { location, address } = req.body;
  
      // Validate transporterId
      if (!mongoose.Types.ObjectId.isValid(transporterId)) {
        return res.status(400).json({ message: 'ID du chauffeur invalide' });
      }
  
      // Validate location (GeoJSON Point)
      if (!location || location.type !== 'Point' || !Array.isArray(location.coordinates) || location.coordinates.length !== 2 || typeof location.coordinates[0] !== 'number' || typeof location.coordinates[1] !== 'number') {
        return res.status(400).json({ message: 'Format de localisation invalide. Attendu: { type: "Point", coordinates: [longitude, latitude] }' });
      }
  
      // Find transporter
      const transporter = await User.findById(transporterId);
      if (!transporter || transporter.role !== 'transporter') {
        return res.status(404).json({ message: 'Chauffeur non trouvé' });
      }
  
      // Update location and address
      transporter.location = location;
      if (address) {
        transporter.address = address;
      }
  
      // Save changes
      await transporter.save();
      console.log('Updated transporter:', transporter);
  
      res.status(200).json({
        message: 'Localisation du chauffeur mise à jour avec succès',
        transporter: {
          _id: transporter._id,
          name: transporter.name,
          role: transporter.role,
          location: transporter.location,
          address: transporter.address,
          isAvailable: transporter.isAvailable,
        },
      });
    } catch (error) {
      console.error('Erreur lors de la mise à jour de la localisation:', error);
      res.status(500).json({
        message: 'Erreur serveur lors de la mise à jour de la localisation',
        error: error.message,
      });
    }
  };
 // backend/controllers/userController.js
 const updateTransporterAvailability = async (req, res) => {
    try {
      const { transporterId } = req.params;
      const { isAvailable } = req.body;
  
      const user = await User.findById(transporterId);
      if (!user || user.role !== 'transporter') {
        return res.status(404).json({ message: 'Transporter not found' });
      }
  
      user.isAvailable = isAvailable;
      await user.save();
  
      res.status(200).json({ message: 'Availability updated', isAvailable });
    } catch (error) {
      res.status(500).json({ message: 'Failed to update availability', error: error.message });
    }
  };

  const updateUserAvailability = async (req, res) => {
    try {
      const { userId } = req.params; // Change 'id' to 'userId' to match the route
      const { isAvailable } = req.body;
  
      if (typeof isAvailable !== 'boolean') {
        return res.status(400).json({ message: 'isAvailable must be a boolean' });
      }
  
      // Use updateOne to directly update the isAvailable field without loading the document
      const updateResult = await User.updateOne(
        { _id: userId }, // Match the user by ID
        { $set: { isAvailable } } // Update only the isAvailable field
      );
  
      if (updateResult.matchedCount === 0) {
        return res.status(404).json({ message: 'User not found' });
      }
  
      res.status(200).json({ message: 'Availability updated successfully' });
    } catch (error) {
      res.status(500).json({ message: 'Error updating availability', error: error.message });
    }
  };

  // Fetch gamification data (rank and score) for a specific user
  const Donation = require("../models/Donation");

  async function getUserGamificationData(req, res) {
    try {
      const userId = req.params.id;
  
      // Validate user ID
      if (!mongoose.Types.ObjectId.isValid(userId)) {
        return res.status(400).json({ error: "Invalid user ID" });
      }
  
      // Check if the user exists in the User collection
      const user = await User.findById(userId);
      if (!user) {
        return res.status(404).json({ error: "User not found" });
      }
  
      // Define roles for donors, recipients, and transporters
      const donorRoles = ["restaurant", "supermarket", "personaldonor"];
      const recipientRoles = ["student", "ong"];
      const transporterRoles = ["transporter"];
  
      let rankedUsers = [];
      let userGamification = null;
  
      // Handle based on user role
      if (donorRoles.includes(user.role)) {
        // Aggregate by donor for users who make donations
        const donors = await Donation.aggregate([
          { $match: { status: "fulfilled" } },
          {
            $group: {
              _id: "$donor",
              donationCount: { $sum: 1 },
              totalItems: { $sum: { $add: [{ $sum: "$products.quantity" }, { $sum: "$meals.quantity" }] } },
            },
          },
          { $sort: { donationCount: -1, totalItems: -1 } },
          { $lookup: { from: "users", localField: "_id", foreignField: "_id", as: "donor" } },
          { $unwind: "$donor" },
          {
            $project: {
              _id: "$donor._id",
              name: "$donor.name",
              donationCount: 1,
              totalItems: 1,
            },
          },
        ]);
  
        console.log(`Donors for user ${userId} (${user.role}):`, donors);
  
        // Calculate a score for each donor
        rankedUsers = donors.map((donor, index) => ({
          rank: index + 1,
          userId: donor._id.toString(),
          name: donor.name,
          donationCount: donor.donationCount,
          totalItems: donor.totalItems,
          score: donor.donationCount * 10 + donor.totalItems,
        }));
  
        userGamification = rankedUsers.find(donor => donor.userId === userId);
      } else if (recipientRoles.includes(user.role)) {
        // Log the raw requests for debugging
        const rawRequests = await RequestNeed.find({ recipient: userId });
        console.log(`Raw requests for user ${userId}:`, rawRequests);
  
        // Aggregate by recipient for users who post requests
        const recipients = await RequestNeed.aggregate([
          // No status filter, count all requests posted by the recipient
          {
            $group: {
              _id: "$recipient",
              requestCount: { $sum: 1 },
            },
          },
          { $sort: { requestCount: -1 } },
          { $lookup: { from: "users", localField: "_id", foreignField: "_id", as: "recipient" } },
          { $unwind: "$recipient" },
          {
            $project: {
              _id: "$recipient._id",
              name: "$recipient.name",
              requestCount: 1,
            },
          },
        ]);
  
        console.log(`Aggregated recipients for user ${userId} (${user.role}):`, recipients);
  
        // Calculate a score for each recipient based on request count
        rankedUsers = recipients.map((recipient, index) => ({
          rank: index + 1,
          userId: recipient._id.toString(),
          name: recipient.name,
          requestCount: recipient.requestCount,
          score: recipient.requestCount * 10, // Score = 10 points per request
        }));
  
        userGamification = rankedUsers.find(recipient => recipient.userId === userId);
      } else if (transporterRoles.includes(user.role)) {
        // Aggregate by transporter for users who complete deliveries
        const transporters = await Delivery.aggregate([
          { $match: { status: "delivered" } }, // Only count completed deliveries
          {
            $group: {
              _id: "$transporter",
              deliveryCount: { $sum: 1 },
            },
          },
          { $sort: { deliveryCount: -1 } },
          { $lookup: { from: "users", localField: "_id", foreignField: "_id", as: "transporter" } },
          { $unwind: "$transporter" },
          {
            $project: {
              _id: "$transporter._id",
              name: "$transporter.name",
              deliveryCount: 1,
            },
          },
        ]);
  
        console.log(`Transporters for user ${userId} (${user.role}):`, transporters);
  
        // Calculate a score for each transporter based on delivery count
        rankedUsers = transporters.map((transporter, index) => ({
          rank: index + 1,
          userId: transporter._id.toString(),
          name: transporter.name,
          deliveryCount: transporter.deliveryCount,
          score: transporter.deliveryCount * 15, // Score = 15 points per delivery
        }));
  
        userGamification = rankedUsers.find(transporter => transporter.userId === userId);
      } else {
        return res.status(200).json({
          rank: 0,
          score: 0,
          message: "Gamification not applicable for this role",
        });
      }
  
      if (!userGamification) {
        return res.status(200).json({
          rank: 0,
          score: 0,
          message:
            user.role === "transporter"
              ? "User has not completed any deliveries yet"
              : user.role === "student" || user.role === "ong"
              ? "User has not posted any requests yet"
              : "User has not made any fulfilled donations yet",
        });
      }
  
      res.status(200).json({
        rank: userGamification.rank,
        score: userGamification.score,
      });
    } catch (error) {
      console.error(`Error in getUserGamificationData for user ${req.params.id}:`, error);
      res.status(500).json({ error: "Failed to fetch gamification data", details: error.message });
    }
  }
// New endpoint to handle advertisement image upload
// Configure Multer storage
const storage = multer.diskStorage({
  destination: './uploads/advertisements/', // Relative to the backend root
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}-${file.originalname}`);
  },
});

// ads
// File filter to accept only images
const fileFilter = (req, file, cb) => {
  if (file.mimetype.startsWith('image/')) {
    cb(null, true);
  } else {
    cb(new Error('Only image files are allowed!'), false);
  }
};

// Initialize Multer upload
const upload = multer({
  storage: storage,
  fileFilter: fileFilter,
  limits: { fileSize: 5 * 1024 * 1024 }, // Limit to 5MB
});




const getTopDonorAdvertisement = async (req, res) => {
  try {
    const topDonors = await Donation.aggregate([
      { $match: { status: "fulfilled" } },
      {
        $group: {
          _id: "$donor",
          donationCount: { $sum: 1 },
          totalItems: {
            $sum: {
              $ifNull: [{ $add: [{ $sum: "$products.quantity" }, { $sum: "$meals.quantity" }] }, 0],
            },
          },
        },
      },
      { $sort: { donationCount: -1, totalItems: -1 } },
      { $limit: 3 },
    ]).allowDiskUse(true);

    if (!topDonors || topDonors.length === 0) {
      return res.status(404).json({ error: "No fulfilled donations found to determine top donors" });
    }

    const donorIds = topDonors.map((donor) => donor._id);
    const donorRankMap = {};
    topDonors.forEach((donor, index) => {
      donorRankMap[donor._id.toString()] = index;
    });

    const advertisements = await Advertisement.aggregate([
      {
        $match: {
          user: { $in: donorIds.map((id) => mongoose.Types.ObjectId.createFromHexString(id.toString())) },
          status: "approved",
        },
      },
      { $lookup: { from: "users", localField: "user", foreignField: "_id", as: "user" } },
      { $unwind: "$user" },
      {
        $project: {
          userId: "$user._id",
          name: "$user.name",
          advertisementImage: "$imagePath",
        },
      },
    ]).allowDiskUse(true);

    if (!advertisements || advertisements.length === 0) {
      return res.status(404).json({ error: "No approved advertisements found for top donors" });
    }

    const advertisementsWithRank = advertisements
      .map((ad) => ({
        _id: ad._id,
        userId: ad.userId.toString(),
        name: ad.name,
        advertisementImage: ad.advertisementImage,
        rank: donorRankMap[ad.userId.toString()] !== undefined ? donorRankMap[ad.userId.toString()] : -1,
      }))
      .filter((ad) => ad.rank !== -1)
      .sort((a, b) => a.rank - b.rank);

    res.status(200).json(advertisementsWithRank);
  } catch (error) {
    console.error("Error fetching top donors advertisements:", error);
    res.status(500).json({ error: "Server error while fetching top donors advertisements" });
  }
};



// Get all advertisements for admin (back-office)
const getAllAdvertisements = async (req, res) => {
  try {
    const advertisements = await Advertisement.find()
      .populate('user', 'name email role')
      .sort({ createdAt: -1 })
      .lean(); // Convert to plain JavaScript object
    console.log("Fetched advertisements:", advertisements); // Debug log
    const formattedAds = advertisements.map(ad => ({
      ...ad,
      _id: ad._id.toString()
    }));
    res.status(200).json(formattedAds);
  } catch (error) {
    console.error('Error fetching advertisements:', error);
    res.status(500).json({ error: 'Server error while fetching advertisements' });
  }
};

// Approve or reject an advertisement
const uploadAdvertisement = async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    if (!req.file) {
      return res.status(400).json({ error: 'No image file provided. Please upload a valid image file.' });
    }

    const topDonors = await Donation.aggregate([
      { $match: { status: "fulfilled" } },
      {
        $group: {
          _id: "$donor",
          donationCount: { $sum: 1 },
          totalItems: { $sum: { $add: [{ $sum: "$products.quantity" }, { $sum: "$meals.quantity" }] } },
        },
      },
      { $sort: { donationCount: -1, totalItems: -1 } },
      { $limit: 3 },
    ]);

    const isTopDonor = topDonors.some(donor => donor._id.toString() === req.params.id);
    if (!isTopDonor) {
      return res.status(403).json({ error: 'Only top 3 donors can upload advertisements' });
    }

    const existingAd = await Advertisement.findOne({
      user: req.params.id,
      status: { $in: ['pending', 'approved'] },
    });
    if (existingAd) {
      return res.status(400).json({ error: 'You already have a pending or approved advertisement' });
    }

    const advertisement = new Advertisement({
      user: req.params.id,
      imagePath: req.file.path,
      status: 'pending',
    });
    await advertisement.save();

    res.status(200).json({
      message: 'Advertisement uploaded successfully and is pending approval',
      advertisementId: advertisement._id,
    });
  } catch (error) {
    console.error('Error uploading advertisement:', error);
    res.status(500).json({ error: 'Server error while uploading advertisement', details: error.message });
  }
};

// Update advertisement status
const updateAdvertisementStatus = async (req, res) => {
  try {
    const adId = req.params.id;
    
    if (!adId) {
      return res.status(400).json({ 
        error: "Advertisement ID is required",
        receivedId: adId
      });
    }

    if (!mongoose.Types.ObjectId.isValid(adId)) {
      return res.status(400).json({ 
        error: "Invalid advertisement ID format",
        receivedId: adId
      });
    }

    const { status } = req.body;
    
    if (!status) {
      return res.status(400).json({ 
        error: "Status is required",
        receivedBody: req.body
      });
    }

    if (!["approved", "rejected"].includes(status)) {
      return res.status(400).json({ 
        error: "Invalid status value",
        receivedStatus: status,
        allowedValues: ["approved", "rejected"]
      });
    }

    const advertisement = await Advertisement.findById(adId);
    if (!advertisement) {
      return res.status(404).json({ 
        error: "Advertisement not found",
        searchedId: adId
      });
    }

    advertisement.status = status;
    await advertisement.save();

    res.status(200).json({
      message: `Advertisement status updated to ${status}`,
      advertisementId: adId,
      status: advertisement.status,
    });
  } catch (error) {
    console.error("Error updating advertisement status:", error);
    res.status(500).json({ 
      error: "Server error while updating status",
      details: error.message 
    });
  }
};

async function getUserAdvertisements(req, res) {
  try {
    const userId = req.params.id;
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).json({ error: "Invalid user ID" });
    }

    const advertisements = await Advertisement.find({ user: userId })
      .select('imagePath status createdAt updatedAt')
      .sort({ createdAt: -1 });

    if (!advertisements || advertisements.length === 0) {
      return res.status(404).json({ error: "No advertisements found for this user" });
    }

    res.status(200).json(advertisements);
  } catch (error) {
    console.error("Error fetching user advertisements:", error);
    res.status(500).json({ error: "Server error while fetching advertisements" });
  }
}








////////////////////








const getTopTransporter = async (req, res) => {
  try {
      const topTransporters = await Delivery.aggregate([
          { $match: { status: "delivered" } }, // Only count completed deliveries
          {
              $group: {
                  _id: "$transporter",
                  deliveryCount: { $sum: 1 },
              },
          },
          { $sort: { deliveryCount: -1 } }, // Sort by delivery count in descending order
          { $limit: 1 }, // Limit to top 1 transporter
          {
              $lookup: {
                  from: "users",
                  localField: "_id",
                  foreignField: "_id",
                  as: "transporter",
              },
          },
          { $unwind: "$transporter" },
          {
              $project: {
                  _id: "$transporter._id",
                  name: "$transporter.name",
                  email: "$transporter.email",
                  phone: "$transporter.phone",
                  photo: "$transporter.photo", // Add photo field for profile picture
                  deliveryCount: 1,
                  score: { $multiply: ["$deliveryCount", 15] }, // Score = 15 points per delivery
              },
          },
      ]);

      if (!topTransporters || topTransporters.length === 0) {
          return res.status(404).json({ error: "No top transporters found" });
      }

      res.status(200).json(topTransporters[0]); // Return the first (top) transporter as a single object
  } catch (error) {
      console.error("Error fetching top transporters:", error);
      res.status(500).json({ error: "Server error while fetching top transporters", details: error.message });
  }
};
module.exports = {updateUserAvailability,getUsers,
    updateTransporterAvailability,
    generate2FACode,
    getUserById,
    deleteUser,
    addUser,
    updateUser,
    onUpdateDescription,
    getTransporters,
    user_signin,
    getUserByEmailAndPassword,
    sendResetCode,
    validateResetCode,
    resetPassword,
    toggleBlockUser,
    viewStudent,
    viewRestaurant,
    viewSupermarket,
    viewNGO,
    viewTransporter,
    updateUserWithEmail,
    createUser,
    deactivateAccount,
    changePassword,
    send2FACode,
    validate2FACode,
    toggle2FA,
    send2FACodeforsigninwithgoogle,
    updateTransporterLocation,
    getUserGamificationData,
    getTopDonorAdvertisement,
    upload,
    uploadAdvertisement,
    updateAdvertisementStatus,
    getAllAdvertisements,
    getTopTransporter,
    getUserAdvertisements

};
</file>

<file path="sustainafood-frontend/src/App.jsx">
import React from "react";
import { Routes, Route, Outlet, Navigate } from "react-router-dom";
import { AlertProvider } from "./contexts/AlertContext";
import Home from './pages/Home';
import EditProfile from './pages/Editprofile';
import Profile from './pages/Profile';
import Signup from './pages/Signup';
import Continueinfo from './pages/Continueinfo';
import Contact from './pages/Contact';
import Login from './pages/log';
import Dashboard from "./pages/backoffice/Dashboard";
import NGOList from "./pages/backoffice/ONGList.jsx";
import SupermarketList from "./pages/backoffice/SupermarketList";
import StudentList from "./pages/backoffice/StudentList";
import TransporterList from "./pages/backoffice/TransporterList";
import About from "./pages/About";
import RestaurantList from './pages/backoffice/RestaurantList';
import AdminProfile from './pages/backoffice/AdminProfile';
import ForgetPass from "./pages/ForgetPass";
import ResetCode from "./pages/ResetCode";
import ResetPassword from "./pages/ResetPassword";
import ViewStudent from './pages/backoffice/view-student';
import ViewRestaurant from './pages/backoffice/view-restaurant';
import ViewSupermarket from './pages/backoffice/view-supermarket';
import ViewNGO from './pages/backoffice/view-ngo.jsx';
import ViewTransporter from './pages/backoffice/view-transporter';
import ListDonationsRequest from './pages/ListDonationsRequest';
import PrivateRoute from "./PrivateRoute";
import NotFound from "./pages/Not-Found";
import AccountSettings from "./pages/AccountSettings.js";
import ListOfDonations from "./pages/ListOfDonations";
import AddDonation from "./pages/AddDonation";
import MyRequest from "./pages/MyRequest.jsx";
import MyDonations from "./pages/MyDonationsList.jsx";
import TwoFAVerification from "./pages/TwoFAVerification";
import DetailsDonations from "./pages/DetailsDonations";
import DonationList from "./pages/backoffice/DonationList.jsx";
import DonationTransactionList from "./pages/backoffice/DonationTransactionList.jsx";
import RequestTable from "./pages/backoffice/RequestTable.jsx";
import ProductList from "./pages/backoffice/ProductList.jsx";
import DetailsRequest from "./pages/DetailsRequest";
import ListOfRequests from "./pages/ListOfRequests";
import AlertDisplay from "./components/AlertDisplay";
// Composants supplémentaires (à créer si absents)
import RequestDetails from "./pages/backoffice/RequestDetails";
import ProductDetail from "./pages/backoffice/ProductDetail";
import DonationDetails from "./pages/backoffice/DonationDetails";
import AnomaliesDashbord from "./pages/backoffice/AnomaliesDashbord";
import DonationsRequestList from"./pages/backoffice/DonationsRequestList";
import RequestDonationsList from"./pages/backoffice/RequestDonationsList";
import PredictionsDashboard from './pages/backoffice/PredictionsDashboard';
import ListRequestsDonation from './pages/ListRequestsDonation';
import AiClassification from './pages/AiClassification';
import DonationRecommendations from './pages/DonationRecommendations';
import ViewDonationTransaction from "./pages/backoffice/ViewDonationTransaction.jsx";
import Ad from "./pages/backoffice/Ad.jsx"; 

import AnalyticsDashboard from './pages/AnalyticsDashboard';
import PersonalStatus from './pages/PersonalStatus';
import MyDonationsRequest from "./pages/MyDonationsRequest.jsx";
import MyRequestDonation from "./pages/MyRequestDonation.jsx";
import AssignedDeliveries from "./pages/AssignedDeliveries.jsx";
import PreductionForDonor from "./pages/PreductionForDonor.jsx";
import PersonnelList from "./pages/backoffice/PersonnelList.jsx";
import Delivery from "./pages/backoffice/delivery.jsx";
import DeliveryView from "./pages/backoffice/DeliveryView.jsx";
import ViewProfile from "./pages/ViewProfile.jsx";
import Deliveries from "./pages/Deliveries.jsx";
import ContactSubmissionList from "./pages/backoffice/ContactSubmissionList.jsx";
import SubmissionDetails from "./pages/backoffice/SubmissionDetails.jsx";
import GamePage from './pages/GamePage'; // <-- Ajoutez cet import

const App = () => {
  return (
    <AlertProvider>
      <AlertDisplay />
      <Routes>
        {/* Routes publiques */}
        <Route path="/" element={<Home />} />
        <Route path="/login" element={<Login />} />
        <Route path="/signup" element={<Signup />} />
        <Route path="/Contact" element={<Contact />} />
        <Route path="/Continueinfo" element={<Continueinfo />} />
        <Route path="/About" element={<About />} />
        <Route path="/forget-password" element={<ForgetPass />} />
        <Route path="/reset-code" element={<ResetCode />} />
        <Route path="/reset-password" element={<ResetPassword />} />
        <Route path="/two-fa-verification" element={<TwoFAVerification />} />
        <Route path="/ListDonationsRequest/:id" element={<ListDonationsRequest />} />
        <Route path="/deliveries/:transporterId" element={<AssignedDeliveries />} />
        <Route path="/game" element={<GamePage />} /> {/* Ajoutez cette ligne pour la page de jeu */}
        {/* Routes privées pour les admins */}
        <Route element={<PrivateRoute roles={["admin"]} />}>
        <Route path="/contact/submissions" element={<ContactSubmissionList />} />
        <Route path="/contact/submissions/view/:id" element={<SubmissionDetails />} />
          <Route path="/dashboard" element={<Dashboard />} />
          <Route path="/recipients/ngos" element={<NGOList />} />
          <Route path="/donors/supermarkets" element={<SupermarketList />} />
          <Route path="/donors/restaurants" element={<RestaurantList />} />
          <Route path="/recipients/students" element={<StudentList />} />
          <Route path="/transporters" element={<TransporterList />} />
          <Route path="/advertisements" element={<Ad />} />
          <Route path="/students/view/:id" element={<ViewStudent />} />
          <Route path="/restaurants/view/:id" element={<ViewRestaurant />} />
          <Route path="/supermarkets/view/:id" element={<ViewSupermarket />} />
          <Route path="/ongs/view/:id" element={<ViewNGO />} />
          <Route path="/transporters/view/:id" element={<ViewTransporter />} />
          <Route path="/admin-profile" element={<AdminProfile />} />
          <Route path="/Donations" element={<DonationList />} />
          <Route path="/DonationTransList" element={<DonationTransactionList />} />
          <Route path="/donation-transactions/view/:transactionId" element={<ViewDonationTransaction/>} />
          <Route path="/food-donation/requests" element={<RequestTable />} />
          <Route path="/food-donation/product" element={<ProductList />} />
          <Route path="/requests/view/:id" element={<RequestDetails />} />
          <Route path="/products/view/:id" element={<ProductDetail />} />
          <Route path="/donations/view/:id" element={<DonationDetails />} />
          <Route path="/DonationsRequestList/:id" element={<DonationsRequestList />} />
          <Route path="/RequestDonationsList/:id" element={<RequestDonationsList />} />
          <Route path="/PredictionsDashboard" element={<PredictionsDashboard />} />
          <Route path="/AnomaliesDashbord" element={<AnomaliesDashbord />} />
          <Route path="/PersonnelList" element={<PersonnelList />} />
          <Route path="/Delivery" element={<Delivery />} />
          <Route path="/deliveries/view/:id" element={<DeliveryView />} />


        </Route>

        {/* Routes privées pour ong, restaurant, supermarket, student, transporter */}
        <Route element={<PrivateRoute roles={["ong", "restaurant", "supermarket", "student", "transporter", "personaldonor"]} />}>
          <Route path="/profile" element={<Profile />} />
          <Route path="/edit-profile" element={<EditProfile />} />
          <Route path="/account-settings" element={<AccountSettings />} />
          <Route path="/DonationRecommendations" element={<DonationRecommendations />} />
          <Route path="/analytics" element={<AnalyticsDashboard />} />
          <Route path="/PersonalStatus" element={<PersonalStatus />} />
          <Route path="/ViewProfile/:id" element={<ViewProfile />} />
        </Route>

        {/* Routes privées pour ong, restaurant, supermarket, student */}
        <Route element={<PrivateRoute roles={["ong", "restaurant", "supermarket", "student","personaldonor"]} />}>
          <Route path="/ListOfDonations" element={<ListOfDonations />} />
          <Route path="/ListOfRequests" element={<ListOfRequests />} />
          <Route path="/AddDonation" element={<AddDonation />} />
          <Route path="/DetailsDonations/:id" element={<DetailsDonations />} />
          <Route path="/DetailsRequest/:id" element={<DetailsRequest />} />
          <Route path="/Preduction" element={<PreductionForDonor />} />
          <Route path="/Deliveries" element={<Deliveries />} />
        </Route>

        {/* Routes privées pour ong, student */}
        <Route element={<PrivateRoute roles={["ong", "student"]} />}>
          <Route path="/myrequest" element={<MyRequest />} />
          <Route path="/ListDonationsRequest/:id" element={<ListDonationsRequest />} />
          <Route path="/recipient/:recipientId/transactions" element={<MyRequestDonation />} />

        </Route>

        {/* Routes privées pour supermarket, restaurant */}
        <Route element={<PrivateRoute roles={["supermarket", "restaurant","personaldonor"]} />}>
          <Route path="/mydonations" element={<MyDonations />} />
          <Route path="/ListRequestsDonation/:donationId" element={<ListRequestsDonation />} />
          <Route path="/AiClassification" element={<AiClassification />} />
          <Route path="/donor/:donorId/requests" element={<MyDonationsRequest />} />
          </Route>

        {/* Route pour les pages non trouvées */}
        <Route path="*" element={<NotFound />} />
      </Routes>
    </AlertProvider>
  );
};

export default App;
</file>

<file path="sustainafood-frontend/src/assets/styles/Profile.css">
body {
  background: rgba(220, 238, 221, 0.781);
  margin-top: 100px;
  font-family: 'Helvetica Neue', Arial, sans-serif;
  background-color: #F0F4F3;
  color: #333;
}

.pff-all {
  background: #ffffffaa;
  border-radius: 12px;
  padding: 5px;
  margin-left: 30px;
  margin-top: 30px;
  position: relative;
  box-shadow: #604b4a53 0px 20px 20px 10px;
}

.pff-card-white {
  margin-left: 30px;
  margin-top: 13px;
  margin-bottom: 13px;
  width: 325px;
  height: 380px;
  border-radius: 12px;
  padding: 3px;
  position: relative;
  transition: all 0.5s ease-in-out;
  display: flex;
  flex-direction: column;
}

.pff-card-white .pff-mail {
  position: absolute;
  right: 2rem;
  top: 1.4rem;
  background: transparent;
  border: none;
}

.pff-card-white .pff-mail svg {
  stroke: #8dc73f;
  stroke-width: 3px;
}

.pff-card-white .pff-mail svg:hover {
  stroke: #8dc73f;
}

.pff-card-white .pff-profile-pic {
  position: absolute;
  width: calc(100% - 6px);
  height: calc(100% - 6px);
  border-radius: 11px;
  z-index: 1;
  border: 0px solid #8dc73f;
  overflow: hidden;
  transition: all 0.5s ease-in-out 0.2s, z-index 0.5s ease-in-out 0.2s;
}

.pff-card-white .pff-profile-pic img {
  -o-object-fit: cover;
  object-fit: cover;
  width: 100%;
  height: 100%;
  -o-object-position: 0px 0px;
  transition: all 0.5s ease-in-out 0s;
}

.pff-card-white .pff-profile-pic svg {
  width: 100%;
  height: 100%;
  -o-object-fit: cover;
  object-fit: cover;
  -o-object-position: 0px 0px;
  object-position: 0px 0px;
  transform-origin: 45% 20%;
  transition: all 0.5s ease-in-out 0s;
}

.pff-card-white .pff-bottom {
  position: absolute;
  bottom: 3px;
  left: 3px;
  right: 3px;
  background: #8dc73f;
  top: 80%;
  border-radius: 12px;
  z-index: 2;
  box-shadow: rgba(96, 75, 74, 0.1882352941) 0px 5px 5px 0px inset;
  overflow: hidden;
  transition: all 0.5s cubic-bezier(0.645, 0.045, 0.355, 1) 0s;
}

.pff-card-white .pff-bottom .pff-content {
  position: absolute;
  bottom: 0;
  left: 1.5rem;
  right: 1.5rem;
  height: 160px;
}

.pff-card-white .pff-bottom .pff-content .pff-name {
  display: block;
  font-size: 1.2rem;
  color: white;
  margin-top: -45px;
  font-weight: bold;
}

.pff-card-white .pff-bottom .pff-content .pff-about-me {
  display: block;
  font-size: 0.9rem;
  color: white;
  margin-top: 5px;
}

.pff-card-white .pff-bottom .pff-bottom-bottom {
  position: absolute;
  bottom: 1rem;
  left: 1.5rem;
  right: 1.5rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.pff-card-white .pff-bottom .pff-bottom-bottom .pff-social-links-container {
  display: flex;
  gap: 1rem;
}

.pff-card-white .pff-bottom .pff-bottom-bottom .pff-social-links-container svg {
  height: 20px;
  fill: white;
  filter: drop-shadow(0 5px 5px rgba(165, 132, 130, 0.1333333333));
}

.pff-card-white .pff-bottom .pff-bottom-bottom .pff-social-links-container svg:hover {
  fill: #f55d56;
  transform: scale(1.2);
}

.pff-bottom-editdesc {
  margin-left: 90px;
  margin-top: -26px;
  background-color: #8dc73f;
  color: white;
}

.pff-card-white .pff-bottom .pff-bottom-bottom .pff-button {
  background: white;
  color: #8dc73f;
  border: none;
  border-radius: 12px;
  font-size: 0.6rem;
  padding: 0.4rem 0.6rem;
  box-shadow: rgba(165, 132, 130, 0.1333333333) 0px 5px 5px 0px;
}

.pff-card-white .pff-bottom .pff-bottom-bottom .pff-button:hover {
  background: #f55d56;
  color: white;
}

.pff-card-white:hover {
  border-top-left-radius: 55px;
}

.pff-card-white:hover .pff-bottom {
  top: 20%;
  border-radius: 80px 29px 29px 29px;
  transition: all 0.5s cubic-bezier(0.645, 0.045, 0.355, 1) 0.2s;
}

.pff-card-white:hover .pff-profile-pic {
  width: 100px;
  height: 100px;
  aspect-ratio: 1;
  top: 10px;
  left: 10px;
  border-radius: 50%;
  z-index: 3;
  border: 7px solid #8dc73f;
  box-shadow: rgba(96, 75, 74, 0.1882352941) 0px 5px 5px 0px;
  transition: all 0.5s ease-in-out, z-index 0.5s ease-in-out 0.1s;
}

.pff-card-white:hover .pff-profile-pic:hover {
  transform: scale(1.3);
  border-radius: 0px;
}

.pff-card-white:hover .pff-profile-pic img {
  transform: scale(1);
  -o-object-position: 0px 25px;
  object-position: 0px;
  transition: all 0.5s ease-in-out 0.5s;
}

.pff-card-white:hover .pff-profile-pic svg {
  transform: scale(2.5);
  transition: all 0.5s ease-in-out 0.5s;
}

/* From Uiverse.io by Admin12121 */
.pff-menu {
  padding: 0.5rem;
  background-color: #fff;
  position: relative;
  display: flex;
  justify-content: center;
  border-radius: 15px;
  box-shadow: 0 10px 25px 0 rgba(0, 0, 0, 0.075);
}

.pff-link {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  width: 70px;
  height: 50px;
  border-radius: 8px;
  position: relative;
  z-index: 1;
  overflow: hidden;
  transform-origin: center left;
  transition: height 0.2s ease-in;
  text-decoration: none;
  color: inherit;
}

.pff-link:before {
  position: absolute;
  z-index: -1;
  content: "";
  display: block;
  border-radius: 8px;
  width: 100%;
  height: 100%;
  top: 0;
  transform: translateY(100%);
  transition: transform 0.2s ease-in;
  transform-origin: center right;
  background-color: #eee;
}

.pff-link:hover,
.pff-link:focus {
  outline: 0;
  width: 130px;
}

.pff-link:hover:before,
.pff-link:focus:before,
.pff-link:hover .pff-link-title,
.pff-link:focus .pff-link-title {
  transform: translateY(0);
  opacity: 1;
}

.pff-link-icon {
  width: 28px;
  height: 28px;
  display: block;
  flex-shrink: 0;
  left: 18px;
  position: absolute;
}

.pff-link-icon svg {
  width: 28px;
  height: 28px;
}

.pff-link-title {
  transform: translateX(100%);
  transition: transform 0.2s ease-in;
  transform-origin: center right;
  display: block;
  text-align: center;
  text-indent: 28px;
  width: 100%;
}

/* Réinitialisation de base */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* Conteneur principal */
.pff-container-profile {
  width: 100%;
  max-width: 1400px;
  margin: 0 auto;
  padding: 20px;
  margin-top: 20px;
}

/* En-tête */
.pff-profile-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.pff-profile-header h1 {
  font-size: 24px;
}

.pff-date-switcher button {
  background-color: #fff;
  border: 1px solid #ddd;
  padding: 8px 16px;
  border-radius: 8px;
  cursor: pointer;
}

/* Mise en page principale en grille : 3 colonnes */
.pff-main {
  display: grid;
  grid-template-columns: 1fr 1.5fr 1fr;
  gap: 10px;
  margin-top: 20px;
}

/* Fix column widths and positioning */
.pff-left-column,
.pff-right-column {
  width: 100%;
  min-width: 250px;
}

.pff-center-column {
  width: 100%;
  min-width: 400px;
}

/* Colonne de gauche */
.pff-left-column {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

/* Carte Profil */
.pff-profile-cardfront {
  background-color: #fff;
  border-radius: 12px;
  padding: 15px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.pff-profile-pic {
  width: 180px;
  height: 180px;
  border-radius: 50%;
  object-fit: cover;
}

.pff-profile-info h2 {
  margin-bottom: 5px;
  font-size: 18px;
}

.pff-profile-info .pff-profile-p {
  margin-bottom: 10px;
  font-size: 14px;
  color: #777;
}

.pff-profile-actions {
  display: flex;
  align-items: center;
  gap: 10px;
}

.pff-profile-actions p {
  margin: 0;
  font-size: 14px;
}

.pff-profile-actions button {
  background-color: #50C9A7;
  color: #fff;
  border: none;
  border-radius: 8px;
  padding: 8px 12px;
  cursor: pointer;
}

/* Informations détaillées */
.pff-detailed-info {
  background-color: #fff;
  border-radius: 12px;
  padding: 12px;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
  transition: all 0.3s ease;
  width: 325px;
  margin-left: 30px;
  box-sizing: border-box;
}

.pff-detailed-info:hover {
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  transform: translateY(-2px);
}

.pff-detailed-info h3 {
  margin-bottom: 15px;
  font-size: 18px;
  color: #000;
  font-weight: 600;
  padding-bottom: 8px;
  border-bottom: 1px solid rgba(141, 199, 63, 0.3);
  position: relative;
}

.pff-detailed-info h3::after {
  content: '';
  position: absolute;
  bottom: -1px;
  left: 0;
  width: 60px;
  height: 3px;
  background: #8dc73f;
  border-radius: 2px;
}

.pff-detailed-info ul {
  list-style-type: none;
  padding: 0;
  margin: 0;
}

.pff-detailed-info li {
  margin-bottom: 12px;
  font-size: 14px;
  padding: 8px 10px;
  border-radius: 6px;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  background-color: rgba(245, 249, 245, 0.6);
}

.pff-detailed-info li:hover {
  background-color: rgba(141, 199, 63, 0.1);
}

.pff-detailed-info li:last-child {
  margin-bottom: 0;
}

.pff-detailed-info li strong {
  min-width: 20px;
  display: inline-block;
  color: #444;
  position: relative;
  padding-left: 22px;
  margin-right: 10px;
}

/* Add icons to each field */
.pff-detailed-info li:nth-child(1) strong::before {
  content: '👤';
  position: absolute;
  left: 0;
  top: 50%;
  transform: translateY(-50%);
}

.pff-detailed-info li:nth-child(2) strong::before {
  content: '✉️';
  position: absolute;
  left: 0;
  top: 50%;
  transform: translateY(-50%);
}

.pff-detailed-info li:nth-child(3) strong::before {
  content: '📞';
  position: absolute;
  left: 0;
  top: 50%;
  transform: translateY(-50%);
}

.pff-detailed-info li:nth-child(4) strong::before {
  content: '📍';
  position: absolute;
  left: 0;
  top: 50%;
  transform: translateY(-50%);
}

/* Colonne centrale */
.pff-center-column h3 {
  margin-bottom: 20px;
  font-size: 30px;
}

.pff-center-column h5 {
  margin-bottom: 20px;
  font-size: 20px;
}

.pff-projects {
  display: flex;
  flex-direction: column;
  gap: 15px;
  width: 100%;
}

/* Cartes projets */
.pff-project-card {
  background-color: #F9FAFB;
  border-radius: 10px;
  padding: 15px;
  width: 100%;
  margin: 0 0 15px 0;
}

.pff-project-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 5px;
}

.pff-project-header h4 {
  margin: 0;
  font-size: 16px;
}

.pff-project-header span {
  font-size: 12px;
  color: #999;
}

.pff-project-card p {
  font-size: 14px;
  margin-bottom: 10px;
}

.pff-project-avatars {
  display: flex;
  gap: 5px;
}

.pff-project-avatars img {
  width: 24px;
  height: 24px;
  border-radius: 50%;
}

/* Colonne de droite */
.pff-right-column {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

/* Section Calendrier */
.pff-calendar-section {
  background-color: #fff;
  border-radius: 12px;
  padding: 20px;
}

.pff-calendar-section h3 {
  margin-bottom: 10px;
}

.pff-calendar {
  display: flex;
  flex-direction: column;
  gap: 5px;
}

.pff-weekdays,
.pff-days {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  text-align: center;
}

.pff-weekdays div {
  font-weight: bold;
  color: #666;
}

.pff-days div {
  padding: 8px 0;
  border-radius: 6px;
  cursor: pointer;
  transition: background-color 0.2s;
}

/* Section Inbox */
.pff-inbox-section {
  --primary: #8dc73f;
  --primary-dark: #7ab62f;
  --primary-light: rgba(141, 199, 63, 0.1);
  --primary-medium: rgba(141, 199, 63, 0.2);
  --accent: #50c9a7;
  --text: #333;
  --text-light: #666;
  --bg: #fff;
  --shadow-sm: 0 4px 12px rgba(0, 0, 0, 0.05);
  --shadow-md: 0 8px 24px rgba(0, 0, 0, 0.08);
  --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);

  position: relative;
  background: rgba(255, 255, 255, 0.85);
  backdrop-filter: blur(10px);
  border-radius: 16px;
  padding: 25px;
  margin-bottom: 25px;
  box-shadow: var(--shadow-md), 0 1px 2px rgba(141, 199, 63, 0.1);
  overflow: hidden;
  border: 1px solid rgba(141, 199, 63, 0.12);
  transition: var(--transition);
}

.pff-inbox-section:hover {
  box-shadow: 0 12px 28px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(141, 199, 63, 0.15);
  transform: translateY(-3px);
}

.pff-inbox-section::before,
.pff-inbox-section::after {
  content: "";
  position: absolute;
  border-radius: 50%;
  z-index: 0;
  opacity: 0.5;
  transition: var(--transition);
}

.pff-inbox-section::before {
  width: 200px;
  height: 200px;
  background: radial-gradient(circle, var(--primary-light) 0%, rgba(255, 255, 255, 0) 70%);
  top: -100px;
  right: -50px;
}

.pff-inbox-section::after {
  width: 150px;
  height: 150px;
  background: radial-gradient(circle, rgba(80, 201, 167, 0.1) 0%, rgba(255, 255, 255, 0) 70%);
  bottom: -50px;
  left: -50px;
}

.pff-inbox-section:hover::before {
  transform: scale(1.2) translate(-20px, 20px);
  opacity: 0.7;
}

.pff-inbox-section:hover::after {
  transform: scale(1.2) translate(20px, -20px);
  opacity: 0.7;
}

.pff-inbox-section > * {
  position: relative;
  z-index: 1;
}

.pff-inbox-section h3 {
  position: relative;
  color: var(--text);
  font-size: 22px;
  font-weight: 700;
  margin-bottom: 20px;
  padding-bottom: 10px;
  z-index: 1;
}

.pff-inbox-section h3::before {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  width: 40px;
  height: 3px;
  background: var(--primary);
  border-radius: 3px;
  transition: var(--transition);
}

.pff-inbox-section h3::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  width: 80px;
  height: 3px;
  background: var(--accent);
  border-radius: 3px;
  opacity: 0.5;
  transform: scaleX(0);
  transform-origin: left;
  transition: var(--transition);
}

.pff-inbox-section:hover h3::before {
  width: 60px;
}

.pff-inbox-section:hover h3::after {
  transform: scaleX(1);
}

.pff-feedback-form {
  position: relative;
  background: linear-gradient(135deg, #ffffff, #f9fafb);
  border-radius: 12px;
  padding: 22px;
  margin-bottom: 20px;
  box-shadow: var(--shadow-sm);
  border: 1px solid rgba(141, 199, 63, 0.15);
  z-index: 1;
  transition: var(--transition);
  animation: floatIn 0.5s ease-out forwards;
}

@keyframes floatIn {
  from {
    opacity: 0;
    transform: translateY(15px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.pff-feedback-form:hover {
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.07);
  transform: translateY(-2px);
}

.pff-feedback-form h4 {
  position: relative;
  color: var(--text);
  font-size: 18px;
  font-weight: 600;
  margin-bottom: 18px;
  padding-left: 28px;
  display: flex;
  align-items: center;
}

.pff-feedback-form h4::before {
  content: "✏️";
  position: absolute;
  left: 0;
  font-size: 18px;
}

.pff-form-group {
  margin-bottom: 18px;
}

.pff-form-group label {
  display: block;
  color: var(--text-light);
  font-weight: 500;
  margin-bottom: 8px;
  font-size: 15px;
  transition: var(--transition);
}

.pff-form-group:focus-within label {
  color: var(--primary-dark);
}

.star-rating-container {
  display: flex;
  gap: 8px;
  margin-top: 5px;
}

.star-rating-container svg {
  width: 30px;
  height: 30px;
  cursor: pointer;
  transition: var(--transition);
  filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.1));
}

.star-rating-container svg:hover {
  transform: scale(1.15) rotate(5deg);
}

.star-rating-container svg.filled {
  color: #ffd700;
  filter: drop-shadow(0 2px 4px rgba(255, 215, 0, 0.4));
}

.star-rating-container svg.empty {
  color: #d1d1d1;
}

.pff-form-group textarea {
  width: 100%;
  padding: 14px;
  border: 2px solid #e0e0e0;
  border-radius: 10px;
  font-size: 15px;
  line-height: 1.5;
  transition: var(--transition);
  resize: none;
  background-color: rgba(255, 255, 255, 0.8);
  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.03);
}

.pff-form-group textarea:focus {
  outline: none;
  border-color: var(--primary);
  box-shadow: 0 0 0 3px var(--primary-light);
  background-color: #fff;
}

.pff-form-group textarea::placeholder {
  color: #aaa;
  transition: var(--transition);
}

.pff-form-group textarea:focus::placeholder {
  opacity: 0.7;
  transform: translateX(5px);
}

.pff-form-group textarea::-webkit-scrollbar {
  width: 6px;
}

.pff-form-group textarea::-webkit-scrollbar-track {
  background: #f0f0f0;
  border-radius: 10px;
}

.pff-form-group textarea::-webkit-scrollbar-thumb {
  background: var(--primary);
  border-radius: 10px;
}

.pff-form-group textarea::-webkit-scrollbar-thumb:hover {
  background: var(--primary-dark);
}

.pff-error-message {
  color: #e53935;
  font-size: 14px;
  margin: 10px 0 15px;
  padding: 10px 15px;
  background-color: rgba(229, 57, 53, 0.08);
  border-radius: 8px;
  border-left: 3px solid #e53935;
  animation: errorShake 0.4s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
}

@keyframes errorShake {
  0%,
  100% {
    transform: translateX(0);
  }
  20%,
  60% {
    transform: translateX(-5px);
  }
  40%,
  80% {
    transform: translateX(5px);
  }
}

.pff-submit-feedback-btn {
  position: relative;
  background: linear-gradient(135deg, var(--primary), var(--primary-dark));
  color: white;
  border: none;
  padding: 12px 24px;
  font-size: 15px;
  font-weight: 600;
  border-radius: 30px;
  cursor: pointer;
  transition: var(--transition);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  box-shadow: 0 4px 10px rgba(141, 199, 63, 0.25);
  overflow: hidden;
}

.pff-submit-feedback-btn::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: 0.5s;
}

.pff-submit-feedback-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 15px rgba(141, 199, 63, 0.35);
  background: linear-gradient(135deg, var(--primary-dark), var(--primary));
}

.pff-submit-feedback-btn:hover::before {
  left: 100%;
}

.pff-submit-feedback-btn:active {
  transform: translateY(1px);
  box-shadow: 0 2px 8px rgba(141, 199, 63, 0.2);
}

.pff-submit-feedback-btn::after {
  content: "→";
  font-size: 18px;
  transition: var(--transition);
  margin-left: 5px;
}

.pff-submit-feedback-btn:hover::after {
  transform: translateX(3px);
}

.pff-feedback-scroll {
  max-height: 500px; /* Increased from 450px to allow more content */
  overflow-y: auto;
  padding: 10px;
  scrollbar-width: thin;
  scrollbar-color: #8dc73f #f0f0f0;
}

.pff-feedback-scroll::-webkit-scrollbar {
  width: 6px;
}

.pff-feedback-scroll::-webkit-scrollbar-track {
  background: #f0f0f0;
  border-radius: 10px;
}

.pff-feedback-scroll::-webkit-scrollbar-thumb {
  background: #8dc73f;
  border-radius: 10px;
}

.pff-feedback-scroll::-webkit-scrollbar-thumb:hover {
  background: #7ab62f;
}

.pff-feedback-card {
  background: white;
  border-radius: 8px;
  padding: 12px;
  margin-bottom: 15px; /* Increased margin to ensure spacing and visibility */
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.pff-feedback-card:last-child {
  margin-bottom: 15px; /* Ensure the last card has proper spacing */
}

.pff-feedback-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.pff-message {
  display: flex;
  flex-direction: column;
  width: 100%;
  margin-left: 0;
}

.pff-message-header {
  display: flex;
  align-items: flex-start;
  gap: 10px;
  margin-bottom: 5px;
}

.pff-message-header img {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #f0f0f0;
}

.pff-message-header strong {
  display: block;
  font-size: 14px;
  color: #333;
  margin-bottom: 2px;
}

.pff-message-header p {
  font-size: 13px;
  color: #666;
  margin: 5px 0 0 0;
  line-height: 1.4;
}

.pff-time {
  font-size: 11px;
  color: #999;
  align-self: flex-end;
  margin-top: 5px;
}

.pff-feedback-container::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  height: 30px;
  background: linear-gradient(to top, rgba(249, 249, 249, 0.9), rgba(249, 249, 249, 0));
  pointer-events: none;
  border-bottom-left-radius: 8px;
  border-bottom-right-radius: 8px;
}

@media (max-width: 768px) {
  .pff-inbox-section {
    padding: 20px 15px;
  }

  .pff-feedback-form {
    padding: 15px;
  }

  .star-rating-container svg {
    width: 25px;
    height: 25px;
  }

  .pff-submit-feedback-btn {
    width: 100%;
  }
}

@keyframes newFeedbackAppear {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.pff-feedback-card:first-child {
  animation: newFeedbackAppear 0.5s ease-out forwards;
}

.pff-donation-card {
  background: white;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
  width: 100%;
  margin: 0 0 15px 0;
  text-align: center;
}

.pff-donation-title {
  text-align: center;
  font-size: 22px;
  color: #2c3e50;
}

.pff-donation-p {
  text-align: left;
  margin: 5px 0;
  color: #555;
}

.pff-donation-ul {
  list-style-type: none;
  padding: 0;
  text-align: left;
}

.pff-donation-li {
  background: #ecf0f1;
  padding: 8px;
  border-radius: 5px;
  margin: 5px 0;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.pff-status {
  padding: 3px 8px;
  border-radius: 5px;
  font-size: 12px;
  color: white;
}

.pff-available {
  background-color: #27ae60;
}

.pff-pending {
  background-color: #f39c12;
}

.pff-donation-card-content {
  margin-left: 0px;
  text-align: left;
}

.pff-btnseemore {
  margin-left: 406px;
  margin-top: 10px;
  font-size: 12px;
  padding: 5px 10px;
  background-color: black;
  color: white;
  border-radius: 5px;
  border: none;
}

.pff-userrole {
  color: white;
  font-size: 40px;
  font-style: oblique;
}

@media (max-width: 1024px) {
  .pff-main {
    grid-template-columns: 1fr;
  }

  .pff-left-column,
  .pff-center-column,
  .pff-right-column {
    width: 100%;
  }

  .pff-project-card,
  .pff-donation-card {
    max-width: 100%;
  }
}

@media (max-width: 700px) {
  .pff-userrole {
    color: white;
    size: 20px;
    font-style: oblique;
  }

  .pff-profile-header {
    font-size: 20px;
  }

  .pff-btnProfile {
    font-size: 12px;
    padding: 6px 10px;
  }

  .pff-profile-pic img {
    width: 30px;
    height: 40px;
  }

  .pff-card-white {
    margin-bottom: 5px;
    height: auto;
    background: rgba(255, 255, 255, 0.7);
    border-radius: 10px;
    padding: 5px;
    position: relative;
    transition: all 0.4s ease-in-out;
  }

  .pff-card-white .pff-mail {
    position: absolute;
    right: 1rem;
    top: 1rem;
    background: transparent;
    border: none;
  }

  .pff-card-white .pff-mail svg {
    stroke: #8dc73f;
    stroke-width: 2px;
  }

  .pff-card-white .pff-profile-pic {
    position: center;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    z-index: 1;
    border: 3px solid #8dc73f;
    overflow: hidden;
    transition: all 0.4s ease-in-out;
  }
}

.pff-welcome-message {
  position: fixed;
  top: 80px;
  left: 50%;
  transform: translateX(-50%);
  background: linear-gradient(135deg, #8dc73f 0%, #50C9A7 100%);
  color: white;
  padding: 15px 30px;
  border-radius: 12px;
  z-index: 1000;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
  animation: popIn 0.5s ease-out forwards, fadeOut 0.5s ease-in forwards 4.5s;
  overflow: hidden;
  min-width: 300px;
  text-align: center;
}

.pff-welcome-message-content {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  position: relative;
  z-index: 2;
}

.pff-welcome-icon {
  font-size: 24px;
  animation: bounce 1s ease infinite;
}

.pff-confetti-container {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
  pointer-events: none;
}

.pff-confetti {
  position: absolute;
  width: 10px;
  height: 10px;
  top: -10px;
  animation: confettiFall linear forwards;
}

.pff-confetti-0 {
  background-color: #f55d56;
  transform: rotate(0deg);
}

.pff-confetti-1 {
  background-color: #f7b733;
  transform: rotate(45deg);
}

.pff-confetti-2 {
  background-color: #50C9A7;
  transform: rotate(90deg);
}

.pff-confetti-3 {
  background-color: #6cabf6;
  transform: rotate(135deg);
}

.pff-confetti-4 {
  background-color: #ffffff;
  transform: rotate(180deg);
}

@keyframes popIn {
  0% {
    transform: translate(-50%, -20px);
    opacity: 0;
  }
  50% {
    transform: translate(-50%, 10px);
    opacity: 1;
  }
  100% {
    transform: translate(-50%, 0);
    opacity: 1;
  }
}

@keyframes fadeOut {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}

@keyframes bounce {
  0%,
  100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-5px);
  }
}

@keyframes confettiFall {
  0% {
    top: -10px;
    transform: translateX(0) rotate(0deg);
  }
  100% {
    top: 100%;
    transform: translateX(20px) rotate(360deg);
  }
}

.pff-feedback-cards .pff-feedback-card {
  transition: transform 0.4s ease, filter 0.4s ease;
  position: relative;
  overflow: hidden;
}

.pff-feedback-cards .pff-feedback-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.7s ease;
}

.pff-feedback-cards .pff-feedback-card:hover::before {
  left: 100%;
}

.pff-winner-cards {
  position: relative;
  height: 150px;
  transition: all 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);
  background: none;
  overflow: visible;
  margin-bottom: 20px;
  perspective: 1000px;
  width: 100%;
  margin-bottom: 20px;
}

.pff-winner-particles {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
  border-radius: 16px;
  pointer-events: none;
  z-index: 2;
}

.pff-winner-particle {
  position: absolute;
  width: 6px;
  height: 6px;
  border-radius: 50%;
  opacity: 0;
  top: 105%;
  z-index: 3;
  filter: blur(1px);
  box-shadow: 0 0 6px currentColor;
  animation: particleRise 3s ease-in-out infinite;
}

@keyframes particleRise {
  0% {
    opacity: 0;
    transform: translateY(0) scale(1);
  }
  20% {
    opacity: 0.8;
    transform: translateY(-20px) scale(1.1);
  }
  40% {
    opacity: 0.6;
    transform: translateY(-40px) scale(1);
  }
  60% {
    opacity: 0.4;
    transform: translateY(-60px) scale(0.9);
  }
  80% {
    opacity: 0.2;
    transform: translateY(-80px) scale(0.8);
  }
  100% {
    opacity: 0;
    transform: translateY(-100px) scale(0.7);
  }
}

.pff-winner-cards:hover {
  height: 270px;
  transform: translateY(-5px);
}

.pff-winner-cards:hover .pff-winner-detailPage {
  display: flex;
  animation: fadeIn 0.6s cubic-bezier(0.26, 0.53, 0.74, 1.48) forwards;
}

.pff-winner-cards::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  pointer-events: none;
}

.pff-winner-cards:hover::after {
  animation: generateSparkles 3s linear infinite;
}

@keyframes generateSparkles {
  0%,
  100% {
    opacity: 0;
  }
  10%,
  90% {
    opacity: 1;
  }
}

.pff-sparkle {
  position: absolute;
  width: 6px;
  height: 6px;
  z-index: 3;
  pointer-events: none;
  opacity: 0;
  content: "★";
  font-size: 6px;
  color: #fff;
  text-shadow: 0 0 3px #fff, 0 0 5px #fff, 0 0 7px #8dc73f;
}

.pff-winner-cards:hover .pff-winner-outlinePage::before {
  content: "★";
  font-size: 5px;
  color: #fff;
  text-shadow: 0 0 5px #fff, 0 0 10px #fff, 0 0 15px #8dc73f;
  position: absolute;
  opacity: 0;
  animation: sparkle1 3s ease-in-out infinite;
  top: 20%;
  left: 15%;
  z-index: 3;
}

.pff-winner-cards:hover .pff-winner-outlinePage::after {
  content: "★";
  font-size: 4px;
  color: #fff;
  text-shadow: 0 0 5px #fff, 0 0 10px #fff, 0 0 15px #ffd700;
  position: absolute;
  opacity: 0;
  animation: sparkle2 4s ease-in-out infinite 0.5s;
  top: 30%;
  right: 20%;
  z-index: 3;
}

.pff-winner-cards:hover .pff-winner-ranking_number::before {
  content: "★";
  font-size: 6px;
  color: #fff;
  text-shadow: 0 0 5px #fff, 0 0 10px #fff, 0 0 15px #8dc73f;
  position: absolute;
  opacity: 0;
  animation: sparkle3 3.5s ease-in-out infinite 1s;
  bottom: 20%;
  left: 40%;
  z-index: 3;
}

.pff-winner-cards:hover .pff-winner-ranking_number::after {
  content: "★";
  font-size: 3px;
  color: #fff;
  text-shadow: 0 0 5px #fff, 0 0 10px #fff, 0 0 15px #ffd700;
  position: absolute;
  opacity: 0;
  animation: sparkle4 2.5s ease-in-out infinite 1.5s;
  top: 40%;
  right: 10%;
  z-index: 3;
}

@keyframes sparkle1 {
  0%,
  100% {
    opacity: 0;
    transform: scale(0.8) translate(0, 0);
  }
  50% {
    opacity: 1;
    transform: scale(1.2) translate(20px, -15px);
  }
}

@keyframes sparkle2 {
  0%,
  100% {
    opacity: 0;
    transform: scale(0.8) translate(0, 0);
  }
  50% {
    opacity: 1;
    transform: scale(1.2) translate(-15px, 10px);
  }
}

@keyframes sparkle3 {
  0%,
  100% {
    opacity: 0;
    transform: scale(0.8) translate(0, 0);
  }
  50% {
    opacity: 1;
    transform: scale(1.2) translate(10px, 20px);
  }
}

@keyframes sparkle4 {
  0%,
  100% {
    opacity: 0;
    transform: scale(0.8) translate(0, 0);
  }
  50% {
    opacity: 1;
    transform: scale(1.2) translate(-10px, -10px);
  }
}

.pff-winner-cards:hover .pff-winner-detailPage::before,
.pff-winner-cards:hover .pff-winner-detailPage::after {
  content: '';
  position: absolute;
  width: 8px;
  height: 8px;
  background: rgba(141, 199, 63, 0.6);
  border-radius: 50%;
  z-index: 3;
  opacity: 0;
  animation: floatingParticle 4s ease-in-out infinite;
}

.pff-winner-cards:hover .pff-winner-detailPage::before {
  top: 20%;
  left: 30%;
  animation-delay: 0.5s;
}

.pff-winner-cards:hover .pff-winner-detailPage::after {
  bottom: 30%;
  right: 20%;
  animation-delay: 1.5s;
}

@keyframes floatingParticle {
  0%,
  100% {
    opacity: 0;
    transform: translateY(0);
  }
  50% {
    opacity: 0.7;
    transform: translateY(-15px);
  }
}

.pff-winner-outlinePage {
  position: relative;
  width: 350px;
  height: 150px;
  border-radius: 16px;
  transition: all 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);
  z-index: 2;
  overflow: visible;
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
  backdrop-filter: blur(5px);
  width: 100%;
  max-width: 350px;
  margin: 0 auto;
}

.pff-winner-outlinePage > .bg-pattern {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border-radius: 16px;
  opacity: 0.07;
  background-size: 300px 300px;
  background-image: radial-gradient(circle at 25px 25px, rgba(0, 0, 0, 0.1) 2px, transparent 0),
    radial-gradient(circle at 75px 75px, rgba(0, 0, 0, 0.1) 2px, transparent 0);
  z-index: 0;
  animation: patternShift 120s linear infinite;
}

@keyframes patternShift {
  0% {
    background-position: 0% 0%;
  }
  100% {
    background-position: 300% 300%;
  }
}

.pff-winner-outlinePage-gold {
  background: linear-gradient(135deg, #f7f2e2, #fee29a, #f7d06a);
  background-size: 200% 200%;
  position: relative;
  animation: subtleGoldShimmer 15s ease-in-out infinite;
}

@keyframes subtleGoldShimmer {
  0%,
  100% {
    background-position: 0% 30%;
  }
  50% {
    background-position: 100% 70%;
  }
}

.pff-winner-outlinePage-gold > .medal-pattern {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border-radius: 16px;
  background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z' fill='%238dc73f' fill-opacity='0.08'/%3E%3C/g%3E%3C/svg%3E");
  z-index: 0;
}

.pff-winner-outlinePage-silver {
  background: linear-gradient(135deg, #f5f5f5, #e0e0e0, #d0d0d0);
  background-size: 200% 200%;
  position: relative;
  animation: subtleSilverShimmer 15s ease-in-out infinite;
}

@keyframes subtleSilverShimmer {
  0%,
  100% {
    background-position: 0% 30%;
  }
  50% {
    background-position: 100% 70%;
  }
}

.pff-winner-outlinePage-silver > .medal-pattern {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border-radius: 16px;
  background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z' fill='%23a0a0a0' fill-opacity='0.08'/%3E%3C/g%3E%3C/svg%3E");
  z-index: 0;
}

.pff-winner-outlinePage-bronze {
  background: linear-gradient(135deg, #f5e0cb, #e4a362, #cd7f32);
  background-size: 200% 200%;
  position: relative;
  animation: subtleBronzeShimmer 15s ease-in-out infinite;
}

@keyframes subtleBronzeShimmer {
  0%,
  100% {
    background-position: 0% 30%;
  }
  50% {
    background-position: 100% 70%;
  }
}

.pff-winner-outlinePage-bronze > .medal-pattern {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border-radius: 16px;
  background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z' fill='%23b87333' fill-opacity='0.08'/%3E%3C/g%3E%3C/svg%3E");
  z-index: 0;
}

.pff-winner-outlinePage-none {
  background: linear-gradient(135deg, #f0f0f0, #e0e0e0, #d8d8d8);
  background-size: 200% 200%;
  animation: subtleDefaultShimmer 15s ease-in-out infinite;
}

@keyframes subtleDefaultShimmer {
  0%,
  100% {
    background-position: 0% 30%;
  }
  50% {
    background-position: 100% 70%;
  }
}

.pff-winner-detailPage {
  position: relative;
  display: none;
  width: 350px;
  height: 120px;
  background: white;
  top: -20px;
  z-index: 1;
  transition: all 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);
  border-radius: 0 0 16px 16px;
  overflow: hidden;
  align-items: center;
  justify-content: flex-start;
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.05);
  width: 100%;
  max-width: 350px;
  margin: 0 auto;
}

.pff-winner-splitLine {
  position: absolute;
  width: 200px;
  height: 4px;
  top: 100px;
  background: linear-gradient(90deg, rgba(141, 199, 63, 0.3), rgba(141, 199, 63, 0.8), rgba(141, 199, 63, 0.3));
  background-size: 200% 100%;
  z-index: 1;
  animation: gradientMove 3s ease infinite;
}

@keyframes gradientMove {
  0% {
    background-position: 100% 0%;
  }
  100% {
    background-position: 0% 0%;
  }
}

.pff-winner-icon.pff-winner-trophy {
  position: absolute;
  right: 15px;
  top: 10px;
  z-index: 2;
  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.15));
  transition: all 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);
  animation: trophyFloat 3s ease-in-out infinite;
}

@keyframes trophyFloat {
  0%,
  100% {
    transform: translateY(0) rotate(0deg);
  }
  50% {
    transform: translateY(-5px) rotate(2deg);
  }
}

.pff-winner-cards:hover .pff-winner-icon.pff-winner-trophy {
  transform: translateY(-8px) rotate(-5deg);
  filter: drop-shadow(0 8px 16px rgba(0, 0, 0, 0.2));
}

.pff-winner-outlinePage::before,
.pff-winner-outlinePage::after {
  content: "★";
  position: absolute;
  font-size: 4px;
  color: white;
  opacity: 0;
  z-index: 3;
  text-shadow: 0 0 8px 2px rgba(255, 215, 0, 0.7);
  pointer-events: none;
}

.pff-winner-outlinePage::before {
  top: 25%;
  left: 15%;
  animation: sparkleFloat 4s ease-in-out infinite;
}

.pff-winner-outlinePage::after {
  top: 65%;
  right: 25%;
  animation: sparkleFloat 4s ease-in-out infinite 1s;
}

.pff-winner-outlinePage-gold::before,
.pff-winner-outlinePage-gold::after {
  text-shadow: 0 0 8px 2px rgba(255, 215, 0, 0.7);
}

.pff-winner-outlinePage-silver::before,
.pff-winner-outlinePage-silver::after {
  text-shadow: 0 0 8px 2px rgba(192, 192, 192, 0.7);
}

.pff-winner-outlinePage-bronze::before,
.pff-winner-outlinePage-bronze::after {
  text-shadow: 0 0 8px 2px rgba(205, 127, 50, 0.7);
}

@keyframes sparkleFloat {
  0%,
  100% {
    opacity: 0;
    transform: scale(0.8);
  }
  50% {
    opacity: 0.8;
    transform: scale(1.5);
  }
}

.pff-winner-outlinePage::after {
  content: '';
  position: absolute;
  top: -100%;
  left: -100%;
  width: 300%;
  height: 300%;
  background: linear-gradient(
    45deg,
    rgba(255, 255, 255, 0) 0%,
    rgba(255, 255, 255, 0.1) 50%,
    rgba(255, 255, 255, 0) 100%
  );
  transform: rotate(45deg);
  animation: shimmerEffect 6s linear infinite;
  z-index: 1;
  pointer-events: none;
}

@keyframes shimmerEffect {
  0% {
    transform: rotate(45deg) translateX(-100%);
  }
  100% {
    transform: rotate(45deg) translateX(100%);
  }
}

.pff-winner-icon.pff-winner-trophy::before,
.pff-winner-icon.pff-winner-medals::before {
  content: '';
  position: absolute;
  width: 100%;
  height: 100%;
  background: radial-gradient(
    circle at 30% 30%,
    rgba(255, 255, 255, 0.8) 0%,
    rgba(255, 255, 255, 0) 20%
  );
  opacity: 0;
  animation: iconSparkle 4s ease-in-out infinite;
  pointer-events: none;
}

@keyframes iconSparkle {
  0%,
  100% {
    opacity: 0;
  }
  50% {
    opacity: 0.5;
  }
}

.pff-winner-icon.pff-winner-trophy::before,
.pff-winner-icon.pff-winner-trophy::after {
  content: "★";
  position: absolute;
  font-size: 12px;
  color: #ffd700;
  opacity: 0;
  animation: trophySparkle 3s ease-in-out infinite;
}

.pff-winner-icon.pff-winner-trophy::before {
  top: 10px;
  right: 10px;
  animation-delay: 0.5s;
}

.pff-winner-icon.pff-winner-trophy::after {
  top: 30px;
  left: 10px;
  animation-delay: 1.5s;
}

@keyframes trophySparkle {
  0%,
  100% {
    opacity: 0;
    transform: scale(0.8);
  }
  50% {
    opacity: 1;
    transform: scale(1.2);
  }
}

.pff-winner-ranking_number {
  position: relative;
  color: #8dc73f;
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  font-weight: 800;
  font-size: 80px;
  left: 20px;
  padding: 0;
  margin: 0;
  top: -5px;
  text-shadow: 2px 2px 0 rgba(0, 0, 0, 0.1), 0 0 10px rgba(141, 199, 63, 0.3);
  transition: all 0.3s ease;
}

.pff-winner-cards:hover .pff-winner-ranking_number {
  text-shadow: 2px 2px 0 rgba(0, 0, 0, 0.1), 0 0 20px rgba(141, 199, 63, 0.5);
}

.pff-winner-ranking_word {
  position: relative;
  font-size: 40px;
  color: #424c50;
  text-shadow: 1px 1px 0 rgba(0, 0, 0, 0.05);
  transition: all 0.3s ease;
}

.pff-winner-cards:hover .pff-winner-ranking_word {
  color: #333;
}

.pff-winner-userAvatar {
  position: absolute;
  bottom: 15px;
  left: 20px;
  filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));
  transition: all 0.3s ease;
  animation: avatarPulse 3s ease-in-out infinite;
}

@keyframes avatarPulse {
  0%,
  100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
}

.pff-winner-userName {
  position: absolute;
  bottom: 15px;
  left: 55px;
  font-weight: 600;
  color: #6b7578;
  font-size: 18px;
  transition: all 0.3s ease;
}

.pff-winner-cards:hover .pff-winner-userName {
  color: #424c50;
  transform: translateX(3px);
}

.pff-winner-medals {
  position: absolute;
  top: 15px;
  right: 15px;
  filter: drop-shadow(0 3px 6px rgba(0, 0, 0, 0.1));
  transition: all 0.3s ease;
}

.pff-winner-medals::after {
  content: "";
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: linear-gradient(
    45deg,
    rgba(255, 255, 255, 0) 0%,
    rgba(255, 255, 255, 0.8) 50%,
    rgba(255, 255, 255, 0) 100%
  );
  transform: rotate(45deg);
  animation: medalShine 6s ease-in-out infinite;
  opacity: 0;
}

.pff-winner-cards:hover .pff-winner-medals::after {
  opacity: 1;
}

@keyframes medalShine {
  0% {
    transform: scale(0.5) rotate(45deg) translateX(-100%);
  }
  10%,
  100% {
    transform: scale(0.5) rotate(45deg) translateX(100%);
  }
}

.pff-winner-gradesBox {
  position: relative;
  height: 75px;
  top: 10px;
  margin-right: 10px;
  margin-left: 15px;
  transition: all 0.3s ease;
}

.pff-winner-cards:hover .pff-winner-gradesBox {
  transform: translateY(-3px);
}

.pff-winner-gradesIcon {
  position: absolute;
  top: 10px;
  left: 10px;
  filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));
  transition: all 0.3s ease;
  animation: iconRotate 10s linear infinite;
}

@keyframes iconRotate {
  0% {
    transform: rotate(0deg);
  }
  25% {
    transform: rotate(1deg);
  }
  75% {
    transform: rotate(-1deg);
  }
  100% {
    transform: rotate(0deg);
  }
}

.pff-winner-gradesBoxLabel {
  position: relative;
  display: block;
  color: #424c50;
  letter-spacing: 3px;
  font-family: Arial, Helvetica, sans-serif;
  margin-top: 20px;
  font-weight: 700;
  font-size: 13px;
  left: 80px;
  text-transform: uppercase;
  transition: all 0.3s ease;
}

.pff-winner-cards:hover .pff-winner-gradesBoxLabel {
  letter-spacing: 3.5px;
  color: #333;
}

.pff-winner-gradesBoxNum {
  position: relative;
  font-family: Arial, Helvetica, sans-serif;
  display: block;
  font-size: 28px;
  font-weight: 800;
  color: #8dc73f;
  top: -5px;
  left: 80px;
  text-shadow: 1px 1px 0 rgba(0, 0, 0, 0.05);
  transition: all 0.3s ease;
}

.pff-winner-cards:hover .pff-winner-gradesBoxNum {
  color: #7ab62f;
  text-shadow: 0 0 10px rgba(141, 199, 63, 0.3);
}

.pff-winner-cards:hover .pff-winner-outlinePage {
  box-shadow: 0 15px 30px rgba(141, 199, 63, 0.2);
}

.pff-winner-outlinePage-gold:hover {
  box-shadow: 0 15px 30px rgba(247, 208, 106, 0.4);
}

.pff-winner-outlinePage-silver:hover {
  box-shadow: 0 15px 30px rgba(192, 192, 192, 0.4);
}

.pff-winner-outlinePage-bronze:hover {
  box-shadow: 0 15px 30px rgba(205, 127, 50, 0.4);
}

.pff-sustainability-badge {
  position: absolute;
  top: 10px;
  left: 10px;
  background: rgba(141, 199, 63, 0.9);
  color: white;
  font-size: 11px;
  padding: 3px 8px;
  border-radius: 12px;
  z-index: 3;
  opacity: 0;
  transform: translateY(-10px);
  transition: all 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.pff-winner-cards:hover .pff-sustainability-badge {
  opacity: 1;
  transform: translateY(0);
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(15px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes floatAnimation {
  0%,
  100% {
    transform: translateY(0) rotate(0deg);
  }
  50% {
    transform: translateY(-8px) rotate(3deg);
  }
}

.pff-winner-slide-in-top {
  animation: slideInTop 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
}

@keyframes slideInTop {
  0% {
    transform: translateY(-20px);
    opacity: 0;
  }
  100% {
    transform: translateY(0);
    opacity: 1;
  }
}

.pff-winner-cards:hover::before {
  content: '';
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  pointer-events: none;
  z-index: 4;
  animation: sparkleGenerator 0.1s linear infinite;
  opacity: 0;
}



@keyframes sparkleGenerator {
  0%, 100% { opacity: 0; }
  50% {
    opacity: 0;
    background: radial-gradient(circle at var(--x, 50%) var(--y, 50%), rgba(255,255,255,0.8) 0%, transparent 10%);
  }
}

/* Sparkle Trail on Hover */
.pff-winner-cards:hover {
  --x: 0%;
  --y: 0%;
}

.pff-winner-cards:hover:active {
  --x: calc(var(--mouse-x, 0) * 100%);
  --y: calc(var(--mouse-y, 0) * 100%);
}

/* Responsive Adjustments */
@media (max-width: 768px) {
  .pff-winner-outlinePage {
    width: 100%;
    max-width: 350px;
  }

  .pff-winner-detailPage {
    width: 100%;
    max-width: 350px;
  }

  .pff-winner-ranking_number {
    font-size: 60px;
  }

  .pff-winner-ranking_word {
    font-size: 30px;
  }
}

/* JavaScript-free Sparkle Effect */
@keyframes autoSparkle {
  0%, 100% { 
    box-shadow: 
      calc(10% + 0px) calc(10% + 0px) 0 0 rgba(255,255,255,0),
      calc(30% + 0px) calc(40% + 0px) 0 0 rgba(255,255,255,0),
      calc(70% + 0px) calc(20% + 0px) 0 0 rgba(255,255,255,0),
      calc(90% + 0px) calc(60% + 0px) 0 0 rgba(255,255,255,0),
      calc(20% + 0px) calc(80% + 0px) 0 0 rgba(255,255,255,0),
      calc(60% + 0px) calc(90% + 0px) 0 0 rgba(255,255,255,0);
  }
  20% { 
    box-shadow: 
      calc(10% + 0px) calc(10% + 0px) 3px 0 rgba(255,255,255,0.8),
      calc(30% + 0px) calc(40% + 0px) 0 0 rgba(255,255,255,0),
      calc(70% + 0px) calc(20% + 0px) 0 0 rgba(255,255,255,0),
      calc(90% + 0px) calc(60% + 0px) 0 0 rgba(255,255,255,0),
      calc(20% + 0px) calc(80% + 0px) 0 0 rgba(255,255,255,0),
      calc(60% + 0px) calc(90% + 0px) 0 0 rgba(255,255,255,0);
  }
  40% { 
    box-shadow: 
      calc(10% + 0px) calc(10% + 0px) 0 0 rgba(255,255,255,0),
      calc(30% + 0px) calc(40% + 0px) 3px 0 rgba(255,255,255,0.8),
      calc(70% + 0px) calc(20% + 0px) 0 0 rgba(255,255,255,0),
      calc(90% + 0px) calc(60% + 0px) 0 0 rgba(255,255,255,0),
      calc(20% + 0px) calc(80% + 0px) 0 0 rgba(255,255,255,0),
      calc(60% + 0px) calc(90% + 0px) 0 0 rgba(255,255,255,0);
  }
  60% { 
    box-shadow: 
      calc(10% + 0px) calc(10% + 0px) 0 0 rgba(255,255,255,0),
      calc(30% + 0px) calc(40% + 0px) 0 0 rgba(255,255,255,0),
      calc(70% + 0px) calc(20% + 0px) 3px 0 rgba(255,255,255,0.8),
      calc(90% + 0px) calc(60% + 0px) 0 0 rgba(255,255,255,0),
      calc(20% + 0px) calc(80% + 0px) 3px 0 rgba(255,255,255,0.8),
      calc(60% + 0px) calc(90% + 0px) 0 0 rgba(255,255,255,0);
  }
  80% { 
    box-shadow: 
      calc(10% + 0px) calc(10% + 0px) 0 0 rgba(255,255,255,0),
      calc(30% + 0px) calc(40% + 0px) 0 0 rgba(255,255,255,0),
      calc(70% + 0px) calc(20% + 0px) 0 0 rgba(255,255,255,0),
      calc(90% + 0px) calc(60% + 0px) 3px 0 rgba(255,255,255,0.8),
      calc(20% + 0px) calc(80% + 0px) 0 0 rgba(255,255,255,0),
      calc(60% + 0px) calc(90% + 0px) 0 0 rgba(255,255,255,0);
  }
  90% { 
    box-shadow: 
      calc(10% + 0px) calc(10% + 0px) 0 0 rgba(255,255,255,0),
      calc(30% + 0px) calc(40% + 0px) 0 0 rgba(255,255,255,0),
      calc(70% + 0px) calc(20% + 0px) 0 0 rgba(255,255,255,0),
      calc(90% + 0px) calc(60% + 0px) 0 0 rgba(255,255,255,0),
      calc(20% + 0px) calc(80% + 0px) 3px 0 rgba(255,255,255,0.8),
      calc(60% + 0px) calc(90% + 0px) 0 0 rgba(255,255,255,0);
  }
  95% { 
    box-shadow: 
      calc(10% + 0px) calc(10% + 0px) 0 0 rgba(255,255,255,0),
      calc(30% + 0px) calc(40% + 0px) 0 0 rgba(255,255,255,0),
      calc(70% + 0px) calc(20% + 0px) 0 0 rgba(255,255,255,0),
      calc(90% + 0px) calc(60% + 0px) 0 0 rgba(255,255,255,0),
      calc(20% + 0px) calc(80% + 0px) 0 0 rgba(255,255,255,0),
      calc(60% + 0px) calc(90% + 0px) 3px 0 rgba(255,255,255,0.8);
  }
}

.pff-winner-cards:hover .pff-winner-outlinePage {
  position: relative;
  animation: autoSparkle 5s infinite;
}

/* Auto-generated food-themed sparkles */
.pff-winner-outlinePage-gold:hover::before {
  content: '🌱';
  position: absolute;
  font-size: 12px;
  top: 30%;
  left: 80%;
  opacity: 0;
  z-index: 5;
  animation: foodSparkle 4s ease-in-out infinite 1s;
}

.pff-winner-outlinePage-gold:hover::after {
  content: '🌿';
  position: absolute;
  font-size: 14px;
  top: 70%;
  left: 20%;
  opacity: 0;
  z-index: 5;
  animation: foodSparkle 4s ease-in-out infinite 2s;
}

@keyframes foodSparkle {
  0%, 100% { 
    opacity: 0;
    transform: translateY(0) scale(0.8);
  }
  50% { 
    opacity: 0.7;
    transform: translateY(-15px) scale(1.2);
  }
}

/* Sparkle cursor effect */
.pff-winner-cards {
  cursor: pointer;
}

.pff-winner-cards:active::after {
  content: '★';
  position: absolute;
  font-size: 16px;
  left: var(--cursor-x, 50%);
  top: var(--cursor-y, 50%);
  transform: translate(-50%, -50%);
  animation: cursorSparkle 1s forwards;
  z-index: 10;
  pointer-events: none;
}

@keyframes cursorSparkle {
  0% {
    opacity: 1;
    transform: translate(-50%, -50%) scale(0.5);
  }
  100% {
    opacity: 0;
    transform: translate(-50%, -50%) scale(1.5);
  }
}
/* Styling for "No activity" message */
.pff-no-activity-message {
  position: relative;
  padding: 16px;
  margin: 20px 0;
  text-align: center;
  background: rgba(220, 238, 221, 0.3); /* Soft green tint */
  border-radius: 8px;
}

.pff-no-activity-message::before {
  content: "⚠️";
  display: block;
  font-size: 24px;
  margin-bottom: 8px;
}

.pff-no-activity-message p {
  margin: 8px 0;
  color: #5a6266;
  font-size: 15px;
  line-height: 1.4;
}

.pff-no-activity-message .pff-score-label {
  display: block;
  margin-top: 12px;
  font-weight: 600;
  color: #424c50;
}

.pff-no-activity-message .pff-score-value {
  font-size: 28px;
  color: #8dc73f;
  font-weight: 700;
  margin: 4px 0;
}

/* Pulse animation for empty state */
@keyframes pulse {
  0% { opacity: 0.8; }
  50% { opacity: 1; }
  100% { opacity: 0.8; }
}

.pff-no-activity-message {
  animation: pulse 3s infinite;
}
/* add upload css */
.pff-ad-upload-section {
  margin-top: 20px;
  text-align: center;
  background-color: #e6f4e6; /* Light green background */
  padding: 15px;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  width: 100%;
  margin: 20px 0;
}

.pff-ad-upload-section p {
  color: #1a7a1a; /* Dark green text color */
  font-weight: 600;
  font-size: 16px;
  margin-bottom: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px; /* Space between emoji and text */
  opacity: 0; /* Start hidden for animation */
  animation: fadeInSlideUp 0.8s ease forwards; /* Animation for message */
}

/* Fade-in and slide-up animation for the message */
@keyframes fadeInSlideUp {
  0% {
    opacity: 0;
    transform: translateY(20px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.pff-ad-upload-section form {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 10px;
}

.pff-ad-upload-section input[type="file"] {
  padding: 5px;
  font-size: 14px;
  border: 1px solid #ccc;
  border-radius: 4px;
  width: 100%;
  max-width: 300px;
  background-color: #fff;
}

.pff-ad-upload-section input[type="file"]::file-selector-button {
  padding: 5px 10px;
  background-color: #f0f0f0;
  border: 1px solid #ccc;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

/* Button with hover animation */
.pff-ad-upload-section button {
  padding: 8px 20px;
  background-color: #228b22; /* Forest green button color */
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 15px;
  font-weight: 500;
  position: relative;
  overflow: hidden;
  transition: background-color 0.3s ease, transform 0.2s ease;
}

.pff-ad-upload-section button:hover {
  background-color: #1a7a1a; /* Slightly darker green on hover */
  transform: scale(1.05); /* Slight scale-up on hover */
}

/* Ripple effect on button click */
.pff-ad-upload-section button::after {
  content: '';
  position: absolute;
  width: 100%;
  height: 100%;
  background: rgba(255, 255, 255, 0.3);
  top: 0;
  left: 0;
  opacity: 0;
  transform: scale(0);
  border-radius: 5px;
  transition: opacity 0.5s ease, transform 0.5s ease;
}

.pff-ad-upload-section button:active::after {
  opacity: 1;
  transform: scale(2);
  transition: 0s;
}

.pff-ad-upload-section button:focus {
  outline: none;
  box-shadow: 0 0 0 3px rgba(34, 139, 34, 0.3);
}

.pff-ad-upload-section p[style*="color: red"] {
  color: #d32f2f;
  font-size: 14px;
  margin-top: 10px;
}

.pff-ad-upload-section p[style*="color: #1a7a1a"] {
  color: #1a7a1a;
  font-size: 14px;
  margin-top: 10px;
}

/* Add these styles to your CSS file for the scrollable feedback section */

.pff-feedback-container {
  position: relative;
  max-height: 350px;
  overflow: hidden;
  border-radius: 8px;
  background: #f9f9f9;
  box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.05);
}


/* Custom scrollbar styling */
.pff-feedback-scroll::-webkit-scrollbar {
  width: 6px;
}

.pff-feedback-scroll::-webkit-scrollbar-track {
  background: #f0f0f0;
  border-radius: 10px;
}

.pff-feedback-scroll::-webkit-scrollbar-thumb {
  background: #8dc73f;
  border-radius: 10px;
}

.pff-feedback-scroll::-webkit-scrollbar-thumb:hover {
  background: #7ab62f;
}

/* Enhanced feedback card styling */
.pff-feedback-card {
  background: white;
  border-radius: 8px;
  padding: 12px;
  margin-bottom: 10px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.pff-feedback-card:last-child {
  margin-bottom: 0;
}

.pff-feedback-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.pff-message {
  display: flex;
  flex-direction: column;
  width: 100%;
  margin-left: 0;
}

.pff-message-header {
  display: flex;
  align-items: flex-start;
  gap: 10px;
  margin-bottom: 5px;
}

.pff-message-header img {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #f0f0f0;
}

.pff-message-header strong {
  display: block;
  font-size: 14px;
  color: #333;
  margin-bottom: 2px;
}

.pff-message-header p {
  font-size: 13px;
  color: #666;
  margin: 5px 0 0 0;
  line-height: 1.4;
}

.pff-time {
  font-size: 11px;
  color: #999;
  align-self: flex-end;
  margin-top: 5px;
}
</file>

<file path="sustainafood-frontend/src/pages/Profile.jsx">
"use client"

import { useEffect, useState } from "react";
import "../assets/styles/Profile.css";
import pdp from "../assets/images/pdp.png";
import Navbar from "../components/Navbar";
import Footer from "../components/Footer";
import edit from "../assets/images/edit.png";
import { Link, useNavigate } from "react-router-dom";
import { getUserById, onUpdateDescription, getUserGamificationData } from "../api/userService";
import { useAuth } from "../contexts/AuthContext";
import RoleSpecificProfile from "../components/RoleSpecificProfile";
import { FaEdit, FaPlus } from "react-icons/fa";
import StarRating from "../components/StarRating";
import { getFeedbackByUserId } from "../api/feedbackService";

const Profile = () => {
  const navigate = useNavigate();
  const { user: authUser, clearWelcomeMessage } = useAuth();
  const [user, setUser] = useState(authUser);
  const [error, setError] = useState("");
  const [welcomeMessage, setWelcomeMessage] = useState(authUser?.welcomeMessage || "");
  const [isEditing, setIsEditing] = useState(false);
  const [description, setDescription] = useState("");
  const [descriptionError, setDescriptionError] = useState("");
  const [feedbacks, setFeedbacks] = useState([]);
  const [gamificationData, setGamificationData] = useState({ rank: null, score: 0 });
  const [gamificationError, setGamificationError] = useState("");
  const [adImage, setAdImage] = useState(null);
  const [adUploadError, setAdUploadError] = useState("");
  const [adUploadSuccess, setAdUploadSuccess] = useState("");

  const profilePhotoUrl = user?.photo ? `http://localhost:3000/${user.photo}` : pdp;

  useEffect(() => {
    const fetchUserAndFeedback = async () => {
      try {
        const userId = authUser._id || authUser.id;
        console.log("Fetching data for userId:", userId);

        if (!authUser || !userId) {
          setError("User not authenticated. Please log in.");
          return;
        }

        // Fetch user data
        const userResponse = await getUserById(userId);
        setUser(userResponse.data);
        setDescription(userResponse.data.description || "");

        // Fetch feedback for the user
        const feedbackResponse = await getFeedbackByUserId(userId);
        setFeedbacks(feedbackResponse);

        // Fetch gamification data
        try {
          const gamificationResponse = await getUserGamificationData(userId);
          setGamificationData({
            rank: gamificationResponse.rank,
            score: gamificationResponse.score,
          });
          setGamificationError("");
        } catch (gamificationErr) {
          console.error("Error fetching gamification data:", gamificationErr);
          setGamificationError(
            gamificationErr.response?.data?.error || "Failed to load gamification data."
          );
          setGamificationData({ rank: null, score: 0 });
        }
      } catch (error) {
        console.error("Error fetching data:", error);
        setError("Failed to load profile or feedback data");
      }
    };

    if (authUser && (authUser._id || authUser.id)) {
      fetchUserAndFeedback();
    } else {
      setError("User not authenticated. Please log in.");
    }
  }, [authUser]);

  useEffect(() => {
    if (welcomeMessage) {
      const timer = setTimeout(() => {
        setWelcomeMessage("");
        clearWelcomeMessage();
      }, 5000);
      return () => clearTimeout(timer);
    }
  }, [welcomeMessage, clearWelcomeMessage]);

  const handleSave = async () => {
    try {
      const userId = user._id || user.id;
      await onUpdateDescription(userId, description);
      setUser((prevUser) => ({ ...prevUser, description }));
      setIsEditing(false);
      setDescriptionError("");
    } catch (error) {
      console.error("Error updating description:", error);
      setDescriptionError("Failed to update description.");
    }
  };

  const handleAdImageChange = (e) => {
    const file = e.target.files[0];
    console.log("Selected file:", file); // Debug: Ensure the file is captured
    if (file && file.type.startsWith('image/')) {
      setAdImage(file);
      setAdUploadError("");
    } else {
      setAdUploadError("Please select a valid image file.");
    }
  };

  const handleAdUpload = async (e) => {
    e.preventDefault();
    if (!adImage) {
      setAdUploadError("Please select an image to upload.");
      return;
    }

    const formData = new FormData();
  formData.append('advertisementImage', adImage);
  console.log([...formData.entries()]); // Debug: Check FormData content

    try {
    const response = await fetch(`http://localhost:3000/users/${user._id}/upload-ad`, {
      method: 'POST',
      body: formData,
      headers: {
        Authorization: `Bearer ${localStorage.getItem('token')}`,
      },
    });
    const data = await response.json();
    if (response.ok) {
      setAdUploadSuccess("Advertisement uploaded successfully!");
      setAdImage(null);
      setUser((prevUser) => ({ ...prevUser, advertisementImage: data.advertisementImage }));
      setTimeout(() => setAdUploadSuccess(""), 5000);
    } else {
      setAdUploadError(data.error || "Failed to upload advertisement.");
    }
  } catch (error) {
    console.error("Error uploading advertisement:", error);
    setAdUploadError("Failed to upload advertisement.");
  }
  };

  const getMedalSvg = (rank) => {
    if (rank === 1) {
      return (
        <svg className="pff-winner-icon pff-winner-medals pff-winner-slide-in-top" viewBox="0 0 1024 1024" width="80" height="80">
          <path d="M896 42.666667h-128l-170.666667 213.333333h128z" fill="#FF4C4C"></path>
          <path d="M768 42.666667h-128l-170.666667 213.333333h128z" fill="#3B8CFF"></path>
          <path d="M640 42.666667h-128L341.333333 256h128z" fill="#F1F1F1"></path>
          <path d="M128 42.666667h128l170.666667 213.333333H298.666667z" fill="#FF4C4C"></path>
          <path d="M256 42.666667h128l170.666667 213.333333h-128z" fill="#3B8CFF"></path>
          <path d="M384 42.666667h128l170.666667 213.333333h-128z" fill="#FBFBFB"></path>
          <path d="M298.666667 256h426.666666v213.333333H298.666667z" fill="#E3A815"></path>
          <path d="M512 661.333333m-320 0a320 320 0 1 0 640 0 320 320 0 1 0-640 0Z" fill="#FDDC3A"></path>
          <path d="M512 661.333333m-256 0a256 0 1 0 512 0 256 256 0 1 0-512 0Z" fill="#E3A815"></path>
          <path d="M512 661.333333m-213.333333 0a213.333333 213.333333 0 1 0 426.666666 0 213.333333 213.333333 0 1 0-426.666666 0Z" fill="#F5CF41"></path>
          <path d="M277.333333 256h469.333334a21.333333 21.333333 0 0 1 0 42.666667h-469.333334a21.333333 0 0 1 0-42.666667z" fill="#D19A0E"></path>
          <path d="M277.333333 264.533333a12.8 12.8 0 1 0 0 25.6h469.333334a12.8 12.8 0 1 0 0-25.6h-469.333334z m0-17.066666h469.333334a29.866667 29.866667 0 1 1 0 59.733333h-469.333334a29.866667 29.866667 0 1 1 0-59.733333z" fill="#F9D525"></path>
          <path d="M512 746.666667l-100.309333 52.736 19.157333-111.701334-81.152-79.104 112.128-16.298666L512 490.666667l50.176 101.632 112.128 16.298666-81.152 79.104 19.157333 111.701334z" fill="#FFF2A0"></path>
        </svg>
      );
    } else if (rank === 2) {
      return (
        <svg className="pff-winner-icon pff-winner-medals pff-winner-slide-in-top" viewBox="0 0 1024 1024" width="80" height="80">
          <path d="M896 42.666667h-128l-170.666667 213.333333h128z" fill="#FF4C4C"></path>
          <path d="M768 42.666667h-128l-170.666667 213.333333h128z" fill="#3B8CFF"></path>
          <path d="M640 42.666667h-128L341.333333 256h128z" fill="#F1F1F1"></path>
          <path d="M128 42.666667h128l170.666667 213.333333H298.666667z" fill="#FF4C4C"></path>
          <path d="M256 42.666667h128l170.666667 213.333333h-128z" fill="#3B8CFF"></path>
          <path d="M384 42.666667h128l170.666667 213.333333h-128z" fill="#FBFBFB"></path>
          <path d="M298.666667 256h426.666666v213.333333H298.666667z" fill="#C0C0C0"></path>
          <path d="M512 661.333333m-320 0a320 320 0 1 0 640 0 320 320 0 1 0-640 0Z" fill="#D3D3D3"></path>
          <path d="M512 661.333333m-256 0a256 0 1 0 512 0 256 256 0 1 0-512 0Z" fill="#C0C0C0"></path>
          <path d="M512 661.333333m-213.333333 0a213.333333 213.333333 0 1 0 426.666666 0 213.333333 213.333333 0 1 0-426.666666 0Z" fill="#D3D3D3"></path>
          <path d="M277.333333 256h469.333334a21.333333 21.333333 0 0 1 0 42.666667h-469.333334a21.333333 0 0 1 0-42.666667z" fill="#A9A9A9"></path>
          <path d="M277.333333 264.533333a12.8 12.8 0 1 0 0 25.6h469.333334a12.8 12.8 0 1 0 0-25.6h-469.333334z m0-17.066666h469.333334a29.866667 29.866667 0 1 1 0 59.733333h-469.333334a29.866667 29.866667 0 1 1 0-59.733333z" fill="#B0B0B0"></path>
          <path d="M512 746.666667l-100.309333 52.736 19.157333-111.701334-81.152-79.104 112.128-16.298666L512 490.666667l50.176 101.632 112.128 16.298666-81.152 79.104 19.157333 111.701334z" fill="#FFFFFF"></path>
        </svg>
      );
    } else if (rank === 3) {
      return (
        <svg className="pff-winner-icon pff-winner-medals pff-winner-slide-in-top" viewBox="0 0 1024 1024" width="80" height="80">
          <path d="M896 42.666667h-128l-170.666667 213.333333h128z" fill="#FF4C4C"></path>
          <path d="M768 42.666667h-128l-170.666667 213.333333h128z" fill="#3B8CFF"></path>
          <path d="M640 42.666667h-128L341.333333 256h128z" fill="#F1F1F1"></path>
          <path d="M128 42.666667h128l170.666667 213.333333H298.666667z" fill="#FF4C4C"></path>
          <path d="M256 42.666667h128l170.666667 213.333333h-128z" fill="#3B8CFF"></path>
          <path d="M384 42.666667h128l170.666667 213.333333h-128z" fill="#FBFBFB"></path>
          <path d="M298.666667 256h426.666666v213.333333H298.666667z" fill="#CD7F32"></path>
          <path d="M512 661.333333m-320 0a320 320 0 1 0 640 0 320 320 0 1 0-640 0Z" fill="#E4A362"></path>
          <path d="M512 661.333333m-256 0a256 0 1 0 512 0 256 256 0 1 0-512 0Z" fill="#CD7F32"></path>
          <path d="M512 661.333333m-213.333333 0a213.333333 213.333333 0 1 0 426.666666 0 213.333333 213.333333 0 1 0-426.666666 0Z" fill="#E4A362"></path>
          <path d="M277.333333 256h469.333334a21.333333 21.333333 0 0 1 0 42.666667h-469.333334a21.333333 0 0 1 0-42.666667z" fill="#B87333"></path>
          <path d="M277.333333 264.533333a12.8 12.8 0 1 0 0 25.6h469.333334a12.8 12.8 0 1 0 0-25.6h-469.333334z m0-17.066666h469.333334a29.866667 29.866667 0 1 1 0 59.733333h-469.333334a29.866667 29.866667 0 1 1 0-59.733333z" fill="#C68E55"></path>
          <path d="M512 746.666667l-100.309333 52.736 19.157333-111.701334-81.152-79.104 112.128-16.298666L512 490.666667l50.176 101.632 112.128 16.298666-81.152 79.104 19.157333 111.701334z" fill="#FFF2A0"></path>
        </svg>
      );
    } else {
      return null;
    }
  };

  const getTrophySvg = (rank) => {
    if (rank === 1) {
      return (
        <svg className="pff-winner-icon pff-winner-trophy" viewBox="0 0 1024 1024" width="160" height="160">
          <path d="M469.333333 682.666667h85.333334v128h-85.333334zM435.2 810.666667h153.6c4.693333 0 8.533333 3.84 8.533333 8.533333v34.133333h-170.666666v-34.133333c0-4.693333 3.84-8.533333 8.533333-8.533333z" fill="#ea9518"></path>
          <path d="M384 853.333333h256a42.666667 42.666667 0 0 1 42.666667 42.666667v42.666667H341.333333v-42.666667a42.666667 42.666667 0 0 1 42.666667-42.666667z" fill="#6e4a32"></path>
          <path d="M213.333333 256v85.333333a42.666667 42.666667 0 0 0 85.333334 CARDINAL 0V256H213.333333zM170.666667 213.333333h170.666666v128a85.333333 85.333333 0 1 1-170.666666 0V213.333333zM725.333333 256v85.333333a42.666667 42.666667 0 0 0 85.333334 0V256h-85.333334z m-42.666666-42.666667h170.666666v128a85.333333 85.333333 0 1 1-170.666666 0V213.333333z" fill="#f4ea2a"></path>
          <path d="M298.666667 85.333333h426.666666a42.666667 42.666667 0 0 1 42.666667 42.666667v341.333333a256 256 0 1 1-512 0V128a42.666667 42.666667 0 0 1 42.666667-42.666667z" fill="#f2be45"></path>
          <path d="M512 469.333333l-100.309333 52.736 19.157333-111.701333-81.152-79.104 112.128-16.298667L512 213.333333l50.176 101.632 112.128 16.298667-81.152 79.104 19.157333 111.701333z" fill="#FFF2A0"></path>
        </svg>
      );
    } else if (rank === 2) {
      return (
        <svg className="pff-winner-icon pff-winner-trophy" viewBox="0 0 1024 1024" width="160" height="160">
          <path d="M469.333333 682.666667h85.333334v128h-85.333334zM435.2 810.666667h153.6c4.693333 0 8.533333 3.84 8.533333 8.533333v34.133333h-170.666666v-34.133333c0-4.693333 3.84-8.533333 8.533333-8.533333z" fill="#A9A9A9"></path>
          <path d="M384 853.333333h256a42.666667 42.666667 0 0 1 42.666667 42.666667v42.666667H341.333333v-42.666667a42.666667 42.666667 0 0 1 42.666667-42.666667z" fill="#6e4a32"></path>
          <path d="M213.333333 256v85.333333a42.666667 42.666667 0 0 0 85.333334 0V256H213.333333zM170.666667 213.333333h170.666666v128a85.333333 85.333333 0 1 1-170.666666 0V213.333333zM725.333333 256v85.333333a42.666667 42.666667 0 0 0 85.333334 0V256h-85.333334z m-42.666666-42.666667h170.666666v128a85.333333 85.333333 0 1 1-170.666666 0V213.333333z" fill="#D3D3D3"></path>
          <path d="M298.666667 85.333333h426.666666a42.666667 42.666667 0 0 1 42.666667 42.666667v341.333333a256 256 0 1 1-512 0V128a42.666667 42.666667 0 0 1 42.666667-42.666667z" fill="#C0C0C0"></path>
          <path d="M512 469.333333l-100.309333 52.736 19.157333-111.701333-81.152-79.104 112.128-16.298667L512 213.333333l50.176 101.632 112.128 16.298667-81.152 79.104 19.157333 111.701333z" fill="#FFFFFF"></path>
        </svg>
      );
    } else if (rank === 3) {
      return (
        <svg className="pff-winner-icon pff-winner-trophy" viewBox="0 0 1024 1024" width="160" height="160">
          <path d="M469.333333 682.666667h85.333334v128h-85.333334zM435.2 810.666667h153.6c4.693333 0 8.533333 3.84 8.533333 8.533333v34.133333h-170.666666v-34.133333c0-4.693333 3.84-8.533333 8.533333-8.533333z" fill="#B87333"></path>
          <path d="M384 853.333333h256a42.666667 42.666667 0 0 1 42.666667 42.666667v42.666667H341.333333v-42.666667a42.666667 42.666667 0 0 1 42.666667-42.666667z" fill="#6e4a32"></path>
          <path d="M213.333333 256v85.333333a42.666667 42.666667 0 0 0 85.333334 0V256H213.333333zM170.666667 213.333333h170.666666v128a85.333333 85.333333 0 1 1-170.666666 0V213.333333zM725.333333 256v85.333333a42.666667 42.666667 0 0 0 85.333334 0V256h-85.333334z m-42.666666-42.666667h170.666666v128a85.333333 85.333333 0 1 1-170.666666 0V213.333333z" fill="#E4A362"></path>
          <path d="M298.666667 85.333333h426.666666a42.666667 42.666667 0 0 1 42.666667 42.666667v341.333333a256 256 0 1 1-512 0V128a42.666667 42.666667 0 0 1 42.666667-42.666667z" fill="#CD7F32"></path>
          <path d="M512 469.333333l-100.309333 52.736 19.157333-111.701333-81.152-79.104 112.128-16.298667L512 213.333333l50.176 101.632 112.128 16.298667-81.152 79.104 19.157333 111.701333z" fill="#FFF2A0"></path>
        </svg>
      );
    } else {
      return null;
    }
  };

  const renderParticles = () => {
    return Array.from({ length: 15 }).map((_, i) => (
      <div
        key={i}
        className="pff-winner-particle"
        style={{
          left: `${Math.random() * 100}%`,
          backgroundColor: i % 5 === 0 ? '#ffd700' : i % 5 === 1 ? '#c0c0c0' : i % 5 === 2 ? '#cd7f32' : i % 5 === 3 ? '#ff6b6b' : '#1dd1a1',
          animationDelay: `${Math.random() * 3}s`,
          animationDuration: `${2 + Math.random() * 3}s`
        }}
      ></div>
    ));
  };

  return (
    <>
      <Navbar />
      <div className="pff-container-profile">
        {welcomeMessage && (
          <div className="pff-welcome-message">
            <div className="pff-welcome-message-content">
              <div className="pff-welcome-icon">🎉</div>
              <span>{welcomeMessage}</span>
            </div>
            <div className="pff-confetti-container">
              {Array.from({ length: 20 }).map((_, i) => (
                <div
                  key={i}
                  className={`pff-confetti pff-confetti-${i % 5}`}
                  style={{
                    left: `${Math.random() * 100}%`,
                    animationDelay: `${Math.random() * 3}s`,
                    animationDuration: `${3 + Math.random() * 2}s`,
                  }}
                ></div>
              ))}
            </div>
          </div>
        )}
        <header>
          <div className="pff-profile-header">
            <h1>My Profile</h1>
            <div className="pff-date-switcher">
              <button className="pff-btnProfile">
                <Link to="/edit-profile">
                  <img
                    style={{ marginRight: "8px", marginTop: "6px" }}
                    width="18px"
                    src={edit || "/placeholder.svg"}
                    alt="Edit Profile"
                  />
                </Link>
                Edit
              </button>
            </div>
          </div>
        </header>

        <div className="pff-main">
          <div className="pff-left-column">
            <div className="pff-profile-card">
              <div className="pff-card-white">
                <button className="pff-mail"></button>
                <div className="pff-profile-pic">
                  <img src={profilePhotoUrl || "/placeholder.svg"} alt="Profile" />
                </div>
                <div className="pff-bottom">
                  <div className="pff-content">
                    <div style={{ display: "flex" }}>
                      <div>
                        <span className="pff-name">Description</span>
                      </div>
                      <div>
                        <button
                          className="pff-bottom-editdesc pff-name"
                          onClick={() => {
                            setIsEditing(true);
                            setDescriptionError("");
                          }}
                        >
                          {description ? <FaEdit /> : <FaPlus />}
                        </button>
                      </div>
                    </div>
                    {isEditing ? (
                      <input
                        type="text"
                        className="pff-description-input"
                        value={description}
                        onChange={(e) => setDescription(e.target.value)}
                        onBlur={handleSave}
                        placeholder="Enter your description"
                        autoFocus
                      />
                    ) : (
                      <span className="pff-about-me">{description || "No description yet..."}</span>
                    )}
                    {descriptionError && <p className="pff-error-message">{descriptionError}</p>}
                  </div>
                  <div className="pff-bottom-bottom">
                    <h1 className="pff-userrole">{user?.role || "Loading..."}</h1>
                  </div>
                </div>
              </div>
            </div>

            <div className="pff-detailed-info">
              <h3>Detailed Information</h3>
              <ul>
                <li><strong>:</strong> {user?.name || "Loading..."}</li>
                <li><strong>:</strong> {user?.email || "Loading..."}</li>
                <li><strong>:</strong> {user?.phone || "Loading..."}</li>
                <li><strong>:</strong> {user?.address || "Loading..."}</li>
              </ul>
            </div>
          </div>

          <div className="pff-center-column">
            <RoleSpecificProfile user={user} />
          </div>

          <div className="pff-right-column">
            <div className="pff-winner-cards">
              <div
                className={`pff-winner-outlinePage ${
                  gamificationData.rank === 1
                    ? "pff-winner-outlinePage-gold"
                    : gamificationData.rank === 2
                    ? "pff-winner-outlinePage-silver"
                    : gamificationData.rank === 3
                    ? "pff-winner-outlinePage-bronze"
                    : "pff-winner-outlinePage-none"
                }`}
              >
                <div className="pff-winner-particles">{renderParticles()}</div>
                {gamificationData.rank <= 3 && gamificationData.rank > 0 ? getTrophySvg(gamificationData.rank) : null}
                {gamificationError ? (
                  <p className="pff-winner-ranking_number">{gamificationError}</p>
                ) : gamificationData.rank === 0 ? (
                  <p
                    className="pff-no-activity-message"
                    dangerouslySetInnerHTML={{
                      __html:
                        user?.role === "transporter"
                          ? "Join the challenge to see your score!<br />No deliveries completed yet!"
                          : user?.role === "student" || user?.role === "ong"
                          ? "Join the challenge to see your score!<br />No requests posted yet!"
                          : user?.role === "restaurant" || user?.role === "supermarket" || user?.role === "personaldonor"
                          ? "Join the challenge to see your score!<br />No donations made yet!"
                          : "Gamification not applicable",
                    }}
                  />
                ) : (                
                  <p className="pff-winner-ranking_number">
                    {gamificationData.rank !== null ? gamificationData.rank : "N/A"}
                    <span className="pff-winner-ranking_word">
                      {gamificationData.rank === 1
                        ? "st"
                        : gamificationData.rank === 2
                        ? "nd"
                        : gamificationData.rank === 3
                        ? "rd"
                        : "th"}
                    </span>
                  </p>
                )}
                <div className="pff-winner-splitLine"></div>
                <svg className="pff-winner-icon pff-winner-userAvatar" viewBox="0 0 1024 1024" width="25" height="25">
                  <path
                    d="M512 0C228.693 0 0 228.693 0 512s228.693 512 512 512 512-228.693 512-512S795.307 0 512 0z m0 69.973c244.053 0 442.027 197.973 442.027 442.027 0 87.04-25.6 168.96-69.973 237.227-73.387-78.507-170.667-133.12-281.6-151.893 69.973-34.133 119.467-105.813 119.467-187.733 0-116.053-93.867-209.92-209.92-209.92s-209.92 93.867-209.92 209.92c0 83.627 47.787 155.307 119.467 187.733-110.933 20.48-208.213 75.093-281.6 153.6-44.373-68.267-69.973-150.187-69.973-238.933 0-244.053 197.973-442.027-442.027 442.027-442.027z"
                    fill="#8a8a8a"
                  ></path>
                </svg>
                <p className="pff-winner-userName">{user?.name || "Loading..."}</p>
              </div>
              <div className="pff-winner-detailPage">
                {getMedalSvg(gamificationData.rank)}
                <div className="pff-winner-gradesBox">
                  <svg className="pff-winner-icon pff-winner-gradesIcon" viewBox="0 0 1024 1024" width="60" height="60">
                    <path d="M382.6 805H242.2c-6.7 0-12.2-5.5-12.2-12.2V434.3c0-6.7 5.5-12.2 12.2-12.2h140.4c6.7 0 12.2 5.5 12.2 12.2v358.6c0 6.6-5.4 12.1-12.2 12.1z" fill="#ea9518"></path>
                    <path d="M591.1 805H450.7c-6.7 0-12.2-5.5-12.2-12.2V254.9c0-6.7 5.5-12.2 12.2-12.2h140.4c6.7 0 12.2 5.5 12.2 12.2v537.9c0 6.7-5.5 12.2-12.2 12.2z" fill="#f2be45"></path>
                    <path d="M804.4 805H663.9c-6.7 0-12.2-5.5-12.2-12.2v-281c0-6.7 5.5-12.2 12.2-12.2h140.4c6.7 0 12.2 5.5 12.2 12.2v281c0.1 6.7-5.4 12.2-12.1 12.2z" fill="#ea9518"></path>
                  </svg>
                  <p className="pff-winner-gradesBoxLabel">
                    {user?.role === "transporter"
                      ? "DELIVERY SCORE"
                      : user?.role === "student" || user?.role === "ong"
                      ? "REQUEST SCORE"
                      : "DONATION SCORE"}
                  </p>
                  <p className="pff-winner-gradesBoxNum">{gamificationData.score || 0}</p>
                </div>
              </div>
              
            </div>
            {(gamificationData.rank === 1 || gamificationData.rank === 2 || gamificationData.rank === 3)  && ['restaurant', 'supermarket', 'personaldonor'].includes(user?.role) && (
  <div className="pff-ad-upload-section" style={{ marginTop: '20px', textAlign: 'center' }}>
    <p style={{ color: '#1a7a1a', fontWeight: '600', marginBottom: '10px' }}>
    🎉 Congratulations! As a top {gamificationData.rank} donor, you can upload your advertisement!
    </p>
    <form onSubmit={handleAdUpload} encType="multipart/form-data">
      <input
        type="file"
        accept="image/*"
        onChange={handleAdImageChange}
        style={{ marginBottom: '10px' }}
      />
      <button
        type="submit"
        style={{
          padding: '8px 16px',
          background: '#228b22',
          color: 'white',
          border: 'none',
          borderRadius: '5px',
          cursor: 'pointer',
        }}
      >
        Upload Advertisement
      </button>
    </form>
    {adUploadError && <p style={{ color: 'red', marginTop: '10px' }}>{adUploadError}</p>}
    {adUploadSuccess && <p style={{ color: '#1a7a1a', marginTop: '10px' }}>{adUploadSuccess}</p>}
  </div>
)}
            
<div className="pff-inbox-section">
  <h3>Feedbacks</h3>
  <div className="pff-feedback-container">
    {feedbacks.length > 0 ? (
      <div className="pff-feedback-scroll">
        {feedbacks.map((feedback) => (
          <div className="pff-feedback-card" key={feedback._id}>
            <div className="pff-message">
              <div className="pff-message-header pff-feedback-tip">
              <Link  to={`/ViewProfile/${feedback.reviewer?._id}`}>

                <img
                  src={feedback.reviewer?.photo ? `http://localhost:3000/${feedback.reviewer.photo}` : pdp}
                  alt="Avatar"
                />
                </Link>
                <div>
                <Link style={{textDecoration: 'none'}} to={`/ViewProfile/${feedback.reviewer?._id}`}><strong>{feedback.reviewer?.name || "Anonymous"}</strong></Link>
                
                 
                  <StarRating rating={feedback.rating} interactive={false} />
                  <p>{feedback.comment}</p>
                </div> 
              </div>
              <span className="pff-time">{new Date(feedback.createdAt).toLocaleString()}</span>
            </div>
          </div>
        ))}
      </div>
    ) : (
      <p>No feedback yet.</p>
    )}
  </div>
</div>
          </div>
        </div>
      </div>
      <Footer />
    </>
  );
};

export default Profile;
</file>

<file path="sustainafood-backend/controllers/deliveryController.js">
const Delivery = require('../models/Delivery');
const User = require('../models/User');
const DonationTransaction = require('../models/DonationTransaction');
const Donation = require('../models/Donation');
const { createNotification } = require('./notificationController');

// Valid delivery statuses
const VALID_STATUSES = ['pending', 'accepted', 'picked_up', 'in_progress', 'delivered', 'failed'];

exports.createDelivery = async (req, res) => {
  try {
    const { donationTransaction, pickupAddress, deliveryAddress } = req.body;
    if (!donationTransaction || !pickupAddress || !deliveryAddress) {
      return res.status(400).json({ message: 'Donation transaction ID, pickupAddress, and deliveryAddress are required' });
    }

    const transaction = await DonationTransaction.findById(donationTransaction)
      .populate('donor')
      .populate('recipient');
    if (!transaction) {
      return res.status(404).json({ message: 'Donation transaction not found' });
    }

    const delivery = new Delivery({
      donationTransaction,
      pickupAddress,
      deliveryAddress,
      status: 'pending',
    });

    await delivery.save();

    // Notify donor and recipient
    await createNotification({
      body: {
        sender: transaction.recipient._id,
        receiver: transaction.donor._id,
        message: `Une livraison a été créée pour votre don. Statut : En attente.`,
      },
    }, { status: () => ({ json: () => {} }) });

    await createNotification({
      body: {
        sender: transaction.donor._id,
        receiver: transaction.recipient._id,
        message: `Votre demande est en cours de livraison. Statut : En attente.`,
      },
    }, { status: () => ({ json: () => {} }) });

    res.status(201).json({ data: delivery });
  } catch (error) {
    res.status(500).json({ message: 'Erreur lors de la création de la livraison', error: error.message });
  }
};

exports.assignTransporter = async (req, res) => {
  try {
    const { deliveryId } = req.params;
    const { transporterId, force = false } = req.body;

    const transporter = await User.findById(transporterId).select('role');
    if (!transporter || transporter.role !== 'transporter') {
      return res.status(400).json({ message: 'Invalid transporter' });
    }

    const delivery = await Delivery.findById(deliveryId)
      .populate('donationTransaction');
    if (!delivery) {
      return res.status(404).json({ message: 'Delivery not found' });
    }

    if (delivery.status !== 'pending') {
      return res.status(400).json({ message: 'Delivery must be in "pending" status to assign a transporter' });
    }

    if (delivery.transporter && !force) {
      return res.status(400).json({ 
        message: 'Transporter already assigned. Use force=true to overwrite.' 
      });
    }

    delivery.transporter = transporterId;
    await delivery.save();

    const transaction = await DonationTransaction.findById(delivery.donationTransaction._id)
      .populate('donor')
      .populate('recipient');

    // Notify the transporter
    await createNotification({
      body: {
        sender: transaction.recipient._id,
        receiver: transporterId,
        message: `Vous avez été assigné à une livraison. Récupérez à ${delivery.pickupAddress} et livrez à ${delivery.deliveryAddress}.`,
      },
    }, { status: () => ({ json: () => {} }) });

    // Notify donor and recipient
    await createNotification({
      body: {
        sender: transporterId,
        receiver: transaction.donor._id,
        message: `Un chauffeur a été assigné pour votre don. Statut : En attente.`,
      },
    }, { status: () => ({ json: () => {} }) });

    await createNotification({
      body: {
        sender: transporterId,
        receiver: transaction.recipient._id,
        message: `Un chauffeur a été assigné pour votre demande. Statut : En attente.`,
      },
    }, { status: () => ({ json: () => {} }) });

    res.status(200).json({ data: delivery });
  } catch (error) {
    res.status(500).json({ message: 'Erreur lors de l\'assignation du transporteur', error: error.message });
  }
};

exports.assignNearestTransporter = async (req, res) => {
  try {
    const { deliveryId } = req.params;

    const delivery = await Delivery.findById(deliveryId)
      .populate({
        path: 'donationTransaction',
        populate: { path: 'donation' },
      });
    if (!delivery) {
      return res.status(404).json({ message: 'Delivery not found' });
    }

    if (delivery.status !== 'pending') {
      return res.status(400).json({ message: 'Delivery must be in "pending" status to assign a transporter' });
    }

    if (delivery.transporter) {
      return res.status(400).json({ message: 'Transporter already assigned' });
    }

    const pickupLocation = delivery.donationTransaction.donation.location;
    if (!pickupLocation || !pickupLocation.coordinates) {
      return res.status(400).json({ message: 'Donation location is missing' });
    }

    const transporters = await User.find({ role: 'transporter', isAvailable: true });
    let closestTransporter = null;
    let minDistance = Infinity;

    const calculateDistance = (loc1, loc2) => {
      const [lng1, lat1] = loc1.coordinates;
      const [lng2, lat2] = loc2.coordinates;
      const R = 6371e3; // Earth's radius in meters
      const φ1 = (lat1 * Math.PI) / 180;
      const φ2 = (lat2 * Math.PI) / 180;
      const Δφ = ((lat2 - lat1) * Math.PI) / 180;
      const Δλ = ((lng2 - lng1) * Math.PI) / 180;
      const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +
                Math.cos(φ1) * Math.cos(φ2) *
                Math.sin(Δλ / 2) * Math.sin(Δλ / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      return R * c; // Distance in meters
    };

    for (const transporter of transporters) {
      if (transporter.currentLocation && transporter.currentLocation.coordinates[0] !== 0) {
        const distance = calculateDistance(pickupLocation, transporter.currentLocation);
        if (distance < minDistance) {
          minDistance = distance;
          closestTransporter = transporter;
        }
      }
    }

    if (!closestTransporter) {
      return res.status(404).json({ message: 'Aucun chauffeur disponible à proximité' });
    }

    delivery.transporter = closestTransporter._id;
    await delivery.save();

    await User.findByIdAndUpdate(closestTransporter._id, { isAvailable: false });

    const transaction = await DonationTransaction.findById(delivery.donationTransaction._id)
      .populate('donor')
      .populate('recipient');

    // Notify the transporter
    await createNotification({
      body: {
        sender: transaction.recipient._id,
        receiver: closestTransporter._id,
        message: `Vous avez été assigné à une livraison. Récupérez à ${delivery.pickupAddress} et livrez à ${delivery.deliveryAddress}.`,
      },
    }, { status: () => ({ json: () => {} }) });

    // Notify donor and recipient
    await createNotification({
      body: {
        sender: closestTransporter._id,
        receiver: transaction.donor._id,
        message: `Un chauffeur a été assigné pour votre don. Statut : En attente.`,
      },
    }, { status: () => ({ json: () => {} }) });

    await createNotification({
      body: {
        sender: closestTransporter._id,
        receiver: transaction.recipient._id,
        message: `Un chauffeur a été assigné pour votre demande. Statut : En attente.`,
      },
    }, { status: () => ({ json: () => {} }) });

    res.status(200).json({ data: delivery });
  } catch (error) {
    res.status(500).json({ message: 'Erreur lors de l\'assignation du transporteur', error: error.message });
  }
};

exports.getTransporterDeliveries = async (req, res) => {
  try {
    const { transporterId } = req.params;
    
    const deliveries = await Delivery.find({ transporter: transporterId })
      .populate({
        path: 'donationTransaction',
        select: 'donation requestNeed',
        populate: { 
          path: 'donation', 
          select: 'title donor category' 
        },
      });

    const validDeliveries = deliveries.filter(d => d.donationTransaction);
    if (validDeliveries.length < deliveries.length) {
      console.warn(`Found ${deliveries.length - validDeliveries.length} deliveries with missing donationTransaction`);
    }

    res.status(200).json({ data: validDeliveries || [] });
  } catch (error) {
    res.status(500).json({ message: 'Erreur serveur', error: error.message });
  }
};

exports.updateDeliveryStatus = async (req, res) => {
  try {
    const { deliveryId } = req.params;
    const { status } = req.body;

    if (!VALID_STATUSES.includes(status)) {
      return res.status(400).json({ 
        message: `Invalid status. Must be one of: ${VALID_STATUSES.join(', ')}` 
      });
    }

    const delivery = await Delivery.findById(deliveryId)
      .populate('donationTransaction');
    if (!delivery) {
      return res.status(404).json({ message: 'Delivery not found' });
    }

    const oldStatus = delivery.status;
    delivery.status = status;
    await delivery.save();

    const transaction = await DonationTransaction.findById(delivery.donationTransaction._id)
      .populate('donor')
      .populate('recipient');

    if (status === 'delivered') {
      transaction.status = 'completed';
      await transaction.save();

      const donation = await Donation.findById(transaction.donation);
      donation.status = 'fulfilled';
      await donation.save();

      await User.findByIdAndUpdate(delivery.transporter, { isAvailable: true });
    } else if (status === 'failed') {
      transaction.status = 'rejected';
      await transaction.save();

      await User.findByIdAndUpdate(delivery.transporter, { isAvailable: true });
    }

    const message = `Mise à jour de la livraison : Statut changé de ${oldStatus} à ${status}.`;
    await createNotification({
      body: {
        sender: delivery.transporter,
        receiver: transaction.donor._id,
        message,
      },
    }, { status: () => ({ json: () => {} }) });

    await createNotification({
      body: {
        sender: delivery.transporter,
        receiver: transaction.recipient._id,
        message,
      },
    }, { status: () => ({ json: () => {} }) });

    await createNotification({
      body: {
        sender: transaction.donor._id,
        receiver: delivery.transporter,
        message: `Statut de livraison mis à jour : ${status}.`,
      },
    }, { status: () => ({ json: () => {} }) });

    res.status(200).json({ data: delivery });
  } catch (error) {
    res.status(500).json({ message: 'Erreur lors de la mise à jour du statut', error: error.message });
  }
};

exports.getPendingDeliveries = async (req, res) => {
  try {
    const deliveries = await Delivery.find({ status: 'pending', transporter: null })
      .populate({
        path: 'donationTransaction',
        select: 'donation requestNeed',
        populate: [
          { 
            path: 'donation', 
            select: 'title donor category', 
            populate: { path: 'donor', select: 'name email' } 
          },
          { 
            path: 'requestNeed', 
            select: 'recipient', 
            populate: { path: 'recipient', select: 'name email' } 
          },
        ],
      });

    const validDeliveries = deliveries.filter(d => d.donationTransaction);
    if (validDeliveries.length < deliveries.length) {
      console.warn(`Found ${deliveries.length - validDeliveries.length} deliveries with missing donationTransaction`);
    }

    res.status(200).json({ data: validDeliveries || [] });
  } catch (error) {
    res.status(500).json({ message: 'Erreur serveur', error: error.message });
  }
};

exports.getDeliveriesByTransporter = async (req, res) => {
  try {
    const { transporterId } = req.params;
    const { status } = req.query;

    // Validate transporter
    const transporter = await User.findById(transporterId).select('role');
    if (!transporter || transporter.role !== 'transporter') {
      return res.status(400).json({ message: 'Invalid transporter' });
    }

    // Build query
    const query = { transporter: transporterId };
    if (status && VALID_STATUSES.includes(status)) {
      query.status = status;
    }

    // Fetch deliveries
    const deliveries = await Delivery.find(query)
      .populate({
        path: 'donationTransaction',
        select: 'donation requestNeed status',
        populate: [
          {
            path: 'donation',
            select: 'title donor category location',
            populate: { path: 'donor', select: 'name email' },
          },
          {
            path: 'requestNeed',
            select: 'recipient',
            populate: { path: 'recipient', select: 'name email' },
          },
        ],
      })
      .sort({ createdAt: -1 });

    // Filter out invalid deliveries and log warnings
    const validDeliveries = deliveries.filter(d => d.donationTransaction);
    if (validDeliveries.length < deliveries.length) {
      console.warn(
        `Found ${deliveries.length - validDeliveries.length} deliveries with missing donationTransaction for transporter ${transporterId}`
      );
    }

    // Return response
    res.status(200).json({ data: validDeliveries || [] });
  } catch (error) {
    res.status(500).json({ message: 'Erreur lors de la récupération des livraisons', error: error.message });
  }
};

exports.getAllDeliveries = async (req, res) => {
  try {
    const deliveries = await Delivery.find({})
      .populate({
        path: 'donationTransaction',
        select: 'donation requestNeed status',
        populate: [
          {
            path: 'donation',
            select: 'title donor category location',
            populate: { path: 'donor', select: 'name email' },
          },
          {
            path: 'requestNeed',
            select: 'recipient',
            populate: { path: 'recipient', select: 'name email' },
          },
          { path: 'allocatedProducts.product' },
           { path: 'allocatedMeals.meal' },
        ],
      })
      .populate({
        path: 'transporter',
        select: 'name email', // Sélectionner les champs nécessaires pour le transporteur
      })
      .sort({ createdAt: -1 });

    // Return response
    res.status(200).json({ data: deliveries || [] });
  } catch (error) {
    res.status(500).json({ message: 'Erreur lors de la récupération des livraisons', error: error.message });
  }
};
// controllers/deliveryController.js
exports.getDeliveriesById = async (req, res) => {
  try {
    const { deliveryId } = req.params;
    const delivery = await Delivery.findById(deliveryId)
      .populate({
        path: 'donationTransaction',
        select: 'donation requestNeed status',
        populate: [
          {
            path: 'donation',
            select: 'title donor category location',
            populate: { path: 'donor', select: 'name email isAvailable isActive' },
          },
          {
            path: 'requestNeed',
            select: 'recipient',
            populate: { path: 'recipient', select: 'name email isAvailable isActive' },
          },
        ],
      })
      .populate({
        path: 'transporter',
        select: 'name email', // Select the fields you want from the User model
      });

    if (!delivery) {        
      return res.status(404).json({ message: 'Livraison introuvable' });
    }

    res.status(200).json({ data: delivery });    
  } catch (error) {     
    res.status(500).json({ message: 'Erreur lors de la récupération de la livraison', error: error.message });
  }
};

// Updated endpoint: Accept or Refuse Delivery
exports.acceptOrRefuseDelivery = async (req, res) => {
  try {
    const { deliveryId } = req.params;
    const { action, transporterId } = req.body;

    // Validate inputs
    if (!transporterId) {
      throw new Error('Transporter ID is required');
    }
    if (!['accept', 'refuse'].includes(action)) {
      throw new Error('Invalid action. Must be "accept" or "refuse".');
    }

    // Fetch the delivery
    const delivery = await Delivery.findById(deliveryId).populate({
      path: 'donationTransaction',
      populate: {
        path: 'donation',
        select: 'location',
      },
    });
    if (!delivery) {
      throw new Error('Delivery not found');
    }

    // Validate transporter assignment
    if (!delivery.transporter || delivery.transporter.toString() !== transporterId.toString()) {
      throw new Error('You are not assigned to this delivery');
    }

    // Handle action: accept or refuse
    try {
      if (action === 'accept') {
        delivery.status = 'accepted';
        await delivery.save();

        if (!delivery.donationTransaction) {
          throw new Error('Delivery is missing associated donation transaction');
        }

        const transaction = await DonationTransaction.findById(delivery.donationTransaction._id)
          .populate('donor')
          .populate('recipient');

        if (!transaction) {
          throw new Error('Associated donation transaction not found');
        }

        // Notify donor and recipient
        await createNotification({
          body: {
            sender: transporterId,
            receiver: transaction.donor._id,
            message: `Transporter has accepted the delivery from ${delivery.pickupAddress} to ${delivery.deliveryAddress}.`,
          },
        }, { status: () => ({ json: () => {} }) });

        await createNotification({
          body: {
            sender: transporterId,
            receiver: transaction.recipient._id,
            message: `Transporter has accepted your delivery request.`,
          },
        }, { status: () => ({ json: () => {} }) });

        return res.status(200).json({ data: delivery });
      }

      // Handle refuse action
      // Clear current transporter and set status to pending
      delivery.transporter = null;
      delivery.status = 'pending';
      await delivery.save();

      // Make current transporter available again
      const transporter = await User.findById(transporterId);
      if (!transporter) {
        throw new Error('Transporter not found');
      }
      await User.findByIdAndUpdate(transporterId, { isAvailable: true });

      // Validate donationTransaction
      if (!delivery.donationTransaction) {
        throw new Error('Delivery is missing associated donation transaction');
      }

      // Use pickupCoordinates from Delivery document
      const pickupLocation = delivery.pickupCoordinates || delivery.donationTransaction.donation?.location;
      if (!pickupLocation || !pickupLocation.coordinates || pickupLocation.coordinates[0] === 0) {
        const transaction = await DeliveryTransaction.findById(delivery.donationTransaction._id)
          .populate('donor')
          .populate('recipient');

        await createNotification({
          body: {
            sender: transporterId,
            receiver: transaction.donor._id,
            message: `The assigned transporter refused the delivery. Awaiting a new transporter.`,
          },
        }, { status: () => ({ json: () => {} }) });

        await createNotification({
          body: {
            sender: transporterId,
            receiver: transaction.recipient._id,
            message: `The assigned transporter refused the delivery. Awaiting a new transporter.`,
          },
        }, { status: () => ({ json: () => {} }) });

        return res.status(200).json({
          message: 'Delivery refused, but no valid location available to reassign. Awaiting a new transporter.',
        });
      }

      // Find available transporters
      const transporters = await User.find({
        role: 'transporter',
        isAvailable: true,
        _id: { $ne: transporterId },
      });

      console.log(`Found ${transporters.length} available transporters`);

      let closestTransporter = null;
      let minDistance = Infinity;

      const calculateDistance = (loc1, loc2) => {
        const [lng1, lat1] = loc1.coordinates;
        const [lng2, lat2] = loc2.coordinates;
        const R = 6371e3; // Earth's radius in meters
        const φ1 = (lat1 * Math.PI) / 180;
        const φ2 = (lat2 * Math.PI) / 180;
        const Δφ = ((lat2 - lat1) * Math.PI) / 180;
        const Δλ = ((lng2 - lng1) * Math.PI) / 180;
        const a =
          Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +
          Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c; // Distance in meters
      };

      for (const transporter of transporters) {
        if (
          transporter.location &&
          transporter.location.coordinates &&
          transporter.location.coordinates.length === 2 &&
          transporter.location.coordinates[0] !== 0 &&
          transporter.location.coordinates[1] !== 0
        ) {
          const distance = calculateDistance(pickupLocation, transporter.location);
          console.log(`Transporter ${transporter._id}: Distance = ${distance} meters`);
          if (distance < minDistance) {
            minDistance = distance;
            closestTransporter = transporter;
          }
        } else {
          console.log(`Transporter ${transporter._id} skipped: Invalid or missing location`);
        }
      }

      // Handle reassignment if a closest transporter is found
      if (!closestTransporter) {
        const transaction = await DonationTransaction.findById(delivery.donationTransaction._id)
          .populate('donor')
          .populate('recipient');

        await createNotification({
          body: {
            sender: transporterId,
            receiver: transaction.donor._id,
            message: `The assigned transporter refused the delivery. Awaiting a new transporter.`,
          },
        }, { status: () => ({ json: () => {} }) });

        await createNotification({
          body: {
            sender: transporterId,
            receiver: transaction.recipient._id,
            message: `The assigned transporter refused the delivery. Awaiting a new transporter.`,
          },
        }, { status: () => ({ json: () => {} }) });

        return res.status(200).json({
          message: 'Delivery refused, no other transporters available. Awaiting reassignment.',
        });
      }

      // Re-validate delivery existence before reassignment
      const revalidatedDelivery = await Delivery.findById(deliveryId);
      if (!revalidatedDelivery) {
        throw new Error('Delivery no longer exists for reassignment');
      }

      // Validate closestTransporter
      if (!closestTransporter._id) {
        throw new Error('Closest transporter ID is undefined');
      }

      // Use assignTransporter to handle reassignment
      const assignReq = {
        params: { deliveryId },
        body: { transporterId: closestTransporter._id, force: true },
      };

      console.log('Calling assignTransporter with:', assignReq);
      const result = await exports.assignTransporterinaccept(assignReq);
      console.log('assignTransporter result:', result);

      // Validate result
      if (!result || !result.data) {
        throw new Error('assignTransporter failed: Invalid result');
      }

      // Update transporter availability
      //console.log(`Updating availability for transporter ${closestTransporter._id}`);
      //await User.findByIdAndUpdate(closestTransporter._id, { isAvailable: false });

      // Send success response
      return res.status(200).json({
        message: 'Delivery refused and reassigned to a new transporter',
        data: result.data,
      });
    } catch (innerError) {
      console.error('Inner error in acceptOrRefuseDelivery:', innerError);
      throw new Error(`Failed to process ${action} action: ${innerError.message}`);
    }
  } catch (error) {
    console.error('Error in acceptOrRefuseDelivery:', error);
    const statusCode = error.message.includes('Transporter ID is required') ? 400 :
      error.message.includes('Invalid action') ? 400 :
      error.message.includes('Delivery not found') ? 404 :
      error.message.includes('You are not assigned') ? 403 :
      error.message.includes('Transporter not found') ? 404 :
      error.message.includes('Delivery is missing') ? 500 :
      error.message.includes('Associated donation transaction') ? 404 :
      error.message.includes('Delivery no longer exists') ? 404 :
      error.message.includes('Closest transporter ID is undefined') ? 500 :
      error.message.includes('assignTransporter failed') ? 500 :
      error.message.includes('Failed to process') ? 500 : 500;

    res.status(statusCode).json({ message: 'Error processing delivery action', error: error.message });
  }
};
exports.assignTransporterinaccept = async (req) => {
  try {
    const { deliveryId } = req.params;
    const { transporterId, force } = req.body;

    if (!transporterId) {
      throw new Error('Transporter ID is required');
    }

    const delivery = await Delivery.findById(deliveryId);
    if (!delivery) {
      throw new Error('Delivery not found');
    }

    if (delivery.transporter && !force) {
      throw new Error('Delivery already assigned to a transporter. Use force to reassign.');
    }

    const transporter = await User.findById(transporterId);
    if (!transporter || transporter.role !== 'transporter') {
      throw new Error('Transporter not found or invalid role');
    }

    delivery.transporter = transporterId;
    delivery.status = 'pending';
    await delivery.save();

    // Notify donor and recipient about the new assignment
    if (delivery.donationTransaction) {
      const transaction = await DonationTransaction.findById(delivery.donationTransaction._id)
        .populate('donor')
        .populate('recipient');

      if (transaction) {
        await createNotification({
          body: {
            sender: transporterId,
            receiver: transaction.donor._id,
            message: `A new transporter has been assigned to your donation. Status: Pending.`,
          },
        }, { status: () => ({ json: () => {} }) });

        await createNotification({
          body: {
            sender: transporterId,
            receiver: transaction.recipient._id,
            message: `A new transporter has been assigned to your request. Status: Pending.`,
          },
        }, { status: () => ({ json: () => {} }) });
      }
    }

    return { code: 200, data: delivery };
  } catch (error) {
    throw new Error(`assignTransporter failed: ${error.message}`);
  }
};

// New endpoint: Start Journey
exports.startJourney = async (req, res) => {
  try {
    const { deliveryId } = req.params;
    const { transporterId } = req.body;

    // Validate transporterId
    if (!transporterId) {
      return res.status(400).json({ message: 'Transporter ID is required' });
    }

    const transporter = await User.findById(transporterId).select('role');
    if (!transporter || transporter.role !== 'transporter') {
      return res.status(400).json({ message: 'Invalid transporter' });
    }

    const delivery = await Delivery.findById(deliveryId).populate('donationTransaction');
    if (!delivery) {
      return res.status(404).json({ message: 'Delivery not found' });
    }

    if (delivery.transporter.toString() !== transporterId.toString()) {
      return res.status(403).json({ message: 'You are not assigned to this delivery' });
    }

    if (delivery.status !== 'accepted') {
      return res.status(400).json({ message: 'Delivery must be accepted before starting the journey' });
    }

    // Check donor and recipient availability and active status
    const transaction = await DonationTransaction.findById(delivery.donationTransaction._id)
      .populate('donor')
      .populate('recipient');

    if (!transaction.donor || !transaction.donor.isAvailable || !transaction.donor.isActive) {
      return res.status(400).json({ message: 'Donor is not available or inactive. Cannot start journey.' });
    }

    if (!transaction.recipient || !transaction.recipient.isAvailable || !transaction.recipient.isActive) {
      return res.status(400).json({ message: 'Recipient is not available or inactive. Cannot start journey.' });
    }

    delivery.status = 'in_progress';
    await delivery.save();

    // Notify donor and recipient
    await createNotification({
      body: {
        sender: transporterId,
        receiver: transaction.donor._id,
        message: `The transporter has started the delivery journey from ${delivery.pickupAddress} to ${delivery.deliveryAddress}.`,
      },
    }, { status: () => ({ json: () => {} }) });

    await createNotification({
      body: {
        sender: transporterId,
        receiver: transaction.recipient._id,
        message: `The transporter has started your delivery journey.`,
      },
    }, { status: () => ({ json: () => {} }) });

    res.status(200).json({ data: delivery });
  } catch (error) {
    res.status(500).json({ message: 'Error starting journey', error: error.message });
  }
};
// Constants

// Shared function to fetch deliveries
const fetchDeliveries = async (query, transactionIds) => {
  return await Delivery.find({ donationTransaction: { $in: transactionIds }, ...query })
    .populate({
      path: 'donationTransaction',
      select: 'donation requestNeed status allocatedProducts.product allocatedProducts.quantity allocatedMeals.meal allocatedMeals.quantity',
      populate: [
        {
          path: 'donation',
          select: 'title donor category location',
          populate: { path: 'donor', select: 'name email' },
        },
        {
          path: 'requestNeed',
          select: 'recipient',
          populate: { path: 'recipient', select: 'name email' },
        },
        {
          path: 'allocatedProducts.product',
          select: 'name', // Assuming 'name' is the field in your Product schema
        },
        {
          path: 'allocatedMeals.meal',
          select: 'mealName', // Assuming 'mealName' is the field in your Meal schema
        },
      ],
    })
    .populate({
      path: 'transporter',
      select: 'name email photo phone',
    })
    .sort({ createdAt: -1 });
};

// Get Deliveries by Donor ID
exports.getDeliveriesByDonorId = async (req, res) => {
  try {
    const { donorId } = req.params;
    const { status } = req.query;

    // Validate donor
    const donor = await User.findById(donorId);
    if (!donor) {
      return res.status(404).json({ message: 'Donor not found' });
    }

    // Find donation transactions
    const transactions = await DonationTransaction.find({ donor: donorId }).select('_id');
    if (!transactions.length) {
      return res.status(200).json({ data: [], message: 'No donation transactions found for this donor' });
    }

    // Build query
    const query = status && VALID_STATUSES.includes(status) ? { status } : {};

    // Fetch deliveries
    const deliveries = await fetchDeliveries(query, transactions.map(t => t._id));

    // Validate deliveries
    const validDeliveries = deliveries.filter(d => d.donationTransaction);
    if (validDeliveries.length < deliveries.length) {
      console.warn(
        `Found ${deliveries.length - validDeliveries.length} deliveries with missing donationTransaction for donor ${donorId}`
      );
    }

    return res.status(200).json({ data: validDeliveries, message: 'Deliveries retrieved successfully' });
  } catch (error) {
    console.error('Error fetching deliveries by donor:', error);
    return res.status(500).json({ message: 'Error retrieving deliveries', error: error.message });
  }
};

// Get Deliveries by Recipient ID
exports.getDeliveriesByRecipientId = async (req, res) => {
  try {
    const { recipientId } = req.params;
    const { status } = req.query;

    // Validate recipient
    const recipient = await User.findById(recipientId);
    if (!recipient) {
      return res.status(404).json({ message: 'Recipient not found' });
    }

    // Find donation transactions
    const transactions = await DonationTransaction.find({ recipient: recipientId }).select('_id');
    if (!transactions.length) {
      return res.status(200).json({ data: [], message: 'No donation transactions found for this recipient' });
    }

    // Build query
    const query = status && VALID_STATUSES.includes(status) ? { status } : {};

    // Fetch deliveries
    const deliveries = await fetchDeliveries(query, transactions.map(t => t._id));

    // Validate deliveries
    const validDeliveries = deliveries.filter(d => d.donationTransaction);
    if (validDeliveries.length < deliveries.length) {
      console.warn(
        `Found ${deliveries.length - validDeliveries.length} deliveries with missing donationTransaction for recipient ${recipientId}`
      );
    }

    return res.status(200).json({ data: validDeliveries, message: 'Deliveries retrieved successfully' });
  } catch (error) {
    console.error('Error fetching deliveries by recipient:', error);
    return res.status(500).json({ message: 'Error retrieving deliveries', error: error.message });
  }
};
</file>

<file path="sustainafood-frontend/src/components/DeleveryMap.jsx">
import React, { useState, useEffect, useRef } from 'react';
import maplibregl from 'maplibre-gl';
import 'maplibre-gl/dist/maplibre-gl.css';
import '../assets/styles/LocationPicker.css';
import styled from 'styled-components';
import { IoClose } from 'react-icons/io5';
import { getUserById } from '../api/userService';
import { useAuth } from '../contexts/AuthContext';

const RouteInfoPanel = styled.div`
  position: absolute;
  top: 10px;
  left: 10px;
  background: rgba(255, 255, 255, 0.9);
  padding: 15px;
  border-radius: 8px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
  font-size: 14px;
  color: #333;
  z-index: 1000;
  max-width: 320px;
`;

const RouteLabel = styled.p`
  margin: 5px 0;
  display: flex;
  align-items: center;
`;

const RouteColor = styled.span`
  display: inline-block;
  width: 12px;
  height: 12px;
  border-radius: 2px;
  margin-right: 8px;
`;

const ErrorMessage = styled.p`
  color: #d32f2f;
  font-weight: bold;
  margin: 5px 0;
`;

const CloseButton = styled.button`
  position: absolute;
  top: 10px;
  right: 10px;
  background: #ff4d4f;
  color: white;
  border: none;
  border-radius: 50%;
  width: 30px;
  height: 30px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 1000;
  transition: background 0.3s;

  &:hover {
    background: #d9363e;
  }
`;

const DeliveryMap = ({
  isOpen,
  onClose,
  pickupCoordinates,
  deliveryCoordinates,
  transporterCoordinates,
  donorName,
  recipientName,
  transporterName,
  vehicleType: propVehicleType = 'Car',
}) => {
  const mapContainer = useRef(null);
  const map = useRef(null);
  const transporterMarker = useRef(null);
  const transporterPinMarker = useRef(null);
  const [optimizedRoute, setOptimizedRoute] = useState(null);
  const [totalOptimizedDuration, setTotalOptimizedDuration] = useState(0);
  const [totalAIPredictedDuration, setTotalAIPredictedDuration] = useState(0);
  const [totalDistance, setTotalDistance] = useState(0);
  const [mapLoaded, setMapLoaded] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const [currentTransporterLocation, setCurrentTransporterLocation] = useState(transporterCoordinates);
  const [vehicleType, setVehicleType] = useState(propVehicleType);
  const [weather, setWeather] = useState('Clear'); // Default weather
  const { user: authUser } = useAuth();

  // Fetch vehicleType from user and normalize it
  useEffect(() => {
    const fetchUserVehicleType = async () => {
      if (!authUser || (!authUser._id && !authUser.id)) {
        console.warn('No authenticated user found');
        return;
      }
      try {
        const userId = authUser._id || authUser.id;
        const response = await getUserById(userId);
        let fetchedVehicleType = response.data.vehiculeType || 'Car';
        // Normalize vehicleType to match backend expectations
        const vehicleTypeMap = {
          'motorbike': 'Motorcycle',
          'bicycle': 'Bicycle',
          'car': 'Car',
          'van': 'Van',
          'truck': 'Truck',
          'scooter': 'Scooter'
        };
        fetchedVehicleType = vehicleTypeMap[fetchedVehicleType.toLowerCase()] || 'Car';
        console.log("Fetched vehicleType:", fetchedVehicleType);
        setVehicleType(fetchedVehicleType);
      } catch (err) {
        console.error("Error fetching user vehicle type:", err);
        setVehicleType('Car'); // Fallback to default
      }
    };

    fetchUserVehicleType();
  }, [authUser]);

  // Fetch weather data (simulated or via API)
// Inside DeliveryMap component
useEffect(() => {
  const fetchWeather = async () => {
    if (!currentTransporterLocation?.coordinates) {
      console.warn('No transporter coordinates available for weather fetch');
      setWeather('Clear'); // Fallback
      return;
    }

    const [lon, lat] = currentTransporterLocation.coordinates;
    const apiKey = 'ffea9f06eda3a4829ea41d94ef65d594'; // Your API key
    const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`;

    try {
      const response = await fetch(url);
      if (!response.ok) {
        const errorData = await response.json();
        console.error('Weather API error:', errorData);
        setWeather('Clear'); // Fallback
        return;
      }

      const data = await response.json();
      const weatherCondition = data.weather[0].main; // e.g., "Clear", "Clouds", "Rain"
      console.log('Weather data:', data);

      // Normalize weather condition to match your application's expectations
      const weatherMap = {
        'Clear': 'Clear',
        'Clouds': 'Clouds',
        'Rain': 'Rain',
        'Drizzle': 'Rain',
        'Thunderstorm': 'Rain',
        'Snow': 'Rain',
        'Mist': 'Clouds',
        'Fog': 'Clouds',
        // Add more mappings as needed
      };

      const normalizedWeather = weatherMap[weatherCondition] || 'Clear';
      setWeather(normalizedWeather);
    } catch (err) {
      console.error('Error fetching weather:', err);
      setWeather('Clear'); // Fallback
    }
  };

  fetchWeather();
}, [currentTransporterLocation]);

  // Format duration in seconds to a readable string
  const formatDuration = (seconds) => {
    if (!seconds || isNaN(seconds) || seconds < 0) {
      console.warn('Invalid duration:', seconds);
      return 'Unknown';
    }
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = Math.floor(seconds % 60);
    if (hours > 0) return `${hours}h ${minutes}m`;
    if (minutes > 0) return `${minutes} min`;
    return `${secs} sec`;
  };

  // Format distance in kilometers to a readable string
  const formatDistance = (km) => {
    if (!km || isNaN(km) || km < 0) {
      console.warn('Invalid distance:', km);
      return 'Unknown';
    }
    return `${km.toFixed(2)} km`;
  };

  // Fetch AI-predicted duration from Flask backend with retry logic
  const fetchAIPredictedDuration = async (distance, osrmDuration, hour, weather, vehicleType, retries = 2) => {
    console.log('Fetching AI-predicted duration with:', { distance, osrmDuration, hour, weather, vehicleType });
    for (let attempt = 1; attempt <= retries + 1; attempt++) {
      try {
        const response = await fetch('http://localhost:5000/predict_duration', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            distance,
            osrmDuration,
            hour,
            weather,
            vehicleType,
          }),
        });

        if (!response.ok) {
          const errorData = await response.json();
          console.error(`AI prediction attempt ${attempt} failed:`, errorData);
          if (attempt === retries + 1) {
            setErrorMessage(`Failed to fetch AI prediction: ${errorData.error || 'Unknown error'}`);
            return null;
          }
          continue;
        }

        const data = await response.json();
        console.log('AI Prediction Response:', data);
        return data.predictedDuration;
      } catch (error) {
        console.error(`Error fetching AI-predicted duration (attempt ${attempt}):`, error);
        if (attempt === retries + 1) {
          setErrorMessage('Failed to fetch AI-predicted duration from server.');
          return null;
        }
      }
    }
    return null;
  };

  // Fetch route data using OSRM API with vehicle-specific profile
  const fetchRoute = async (coordinates, vehicleType) => {
    if (coordinates.length < 2) {
      console.error('Not enough coordinates for route calculation:', coordinates);
      return null;
    }
    if (coordinates.some(coord => !coord || coord[0] === 0 || coord[1] === 0)) {
      console.error('Invalid coordinates for route calculation:', coordinates);
      return null;
    }

    // Map vehicleType to OSRM profile
    const profileMap = {
      'Car': 'driving',
      'Van': 'driving',
      'Truck': 'driving',
      'Motorcycle': 'moped', // OSRM moped profile as a close approximation
      'Scooter': 'moped',
      'Bicycle': 'cycling',
    };
    const profile = profileMap[vehicleType] || 'driving'; // Default to driving if unmapped

    // Vehicle-specific adjustment factors (to refine OSRM's generic profile durations)
    const adjustmentFactors = {
      'Car': 1.0,
      'Van': 1.1, // Slightly slower due to size
      'Truck': 1.3, // Slower due to weight and restrictions
      'Motorcycle': 0.9, // Faster, less traffic impact
      'Scooter': 0.95, // Slightly faster than driving
      'Bicycle': 2.0, // Slower, depends on terrain and traffic
    };

    try {
      const coordsString = coordinates.map(coord => `${coord[0]},${coord[1]}`).join(';');
      const url = `http://router.project-osrm.org/route/v1/${profile}/${coordsString}?overview=full&geometries=geojson`;
      const response = await fetch(url);
      if (!response.ok) {
        console.error('OSRM API request failed:', response.status, response.statusText);
        return null;
      }
      const data = await response.json();
      if (data.routes && data.routes.length > 0) {
        const baseDuration = data.routes[0].duration;
        const adjustedDuration = baseDuration * adjustmentFactors[vehicleType]; // Apply vehicle-specific factor
        return {
          geometry: data.routes[0].geometry,
          duration: adjustedDuration,
          distance: data.routes[0].distance / 1000, // Convert meters to kilometers
        };
      } else {
        console.error('No routes found in OSRM response:', data);
        return null;
      }
    } catch (error) {
      console.error('Error fetching route:', error);
      return null;
    }
  };

  // Calculate routes and AI predictions
  const calculateRoutes = async (transporterLoc) => {
    if (!transporterLoc || !pickupCoordinates || !deliveryCoordinates) {
      setErrorMessage('Missing coordinates for one or more points (Transporter, Donor, Recipient).');
      return;
    }

    const points = [
      { name: 'transporter', coords: transporterLoc.coordinates, label: transporterName || 'Transporter' },
      { name: 'pickup', coords: pickupCoordinates.coordinates, label: donorName || 'Donor' },
      { name: 'delivery', coords: deliveryCoordinates.coordinates, label: recipientName || 'Recipient' },
    ].filter(point => point.coords && point.coords[0] !== 0 && point.coords[1] !== 0);

    if (points.length < 3) {
      setErrorMessage(`Insufficient valid coordinates. Found ${points.length}/3 valid points.`);
      return;
    }

    const transporter = points.find(p => p.name === 'transporter');
    const donor = points.find(p => p.name === 'pickup');
    const recipient = points.find(p => p.name === 'delivery');

    const routeGeometries = [];
    let totalOsrmDuration = 0;
    let totalAIPredictedDuration = 0;
    let totalDist = 0;

    // Transporter to Donor
    let transporterToDonor = await fetchRoute([transporter.coords, donor.coords], vehicleType);
    if (transporterToDonor) {
      const osrmDuration = transporterToDonor.duration;
      const distance = transporterToDonor.distance;
      const hour = new Date().getHours();
      const aiDuration = await fetchAIPredictedDuration(distance, osrmDuration, hour, weather, vehicleType);
      console.log('Transporter to Donor - OSRM Duration:', osrmDuration, 'AI Duration:', aiDuration);

      routeGeometries.push({
        from: transporter.label,
        to: donor.label,
        geometry: transporterToDonor.geometry,
        osrmDuration,
        aiDuration: aiDuration !== null ? aiDuration : null,
        distance,
      });
      totalOsrmDuration += osrmDuration;
      if (aiDuration !== null) totalAIPredictedDuration += aiDuration;
      totalDist += distance;
    } else {
      setErrorMessage('Failed to fetch route from Transporter to Donor.');
      return;
    }

    // Donor to Recipient
    let donorToRecipient = await fetchRoute([donor.coords, recipient.coords], vehicleType);
    if (donorToRecipient) {
      const osrmDuration = donorToRecipient.duration;
      const distance = donorToRecipient.distance;
      const hour = new Date().getHours();
      const aiDuration = await fetchAIPredictedDuration(distance, osrmDuration, hour, weather, vehicleType);
      console.log('Donor to Recipient - OSRM Duration:', osrmDuration, 'AI Duration:', aiDuration);

      routeGeometries.push({
        from: donor.label,
        to: recipient.label,
        geometry: donorToRecipient.geometry,
        osrmDuration,
        aiDuration: aiDuration !== null ? aiDuration : null,
        distance,
      });
      totalOsrmDuration += osrmDuration;
      if (aiDuration !== null) totalAIPredictedDuration += aiDuration;
      totalDist += distance;
    } else {
      setErrorMessage('Failed to fetch route from Donor to Recipient.');
      return;
    }

    setOptimizedRoute({ geometries: routeGeometries });
    setTotalOptimizedDuration(totalOsrmDuration);
    setTotalAIPredictedDuration(totalAIPredictedDuration);
    setTotalDistance(totalDist);
    setErrorMessage('');
  };

  // Initialize map and markers
  useEffect(() => {
    if (!isOpen) return;

    map.current = new maplibregl.Map({
      container: mapContainer.current,
      style: {
        version: 8,
        sources: {
          osm: {
            type: 'raster',
            tiles: ['https://tile.openstreetmap.org/{z}/{x}/{y}.png'],
            tileSize: 256,
            attribution: '© OpenStreetMap contributors',
          },
        },
        layers: [{
          id: 'osm',
          type: 'raster',
          source: 'osm',
        }],
      },
      center: currentTransporterLocation?.coordinates || pickupCoordinates?.coordinates || [10.208, 36.860],
      zoom: 12,
    });

    map.current.addControl(new maplibregl.NavigationControl());

    map.current.on('load', () => {
      setMapLoaded(true);

      if (pickupCoordinates && deliveryCoordinates && currentTransporterLocation) {
        // Transporter marker (arrow)
        const transporterEl = document.createElement('div');
        transporterEl.className = 'transporter-marker';
        transporterEl.style.width = '30px';
        transporterEl.style.height = '30px';
        transporterEl.style.display = 'flex';
        transporterEl.style.alignItems = 'center';
        transporterEl.style.justifyContent = 'center';
        transporterEl.style.color = '#0000FF';
        transporterEl.style.fontSize = '24px';
        transporterEl.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"/></svg>';

        if (currentTransporterLocation.coordinates[0] !== 0) {
          transporterMarker.current = new maplibregl.Marker({
            element: transporterEl,
          })
            .setLngLat(currentTransporterLocation.coordinates)
            .setPopup(new maplibregl.Popup().setText(`Transporter: ${transporterName || 'Unknown Transporter'}`))
            .addTo(map.current);
        }

        // Transporter pin marker
        if (currentTransporterLocation.coordinates[0] !== 0) {
          transporterPinMarker.current = new maplibregl.Marker({ color: '#0000FF' })
            .setLngLat(currentTransporterLocation.coordinates)
            .setPopup(new maplibregl.Popup().setText(`Transporter Position: ${transporterName || 'Unknown Transporter'}`))
            .addTo(map.current);
        }

        if (pickupCoordinates.coordinates[0] !== 0) {
          new maplibregl.Marker({ color: '#FF0000' })
            .setLngLat(pickupCoordinates.coordinates)
            .setPopup(new maplibregl.Popup().setText(`Donor: ${donorName || 'Unknown Donor'}`))
            .addTo(map.current);
        }

        if (deliveryCoordinates.coordinates[0] !== 0) {
          new maplibregl.Marker({ color: '#00FF00' })
            .setLngLat(deliveryCoordinates.coordinates)
            .setPopup(new maplibregl.Popup().setText(`Recipient: ${recipientName || 'Unknown Recipient'}`))
            .addTo(map.current);
        }

        calculateRoutes(currentTransporterLocation);
      }
    });

    // Track real-time movement with debouncing
    let lastUpdate = 0;
    const watchId = navigator.geolocation.watchPosition(
      ({ coords, timestamp }) => {
        if (timestamp - lastUpdate < 5000) return; // Debounce updates to every 5 seconds
        lastUpdate = timestamp;

        const newLocation = { type: 'Point', coordinates: [coords.longitude, coords.latitude] };
        setCurrentTransporterLocation(newLocation);

        if (transporterMarker.current) {
          transporterMarker.current.setLngLat(newLocation.coordinates);
        }
        if (transporterPinMarker.current) {
          transporterPinMarker.current.setLngLat(newLocation.coordinates);
        }

        calculateRoutes(newLocation);

        map.current.flyTo({ center: newLocation.coordinates, zoom: 15 });
      },
      (error) => {
        console.error('Geolocation error:', error);
        setErrorMessage('Failed to track your location.');
      },
      { enableHighAccuracy: true, maximumAge: 0, timeout: 5000 }
    );

    return () => {
      if (map.current) {
        map.current.remove();
      }
      navigator.geolocation.clearWatch(watchId);
    };
  }, [isOpen, pickupCoordinates, deliveryCoordinates, donorName, recipientName, transporterName, vehicleType, weather]);

  // Draw routes
  useEffect(() => {
    if (!mapLoaded || !map.current) return;

    // Remove existing route layers
    for (let i = 0; i < 2; i++) {
      const optimizedLayerId = `optimized-route-layer-${i}`;
      const optimizedSourceId = `optimized-route-${i}`;

      if (map.current.getLayer(optimizedLayerId)) {
        map.current.removeLayer(optimizedLayerId);
      }
      if (map.current.getSource(optimizedSourceId)) {
        map.current.removeSource(optimizedSourceId);
      }
    }

    if (optimizedRoute && optimizedRoute.geometries && optimizedRoute.geometries.length > 0) {
      optimizedRoute.geometries.forEach((segment, index) => {
        const sourceId = `optimized-route-${index}`;
        if (!map.current.getSource(sourceId)) {
          map.current.addSource(sourceId, {
            type: 'geojson',
            data: {
              type: 'Feature',
              properties: {},
              geometry: segment.geometry,
            },
          });
        } else {
          map.current.getSource(sourceId).setData({
            type: 'Feature',
            properties: {},
            geometry: segment.geometry,
          });
        }

        const layerId = `optimized-route-layer-${index}`;
        if (!map.current.getLayer(layerId)) {
          map.current.addLayer({
            id: layerId,
            type: 'line',
            source: sourceId,
            layout: {
              'line-join': 'round',
              'line-cap': 'round',
            },
            paint: {
              'line-color': index === 0 ? '#0000FF' : '#00FF00',
              'line-width': 4,
              'line-opacity': 0.7,
              'line-dasharray': [2, 2],
              'line-offset': 2,
            },
          });
        }
      });
    }

    const coordinates = [
      currentTransporterLocation?.coordinates,
      pickupCoordinates?.coordinates,
      deliveryCoordinates?.coordinates,
    ].filter(coord => coord && coord[0] !== 0 && coord[1] !== 0);

    if (coordinates.length > 1) {
      const bounds = coordinates.reduce((bounds, coord) => {
        return bounds.extend(coord);
      }, new maplibregl.LngLatBounds(coordinates[0], coordinates[0]));
      map.current.fitBounds(bounds, { padding: 50 });
    } else if (coordinates.length === 1) {
      map.current.flyTo({ center: coordinates[0], zoom: 15 });
    }
  }, [mapLoaded, optimizedRoute, currentTransporterLocation, pickupCoordinates, deliveryCoordinates]);

  return isOpen ? (
    <div className="location-picker-localisation">
      <CloseButton onClick={onClose} aria-label="Close map">
        <IoClose size={20} />
      </CloseButton>
      {pickupCoordinates && deliveryCoordinates && currentTransporterLocation && (
        <RouteInfoPanel>
          {errorMessage ? (
            <ErrorMessage>{errorMessage}</ErrorMessage>
          ) : optimizedRoute && optimizedRoute.geometries.length > 0 ? (
            <>
              <p style={{ fontWeight: 'bold', marginBottom: '5px', color:'black',fontSize:'13px' }}>Optimized Route (Dashed)</p>
              <p style={{ marginBottom: '5px',color:'black' ,fontSize:'13px'}}>
                <strong>Vehicle Type:</strong> {vehicleType}
              </p>
              <p style={{ marginBottom: '5px' ,color:'black',fontSize:'13px'}}>
                <strong>Weather:</strong> {weather}
              </p>
              {optimizedRoute.geometries.map((segment, index) => (
                <div key={`optimized-${index}`}>
                  <RouteLabel>
                    <RouteColor style={{ backgroundColor: index === 0 ? '#0000FF' : '#00FF00' ,fontSize:'13px',color:'black'}} />
                    {segment.from} to {segment.to}
                  </RouteLabel>
                
                  <RouteLabel style={{ marginLeft: '20px', color:'black' ,fontSize:'13px' }}>
                    AI: {segment.aiDuration !== null ? formatDuration(segment.aiDuration) : 'N/A'}
                  </RouteLabel>
                  <RouteLabel style={{ marginLeft: '20px', color:'black' ,fontSize:'13px'}}>
                    Distance: {formatDistance(segment.distance)}
                  </RouteLabel>
                </div>
              ))}
            
              <p style={{ fontWeight: 'bold', marginTop: '5px', color:'black' ,fontSize:'13px'}}>
                Total AI-Predicted Duration: {totalAIPredictedDuration > 0 ? formatDuration(totalAIPredictedDuration) : 'N/A'}
              </p>
              <p style={{ fontWeight: 'bold', marginTop: '5px', color:'black',fontSize:'13px' }}>
                Total Distance: {formatDistance(totalDistance)}
              </p>
            </>
          ) : (
            <ErrorMessage>Failed to calculate routes. Please check coordinates.</ErrorMessage>
          )}
        </RouteInfoPanel>
      )}
      <div ref={mapContainer} className="map-container-localisation" />
    </div>
  ) : null;
};

export default DeliveryMap;
</file>

</files>
