This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
jenkinsfile
sustainafood-backend/.env
sustainafood-backend/.gitignore
sustainafood-backend/app.js
sustainafood-backend/bin/www
sustainafood-backend/config/database.json
sustainafood-backend/controllers/donationController.js
sustainafood-backend/controllers/donationTransactionController.js
sustainafood-backend/controllers/productController.js
sustainafood-backend/controllers/requestNeedController.js
sustainafood-backend/controllers/UserController.js
sustainafood-backend/Middleware/auth.js
sustainafood-backend/Middleware/Upload.js
sustainafood-backend/models/Counter.js
sustainafood-backend/models/Donation.js
sustainafood-backend/models/DonationTransaction.js
sustainafood-backend/models/Product.js
sustainafood-backend/models/RequestNeed.js
sustainafood-backend/models/User.js
sustainafood-backend/package.json
sustainafood-backend/public/stylesheets/style.css
sustainafood-backend/routes/authRoutes.js
sustainafood-backend/routes/donationRoutes.js
sustainafood-backend/routes/donationTransactionRoutes.js
sustainafood-backend/routes/index.js
sustainafood-backend/routes/productRoutes.js
sustainafood-backend/routes/requestNeedRoutes.js
sustainafood-backend/routes/users.js
sustainafood-backend/test/user-2fa.test.js
sustainafood-backend/test/user-signin.test.js
sustainafood-backend/views/error.twig
sustainafood-backend/views/index.twig
sustainafood-backend/views/layout.twig
sustainafood-frontend/.env
sustainafood-frontend/.gitignore
sustainafood-frontend/eslint.config.js
sustainafood-frontend/index.html
sustainafood-frontend/package.json
sustainafood-frontend/public/vite.svg
sustainafood-frontend/README.md
sustainafood-frontend/src/api/donationService.js
sustainafood-frontend/src/api/donationTransactionService.js
sustainafood-frontend/src/api/productService.js
sustainafood-frontend/src/api/requestNeedsService.js
sustainafood-frontend/src/api/userService.js
sustainafood-frontend/src/App.css
sustainafood-frontend/src/App.jsx
sustainafood-frontend/src/assets/images/react.svg
sustainafood-frontend/src/assets/styles/AccountSettings.css
sustainafood-frontend/src/assets/styles/AddDonation.css
sustainafood-frontend/src/assets/styles/backoffcss/adminProfile.css
sustainafood-frontend/src/assets/styles/backoffcss/card.css
sustainafood-frontend/src/assets/styles/backoffcss/chart.css
sustainafood-frontend/src/assets/styles/backoffcss/dashboard.css
sustainafood-frontend/src/assets/styles/backoffcss/donationDetails.css
sustainafood-frontend/src/assets/styles/backoffcss/donationStatus.css
sustainafood-frontend/src/assets/styles/backoffcss/navbar.css
sustainafood-frontend/src/assets/styles/backoffcss/ngoList.css
sustainafood-frontend/src/assets/styles/backoffcss/ProductDetail.css
sustainafood-frontend/src/assets/styles/backoffcss/ProductList.css
sustainafood-frontend/src/assets/styles/backoffcss/RequestDetail.css
sustainafood-frontend/src/assets/styles/backoffcss/RequestTable.css
sustainafood-frontend/src/assets/styles/backoffcss/restaurantList.css
sustainafood-frontend/src/assets/styles/backoffcss/sidebar.css
sustainafood-frontend/src/assets/styles/backoffcss/studentList.css
sustainafood-frontend/src/assets/styles/backoffcss/supermarketList.css
sustainafood-frontend/src/assets/styles/backoffcss/transporterList.css
sustainafood-frontend/src/assets/styles/backoffcss/viewNgo.css
sustainafood-frontend/src/assets/styles/backoffcss/viewRestaurant.css
sustainafood-frontend/src/assets/styles/backoffcss/viewStudent.css
sustainafood-frontend/src/assets/styles/backoffcss/viewSupermarket.css
sustainafood-frontend/src/assets/styles/backoffcss/viewTransporter.css
sustainafood-frontend/src/assets/styles/Composantdonation.css
sustainafood-frontend/src/assets/styles/Contact.css
sustainafood-frontend/src/assets/styles/ContinueInfo.css
sustainafood-frontend/src/assets/styles/continueSignUp.css
sustainafood-frontend/src/assets/styles/DetailsDonations.css
sustainafood-frontend/src/assets/styles/EditProfile.css
sustainafood-frontend/src/assets/styles/ForgetPass.css
sustainafood-frontend/src/assets/styles/ListDonationsRequest.css
sustainafood-frontend/src/assets/styles/ListOfDonations.css
sustainafood-frontend/src/assets/styles/log.css
sustainafood-frontend/src/assets/styles/MyDonations.css
sustainafood-frontend/src/assets/styles/MyRequests.css
sustainafood-frontend/src/assets/styles/Navbar.css
sustainafood-frontend/src/assets/styles/Notfound.css
sustainafood-frontend/src/assets/styles/Profile.css
sustainafood-frontend/src/components/backoffcom/CardStats.jsx
sustainafood-frontend/src/components/backoffcom/Chart.jsx
sustainafood-frontend/src/components/backoffcom/DonationStatus.jsx
sustainafood-frontend/src/components/backoffcom/Navbar.jsx
sustainafood-frontend/src/components/backoffcom/Sidebar.jsx
sustainafood-frontend/src/components/Composantdonation.jsx
sustainafood-frontend/src/components/Composantrequest.jsx
sustainafood-frontend/src/components/DonorProfile.jsx
sustainafood-frontend/src/components/Footer.jsx
sustainafood-frontend/src/components/Navbar.jsx
sustainafood-frontend/src/components/RecipientProfile.jsx
sustainafood-frontend/src/components/RoleSpecificProfile.jsx
sustainafood-frontend/src/components/TransporterProfile.jsx
sustainafood-frontend/src/contexts/AuthContext.jsx
sustainafood-frontend/src/index.css
sustainafood-frontend/src/main.jsx
sustainafood-frontend/src/pages/About.jsx
sustainafood-frontend/src/pages/AccountSettings.tsx
sustainafood-frontend/src/pages/AddDonation.jsx
sustainafood-frontend/src/pages/backoffice/AdminProfile.jsx
sustainafood-frontend/src/pages/backoffice/Dashboard.jsx
sustainafood-frontend/src/pages/backoffice/DonationDetails.jsx
sustainafood-frontend/src/pages/backoffice/DonationList.jsx
sustainafood-frontend/src/pages/backoffice/DonationTransactionList.jsx
sustainafood-frontend/src/pages/backoffice/ONGList.jsx
sustainafood-frontend/src/pages/backoffice/ProductDetail.jsx
sustainafood-frontend/src/pages/backoffice/ProductList.jsx
sustainafood-frontend/src/pages/backoffice/RequestDetails.jsx
sustainafood-frontend/src/pages/backoffice/RequestTable.jsx
sustainafood-frontend/src/pages/backoffice/RestaurantList.jsx
sustainafood-frontend/src/pages/backoffice/StudentList.jsx
sustainafood-frontend/src/pages/backoffice/SupermarketList.jsx
sustainafood-frontend/src/pages/backoffice/TransporterList.jsx
sustainafood-frontend/src/pages/backoffice/view-ngo.jsx
sustainafood-frontend/src/pages/backoffice/view-restaurant.jsx
sustainafood-frontend/src/pages/backoffice/view-student.jsx
sustainafood-frontend/src/pages/backoffice/view-supermarket.jsx
sustainafood-frontend/src/pages/backoffice/view-transporter.jsx
sustainafood-frontend/src/pages/ConfirmationModal.jsx
sustainafood-frontend/src/pages/Contact.jsx
sustainafood-frontend/src/pages/Continueinfo.jsx
sustainafood-frontend/src/pages/DetailsDonations.jsx
sustainafood-frontend/src/pages/DetailsRequest.jsx
sustainafood-frontend/src/pages/Editprofile.jsx
sustainafood-frontend/src/pages/ForgetPass.jsx
sustainafood-frontend/src/pages/Home.jsx
sustainafood-frontend/src/pages/ListDonationsRequest.jsx
sustainafood-frontend/src/pages/ListOfDonations.jsx
sustainafood-frontend/src/pages/ListOfRequests.jsx
sustainafood-frontend/src/pages/log.jsx
sustainafood-frontend/src/pages/MyDonationsList.jsx
sustainafood-frontend/src/pages/MyRequest.jsx
sustainafood-frontend/src/pages/Not-Found.jsx
sustainafood-frontend/src/pages/Profile.jsx
sustainafood-frontend/src/pages/ResetCode.jsx
sustainafood-frontend/src/pages/ResetPassword.jsx
sustainafood-frontend/src/pages/Signup.jsx
sustainafood-frontend/src/pages/style.css
sustainafood-frontend/src/pages/TwoFAVerification.jsx
sustainafood-frontend/src/PrivateRoute.jsx
sustainafood-frontend/vite.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="sustainafood-backend/.gitignore">
node_modules/
.DS_Store
</file>

<file path="sustainafood-backend/bin/www">
#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sustainafood-backend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
</file>

<file path="sustainafood-backend/config/database.json">
{
    "url":"mongodb://127.0.0.1:27017/sustainafood"
}
</file>

<file path="sustainafood-backend/Middleware/Upload.js">
// middleware/upload.js

const multer = require("multer");
const path = require("path");

// Configuration du stockage
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    // Dossier où seront enregistrés les fichiers
    // Vous pouvez mettre 'uploads/' ou un chemin plus spécifique (e.g. 'public/uploads/')
    cb(null, "uploads/");
  },
  filename: (req, file, cb) => {
    // Pour éviter les conflits de noms, on ajoute un timestamp
    cb(null, Date.now() + "-" + file.originalname);
  },
});

// Filtrage des types de fichiers (facultatif, ici on accepte uniquement les images)
const fileFilter = (req, file, cb) => {
  if (file.mimetype.startsWith("image/")) {
    cb(null, true);
  } else {
    cb(new Error("Only image files are allowed!"), false);
  }
};

// Limiter la taille des fichiers (par exemple à 2MB)
const limits = { fileSize: 2 * 1024 * 1024 }; // 2 MB

// Créer l'instance de Multer
const upload = multer({ storage, fileFilter, limits });

module.exports = upload;
</file>

<file path="sustainafood-backend/models/Counter.js">
// models/Counter.js

const mongoose = require('mongoose');
const Schema = mongoose.Schema;

// Counter schema for managing the auto-incrementing `id`
const counterSchema = new Schema({
  _id: { type: String, required: true },
  seq: { type: Number, default: 0 }
});

const Counter = mongoose.model('Counter', counterSchema);

module.exports = Counter;
</file>

<file path="sustainafood-backend/models/User.js">
// models/User.js
const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const Counter = require('./Counter'); // Import the Counter model

// Define possible values for sexe, ONG type, and vehicle type
const Sexe = Object.freeze({
  MALE: 'male',
  FEMALE: 'female',
  OTHER: 'other'
});

const OngType = Object.freeze({
  ADVOCACY: 'advocacy',
  OPERATIONAL: 'operational',
  CHARITABLE: 'charitable',
  DEVELOPMENT: 'development',
  ENVIRONMENTAL: 'environmental',
  HUMAN_RIGHTS: 'human-rights',
  RELIEF: 'relief',
  RESEARCH: 'research',
  PHILANTHROPIC: 'philanthropic',
  SOCIAL_WELFARE: 'social_welfare',
  CULTURAL: 'cultural',
  FAITH_BASED: 'faith_based'
});

const VehiculeType = Object.freeze({
  CAR: 'car',
  MOTORBIKE: 'motorbike',
  BICYCLE: 'bicycle',
  VAN: 'van',
  TRUCK: 'truck',
  SCOOTER: 'scooter'
});



const Role = Object.freeze({
  ADMIN: 'admin',
  ONG: 'ong',
  RESTAURANT: 'restaurant',
  SUPERMARKET: 'supermarket',
  STUDENT: 'student',
  TRANSPORTER: 'transporter'
});

// User schema definition
const userSchema = new Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String },
  role: { type: String, enum: Object.values(Role) },
  id: { type: Number }, // Auto-incremented custom ID
  phone: { type: Number },
  address: { type: String },
  photo: { type: String },
  age: { type: Number },
  sexe: { type: String, enum: Object.values(Sexe), default: null },
  vehiculeType: { type: String, enum: Object.values(VehiculeType), default: null },
  image_carte_etudiant: { type: String },
  num_cin: { type: String },
  id_fiscale: { type: String }, // Renamed for consistency
  type: { type: String, enum: Object.values(OngType) },
  taxReference: { type: String }, // Renamed for clarity
  isBlocked: { type: Boolean, default: false },
  resetCode: { type: String },
  isActive: { type: Boolean, default: true },
  resetCodeExpires: { type: Date },
  twoFACode: { type: String },
  twoFACodeExpires: { type: Date },
  is2FAEnabled: { type: Boolean, default: false }
});

// Pre-save hook to auto-increment `id` before saving a new user
userSchema.pre('save', async function (next) {
  if (this.isNew) {
    try {
      const counter = await Counter.findOneAndUpdate(
        { _id: 'userId' },
        { $inc: { seq: 1 } },
        { new: true, upsert: true }
      );
      this.id = counter.seq;
    } catch (err) {
      return next(err);
    }
  }
  next();
});

// Create and export the User model
const User = mongoose.model('User', userSchema);
module.exports = User;
</file>

<file path="sustainafood-backend/public/stylesheets/style.css">
body {
  padding: 50px;
  font: 14px "Lucida Grande", Helvetica, Arial, sans-serif;
}

a {
  color: #00B7FF;
}
</file>

<file path="sustainafood-backend/routes/authRoutes.js">
const express = require("express");
const passport = require("passport");
const jwt = require("jsonwebtoken"); // Ajouter pour générer un JWT
const router = express.Router();

// Lancer l'authentification Google
router.get("/google", passport.authenticate("google", { scope: ["profile", "email"] }));

// Callback après l'auth Google
router.get(
  "/google/callback",
  passport.authenticate("google", { session: false }),
  (req, res) => {
    if (!req.user) {
      return res.status(401).json({ error: "Échec de l'authentification" });
    }

    // Création du JWT à partir des données de l'utilisateur Google
    const token = generateJwtToken(req.user.profile);

    // Renvoyer le JWT et les infos utilisateur au frontend
    res.json({
      token,
      user: {
        id: req.user.profile.id,
        email: req.user.profile.emails[0].value,
        name: req.user.profile.displayName,
      },
    });
  }
);

// Fonction pour générer un JWT
function generateJwtToken(userProfile) {
  const payload = {
    id: userProfile.id,  // ID de l'utilisateur Google
    email: userProfile.emails[0].value,
    name: userProfile.displayName,
    picture: userProfile.photos ? userProfile.photos[0].value : "", // Ajouter la photo de profil, si disponible
  };

  // Clé secrète pour signer le JWT
  const secretKey = 'ta-clé-secrète'; // Remplace par ta clé secrète
  const token = jwt.sign(payload, secretKey, { expiresIn: '1h' });  // Le token expire après 1 heure

  return token;
}

module.exports = router;
</file>

<file path="sustainafood-backend/routes/index.js">
var express = require('express');
var router = express.Router();

/* GET home page. */
router.get('/', function(req, res, next) {
  res.render('index', { title: 'Express' });
});

module.exports = router;
</file>

<file path="sustainafood-backend/views/error.twig">
{% extends 'layout.twig' %}

{% block body %}
  <h1>{{message}}</h1>
  <h2>{{error.status}}</h2>
  <pre>{{error.stack}}</pre>
{% endblock %}
</file>

<file path="sustainafood-backend/views/index.twig">
{% extends 'layout.twig' %}

{% block body %}
  <h1>{{title}}</h1>
  <p>Welcome to {{title}}</p>
{% endblock %}
</file>

<file path="sustainafood-backend/views/layout.twig">
<!DOCTYPE html>
<html>
  <head>
    <title>{{ title }}</title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
    {% block body %}{% endblock %}
  </body>
</html>
</file>

<file path="sustainafood-frontend/.env">
VITE_API_URL=http://localhost:3000
</file>

<file path="sustainafood-frontend/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="sustainafood-frontend/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]
</file>

<file path="sustainafood-frontend/index.html">
<!doctype html>

<html lang="en">
  <head>
    <meta http-equiv="Cross-Origin-Opener-Policy" content="same-origin-allow-popups">
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="sustainafood-frontend/public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="sustainafood-frontend/README.md">
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh
</file>

<file path="sustainafood-frontend/src/App.css">
#root {
  width: 100%;
  margin: 0;
  padding: 0;
  text-align: center;

}
</file>

<file path="sustainafood-frontend/src/assets/images/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/adminProfile.css">
/* ✅ Import de la police DM Sans */
@import url('https://fonts.googleapis.com/css2?family=DM+Sans:wght@400;500;700&display=swap');

/* ✅ Application de la police globale */
* {
    font-family: 'DM Sans', sans-serif;
}

/* ✅ Layout principal */
.admin-dashboard {
    display: flex;
    background: #f8f9fb;
    max-width: 100%;
}

/* ✅ Conteneur du profil */
.profile-container {
    flex: 1;
    padding: 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
    max-width: 1000px;
    margin: auto;
}

/* ✅ "My Profile" avec ligne */
.profile-header {
    display: flex;
    align-items: center;
    width: 100%;
    padding: 60px 0;
    margin-top: 20px;
}

.profile-header h2 {
    font-weight: 700;
    font-size: 22px;
    color: #1a3e3e;
    margin-right: 15px;
}

.profile-line {
    flex-grow: 1;
    height: 2px;
    background-color: #e0e0e0;
    
}

/* ✅ Profile Card */
.profile-card {
    background: white;
    padding: 20px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 1000px;
    margin-bottom: 20px;
    
}

.profile-pic {
    position: relative;
    width: 90px;
    height: 90px;
    border-radius: 50%;
    overflow: hidden;
    margin-right: 15px;
}

.profile-pic img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

/* ✅ Style pour le bouton d'upload d'image */
.upload-icon {
    position: absolute;
    bottom: 5px;
    right: 5px;
    background: #4CAF50;
    color: white;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
}

.upload-icon input[type="file"] {
    opacity: 0;
    position: absolute;
    width: 100%;
    height: 100%;
    cursor: pointer;
}

.profile-info h2 {
    margin-bottom: 10px; /* Marge après le titre */
}

.profile-info p {
    margin-bottom: 10px; /* Marge entre les paragraphes */
}
.profile-info h2, .profile-info p {
    margin-bottom: 10px; /* Espace entre chaque élément */
    line-height: 1.5; /* Espacement entre les lignes */
}

/* ✅ Sections Info */
.info-section {
    background: white;
    padding: 15px;
    border-radius: 12px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 1000px;
    margin-bottom: 20px;
}

/* ✅ Titres des sections */
.section-header h3 {
    font-weight: 600;
    font-size: 18px;
    color: #1a3e3e;
}

/* ✅ Labels (First Name, Email, etc.) */
.label {
    font-weight: 500;
    font-size: 13px;
    color: #666;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

/* ✅ Texte des valeurs (Mariem, Email, etc.) */
.info-grid p {
    font-weight: 400;
    font-size: 15px;
    color: #333;
    margin-top: 3px;
}

/* ✅ Disposition en grille */
.info-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 15px;
}

.info-grid div {
    padding: 12px;
    border-radius: 8px;
}

/* ✅ Section Header - Positionnement du bouton Edit */
.section-header {
    display: flex;
    justify-content: space-between; /* Espace entre le titre et le bouton */
    align-items: center;
    margin-bottom: 10px;
    width: 100%;
}

/* ✅ Ajustement du bouton Edit */
.edit-btn {
    background: #8dc73f;
    color: white;
    border: none;
    padding: 6px 12px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    display: flex;
    align-items: center;
    margin-left: auto; /* Permet de le pousser à droite */
}

/* ✅ Icône du bouton Edit */
.edit-btn svg {
    margin-right: 5px;
}

/* ✅ MODALE */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-content {
    background: white;
    padding: 20px;
    border-radius: 8px;
    width: 450px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 18px;
    font-weight: bold;
}

.modal-header .close-btn {
    background: none;
    border: none;
    font-size: 20px;
    cursor: pointer;
}

.modal-body {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-top: 15px;
}

.modal-body label {
    font-size: 14px;
    font-weight: bold;
    color: #333;
}

.modal-body input,
.modal-body select {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

.modal-footer {
    display: flex;
    justify-content: flex-end;
    margin-top: 15px;
}

.save-btn {
    background: #8dc73f;
    color: white;
    padding: 8px 15px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

/* ✅ Désactiver l'édition du champ User Role */
.readonly-field {
    font-weight: bold;
    color: gray;
}
.save-image-btn {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
}


.save-icon {
    font-size: 15px; /* Adjust the size */
    color: #4CAF50; /* Green color for the icon */
    transition: color 0.3s ease;
}

.save-icon:hover {
    color: #45a049; /* Darker green on hover */
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/card.css">
/* Style de base des cartes */
.card {
    background: white;
    padding: 10px; /* Réduction de l’espace interne */
    border-radius: 8px;
    width: 180px; /* Réduction de la largeur */
    height: 110px; /* Réduction de la hauteur */
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    text-align: center;
    transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

/* Effet au survol */
.card:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

/* Ajuster l'icône */
.card .icon {
    font-size: 20px; /* Réduction de la taille de l’icône */
    margin-bottom: 5px;
}

/* Style du titre */
.card h3 {
    font-size: 14px;
    font-weight: bold;
    margin: 0;
}

/* Valeur principale */
.card .value {
    font-size: 14px;
    font-weight: bold;
    margin: 3px 0;
}

/* Pourcentage en couleur */
.card .percentage {
    font-size: 12px;
    font-weight: bold;
}

.progress-bar {
    width: 100%; /* Toutes les barres ont la même largeur */
    height: 10px; /* Hauteur uniforme */
    background-color: #e0e0e0; /* Couleur de fond */
    border-radius: 5px; /* Coins arrondis */
    overflow: hidden; /* Empêche le dépassement */
    display: flex; /* Assure l'alignement correct */
}

.progress {
    height: 100%; /* Remplit toute la hauteur */
    border-radius: 5px; /* Arrondi les bords */
    transition: width 0.5s ease-in-out; /* Animation fluide */
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/chart.css">
.chart-container {
    margin: 20px;
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.chart {
    width: 100%;
    height: 220px;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/donationDetails.css">
/* src/assets/styles/backoffcss/donationDetails.css */

.product-detail-container {
    display: flex; /* Pour aligner Sidebar et content */
  }
  
  .product-detail-content {
    flex: 1; /* Prend tout l'espace disponible */
    padding: 20px;
  }
  
  .product-card {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    padding: 20px;
    transform: translateY(50px); /* Ajuste cette valeur selon tes besoins */
  }
  
  .product-header {
    margin-bottom: 20px;
    text-align: center;
  }
  
  .details-table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .details-table td {
    padding: 8px 12px;
    border-bottom: 1px solid #f0f0f0;
    text-align: left;
  }
  
  .details-table td:first-child {
    font-weight: bold;
    width: 20%;
  }
  
  .details-table tbody tr:last-child td {
    border-bottom: none;
  }
  
  .loading {
      text-align: center;
      padding: 20px;
      font-style: italic;
      color: #888;
  }
  
  /* Styles spécifiques pour la page de détails des dons */
  .donation-detail-content {
    flex: 1;
    padding: 20px;
  }
  
  .donation-card {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    padding: 20px;
    transform: translateY(50px);
  }
  
  .donation-header {
    margin-bottom: 20px;
    text-align: center;
  }
  
  .donation-details-table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .donation-details-table td {
    padding: 8px 12px;
    border-bottom: 1px solid #f0f0f0;
    text-align: left;
  }
  
  .donation-details-table td:first-child {
    font-weight: bold;
    width: 30%;
  }
  
  .donation-details-table tbody tr:last-child td {
    border-bottom: none;
  }
  
  .loading {
      text-align: center;
      padding: 20px;
      font-style: italic;
      color: #888;
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/donationStatus.css">
.donation-status {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.donation-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 15px;
}

.donation-info {
    display: flex;
    align-items: center;
    gap: 10px;
}

.donation-info svg {
    font-size: 24px;
}

.donation-name {
    font-weight: bold;
}

.progress-container {
    flex: 1;
    height: 6px;
    background: #eee;
    border-radius: 5px;
    margin-left: 10px;
    overflow: hidden;
}

.progress-bar {
    height: 100%;
    border-radius: 5px;
}

.progress-text {
    width: 40px;
    text-align: right;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/navbar.css">
/* Style général de la navbar */
.navbar {
    width: calc(100% - 270px); /* Adjust based on sidebar width */
    height: 60px;
    position: fixed;
    top: 0;
    left: 270px; /* Sidebar width */
    background: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 20px;
    box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    transition: all 0.3s ease-in-out;
}

/* Ajustement si la sidebar est réduite */
.sidebar-collapsed .navbar {
    width: calc(100% - 80px);
    left: 80px;
}

/* Barre de recherche */
.search-container {
    display: flex;
    align-items: center;
    border: 1px solid #ddd;
    border-radius: 20px;
    padding: 5px 10px;
    background: #f9f9f9;
}

.search-container input {
    border: none;
    outline: none;
    background: transparent;
    padding: 5px;
    width: 200px;
}

.search-icon {
    color: #666;
    cursor: pointer;
}

/* Espace entre les icônes */
.navbar-actions {
    display: flex;
    align-items: center;
    gap: 20px; /* Augmente l'espacement */
}

/* Style des icônes */
.icon {
    font-size: 22px;
    cursor: pointer;
    transition: 0.3s ease-in-out;
}

/* Couleurs des icônes */
.globe { color: #3498db; }  /* Bleu */
.moon { color: #f1c40f; }   /* Jaune */
.bell { color: #e74c3c; }   /* Rouge */
.user { color: #2c3e50; }   /* Bleu foncé */

/* Effet au survol */
.icon:hover {
    transform: scale(1.1);
}

/* Style de la notification */
.notification-container {
    position: relative;
}

.badge {
    position: absolute;
    top: -5px;
    right: -5px;
    background: red;
    color: white;
    font-size: 12px;
    padding: 3px 6px;
    border-radius: 50%;
}

/* Assure que le contenu sous la navbar n'est pas caché */
.content-container {
    margin-top: 80px; /* Ajoute un espace sous la navbar */
    padding: 20px;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/ngoList.css">
/* Style de la page ongs */

/* Style for the header container */
.header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

/* Style for the export PDF button */
.export-pdf-btn {
    background-color: #4CAF50; /* Green */
    border: none;
    color: white;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    font-size: 16px;
    cursor: pointer;
    border-radius: 5px;
}

.export-pdf-btn:hover {
    background-color: #45a049;
}
/* Sorting Container */
.sort-container {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 20px;
}

.sort-container label {
    font-size: 16px;
    font-weight: 500;
    color: #333;
}

.sort-container select {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
    background-color: white;
    transition: border-color 0.3s ease;
}

.sort-container select:hover {
    border-color: #007bff;
}

.sort-container select:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
}

.ong-list {
    background: white;
    padding: 15px;
    border-radius: 10px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 1200px;
    margin: 20px auto;
    margin-top: 50px;

}

/* Titre */
.ong-list h3 {
    font-size: 18px;
    font-weight: bold;
    margin-bottom: 15px;
}

/* Tableau */
table {
    width: 100%;
    border-collapse: collapse;
}

th, td {
    padding: 10px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

/* Photo des ongs */
.ong-photoList {
    width: 40px;
    height: 40px;
    border-radius: 50%;
}

/* Boutons actions */
.view-btn,  .delete-btn {
    border: none;
    background: none;
    cursor: pointer;
    font-size: 16px;
    margin-right: 8px;
}

.view-btn:hover {
    color: blue;
}



.delete-btn:hover {
    color: red;
}
.pagination {
    display: flex;
    justify-content: center;
    list-style: none;
    padding: 10px;
}

.pagination li {
    margin: 0 5px;
    padding: 8px 12px;
    border: 1px solid #ccc;
    cursor: pointer;
    background-color: white;
    border-radius: 5px;
}

.paginationActive {
    font-weight: bold;
    background-color: #007bff;
    color: white;
    border: none;
}

.previousBttn, .nextBttn {
    margin: 5px;
    padding: 5px 10px;
    cursor: pointer;
}

.paginationDisabled {
    opacity: 0.5;
    cursor: not-allowed;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/ProductDetail.css">
/* src/assets/styles/backoffcss/ProductDetail.css */

.product-detail-container {
    display: flex; /* Pour aligner Sidebar et content */
  }
  
  .product-detail-content {
    flex: 1; /* Prend tout l'espace disponible */
    padding: 20px;
  }
  
  .product-card {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    padding: 20px;
    transform: translateY(50px); /* Ajuste cette valeur selon tes besoins */
  }
  
  .product-header {
    margin-bottom: 20px;
    text-align: center;
  }
  
  .details-table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .details-table td {
    padding: 8px 12px;
    border-bottom: 1px solid #f0f0f0;
    text-align: left;
  }
  
  .details-table td:first-child {
    font-weight: bold;
    width: 20%;
  }
  
  .details-table tbody tr:last-child td {
    border-bottom: none;
  }
  
  .loading {
      text-align: center;
      padding: 20px;
      font-style: italic;
      color: #888;
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/RequestDetail.css">
/* src/assets/styles/backoffcss/RequestDetail.css */

.request-detail-container {
    display: flex; /* Pour aligner Sidebar et content */
  }
  
  .request-detail-content {
    flex: 1; /* Prend tout l'espace disponible */
    padding: 20px;
  }
  
  .request-card {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    padding: 20px;
    transform: translateY(50px); /* Ajuste cette valeur selon tes besoins */

  }
  
  .request-header {
    margin-bottom: 20px;
    text-align: center;
  }
  
  .details-table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .details-table td {
    padding: 8px 12px;
    border-bottom: 1px solid #f0f0f0;
    text-align: left;
  }
  
  .details-table td:first-child {
    font-weight: bold;
    width: 20%;
  }
  
  .details-table tbody tr:last-child td {
    border-bottom: none;
  }
  
  .loading {
      text-align: center;
      padding: 20px;
      font-style: italic;
      color: #888;
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/restaurantList.css">
/* Style de la page Student */
.restaurant-dashboardcontent {
    margin-left: 150px; /* Adjust based on your sidebar width */
    padding: 20px;
    padding-top: 80px; /* Add more padding at the top to push content down */
}
.header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

/* Style for the export PDF button */
.export-pdf-btn {
    background-color: #4CAF50; /* Green */
    border: none;
    color: white;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    font-size: 16px;
    cursor: pointer;
    border-radius: 5px;
}

.export-pdf-btn:hover {
    background-color: #45a049;
}
/* Sorting Container */
.sort-container {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 20px;
}

.sort-container label {
    font-size: 16px;
    font-weight: 500;
    color: #333;
}

.sort-container select {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
    background-color: white;
    transition: border-color 0.3s ease;
}

.sort-container select:hover {
    border-color: #007bff;
}

.sort-container select:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
}

.restaurant-list {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 1400px;
    margin-top: 20px;
    overflow-x: auto; /* Ensure table is scrollable on small screens */
    margin-top: 50px;
}
/* Title */
.restaurant-list h3 {
    font-size: 24px;
    font-weight: bold;
    margin-bottom: 20px;
    color: #333;
}

/* Table */
table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

th, td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

th {
    background-color: #f8f9fa;
    font-weight: bold;
    color: #333;
}

/* Restaurant Photo */
.restaurant-photoList {
    width: 40px; /* Increase photo size */
    height: 40px; /* Increase photo size */
    border-radius: 50%;
    object-fit: cover;
}

/* Action Buttons */
.action-buttons button {
    background: transparent;
    border: none;
    cursor: pointer;
    font-size: 16px;
    margin: 0 5px;
    transition: color 0.3s ease-in-out;
}

.view-btn {
    color: #656565;
}

.block-btn {
    color: #ff9500;
}

.delete-btn {
    color: #dc3545;
}

.action-buttons button:hover {
    color: black;
}

/* Pagination */
.pagination {
    display: flex;
    justify-content: center;
    list-style: none;
    padding: 10px;
    margin-top: 20px;
}

.pagination li {
    margin: 0 5px;
    padding: 8px 12px;
    border: 1px solid #ccc;
    cursor: pointer;
    background-color: white;
    border-radius: 5px;
    transition: background-color 0.3s ease-in-out;
}

.pagination li:hover {
    background-color: #f8f9fa;
}

.paginationActive {
    font-weight: bold;
    background-color: #007bff;
    color: white;
    border: none;
}

.previousBttn, .nextBttn {
    margin: 5px;
    padding: 5px 10px;
    cursor: pointer;
    border: 1px solid #ccc;
    border-radius: 5px;
    transition: background-color 0.3s ease-in-out;
}

.previousBttn:hover, .nextBttn:hover {
    background-color: #f8f9fa;
}

.paginationDisabled {
    opacity: 0.5;
    cursor: not-allowed;
}

/* Responsive Design */
@media (max-width: 768px) {
    .dashboardcontent {
        margin-left: 0;
        padding: 10px;
        padding-top: 60px; /* Adjust for smaller screens */
    }

    .restaurant-list {
        padding: 10px;
    }

    table {
        display: block;
        overflow-x: auto;
    }

    th, td {
        padding: 8px;
    }

    .pagination li {
        padding: 6px 10px;
    }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/sidebar.css">
/* Style de base de la sidebar */
.sidebar {
    background: #8dc73f;
    color: white;
    width: 250px;
    min-height: 100vh;
    padding: 20px;
}

/* Titre de la sidebar */
.sidebar h2 {
    font-size: 18px;
    font-weight: bold;
    margin-bottom: 20px;
}

/* Liens de la sidebar */
.sidebar nav {
    display: flex;
    flex-direction: column;
}

.sidebar a, .sidebar .dropdown button {
    display: flex;
    align-items: center;
    gap: 10px; /* ✅ Espacement entre l’icône et le texte */
    padding: 10px;
    font-size: 14px;
    text-decoration: none;
    color: white;
    background: transparent;
    border: none;
    width: 100%;
    text-align: left;
    cursor: pointer;
    transition: 0.3s;
}

/* Hover effect */
.sidebar a:hover, .sidebar .dropdown button:hover {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 5px;
}

/* Icônes de la sidebar */
.sidebar .icon {
    font-size: 18px;
}

/* Dropdown menu */
.dropdown-content-dashboard {
    display: flex;
    flex-direction: column;
    padding-left: 25px;
}

/* Sous-menu Recipients & Donors */
.sub-dropdown {
    background: transparent;
    border: none;
    color: white;
    font-size: 14px;
    padding: 8px 10px;
    display: flex;
    align-items: center;
    gap: 10px;
    cursor: pointer;
    transition: 0.3s;
}

.sub-dropdown:hover {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 5px;
}

/* Contenu du sous-menu Recipients & Donors */
.sub-dropdown-content {
    display: flex;
    flex-direction: column;
    padding-left: 25px;
}

.sub-dropdown-content a {
    padding: 5px 10px;
    font-size: 13px;
    color: #ddd;
}

.sub-dropdown-content a:hover {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 5px;
}
/* Style pour aligner le logo et le texte */
.sidebar-header {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;  /* Espace entre le logo et le texte */
    padding: 15px;
}

/* Appliquer un cercle au logo */
.logo {
    width: 50px;  /* Ajuste la taille selon ton logo */
    height: 50px;
    border-radius: 50%;  /* Rend l'image circulaire */
    object-fit: cover;  /* Évite la déformation */
    border: 2px solid white;  /* Ajoute un contour blanc */
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/studentList.css">
/* Style de la page Student */
.student-dashboardcontent {
    margin-left: 150px; /* Adjust based on your sidebar width */
    padding: 20px;
    padding-top: 100px; /* Add more padding at the top to push content down */
}
.header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

/* Style for the export PDF button */
.export-pdf-btn {
    background-color: #4CAF50; /* Green */
    border: none;
    color: white;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    font-size: 16px;
    cursor: pointer;
    border-radius: 5px;
}

.export-pdf-btn:hover {
    background-color: #45a049;
}
.student-list {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 1400px;
    margin-top: 20px;
    overflow-x: auto; /* Ensure table is scrollable on small screens */
    margin-top: 50px;
}
/* Sorting Container */
.sort-container {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 20px;
}

.sort-container label {
    font-size: 16px;
    font-weight: 500;
    color: #333;
}

.sort-container select {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
    background-color: white;
    transition: border-color 0.3s ease;
}

.sort-container select:hover {
    border-color: #007bff;
}

.sort-container select:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
}

/* Titre */
.student-list h3 {
    font-size: 24px;
    font-weight: bold;
    margin-bottom: 20px;
    color: #333;
}

/* Tableau */
table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

th, td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

th {
    background-color: #f8f9fa;
    font-weight: bold;
    color: #333;
}

/* Photo des Students */
.student-photoList {
    width: 55px; /* Increase photo size */
    height: 55px; /* Increase photo size */
    border-radius: 50%;
    object-fit: cover;
}

/* Boutons actions */
.action-buttons button {
    background: transparent;
    border: none;
    cursor: pointer;
    font-size: 16px;
    margin: 0 5px;
    transition: color 0.3s ease-in-out;
}

.view-btn {
    color: #656565;
}

.block-btn {
    color: #ff9500;
}

.delete-btn {
    color: #dc3545;
}

.action-buttons button:hover {
    color: black;
}

/* Pagination */
.pagination {
    display: flex;
    justify-content: center;
    list-style: none;
    padding: 10px;
    margin-top: 20px;
}

.pagination li {
    margin: 0 5px;
    padding: 8px 12px;
    border: 1px solid #ccc;
    cursor: pointer;
    background-color: white;
    border-radius: 5px;
    transition: background-color 0.3s ease-in-out;
}

.pagination li:hover {
    background-color: #f8f9fa;
}

.paginationActive {
    font-weight: bold;
    background-color: #007bff;
    color: white;
    border: none;
}

.previousBttn, .nextBttn {
    margin: 5px;
    padding: 5px 10px;
    cursor: pointer;
    border: 1px solid #ccc;
    border-radius: 5px;
    transition: background-color 0.3s ease-in-out;
}

.previousBttn:hover, .nextBttn:hover {
    background-color: #f8f9fa;
}

.paginationDisabled {
    opacity: 0.5;
    cursor: not-allowed;
}

/* Responsive Design */
@media (max-width: 768px) {
    .dashboardcontent {
        margin-left: 0;
        padding: 10px;
        padding-top: 60px; /* Adjust for smaller screens */
    }

    .student-list {
        padding: 10px;
    }

    table {
        display: block;
        overflow-x: auto;
    }

    th, td {
        padding: 8px;
    }

    .pagination li {
        padding: 6px 10px;
    }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/supermarketList.css">
/* Style de la page Supermarket */
.supermarket-dashboardcontent {
    margin-left: 150px; /* Adjust based on your sidebar width */
    padding: 20px;
    padding-top: 80px; /* Add more padding at the top to push content down */
}
.header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}
/* Sorting Container */
.sort-container {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 20px;
}

.sort-container label {
    font-size: 16px;
    font-weight: 500;
    color: #333;
}

.sort-container select {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
    background-color: white;
    transition: border-color 0.3s ease;
}

.sort-container select:hover {
    border-color: #007bff;
}

.sort-container select:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
}

/* Style for the export PDF button */
.export-pdf-btn {
    background-color: #4CAF50; /* Green */
    border: none;
    color: white;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    font-size: 16px;
    cursor: pointer;
    border-radius: 5px;
}

.export-pdf-btn:hover {
    background-color: #45a049;
}
.supermarket-list {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 1400px;
    margin-top: 20px;
    overflow-x: auto; /* Ensure table is scrollable on small screens */
    margin-top: 50px;
}

/* Titre */
.supermarket-list h3 {
    font-size: 24px;
    font-weight: bold;
    margin-bottom: 20px;
    color: #333;
}

/* Tableau */
table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

th, td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

th {
    background-color: #f8f9fa;
    font-weight: bold;
    color: #333;
}

/* Photo des Supermarkets */
.supermarket-photoList {
    width: 40px; /* Increase photo size */
    height: 40px; /* Increase photo size */
    border-radius: 50%;
    object-fit: cover;
}

/* Boutons actions */
.action-buttons button {
    background: transparent;
    border: none;
    cursor: pointer;
    font-size: 16px;
    margin: 0 5px;
    transition: color 0.3s ease-in-out;
}

.view-btn {
    color: #656565;
}

.block-btn {
    color: #ff9500;
}

.delete-btn {
    color: #dc3545;
}

.action-buttons button:hover {
    color: black;
}

/* Pagination */
.pagination {
    display: flex;
    justify-content: center;
    list-style: none;
    padding: 10px;
    margin-top: 20px;
}

.pagination li {
    margin: 0 5px;
    padding: 8px 12px;
    border: 1px solid #ccc;
    cursor: pointer;
    background-color: white;
    border-radius: 5px;
    transition: background-color 0.3s ease-in-out;
}

.pagination li:hover {
    background-color: #f8f9fa;
}

.paginationActive {
    font-weight: bold;
    background-color: #007bff;
    color: white;
    border: none;
}

.previousBttn, .nextBttn {
    margin: 5px;
    padding: 5px 10px;
    cursor: pointer;
    border: 1px solid #ccc;
    border-radius: 5px;
    transition: background-color 0.3s ease-in-out;
}

.previousBttn:hover, .nextBttn:hover {
    background-color: #f8f9fa;
}

.paginationDisabled {
    opacity: 0.5;
    cursor: not-allowed;
}

/* Responsive Design */
@media (max-width: 768px) {
    .supermarket-dashboardcontent {
        margin-left: 0;
        padding: 10px;
        padding-top: 60px; /* Adjust for smaller screens */
    }

    .supermarket-list {
        padding: 10px;
    }

    table {
        display: block;
        overflow-x: auto;
    }

    th, td {
        padding: 8px;
    }

    .pagination li {
        padding: 6px 10px;
    }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/transporterList.css">
/* Transporter Management Page */

.transporter-list {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 1400px;
    margin-top: 20px;
    overflow-x: auto; /* Ensure table is scrollable on small screens */
    margin-top: 50px;
}
.header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

/* Style for the export PDF button */
.export-pdf-btn {
    background-color: #4CAF50; /* Green */
    border: none;
    color: white;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    font-size: 16px;
    cursor: pointer;
    border-radius: 5px;
}

.export-pdf-btn:hover {
    background-color: #45a049;
}
/* Title */
.transporter-list h3 {
    font-size: 18px;
    font-weight: bold;
    margin-bottom: 15px;
}
/* Sorting Container */
.sort-container {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 20px;
}

.sort-container label {
    font-size: 16px;
    font-weight: 500;
    color: #333;
}

.sort-container select {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
    background-color: white;
    transition: border-color 0.3s ease;
}

.sort-container select:hover {
    border-color: #007bff;
}

.sort-container select:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
}

/* Table */
table {
    width: 100%;
    border-collapse: collapse;
}

th, td {
    padding: 10px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

/* Transporter photo */
.transporter-photoList {
    width: 40px;
    height: 40px;
    border-radius: 50%;
}

/* Action Buttons */
.view-btn, .delete-btn {
    border: none;
    background: none;
    cursor: pointer;
    font-size: 16px;
    margin-right: 8px;
}

.view-btn:hover {
    color: blue;
}



.delete-btn:hover {
    color: red;
}
.pagination {
    display: flex;
    justify-content: center;
    list-style: none;
    padding: 10px;
}

.pagination li {
    margin: 0 5px;
    padding: 8px 12px;
    border: 1px solid #ccc;
    cursor: pointer;
    background-color: white;
    border-radius: 5px;
}

.paginationActive {
    font-weight: bold;
    background-color: #007bff;
    color: white;
    border: none;
}

.previousBttn, .nextBttn {
    margin: 5px;
    padding: 5px 10px;
    cursor: pointer;
}

.paginationDisabled {
    opacity: 0.5;
    cursor: not-allowed;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/viewNgo.css">
/* viewngo.css */
.view-ngo-container {
    display: flex;
    height: 100vh;
    background-color: #f4f7fc;
}

.view-ngo-content {
    margin-left: 50px;
    margin-top: 50px;
    padding: 20px;
    width: 100%;
}

.ngo-card {
    background: #ffffff;
    border-radius: 10px;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    margin-top: 40px;
    display: flex;
    flex-direction: column;
    padding: 30px;
    transition: transform 0.3s ease;
}

.ngo-card:hover {
    transform: translateY(-10px);
}

.ngo-header {
    display: flex;
    align-items: center;
    margin-bottom: 30px;
}

.ngo-photo {
    width: 130px;
    height: 130px;
    border-radius: 50%;
    object-fit: cover;
    margin-right: 20px;
    border: 4px solid #8dc73f;
}

.ngo-info h2 {
    font-size: 30px;
    color: #333;
    margin-bottom: 10px;
}

.ngo-info p {
    font-size: 16px;
    color: #777;
    margin-bottom: 5px;
}

.ngo-actions button {
    margin-right: 10px;
    padding: 10px 20px;
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s;
}
/* viewngo.css */
.ngo-actions button {
    margin-right: 10px;
    padding: 10px 20px;
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s;
}
/* viewngo.css */
.ngo-actions button.block-btn {
    padding: 8px 16px;
    font-size: 14px;
    background-color: transparent;
    border: 2px solid;
    border-radius: 5px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s;
}

.ngo-actions button.block-btn:hover {
    background-color: #f0f0f0;
}

.ngo-actions button.block-btn:focus {
    outline: none;
}

.ngo-actions button.block-btn[style*="color: rgb(116, 16, 16)"] {
    border-color: rgb(165, 45, 45);
    color: rgb(165, 45, 45);
}

.ngo-actions button.block-btn[style*="color: green"] {
    border-color: #8dc73f;
    color: #8dc73f;
}



.ngo-details {
    background: #f9f9f9;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}

.details-table td {
    padding: 15px;
    font-size: 16px;
    border-bottom: 1px solid #f0f0f0;
}

.details-table td:first-child {
    font-weight: bold;
    width: 150px;
}

.details-table tr:last-child td {
    border-bottom: none;
}

.details-table td {
    color: #555;
}

.loading {
    text-align: center;
    font-size: 24px;
    color: #8dc73f;
    margin-top: 50px;
}

@media (max-width: 768px) {
    .ngo-card {
        padding: 20px;
    }

    .ngo-header {
        flex-direction: column;
        align-items: center;
    }

    .ngo-photo {
        margin-right: 0;
        margin-bottom: 20px;
    }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/viewRestaurant.css">
/* viewrestaurant.css */
.view-restaurant-container {
    display: flex;
    height: 100vh;
    background-color: #f4f7fc;
}

.view-restaurant-content {
    margin-left: 50px;
    margin-top: 50px;
    padding: 20px;
    width: 100%;
}

.restaurant-card {
    background: #ffffff;
    border-radius: 10px;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    margin-top: 40px;
    display: flex;
    flex-direction: column;
    padding: 30px;
    transition: transform 0.3s ease;
}

.restaurant-card:hover {
    transform: translateY(-10px);
}

.restaurant-header {
    display: flex;
    align-items: center;
    margin-bottom: 30px;
}

.restaurant-photo {
    width: 130px;
    height: 130px;
    border-radius: 50%;
    object-fit: cover;
    margin-right: 20px;
    border: 4px solid #8dc73f;
}

.restaurant-info h2 {
    font-size: 30px;
    color: #333;
    margin-bottom: 10px;
}

.restaurant-info p {
    font-size: 16px;
    color: #777;
    margin-bottom: 5px;
}

.restaurant-actions button {
    margin-right: 10px;
    padding: 10px 20px;
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s;
}
/* viewrestaurant.css */
.restaurant-actions button {
    margin-right: 10px;
    padding: 10px 20px;
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s;
}
/* viewrestaurant.css */
.restaurant-actions button.block-btn {
    padding: 8px 16px;
    font-size: 14px;
    background-color: transparent;
    border: 2px solid;
    border-radius: 5px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s;
}

.restaurant-actions button.block-btn:hover {
    background-color: #f0f0f0;
}

.restaurant-actions button.block-btn:focus {
    outline: none;
}

.restaurant-actions button.block-btn[style*="color: rgb(116, 16, 16)"] {
    border-color: rgb(165, 45, 45);
    color: rgb(165, 45, 45);
}

.restaurant-actions button.block-btn[style*="color: green"] {
    border-color: #8dc73f;
    color: #8dc73f;
}



.restaurant-details {
    background: #f9f9f9;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}

.details-table td {
    padding: 15px;
    font-size: 16px;
    border-bottom: 1px solid #f0f0f0;
}

.details-table td:first-child {
    font-weight: bold;
    width: 150px;
}

.details-table tr:last-child td {
    border-bottom: none;
}

.details-table td {
    color: #555;
}

.loading {
    text-align: center;
    font-size: 24px;
    color: #8dc73f;
    margin-top: 50px;
}

@media (max-width: 768px) {
    .restaurant-card {
        padding: 20px;
    }

    .restaurant-header {
        flex-direction: column;
        align-items: center;
    }

    .restaurant-photo {
        margin-right: 0;
        margin-bottom: 20px;
    }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/viewStudent.css">
/* viewStudent.css */
.view-student-container {
    display: flex;
    height: 100vh;
    background-color: #f4f7fc;
}

.view-student-content {
    margin-left: 50px;
    margin-top: 50px;
    padding: 20px;
    width: 100%;
}

.student-card {
    background: #ffffff;
    border-radius: 10px;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    margin-top: 40px;
    display: flex;
    flex-direction: column;
    padding: 30px;
    transition: transform 0.3s ease;
}

.student-card:hover {
    transform: translateY(-10px);
}

.student-header {
    display: flex;
    align-items: center;
    margin-bottom: 30px;
}

.student-photo {
    width: 130px;
    height: 130px;
    border-radius: 50%;
    object-fit: cover;
    margin-right: 20px;
    border: 4px solid #8dc73f;
}

.student-info h2 {
    font-size: 30px;
    color: #333;
    margin-bottom: 10px;
}

.student-info p {
    font-size: 16px;
    color: #777;
    margin-bottom: 5px;
}

.student-actions button {
    margin-right: 10px;
    padding: 10px 20px;
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s;
}
/* viewStudent.css */
.student-actions button {
    margin-right: 10px;
    padding: 10px 20px;
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s;
}
/* viewStudent.css */
.student-actions button.block-btn {
    padding: 8px 16px;
    font-size: 14px;
    background-color: transparent;
    border: 2px solid;
    border-radius: 5px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s;
}

.student-actions button.block-btn:hover {
    background-color: #f0f0f0;
}

.student-actions button.block-btn:focus {
    outline: none;
}

.student-actions button.block-btn[style*="color: rgb(116, 16, 16)"] {
    border-color: rgb(165, 45, 45);
    color: rgb(165, 45, 45);
}

.student-actions button.block-btn[style*="color: green"] {
    border-color: #8dc73f;
    color: #8dc73f;
}



.student-details {
    background: #f9f9f9;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}

.details-table td {
    padding: 15px;
    font-size: 16px;
    border-bottom: 1px solid #f0f0f0;
}

.details-table td:first-child {
    font-weight: bold;
    width: 150px;
}

.details-table tr:last-child td {
    border-bottom: none;
}

.details-table td {
    color: #555;
}

.loading {
    text-align: center;
    font-size: 24px;
    color: #8dc73f;
    margin-top: 50px;
}

@media (max-width: 768px) {
    .student-card {
        padding: 20px;
    }

    .student-header {
        flex-direction: column;
        align-items: center;
    }

    .student-photo {
        margin-right: 0;
        margin-bottom: 20px;
    }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/viewSupermarket.css">
/* viewsupermarket.css */
.view-supermarket-container {
    display: flex;
    height: 100vh;
    background-color: #f4f7fc;
}

.view-supermarket-content {
    margin-left: 50px;
    margin-top: 50px;
    padding: 20px;
    width: 100%;
}

.supermarket-card {
    background: #ffffff;
    border-radius: 10px;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    margin-top: 40px;
    display: flex;
    flex-direction: column;
    padding: 30px;
    transition: transform 0.3s ease;
}

.supermarket-card:hover {
    transform: translateY(-10px);
}

.supermarket-header {
    display: flex;
    align-items: center;
    margin-bottom: 30px;
}

.supermarket-photo {
    width: 130px;
    height: 130px;
    border-radius: 50%;
    object-fit: cover;
    margin-right: 20px;
    border: 4px solid #8dc73f;
}

.supermarket-info h2 {
    font-size: 30px;
    color: #333;
    margin-bottom: 10px;
}

.supermarket-info p {
    font-size: 16px;
    color: #777;
    margin-bottom: 5px;
}

.supermarket-actions button {
    margin-right: 10px;
    padding: 10px 20px;
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s;
}
/* viewsupermarket.css */
.supermarket-actions button {
    margin-right: 10px;
    padding: 10px 20px;
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s;
}
/* viewsupermarket.css */
.supermarket-actions button.block-btn {
    padding: 8px 16px;
    font-size: 14px;
    background-color: transparent;
    border: 2px solid;
    border-radius: 5px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s;
}

.supermarket-actions button.block-btn:hover {
    background-color: #f0f0f0;
}

.supermarket-actions button.block-btn:focus {
    outline: none;
}

.supermarket-actions button.block-btn[style*="color: rgb(116, 16, 16)"] {
    border-color: rgb(165, 45, 45);
    color: rgb(165, 45, 45);
}

.supermarket-actions button.block-btn[style*="color: green"] {
    border-color: #8dc73f;
    color: #8dc73f;
}



.supermarket-details {
    background: #f9f9f9;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}

.details-table td {
    padding: 15px;
    font-size: 16px;
    border-bottom: 1px solid #f0f0f0;
}

.details-table td:first-child {
    font-weight: bold;
    width: 150px;
}

.details-table tr:last-child td {
    border-bottom: none;
}

.details-table td {
    color: #555;
}

.loading {
    text-align: center;
    font-size: 24px;
    color: #8dc73f;
    margin-top: 50px;
}

@media (max-width: 768px) {
    .supermarket-card {
        padding: 20px;
    }

    .supermarket-header {
        flex-direction: column;
        align-items: center;
    }

    .supermarket-photo {
        margin-right: 0;
        margin-bottom: 20px;
    }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/viewTransporter.css">
/* viewtransporter.css */
.view-transporter-container {
    display: flex;
    height: 100vh;
    background-color: #f4f7fc;
}

.view-transporter-content {
    margin-left: 50px;
    margin-top: 50px;
    padding: 20px;
    width: 100%;
}

.transporter-card {
    background: #ffffff;
    border-radius: 10px;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    margin-top: 40px;
    display: flex;
    flex-direction: column;
    padding: 30px;
    transition: transform 0.3s ease;
}

.transporter-card:hover {
    transform: translateY(-10px);
}

.transporter-header {
    display: flex;
    align-items: center;
    margin-bottom: 30px;
}

.transporter-photo {
    width: 130px;
    height: 130px;
    border-radius: 50%;
    object-fit: cover;
    margin-right: 20px;
    border: 4px solid #8dc73f;
}

.transporter-info h2 {
    font-size: 30px;
    color: #333;
    margin-bottom: 10px;
}

.transporter-info p {
    font-size: 16px;
    color: #777;
    margin-bottom: 5px;
}

.transporter-actions button {
    margin-right: 10px;
    padding: 10px 20px;
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s;
}
/* viewtransporter.css */
.transporter-actions button {
    margin-right: 10px;
    padding: 10px 20px;
    font-size: 14px;
    border-radius: 5px;
    transition: background-color 0.3s;
}
/* viewtransporter.css */
.transporter-actions button.block-btn {
    padding: 8px 16px;
    font-size: 14px;
    background-color: transparent;
    border: 2px solid;
    border-radius: 5px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s;
}

.transporter-actions button.block-btn:hover {
    background-color: #f0f0f0;
}

.transporter-actions button.block-btn:focus {
    outline: none;
}

.transporter-actions button.block-btn[style*="color: rgb(116, 16, 16)"] {
    border-color: rgb(165, 45, 45);
    color: rgb(165, 45, 45);
}

.transporter-actions button.block-btn[style*="color: green"] {
    border-color: #8dc73f;
    color: #8dc73f;
}



.transporter-details {
    background: #f9f9f9;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}

.details-table td {
    padding: 15px;
    font-size: 16px;
    border-bottom: 1px solid #f0f0f0;
}

.details-table td:first-child {
    font-weight: bold;
    width: 150px;
}

.details-table tr:last-child td {
    border-bottom: none;
}

.details-table td {
    color: #555;
}

.loading {
    text-align: center;
    font-size: 24px;
    color: #8dc73f;
    margin-top: 50px;
}

@media (max-width: 768px) {
    .transporter-card {
        padding: 20px;
    }

    .transporter-header {
        flex-direction: column;
        align-items: center;
    }

    .transporter-photo {
        margin-right: 0;
        margin-bottom: 20px;
    }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/Contact.css">
.contact-page {
    padding: 20px;
    text-align: center;
}

.contact-title {
    font-size: 2rem;
    margin-bottom: 20px;
}

.contact-container {
    display: flex;
    justify-content: center;  /* Centrer les sections */
    align-items: center;  /* Centrer verticalement */
    gap: -10px;
}

.contact-info {
    width: 45%;
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    justify-content: center;  

}

.contact-box {
    width: 45%;
    height: 150px;
    position: relative;
    background-color: #ffffff;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease-in-out, background-color 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
}

.contact-box:hover {
    transform: scale(1.05);
    background-color: #8dc73f;  /* Fond vert lors du survol */
}

.contact-box .icon {
    font-size: 3rem;
    color: rgb(255, 255, 255);  /* Icône en blanc */

    transition: transform 0.3s ease-in-out;

}

.contact-box .content {
    opacity: 0;
    position: absolute;
    top: 10px;
    left: 10px;
    right: 10px;
    bottom: 10px;
    padding: 10px;
    color: #333;
    font-size: 1rem;
    transition: opacity 0.3s ease;

}

.contact-box:hover .content {
    opacity: 1;
    color: white;  /* Texte en blanc au survol */

}


.feedback-form-container {
    width: 45%;
    background-color: #fafafa;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.feedback-form-container h3 {
    margin-bottom: 20px;
}

.feedback-form {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.feedback-form input,
.feedback-form select,
.feedback-form textarea {
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 1rem;
}

.feedback-form button {
    padding: 10px;
    background-color: #8dc73f;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

.feedback-form button:hover {
    background-color: #8dc73f;
}

.feedback-success {
    margin-top: 20px;
    background-color: #dff0d8;
    padding: 10px;
    border-radius: 5px;
}

.feedback-success button {
    background-color: #8dc73f;
    border: none;
    color: white;
    padding: 5px 10px;
    border-radius: 5px;
    cursor: pointer;
}

.feedback-success button:hover {
    background-color: #8dc73f;
}

.contact-map {
    margin-top: 30px;
}
.contact-box .content p {
    margin: 0;
    font-size: 1.2rem;
    color: transparent;  /* Texte masqué par défaut */
    transition: color 0.3s ease;
}

.contact-box:hover .content p {
    color: white;  /* Texte visible en blanc */
}

/* Styles spécifiques aux icônes */
.contact-box:nth-child(1) .icon {
    color: #8dc73f;  /* Vert pour l'icône de localisation */
}

.contact-box:nth-child(2) .icon {
    color: #8dc73f;  /* Vert pour l'icône téléphone */
}

.contact-box:nth-child(3) .icon {
    color: #8dc73f;  /* Vert pour l'icône e-mail */
}

.contact-box:nth-child(4) .icon {
    color: #8dc73f;  /* Vert pour l'icône horaires */
}

.contact-box:hover:nth-child(1) .icon,
.contact-box:hover:nth-child(2) .icon,
.contact-box:hover:nth-child(3) .icon,
.contact-box:hover:nth-child(4) .icon {
    color: white;  /* Icônes deviennent blanches au survol */
}
.contact-message {
    display: block;
    max-width: 600px; /* Adjust width for better readability */
    margin: 20px auto; /* Centering horizontally */
    padding: 20px;
    text-align: center; /* Center the text*/
    font-size: 18px;
    font-weight: 500;
    color: #ffffff !important; /* Texte blanc forcé */
    background: linear-gradient(135deg, #8dc73f, #8dc73f); /* Green gradient for sustainability */
    border-radius: 12px; /* Soft rounded corners */
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); /* Subtle shadow */
    text-decoration: none;
    transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
}

.contact-message:hover {
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.2); /* Stronger shadow */
}
</file>

<file path="sustainafood-frontend/src/assets/styles/ContinueInfo.css">
.continueinfo-container {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f0f0f0;
    padding: 20px;
  }
  
  .continueinfo-card {
    background-color: #ffffff;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    padding: 40px;
    width: 100%;
    max-width: 600px;
  }
  
  .continueinfo-title {
    font-size: 24px;
    font-weight: bold;
    color: #333;
    margin-bottom: 10px;
  }
  
  .continueinfo-description {
    font-size: 16px;
    color: #666;
    margin-bottom: 20px;
  }
  
  .continueinfo-form {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }
  
  .continueinfo-form-group {
    display: flex;
    flex-direction: column;
  }
  
  .continueinfo-label {
    font-size: 14px;
    font-weight: 600;
    color: #333;
    margin-bottom: 5px;
  }
  
  .continueinfo-input,
  .continueinfo-select {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 16px;
  }
  
  .continueinfo-input:focus,
  .continueinfo-select:focus {
    outline: none;
    border-color: #8dc73f;
  }
  
  .continueinfo-input-error {
    border-color: #e74c3c;
  }
  
  .continueinfo-file-input {
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .continueinfo-file-button {
    display: flex;
    align-items: center;
    gap: 5px;
    padding: 10px;
    background-color: #8dc73f;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
  }
  
  .continueinfo-camera-icon {
    font-size: 18px;
  }
  
  .continueinfo-hidden-input {
    display: none;
  }
  
  .continueinfo-image-preview {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    object-fit: cover;
  }
  
  .continueinfo-file-name {
    font-size: 14px;
    color: #666;
  }
  
  .continueinfo-recaptcha {
    margin-top: 20px;
  }
  
  .continueinfo-error {
    color: #e74c3c;
    font-size: 14px;
    margin-top: 10px;
  }
  
  .continueinfo-error-message {
    color: #e74c3c;
    font-size: 12px;
    margin-top: 5px;
  }
  
  .continueinfo-submit-button {
    padding: 12px;
    background-color: #8dc73f;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .continueinfo-submit-button:hover {
    background-color: #7ab62f;
  }
  
  @media (max-width: 768px) {
    .continueinfo-card {
      padding: 20px;
    }
  
    .continueinfo-title {
      font-size: 20px;
    }
  
    .continueinfo-description {
      font-size: 14px;
    }
  
    .continueinfo-input,
    .continueinfo-select,
    .continueinfo-submit-button {
      font-size: 14px;
    }
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/continueSignUp.css">
@import url('https://fonts.googleapis.com/css?family=Montserrat:400,800');

* {
  box-sizing: border-box;
}

.signup-body {
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  font-family: 'Montserrat', sans-serif;
  height: 100vh;
  margin: 0;
  overflow: hidden;
}

.signup-body::before {
  content: '';
  background-image: url('../images/welcomeback.png');
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  opacity: 0.2;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
}

.signup-root {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
}

.signup-h1 {
  font-weight: bold;
}

.signup-h2 {
  text-align: center;
}

.signup-p {
  font-size: 14px;
  font-weight: 100;
  line-height: 20px;
  letter-spacing: 0.5px;
  margin: 20px 0 30px;
}

.signup-span {
  font-size: 12px;
}

.signup-a {
  color: #333;
  font-size: 12px;
  text-decoration: none;
  margin-left: 160px;
}

.signup-button {
  border-radius: 2px;
  border: 1px solid #8dc73f;
  background-color: #8dc73f;
  color: #000000;
  font-size: 12px;
  font-weight: bold;
  padding: 12px 45px;
  letter-spacing: 1px;
  text-transform: uppercase;
  transition: transform 80ms ease-in;
  width: 100%;
  margin-top: 10px;
}

.signup-button:active {
  transform: scale(0.95);
}

.signup-button:focus {
  outline: none;
}

.signup-form {
  background-color: #FFFFFF;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  padding: 0 50px;
  height: 100%;
  text-align: center;
}

.error-message {
  color: red;
  font-size: 14px;
  margin-bottom: 10px;
}

.signup-input {
  background-color: #eee;
  border: none;
  color: black;
  padding: 12px 15px;
  margin: 4px 0;
  width: 100%;
}

.auth-eye-icon {
  transform: translateX(-50%);
  cursor: pointer;
  font-size: 18px;
  margin-left: 400px;
  margin-top: -33px;
}

.signup-container {
  background-color: #fff;
  border-radius: 10px;
  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);
  position: relative;
  overflow: hidden;
  width: 1088px;
  max-width: 100%;
  height: 900px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.signup-form-container {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 50%;
}

.signup-logo-container {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 50%;
}

.signup-logo {
  max-width: 350px;
  margin-bottom: 5px;
}

.aa {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 110%;
  margin: 40px;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/EditProfile.css">
/* EditProfile.css */

.editprofile-container {
  display: flex;
  justify-content: center;
  width: 100%;
  max-width: 1020px;
  position: relative;
  overflow-y: auto;
  background-color: #ffffff25;
  border-radius: 15px;
  box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.42);
  border: 0.1px solid rgba(128, 128, 128, 0.178);
  margin: 30px auto;
}

.editprofile-profile-section {
  flex: 1;
  max-width: 450px;
}

.editprofile-profile-image {
  border-radius: 50%;
  width: 150px;
  height: 150px;
  object-fit: cover;
  margin-top: 186px;
}

.editprofile-row {
  margin-left: 20px;
  display: flex;
  flex-wrap: wrap;
  gap: 15px;
  margin-bottom: 10px;
}

.editprofile-col-md-3,
.editprofile-col-md-5,
.editprofile-col-md-4 {
  padding: 20px;
  width: 100%;
}

.editprofile-col-md-3 {
  background-color: #f3f5f9;
  border-radius: 12px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
  text-align: center;
}

.editprofile-col-md-5,
.editprofile-col-md-4 {
  background-color: #f9f9f9;
  border-radius: 12px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
  width: 100%;
  max-width: 500px;
}

.editprofile-d-flex {
  display: flex;
  flex-wrap: wrap;
}

.editprofile-align-items-center {
  align-items: center;
}

.editprofile-text-center {
  text-align: center;
}

.editprofile-font-weight-bold {
  font-weight: 600;
  color: #333;
}

.editprofile-text-black-50 {
  color: rgba(0, 0, 0, 0.6);
}

.editprofile-labels {
  font-size: 14px;
  color: #555;
  margin-bottom: 5px;
}

.editprofile-form-control {
  background-color: #e9ecef;
  border: 1px solid #d1d9e6;
  border-radius: 8px;
  padding: 12px;
  font-size: 16px;
  width: 100%;
}

.editprofile-form-control:focus {
  border-color: #007bff;
  box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
}

.editprofile-profile-button {
  background-color: #007bff;
  color: white;
  border: none;
  padding: 12px 25px;
  font-size: 16px;
  border-radius: 8px;
  cursor: pointer;
}

.editprofile-profile-button:hover {
  background-color: #0056b3;
}

.editprofile-experience {
  font-size: 18px;
  font-weight: 600;
  color: #007bff;
}

img.editprofile-rounded-circle {
  object-fit: cover;
  border: 4px solid #fff;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

/* Label styles */
.login-label {
  position: absolute;
  left: 15%;
  top: 37%;
  pointer-events: none;
  color: gray;
  transition: all 0.7s ease;
}

.login-input-block {
  position: relative;
  width: 100%;
}

/* Transitions when input is focused or filled */
.login-input:focus + .login-label,
.login-input:valid + .login-label,
.login-input:not(:placeholder-shown) + .login-label {
  transform: translateY(-120%) scale(0.9);
  transition: all 0.7s ease;
}

/* Hide default file input */
.login-input[type="file"] {
  display: none;
}

.custom-file-upload {
  box-shadow: inset 4px 4px 4px rgba(165, 163, 163, 0.315), 4px 4px 4px rgba(218, 218, 218, 0.13);
  color: gray;
  padding: 10px 20px;
  cursor: pointer;
  border-radius: 5px;
  display: inline-block;
  transition: all 0.3s ease;
  background-color: #f5f5f5;
  border: 1px solid #ddd;
}

.custom-file-upload:hover {
  background-color: rgba(141, 199, 63, 0.2);
  color: #71a63f;
}

.file-name {
  margin-top: 8px;
  font-size: 0.9em;
  color: #666;
}

/* From Uiverse.io by sameer2malik */
.loginsignup-container {
  background-color: #f5f5f5;
  padding: 20px;
}

.login-container {
  display: flex;
  width: 100%;
  max-width: 720px;
  height: 500px;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
  background-color: #ffffff25;
  border-radius: 15px;
  box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.42);
  border: 0.1px solid rgba(128, 128, 128, 0.178);
  margin: 120px auto;
}

.login-left {
  width: 66%;
  height: 100%;
}

.login-form {
  display: flex;
  flex-direction: column;
  height: 100%;
  width: 100%;
  left: 0;
  backdrop-filter: blur(20px);
  position: relative;
}

.login-form::before {
  position: absolute;
  content: "";
  width: 40%;
  height: 40%;
  right: 1%;
  z-index: -1;
  background: radial-gradient(circle, #71a63f, rgba(106, 237, 80, 0.37) 60%, rgb(39, 185, 83) 100%);
  filter: blur(70px);
  border-radius: 50%;
}

.login-right {
  width: 34%;
  height: 100%;
}

.login-img {
  width: 100%;
  max-width: 270px;
  height: auto;
  max-height: 300px;
  margin-top: 100px;
}

.login-logo {
  width: 100px;
  height: 100px;
  margin-left: 15px;
}

.login-container::after {
  position: absolute;
  content: "";
  width: 80%;
  height: 80%;
  right: -40%;
  background: rgb(151, 209, 162);
  background: radial-gradient(circle, #71a63f 100%, #71a63f 100%);
  border-radius: 50%;
  z-index: -1;
}

.login-input {
  background: rgba(253, 253, 253, 0);
  outline: none;
  border: 1px solid rgba(255, 0, 0, 0);
  border-radius: 0.5rem;
  padding: 10px;
  margin: 10px 10px;
  display: block;
  color: #71a63fc8;
  font-weight: 500;
  font-size: 0.9em;
  width: 100%;
  max-width: 473px;
  box-shadow: inset 4px 4px 4px rgba(165, 163, 163, 0.315), 4px 4px 4px rgba(218, 218, 218, 0.13);
}

.login-button {
  background: rgba(253, 253, 253, 0);
  outline: none;
  border: 1px solid rgba(255, 0, 0, 0);
  border-radius: 0.5rem;
  padding: 10px;
  margin: 10px 10px;
  display: block;
  color: #71a63fc8;
  font-weight: 500;
  font-size: 0.9em;
  width: 100%;
  max-width: 473px;
  margin-bottom: 30px;
  margin-top: 30px;
  background-color: #8dc73f;
  color: white;
  font-size: medium;
  box-shadow: 2px 4px 8px rgba(70, 70, 70, 0.178);
}

.login-input-block {
  position: relative;
  margin-top: 20px;
}

.login-forgot {
  display: block;
  margin: 5px 0 10px 0;
  margin-left: 35px;
  color: #71a63fc8;
  font-size: 0.9em;
}

.login-input:focus + .login-label,
.login-input:valid + .login-label {
  transform: translateY(-120%) scale(0.9);
  transition: all 0.4s;
}

.login-a {
  color: #8dc73f;
}

/* Ensure the container has the same width/height as the image */
.editprofile-profile-image-container {
  text-align: center;
  position: relative;
  margin: 20px 100px;
  margin-top: 200px;
  width: 150px;
  height: 150px;
}

/* Make the image fill the container */
.editprofile-profile-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 50%;
  margin-top: 0;
  border: 4px solid #8dc73f;
  box-shadow: 0 0 15px rgba(141, 199, 63, 0.3);
}

/* Position the camera icon within the container */
.editprofile-photo-icon {
  position: absolute;
  bottom: 5px;
  right: 5px;
  width: 35px;
  height: 35px;
  background-color: #8dc73f;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
  transition: all 0.3s ease;
}

.editprofile-photo-icon:hover {
  background-color: #71a63f;
  transform: scale(1.1);
}

.editprofile-text-right {
  text-align: center;
}

.editprofile-photo-icon i {
  font-size: 16px;
  color: #333;
}

/* Hide the file input by default */
#file-upload-photo {
  display: none;
}

/* Error message styling */
.error-field {
  color: #e74c3c;
  font-size: 0.8em;
  margin-top: 5px;
  margin-left: 15px;
  font-weight: 500;
}

/* Student card image preview */
.student-card-preview {
  margin-top: 15px;
  padding: 10px;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  background-color: #f8f8f8;
}

.student-card-preview img {
  width: 100%;
  max-width: 300px;
  height: auto;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* Media Queries for Responsiveness */
@media (max-width: 1200px) {
  .editprofile-container {
    margin: 30px auto;
  }
}

@media (max-width: 992px) {
  .editprofile-row {
    flex-direction: column;
  }

  .editprofile-col-md-3,
  .editprofile-col-md-5,
  .editprofile-col-md-4 {
    max-width: 100%;
  }
}

@media (max-width: 768px) {
  .editprofile-col-md-3,
  .editprofile-col-md-5,
  .editprofile-col-md-4 {
    padding: 15px;
  }

  .editprofile-form-control {
    padding: 10px;
  }

  .login-container {
    flex-direction: column;
    height: auto;
    padding: 20px;
  }

  .login-left,
  .login-right {
    width: 100%;
  }

  .login-img {
    margin-top: 20px;
  }

  .editprofile-profile-image-container {
    margin: 20px auto;
  }

  .editprofile-text-right {
    margin-top: 30px;
  }
}

@media (max-width: 576px) {
  .login-label {
    left: 10%;
  }

  .login-forgot {
    margin-left: 15px;
  }

  .editprofile-row {
    margin-left: 0;
  }
}

@media (max-width: 280px) {
  .editprofile-profile-image-container {
    width: 100px;
    height: 100px;
  }

  .editprofile-profile-button {
    font-size: 14px;
    padding: 8px;
  }

  .editprofile-form-control {
    font-size: 14px;
    padding: 6px;
  }

  .editprofile-photo-icon {
    width: 25px;
    height: 25px;
  }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/ForgetPass.css">
.forget-pass-container { 
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    position: relative; /* Ensure positioning context for pseudo-element */
    overflow: hidden;
  }
  
  .forget-pass-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url('../images/welcomeback.png'); /* Ensure the path is correct */
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    opacity: 0.3; /* Set the opacity of the background image */
    z-index: 1; /* Ensure the background is above the container but below the card */
  }
  
  .forget-pass-card {
    background: white;
    padding: 2rem;
    border-radius: 10px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    text-align: center;
    width: 350px;
    position: relative; /* Ensure card is on top of the background */
    z-index: 2; /* Ensure the card is above the background */
  }
  
  .forget-pass-card h2 {
    margin-bottom: 10px;
  }
  
  .forget-pass-card p {
    font-size: 14px;
    color: #555;
  }
  
  .forget-pass-card input {
    width: 100%;
    padding: 10px;
    margin: 10px 0;
    border: 1px solid #ccc;
    border-radius: 5px;
  }
  
  .forget-pass-card button {
    width: 100%;
    padding: 10px;
    background-color: #79ba7d;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
  }
  
  .forget-pass-card button:hover {
    background-color: #8dc73f;
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/log.css">
@import url('https://fonts.googleapis.com/css?family=Montserrat:400,800');

* {
  box-sizing: border-box;
}

.signup-body {
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  font-family: 'Montserrat', sans-serif;
  height: 100vh;
  margin: 0;
  overflow: hidden;
}

.signup-body::before {
  content: '';
  background-image: url('../images/welcomeback.png');
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  opacity: 0.2;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
}

.signup-root {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
}

.signup-h1 {
  font-weight: bold;
}

.signup-h2 {
  text-align: center;
}

.signup-p {
  font-size: 14px;
  font-weight: 100;
  line-height: 20px;
  letter-spacing: 0.5px;
  margin: 20px 0 30px;
}

.signup-span {
  font-size: 12px;
}

.signup-a {
  color: #333;
  font-size: 12px;
  text-decoration: none;
  margin-left: 160px;
}

.signup-button {
  border-radius: 2px;
  border: 1px solid #8dc73f;
  background-color: #8dc73f;
  color: #000000;
  font-size: 12px;
  font-weight: bold;
  padding: 12px 45px;
  letter-spacing: 1px;
  text-transform: uppercase;
  transition: transform 80ms ease-in;
  width: 100%;
  margin-top: 10px;
}

.signup-button:active {
  transform: scale(0.95);
}

.signup-button:focus {
  outline: none;
}

.signup-button .ghost {
  background-color: #FFFFFF;
  border-color: black;
}

.signup-form {
  background-color: #FFFFFF;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  padding: 0 50px;
  height: 100%;
  text-align: center;
}
.error-message {
  color: red;
  font-size: 14px;
  margin-bottom: 10px;
}

.signup-input {
  background-color: #eee;
  border: none;
  color: black;
  padding: 12px 15px;
  margin: 4px 0;
  width: 100%;
}

.auth-eye-icon {
  transform: translateX(-50%);
  cursor: pointer;
  font-size: 18px;
  margin-left: 400px;
  margin-top: -33px;
}


.signup-container {
  background-color: #fff;
  border-radius: 10px;
  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);
  position: relative;
  overflow: hidden;
  width: 1088px;
  max-width: 100%;
  height: 900px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.signup-form-container {
  position: absolute;
  top: 0;
  height: 100%;
  transition: all 0.6s ease-in-out;
}

.signup-sign-in-container {
  left: 0;
  width: 50%;
  z-index: 2;
}

.signup-container.right-panel-active .signup-sign-in-container {
  transform: translateX(100%);
}

.signup-sign-up-container {
  left: 0;
  width: 50%;
  opacity: 0;
  z-index: 1;
}

.signup-container.right-panel-active .signup-sign-up-container {
  transform: translateX(100%);
  opacity: 1;
  z-index: 5;
  animation: signup-show 0.6s;
}

@keyframes signup-show {
  0%, 49.99% {
    opacity: 0;
    z-index: 1;
  }
  50%, 100% {
    opacity: 1;
    z-index: 5;
  }
}

.signup-overlay-container {
  position: absolute;
  top: 0;
  left: 50%;
  width: 50%;
  height: 100%;
  overflow: hidden;
  transition: transform 0.6s ease-in-out;
  z-index: 100;
}

.signup-container.right-panel-active .signup-overlay-container {
  transform: translateX(-100%);
}

.signup-overlay {
  background: #79ba7d;
  background: -webkit-linear-gradient(to right, #8dc73f, #8eb73f);
  background: linear-gradient(to right, #8dc73f, #8eb73f);
  background-repeat: no-repeat;
  background-size: cover;
  background-position: 0 0;
  color: #FFFFFF;
  position: relative;
  left: -100%;
  height: 100%;
  width: 200%;
  transform: translateX(0);
  transition: transform 0.6s ease-in-out;
}

.signup-container.right-panel-active .signup-overlay {
  transform: translateX(50%);
}

.signup-overlay-panel {
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  padding: 0 40px;
  text-align: center;
  top: 0;
  height: 100%;
  width: 50%;
  transform: translateX(0);
  transition: transform 0.6s ease-in-out;
}

.signup-overlay-left {
  transform: translateX(-20%);
}

.signup-container.right-panel-active .signup-overlay-left {
  transform: translateX(0);
}

.signup-logo {
  max-width: 350px;
  margin-bottom: 5px;
}

.signup-overlay-right {
  right: 0;
  transform: translateX(0);
}

.signup-container.right-panel-active .signup-overlay-right {
  transform: translateX(20%);
}

.signup-social-container {
  margin: 10px 0;
}

.signup-social-container a {
  border: 1px solid #DDDDDD;
  border-radius: 50%;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  margin: 0 5px;
  height: 40px;
  width: 40px;
}

.signup-social-container img {
  width: 30px;
  height: 30px;
  object-fit: cover;
  border-radius: 50%;
}
.aa{
  display: flex;
  justify-content: center;
  align-items: center;
  height: 110%;
  margin: 40px;
}
/* From Uiverse.io by kyle1dev */ 
.checkbox-container {
  display: flex;
  gap: 20px;
  padding: 20px;
  background: #f8fafc;
  border-radius: 16px;
  box-shadow:
    0 4px 6px -1px rgba(0, 0, 0, 0.1),
    0 2px 4px -2px rgba(0, 0, 0, 0.05);
}

.ios-checkbox {
  --checkbox-size: 15px;
  

  position: relative;
  display: inline-block;
  cursor: pointer;
  user-select: none;
  -webkit-tap-highlight-color: transparent;
}

.ios-checkbox input {
  display: none;
}

.checkbox-wrapper {
  position: relative;
  width: var(--checkbox-size);
  height: var(--checkbox-size);
  border-radius: 8px;
  transition: transform 0.2s ease;
}

.checkbox-bg {
  position: absolute;
  inset: 0;
  
  border-radius: 5px;
  border: 2px solid var(--checkbox-border);
  background: white;
  transition: all 0.2s ease;
}

.checkbox-icon {
  position: absolute;
  inset: 0;
  margin: auto;
  
  width: 80%;
  height: 80%;
  color: white;
  transform: scale(0);
  transition: all 0.2s ease;
}

.check-path {
  stroke-dasharray: 40;
  stroke-dashoffset: 40;
  transition: stroke-dashoffset 0.3s ease 0.1s;
}

/* Checked State */
.ios-checkbox input:checked + .checkbox-wrapper .checkbox-bg {
  background: var(--checkbox-color);
  border-color: var(--checkbox-color);
}

.ios-checkbox input:checked + .checkbox-wrapper .checkbox-icon {
  transform: scale(1);
}

.ios-checkbox input:checked + .checkbox-wrapper .check-path {
  stroke-dashoffset: 0;
}

/* Hover Effects */
.ios-checkbox:hover .checkbox-wrapper {
  transform: scale(1.05);
}

/* Active Animation */
.ios-checkbox:active .checkbox-wrapper {
  transform: scale(0.95);
}

/* Focus Styles */
.ios-checkbox input:focus + .checkbox-wrapper .checkbox-bg {
  box-shadow: 0 0 0 4px var(--checkbox-bg);
}



.ios-checkbox.green {
  --checkbox-color: #8dc73f ;
  --checkbox-bg: #d1fae5;
  --checkbox-border: #8dc73f ;
  margin-left: -10px;
  
}


/* Animation */
@keyframes bounce {
  0%,
  100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.1);
  }
}

.ios-checkbox input:checked + .checkbox-wrapper {
  animation: bounce 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}
.signbtn{
  margin-top: 10px;
  font-size: 12px;
  padding:  5px 10px; 
  background-color: black;
  color: white;
  border-radius: 5px;
  border: none;
  width: 100px;
  height: 40px;
  font-size: 15px;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/MyDonations.css">
/* 🟢 Style général */
.mydonations-container {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}

/* 🟢 Ajoute un espace sous le Navbar */
.mydonations-content {
    padding: 20px;
    padding-top: 40px; /* Plus d'espace sous le Navbar */
    flex-grow: 1;
}

/* 🟢 Style du titre */
.mydonations-title {
    font-size: 26px;
    font-weight: bold;
    margin-bottom: 20px;
    color: #333;
    text-align: center;
}

/* 🟢 Style du tableau */
.mydonations-list {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 1400px;
    margin: 0 auto;
    overflow-x: auto;
}

/* 🟢 Style du tableau */
table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

/* 🟢 Style des colonnes */
th, td {
    padding: 14px;
    text-align: center;
    border-bottom: 1px solid #ddd;
}

/* 🟢 Style des en-têtes */
th {
    background-color: #f8f9fa;
    font-weight: bold;
    color: #333;
}

/* 🟢 Effet survol des lignes du tableau */
tr:hover {
    background-color: #f2f2f2;
    transition: background 0.3s ease-in-out;
}

/* 🟢 Statuts colorés */
.status {
    padding: 6px 12px;
    border-radius: 5px;
    font-weight: bold;
    text-transform: capitalize;
}

/* 🔵 Statut en attente */
.status.pending {
    background-color: #ffcc00;
    color: #333;
}

/* 🟢 Statut approuvé */
.status.approved {
    background-color: #28a745;
    color: white;
}

/* 🔵 Statut livré */
.status.delivered {
    background-color: #007bff;
    color: white;
}

/* 🟢 Colonne Self-Delivery */
.self-delivery {
    font-weight: bold;
    color: #333;
}

.self-delivery.yes {
    color: #28a745; /* ✅ Vert pour "Yes" */
}

.self-delivery.no {
    color: #dc3545; /* ❌ Rouge pour "No" */
}



/* 🟢 Style des boutons d'action */
.action-buttons {
    display: flex;
    justify-content: center;
    gap: 10px;
}

/* 🟢 Style des icônes */
.action-buttons button {
    background: transparent;
    border: none;
    cursor: pointer;
    font-size: 20px;
    transition: color 0.3s;
}

/* 🟢 Modifier */
.edit-btn {
    color: #007bff;
}

.edit-btn:hover {
    color: #0056b3;
}

/* 🟢 Sauvegarder */
.save-btn {
    color: #28a745;
}

.save-btn:hover {
    color: #1e7e34;
}

/* 🟢 Supprimer */
.delete-btn {
    color: #dc3545;
}

.delete-btn:hover {
    color: #c82333;
}

/* 🟢 Style des inputs en mode édition */
.edit-input {
    padding: 5px;
    border: 1px solid #ddd;
    border-radius: 5px;
    width: 100%;
}

/* 🟢 Responsive */
@media (max-width: 768px) {
    .mydonations-list {
        padding: 10px;
    }

    table {
        display: block;
        overflow-x: auto;
    }

    th, td {
        padding: 10px;
    }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/MyRequests.css">
/* 🟢 Style général */
.myrequests-container {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}

/* 🟢 Ajoute un espace sous le Navbar */
.myrequests-content {
    padding: 20px;
    padding-top: 20px; /* Espace sous le navbar */
    flex-grow: 1;
}

/* 🟢 Style du titre */
.myrequests-title {
    font-size: 26px;
    font-weight: bold;
    margin-bottom: 20px;
    color: #333;
    text-align: center;
}

/* 🟢 Style du tableau */
.myrequests-list {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 1400px;
    margin-top: 20px;
    overflow-x: auto; /* Scroll horizontal sur petits écrans */
}

/* 🟢 Style du tableau */
table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

th, td {
    padding: 12px;
    text-align: center;
    border-bottom: 1px solid #ddd;
}

th {
    background-color: #f8f9fa;
    font-weight: bold;
    color: #333;
}

/* 🟢 Statuts colorés */
.status {
    padding: 6px 10px;
    border-radius: 5px;
    font-weight: bold;
    text-transform: capitalize;
}

.status.pending {
    background-color: #ffcc00;
    color: #333;
}

.status.approved {
    background-color: #28a745;
    color: white;
}

.status.rejected {
    background-color: #dc3545;
    color: white;
}

/* 🟢 Style des boutons */
.action-buttons {
    display: flex;
    justify-content: center;
    gap: 10px;
}

.action-buttons button {
    background: transparent;
    border: none;
    cursor: pointer;
    font-size: 18px;
    transition: color 0.3s;
}

.edit-btn {
    color: #007bff;
}

.save-btn {
    color: #28a745;
}

.delete-btn {
    color: #dc3545;
}

.action-buttons button:hover {
    color: black;
}

/* 🟢 Input d'édition */
.edit-input {
    padding: 5px;
    border: 1px solid #ddd;
    border-radius: 5px;
    width: 100%;
}

/* 🟢 Responsive */
@media (max-width: 768px) {
    .myrequests-content {
        margin-left: 0;
        padding: 10px;
        padding-top: 60px;
    }

    .myrequests-list {
        padding: 10px;
    }

    table {
        display: block;
        overflow-x: auto;
    }

    th, td {
        padding: 8px;
    }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/Navbar.css">
/* Style général */
.navbarfront {
  background: white;
  padding: 0.6rem 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
}

.logo-container {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.logo {
  height: 50px;
}

.title {
  color: #8dc73f;
  font-size: 1.5rem;
  font-weight: bold;
}

/* Navigation Links */
.nav-links {
  list-style: none;
  display: flex;
  align-items: center;
  gap: 1.5rem;
}

.nav-link {
  text-decoration: none;
  color: black;
  font-size: 1rem;
  cursor: pointer;
  transition: color 0.3s ease;
}

.nav-link:hover {
  color: #8dc73f;
  font-weight: bold;
}

/* Style Dropdown */
.dropdown {
  position: relative;
}

.dropdown-toggle {
  cursor: pointer;
  color: black;
  font-size: 1rem;
  padding: 10px;
  transition: color 0.3s ease;
}

.dropdown-toggle:hover {
  color: #8dc73f;
  font-weight: bold;
}

.dropdown-content {
  display: none;
  position: absolute;
  background: white;
  min-width: 180px;
  box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
  border-radius: 5px;
  padding: 10px 0;
  z-index: 1000;
  text-align: left;
}

.dropdown:hover .dropdown-content {
  display: block;
}

.dropdown-content a {
  display: block;
  padding: 10px 15px;
  color: black;
  text-decoration: none;
  font-size: 0.9rem;
  transition: background 0.3s ease, color 0.3s ease;
}

.dropdown-content a:hover {
  background: #8dc73f;
  color: white;
}

/* Profil Menu */
.profile-menu {
  position: relative;
  cursor: pointer;
}

.profile-img {
  height: 40px;
  width: 40px;
  border-radius: 50%;
}

.dropdown-menu {
  display: none;
  position: absolute;
  top: 50px;
  right: 0;
  background: white;
  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
  border-radius: 5px;
  overflow: hidden;
  z-index: 1000;
  min-width: 200px;
}

.dropdown-menu.active {
  display: block;
}

.profile-info {
  display: flex;
  align-items: center;
  padding: 10px;
}

.dropdown-img {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  margin-right: 10px;
}

.user-name {
  font-weight: bold;
  color: #000;
}

.user-email {
  font-size: 0.8rem;
  color: #434141;
}

.menu-item {
  display: block;
  width: 100%;
  padding: 10px;
  border: none;
  background: none;
  text-align: left;
  cursor: pointer;
  transition: background 0.3s ease;
}

.menu-item:hover {
  background: #8dc73f;
  color: white;
}

.logout {
  color: red;
  font-weight: bold;
}

/* Auth Buttons */
.auth-buttons {
  display: flex;
  gap: 1rem;
  align-items: center;
}

.auth-button {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  text-decoration: none;
  font-weight: 500;
  transition: all 0.3s ease;
}

.signin {
  color: #8dc73f;
  border: 1px solid #8dc73f;
}

.signin:hover {
  background-color: rgba(141, 199, 63, 0.1);
}

.signup {
  background-color: #8dc73f;
  color: white;
}

.signup:hover {
  background-color: #7ab32f;
}

/* Responsive Design */
@media (max-width: 1024px) {
  .nav-links {
    gap: 1rem;
  }
}

@media (max-width: 950px) {
  .navbarfront {
    flex-direction: row;
    justify-content: space-between;
    padding: 0.8rem;
  }

  .title {
    font-size: 1.2rem;
  }

  .nav-links {
    display: none;
    flex-direction: column;
    position: absolute;
    top: 70px;
    left: 0;
    width: 100%;
    background: white;
    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.1);
    padding: 1rem 0;
    z-index: 1000;
  }

  .nav-links.open {
    display: flex;
  }

  .nav-link {
    padding: 10px;
    text-align: center;
    font-size: 1rem;
  }

  .auth-buttons {
    flex-direction: column;
    width: 100%;
    padding: 0 1rem;
    gap: 0.5rem;
  }

  .auth-button {
    width: 100%;
    justify-content: center;
  }

  .menu-toggle {
    display: flex;
    flex-direction: column;
    cursor: pointer;
  }

  .bar {
    background: black;
    height: 3px;
    width: 20px;
    margin: 2px 0;
    transition: 0.4s;
  }

  /* Animation pour le menu burger */
  .menu-toggle.open .bar:nth-child(1) {
    transform: rotate(45deg) translate(5px, 5px);
  }

  .menu-toggle.open .bar:nth-child(2) {
    opacity: 0;
  }

  .menu-toggle.open .bar:nth-child(3) {
    transform: rotate(-45deg) translate(6px, -6px);
  }
}
</file>

<file path="sustainafood-frontend/src/assets/styles/Notfound.css">
.notfound-container {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    background: linear-gradient(to bottom, #f2f7eb, #e8f3dc);
  }
  
  .notfound-content {
    flex-grow: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 3rem 1rem;
  }
  
  .notfound-card {
    max-width: 48rem;
    width: 100%;
    background-color: white;
    border-radius: 0.75rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    padding: 2rem;
    text-align: center;
  }
  
  .notfound-icon-container {
    margin-bottom: 1.5rem;
  }
  
  .notfound-icon {
    width: 5rem;
    height: 5rem;
    margin: 0 auto;
    color: #4caf50;
  }
  
  .notfound-title {
    font-size: 3.75rem;
    font-weight: bold;
    color: #2e7d32;
    margin-bottom: 1rem;
  }
  
  .notfound-subtitle {
    font-size: 1.875rem;
    font-weight: 600;
    color: #388e3c;
    margin-bottom: 1.5rem;
  }
  
  .notfound-message {
    color: #666;
    margin-bottom: 2rem;
    max-width: 32rem;
    margin-left: auto;
    margin-right: auto;
  }
  
  .notfound-actions {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    justify-content: center;
  }
  
  .notfound-btn {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    font-weight: 500;
    text-decoration: none;
    border-radius: 9999px;
    transition: background-color 0.3s, color 0.3s;
  }
  
  .notfound-btn-primary {
    background-color: #4caf50;
    color: white;
  }
  
  .notfound-btn-primary:hover {
    background-color: #388e3c;
  }
  
  .notfound-btn-secondary {
    border: 2px solid #4caf50;
    color: #4caf50;
  }
  
  .notfound-btn-secondary:hover {
    background-color: #f0f8eb;
  }
  
  @media (min-width: 640px) {
    .notfound-actions {
      flex-direction: row;
    }
  }
  
  @media (min-width: 768px) {
    .notfound-card {
      padding: 3rem;
    }
  
    .notfound-title {
      font-size: 4.5rem;
    }
  
    .notfound-subtitle {
      font-size: 2.25rem;
    }
  }
</file>

<file path="sustainafood-frontend/src/components/backoffcom/CardStats.jsx">
import { 
    FaDollarSign, 
    FaUserCheck, 
    FaUser, 
    FaUsers, 
    FaUtensils, 
    FaBriefcase, 
    FaChartLine, 
    FaHandHoldingHeart 
  } from "react-icons/fa";
  import "/src/assets/styles/backoffcss/card.css";
  
  const CardStats = ({ title, value, percentage, icon, color, progress }) => {
    const icons = {
      dollar: <FaDollarSign />,
      userCheck: <FaUserCheck />, // Correction ici
      user: <FaUser />,
      users: <FaUsers />,
      utensils: <FaUtensils />,
      briefcase: <FaBriefcase />,
      chart: <FaChartLine />,
      handHoldingHeart: <FaHandHoldingHeart />
    };
  
    return (
      <div className="card">
        <div className="card-header">
          <div className="icon">{icons[icon]}</div>
          <div className="card-info">
            <h3>{title}</h3>
            <p className="value">{value}</p>
            <p className="percentage" style={{ color: color }}>{percentage}%</p>
          </div>
        </div>
        <div className="progress-bar">
  <div className="progress" 
       style={{ width: `${progress}%`, maxWidth: "100%", minWidth: "30%", backgroundColor: color }}>
  </div>
</div>

      </div>
    );
  };
  
  export default CardStats;
</file>

<file path="sustainafood-frontend/src/components/backoffcom/Chart.jsx">
import { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, BarChart, Bar } from "recharts";
import "/src/assets/styles/backoffcss/chart.css";

const lineData = [
  { name: "Jan", sales: 4000 },
  { name: "Feb", sales: 3000 },
  { name: "Mar", sales: 5000 },
  { name: "Apr", sales: 7000 },
];

const Chart = () => {
  return (
    <div className="charts-container">
      {/* Graphique Sales Over Time */}
      <div className="chart">
        <h3>Food Redistributing</h3>
        <ResponsiveContainer width="100%" height={250}>
          <LineChart data={lineData}>
            <XAxis dataKey="name" />
            <YAxis />
            <Tooltip />
            <Line type="monotone" dataKey="sales" stroke="#4f46e5" strokeWidth={3} />
          </LineChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
};

export default Chart;
</file>

<file path="sustainafood-frontend/src/components/backoffcom/DonationStatus.jsx">
import "/src/assets/styles/backoffcss/donationStatus.css";
import { FaApple, FaFacebook, FaPaypal, FaGithub } from "react-icons/fa";
import { SiFigma } from "react-icons/si";

import { FaStore, FaCarrot, FaHandsHelping, FaUtensils, FaTruck } from "react-icons/fa";

const donations = [
  { name: "Monoprix", category: "Supermarket Donations", progress: 54, icon: <FaStore size={16} color="red" /> },
  { name: "Supermarket", category: "Fresh Produce", progress: 86, icon: <FaCarrot size={16} color="orange" /> },
  { name: "Ha Food", category: "Charity Support", progress: 90, icon: <FaHandsHelping size={16} color="green" /> },
  { name: "Pasta Cosi", category: "Restaurant Donations", progress: 37, icon: <FaUtensils size={16} color="brown" /> },
  { name: "First Delivery", category: "Transport & Logistics", progress: 29, icon: <FaTruck size={16} color="blue" /> },
];


const DonationStatus = () => {
  return (
    <div className="donation-status">
      <h3>Donation Status</h3>
      {donations.map((donation, index) => (
        <div key={index} className="donation-item">
          <div className="donation-info">
            {donation.icon}
            <div>
              <p className="donation-name">{donation.name}</p>
              <p className="donation-category">{donation.category}</p>
            </div>
          </div>
          <div className="progress-container">
            <div className="progress-bar" style={{ width: `${donation.progress}%`, backgroundColor: donation.icon.props.color }}></div>
          </div>
          <p className="progress-text">{donation.progress}%</p>
        </div>
      ))}
    </div>
  );
};


export default DonationStatus;
</file>

<file path="sustainafood-frontend/src/components/backoffcom/Navbar.jsx">
import { FaSearch, FaGlobe, FaMoon, FaBell, FaUserCircle, FaSignOutAlt } from "react-icons/fa";
import { useNavigate, useLocation } from "react-router-dom";
import { useState, useEffect } from "react";
import { useAuth } from "../../contexts/AuthContext"; // Import useAuth
import { getUserById } from "../../api/userService"; // Import getUserById
import "/src/assets/styles/backoffcss/navbar.css";

const Navbar = ({ setSearchQuery }) => {
    const navigate = useNavigate();
    const location = useLocation();
    const [searchQuery, setSearchQueryLocal] = useState("");
    const [menuOpen, setMenuOpen] = useState(false); // State for dropdown menu
    const { user: authUser, logout } = useAuth(); // Get user and logout from AuthContext
    const [user, setUser] = useState(authUser); // State for admin details

    // Fetch admin details when the component mounts or authUser changes
    useEffect(() => {
        const fetchAdminDetails = async () => {
            if (authUser && (authUser._id || authUser.id)) {
                try {
                    const response = await getUserById(authUser._id || authUser.id);
                    setUser(response.data); // Set the admin details
                } catch (error) {
                    console.error("Error fetching admin details:", error);
                }
            }
        };

        fetchAdminDetails();
    }, [authUser]);

    const handleSearch = (e) => {
        setSearchQueryLocal(e.target.value);
    };

    const handleSearchSubmit = (e) => {
        e.preventDefault();
        setSearchQuery(searchQuery.trim()); // Update searchQuery in the parent component
        if (searchQuery.trim()) {
            navigate(`${location.pathname}?search=${searchQuery}`); // You can handle navigation here as well
        }
    };

    const handleLogout = () => {
        logout(); // Call the logout function from AuthContext
        navigate("/login"); // Redirect to login page
    };

    // Get the profile photo URL
    const profilePhotoUrl = user?.photo ? `http://localhost:3000/${user.photo}` : null;

    return (
        <div className="navbar">
            {/* Barre de recherche */}
            <form className="search-container" onSubmit={handleSearchSubmit}>
                <input 
                    type="text" 
                    placeholder="Search..." 
                    value={searchQuery} 
                    onChange={handleSearch} 
                />
                <button type="submit" className="search-icon-btn">
                    <FaSearch className="search-icon" />
                </button>
            </form>

            {/* Icônes de la navbar */}
            <div className="navbar-actions">
                <FaGlobe className="icon globe" />
                <FaMoon className="icon moon" />
                <div className="notification-container">
                    <FaBell className="icon bell" />
                    <span className="badge">3</span>
                </div>

                {/* Profile Dropdown Menu */}
                <div className="profile-menu" onClick={() => setMenuOpen(!menuOpen)}>
                    {profilePhotoUrl ? (
                        <img src={profilePhotoUrl} alt="Profile" className="profile-img" />
                    ) : (
                        <FaUserCircle className="icon user" />
                    )}
                    <div className={`dropdown-menu ${menuOpen ? "active" : ""}`}>
                        <div className="profile-info">
                            {profilePhotoUrl ? (
                                <img src={profilePhotoUrl} alt="Profile" className="dropdown-img" />
                            ) : (
                                <FaUserCircle className="dropdown-img" />
                            )}
                            <div>
                                <p className="user-name">{user?.name || "Loading..."}</p>
                                <p className="user-email">{user?.email || "Loading..."}</p>
                            </div>
                        </div>
                        <hr />
                        
                        <button className="menu-item" onClick={() => navigate("/admin-profile")}>
                        Your account
                        </button>
                        <hr />
                        <button onClick={handleLogout} className="menu-item logout">
                            <FaSignOutAlt /> Logout
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Navbar;
</file>

<file path="sustainafood-frontend/src/components/Footer.jsx">
import React from 'react';
import styled from 'styled-components';
import { FaFacebookF, FaTwitter, FaInstagram, FaLinkedinIn } from 'react-icons/fa';

const FooterContainer = styled.footer`
  background: #56ab2a;
  color: white;
  padding: 40px 20px;
  font-family: 'Poppins', sans-serif;
`;

const FooterContent = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 40px;
  justify-content: center;
  text-align: left;
`;

const Column = styled.div`
  flex: 1 1 250px;
  min-width: 250px;
`;

const ColumnTitle = styled.h3`
  font-size: 20px;
  margin-bottom: 15px;
  color: #d4edda;
`;

const AboutText = styled.p`
  font-size: 14px;
  line-height: 1.6;
`;

const FooterLinks = styled.ul`
  list-style: none;
  padding: 0;
  li {
    margin-bottom: 10px;
  }
  a {
    color: white;
    text-decoration: none;
    font-size: 14px;
    transition: color 0.3s;
    &:hover {
      text-decoration: underline;
      color: #d4edda;
    }
  }
`;

const ContactInfo = styled.div`
  font-size: 14px;
  line-height: 1.6;
  a {
    color: white;
    text-decoration: none;
    transition: color 0.3s;
    &:hover {
      color: #d4edda;
    }
  }
`;

const SocialIcons = styled.div`
  margin-top: 15px;
  display: flex;
  gap: 15px;
  svg {
    color: white;
    font-size: 20px;
    cursor: pointer;
    transition: transform 0.3s, color 0.3s;
    &:hover {
      transform: scale(1.2);
      color: #d4edda;
    }
  }
`;

const NewsletterForm = styled.form`
  margin-top: 15px;
  display: flex;
  gap: 10px;
            border-radius: 14px;


  input {
    padding: 8px;
    border: none;
    border-radius: 14px;
    flex: 1;
     background: white;
     color:black

  }
  button {
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    background: #d4edda;
    color: #56ab2f;
    font-weight: bold;
    cursor: pointer;
    transition: background 0.3s;
    &:hover {
      background: #c1eac1;
    }
  }
`;

const FooterBottom = styled.div`
  text-align: center;
  margin-top: 30px;
  font-size: 13px;
  border-top: 1px solid rgba(255, 255, 255, 0.3);
  padding-top: 15px;
`;

const Footer = () => {
  return (
    <FooterContainer>
      <FooterContent>
        {/* About Section */}
        <Column>
          <ColumnTitle>About SustainaFood</ColumnTitle>
          <AboutText>
            SustainaFood is an innovative food redistribution platform committed to reducing food waste and connecting donors, recipients, and transporters. We empower communities and promote sustainability.
          </AboutText>
        </Column>

        {/* Quick Links */}
        <Column>
          <ColumnTitle>Quick Links</ColumnTitle>
          <FooterLinks>
            <li><a href="#">About Us</a></li>
            <li><a href="/Contact">Contact</a></li>
            <li><a href="#">Privacy Policy</a></li>
            <li><a href="#">Terms & Conditions</a></li>
          </FooterLinks>
        </Column>

        {/* Contact & Social */}
        <Column>
          <ColumnTitle>Contact & Social</ColumnTitle>
          <ContactInfo>
            <p>Email: <a href="mailto:info@sustainafood.com">info@sustainafood.com</a></p>
            <p>Phone: +216 123 456 789</p>
          </ContactInfo>
          <SocialIcons>
            <FaFacebookF />
            <FaTwitter />
            <FaInstagram />
            <FaLinkedinIn />
          </SocialIcons>
          <NewsletterForm>
            <input type="email" placeholder="Subscribe to newsletter" />
            <button type="submit">Subscribe</button>
          </NewsletterForm>
        </Column>
      </FooterContent>
      <FooterBottom>
        © 2025 SustainaFood. All rights reserved.
      </FooterBottom>
    </FooterContainer>
  );
};

export default Footer;
</file>

<file path="sustainafood-frontend/src/components/RoleSpecificProfile.jsx">
import React from 'react';
import DonorProfile from './DonorProfile';
import RecipientProfile from './RecipientProfile';
import TransporterProfile from './TransporterProfile';

const RoleSpecificProfile = ({ user }) => {
  if (!user || !user.role) return null;

  // En fonction de la valeur de user.role, affiche le composant adapté
  switch(user.role) {
    case 'restaurant':
    case 'supermarket':
      return <DonorProfile />;
    case 'ong':
    case 'student':
      return <RecipientProfile />;
    case 'transporter':
      return <TransporterProfile />;
    default:
      return <div>Profile not available for this role.</div>;
  }
};

export default RoleSpecificProfile;
</file>

<file path="sustainafood-frontend/src/components/TransporterProfile.jsx">
import React from 'react';
//import '../assets/styles/RecipientProfile.css'; // Crée ce fichier pour des styles spécifiques

const RecipientProfile = () => {
  // Exemple statique pour illustrer des demandes
  return (
    <div className="recipient-profile">
      <h3>My Donation Requests</h3>
      <div className="request-list">
        <div className="request-card">
          <h3 className="request-title">Request for 10 kg Rice</h3>
          <p><strong>Status:</strong> Pending</p>
          <p><strong>Details:</strong> Needed for a community meal event.</p>
          <button className="btnsee">View Details</button>
        </div>
        <div className="request-card">
          <h3 className="request-title">Request for 20 liters Milk</h3>
          <p><strong>Status:</strong> Approved</p>
          <p><strong>Details:</strong> Request submitted by our local NGO.</p>
          <button className="btnsee">View Details</button>
        </div>
        {/* Ajoute d'autres demandes si nécessaire */}
      </div>
    </div>
  );
};

export default RecipientProfile;
</file>

<file path="sustainafood-frontend/src/index.css">
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}
</file>

<file path="sustainafood-frontend/src/main.jsx">
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { AuthProvider } from "./contexts/AuthContext";
import { BrowserRouter as Router } from "react-router-dom";
import {GoogleOAuthProvider} from "@react-oauth/google"

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <Router>
    <AuthProvider>
    <GoogleOAuthProvider clientId="956944465220-h2iu00f6if7r8a58tb69s34qt9etetli.apps.googleusercontent.com">
    <App />
    </GoogleOAuthProvider>
    </AuthProvider>
    </Router>
  </React.StrictMode>
);
</file>

<file path="sustainafood-frontend/src/pages/About.jsx">
import React from "react";
import { FaUtensils, FaLink, FaBox, FaGlobe } from "react-icons/fa";
import Navbar from "../components/Navbar";
import Footer from "../components/Footer";

const About = () => {
  return (
    <>
      <Navbar />
      <div>
        <style>
          {`
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
          font-family: 'Arial', sans-serif;
        }
        .about-container {
          background-color: #f1f9f1;
          min-height: 100vh;
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          padding: 60px 20px;
          text-align: center;
        }
        .about-title {
          font-size: 36px;
          font-weight: bold;
          color: #4CAF50;
          margin-bottom: 15px;
        }
        .about-description {
          color: #333;
          font-size: 18px;
          max-width: 800px;
          margin-bottom: 30px;
          line-height: 1.6;
        }
        .about-values {
          display: flex;
          flex-wrap: wrap;
          justify-content: center;
          gap: 20px;
          width: 100%;
          max-width: 900px;
          margin-bottom: 40px;
        }
        .value-item {
          background-color: #fff;
          border-radius: 10px;
          padding: 20px;
          width: 200px;
          box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
          text-align: center;
          transition: transform 0.3s;
        }
        .value-item:hover {
          transform: translateY(-5px);
        }
        .about-section {
          background-color: white;
          border-radius: 10px;
          padding: 30px;
          display: flex;
          flex-wrap: wrap;
          justify-content: space-between;
          box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
          max-width: 900px;
          width: 100%;
          margin-bottom: 40px;
        }
        .about-card {
          width: 45%;
          text-align: left;
        }
        .about-card-title {
          font-size: 22px;
          font-weight: bold;
          color: #4CAF50;
          margin-bottom: 10px;
        }
        .about-card-text {
          color: #555;
          font-size: 16px;
          line-height: 1.6;
        }
        .about-button {
          display: inline-block;
          margin: 10px auto;
          background-color: #4CAF50;
          color: white;
          padding: 12px 30px;
          border: none;
          border-radius: 50px;
          font-size: 18px;
          cursor: pointer;
          transition: background 0.3s;
          text-align: center;
          white-space: nowrap;
        }
        .about-button:hover {
          background-color: #388E3C;
        }
        `}
        </style>
        <div className="about-container">
          <h2 className="about-title">Welcome to SustainaFood</h2>
          <p className="about-description">
            Connecting donors, recipients, and transporters to minimize food waste and optimize distribution.        </p>

          <div className="about-values">
            <div className="value-item">
              <FaUtensils size={40} color="#4CAF50" />
              <p>Less Waste</p>
            </div>
            <div className="value-item">
              <FaLink size={40} color="#4CAF50" />
              <p>Stronger Links</p>
            </div>
            <div className="value-item">
              <FaBox size={40} color="#4CAF50" />
              <p>Smart Sharing</p>
            </div>
            <div className="value-item">
              <FaGlobe size={40} color="#4CAF50" />
              <p>Green Future</p>
            </div>
          </div>

          <div className="about-section">
            <div className="about-card">
              <h3 className="about-card-title">🌍 Our Vision</h3>
              <p className="about-card-text">
                To build a world where food surplus is efficiently redistributed, minimizing waste.
              </p>
            </div>
            <div className="about-card">
              <h3 className="about-card-title">🚀 Our Mission</h3>
              <p className="about-card-text">
                To provide an intelligent platform that optimizes food distribution, fosters community engagement, and promotes environmental sustainability.
              </p>
            </div>
          </div>

        </div>
      </div>
      <Footer />
    </>
  );
};

export default About;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/Dashboard.jsx">
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import CardStats from "../../components/backoffcom/CardStats";
import Charts from "../../components/backoffcom/Chart";
import DonationStatus from "../../components/backoffcom/DonationStatus";


import "/src/assets/styles/backoffcss/dashboard.css";

const Dashboard = () => {
  return (
    <div className="dashboard-container">
      <Sidebar />
      <div className="dashboard-content">
        <Navbar />

<div className="card-container">
  <CardStats title="Food Donations" value="45/76" percentage="56" icon="utensils" color="blue" progress={56} />
  <CardStats title="Recipients Served" value="48/86" percentage="63" icon="users" color="orange" progress={63} />
  <CardStats title="NGOs Supported" value="16/20" percentage="78" icon="handHoldingHeart" color="green" progress={78} />
<CardStats title="Monthly Growth" value="46.59%" percentage="46" icon="chart" color="red" progress={46} />

</div>



        {/* Conteneur pour aligner le graphique et le statut des dons */}
        <div className="charts-status-container">
          <Charts />
          <DonationStatus />
        </div>
      </div>
    </div>
  );
};

export default Dashboard;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/DonationDetails.jsx">
// DonationDetails.js
import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { getDonationById } from "../../api/donationService";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import '../../assets/styles/backoffcss/donationDetails.css';

const DonationDetails = () => {
    const { id } = useParams();
    const [donation, setDonation] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchDonation = async () => {
            try {
                const response = await getDonationById(id);
                setDonation(response.data);
            } catch (err) {
                setError(err);
            } finally {
                setLoading(false);
            }
        };

        fetchDonation();
    }, [id]);

    if (loading) {
        return <div className="loading">Loading donation details...</div>;
    }

    if (error) {
        return <p>Error loading donation details: {error.message}</p>;
    }

    if (!donation) {
        return <p>Donation not found.</p>;
    }

    return (
        <div className="product-detail-container"> {/* Utilisez la classe conteneur générale */}
            <Sidebar />
            <div className="product-detail-content"> {/* Utilisez la classe de contenu générale */}
            <Navbar /> {/* Ajout du Navbar ici */}
                <div className="donation-card"> {/* Utilisez la classe de carte pour les dons */}
                    <h2 className="donation-header">Donation Details</h2> {/* Utilisez la classe d'en-tête pour les dons */}
                    <table className="donation-details-table"> {/* Utilisez la classe de tableau pour les dons */}
                        <tbody>
                            <tr>
                                <td>Title:</td>
                                <td>{donation.title || "N/A"}</td>
                            </tr>
                            <tr>
                                <td>Category:</td>
                                <td>{donation.category || "N/A"}</td>
                            </tr>
                            <tr>
                                <td>Status:</td>
                                <td>{donation.status || "N/A"}</td>
                            </tr>
                            <tr>
                                <td>Location:</td>
                                <td>{donation.location || "N/A"}</td>
                            </tr>
                            <tr>
                                <td>Expiration Date:</td>
                                <td>{donation.expirationDate ? new Date(donation.expirationDate).toLocaleDateString() : "N/A"}</td>
                            </tr>
                            <tr>
                                <td>Created At:</td>
                                <td>{donation.createdAt ? new Date(donation.createdAt).toLocaleDateString() : "N/A"}</td>
                            </tr>
                            <tr>
                                <td>Updated At:</td>
                                <td>{donation.updatedAt ? new Date(donation.updatedAt).toLocaleDateString() : "N/A"}</td>
                            </tr>
                            {/* Ajoutez ici les autres attributs du don que vous souhaitez afficher */}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    );
};

export default DonationDetails;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/ProductDetail.jsx">
// ProductDetail.js
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { getProductById } from '../../api/productservice'; // Assure-toi que le chemin est correct
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "../../assets/styles/backoffcss/ProductDetail.css"; // Crée ce fichier CSS

const ProductDetail = () => {
  const { id } = useParams(); // Récupère l'ID depuis l'URL
  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchProduct = async () => {
      try {
        setLoading(true);
        const response = await getProductById(id);
        setProduct(response.data);
        setLoading(false);
      } catch (error) {
        setError('Error fetching product details.');
        console.error(error);
        setLoading(false);
      }
    };

    fetchProduct();
  }, [id]);

  if (loading) {
    return <div className="loading">Loading product details...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  if (!product) {
    return <div>Product not found.</div>;
  }

  return (
    <div className="product-detail-container">
      <Sidebar />
      <div className="product-detail-content">
        <Navbar />
        <div className="product-card">
          <div className="product-header">
            <h2>Product Details</h2>
          </div>
          <div className="product-details">
            <table className="details-table">
              <tbody>
                <tr>
                  <td><strong>ID:</strong></td>
                  <td>{product.id}</td>
                </tr>
                <tr>
                  <td><strong>Name:</strong></td>
                  <td>{product.name}</td>
                </tr>
                <tr>
                  <td><strong>Type:</strong></td>
                  <td>{product.productType}</td>
                </tr>
                <tr>
                  <td><strong>Status:</strong></td>
                  <td>{product.status}</td>
                </tr>
                <tr>
                  <td><strong>Description:</strong></td>
                  <td>{product.productDescription}</td>
                </tr>
                <tr>
                  <td><strong>Weight:</strong></td>
                  <td>{product.weightPerUnit ? `${product.weightPerUnit} ${product.weightUnit}` : "N/A"}</td>
                </tr>
                {/* Ajoute d'autres champs ici selon ton modèle de produit */}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProductDetail;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/RequestDetails.jsx">
// RequestDetail.js
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { getRequestById } from '../../api/requestNeedsService';
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "../../assets/styles/backoffcss/RequestDetail.css"; // Crée ce fichier CSS

const RequestDetail = () => {
  const { id } = useParams();
  const [request, setRequest] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchRequest = async () => {
      try {
        setLoading(true);
        const response = await getRequestById(id);
        setRequest(response.data);
        setLoading(false);
          // Vérification du status de la réponse
        console.log("✅ API Response Status:", response.status);
          // Data received:
        console.log("✅ Request Data:", response.data);
      } catch (error) {
        setError('Error fetching request details.');
        console.error(error);
        setLoading(false);
      }
    };

    fetchRequest();
  }, [id]);

  if (loading) {
    return <div className="loading">Loading request details...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  if (!request) {
    return <div>Request not found.</div>;
  }

  return (
    <div className="request-detail-container">
      <Sidebar />
      <div className="request-detail-content">
        <Navbar />
        <div className="request-card">
          <div className="request-header">
            <h2>Request Details</h2>
          </div>
          <div className="request-details">
            <table className="details-table">
              <tbody>
                <tr>
                  <td><strong>ID:</strong></td>
                  <td>{request._id}</td>
                </tr>
                <tr>
                  <td><strong>Title:</strong></td>
                  <td>{request.title}</td>
                </tr>
                <tr>
                  <td><strong>Category:</strong></td>
                  <td>{request.category}</td>
                </tr>
                <tr>
                  <td><strong>Expiration Date:</strong></td>
                  <td>{new Date(request.expirationDate).toLocaleDateString()}</td>
                </tr>
                <tr>
                  <td><strong>Status:</strong></td>
                  <td>{request.status}</td>
                </tr>
                <tr>
                  <td><strong>Description:</strong></td>
                  <td>{request.description}</td>
                </tr>
                <tr>
                  <td><strong>Products:</strong></td>
                  <td>
                    {request.requestedProducts && request.requestedProducts.length > 0 ? (
                      <ul>
                        {request.requestedProducts.map(product => (
                          <li key={product._id}>
                            {product.name} ({product.productDescription})
                          </li>
                        ))}
                      </ul>
                    ) : (
                      <div>No products requested</div>
                    )}
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RequestDetail;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/view-ngo.jsx">
import React, { useEffect, useState } from "react";
import axios from "axios";
import { useParams } from "react-router-dom";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "/src/assets/styles/backoffcss/viewNgo.css"; // Assurez-vous d'avoir le bon fichier CSS
import { FaBan, FaUnlock } from "react-icons/fa";

const ViewNGO = () => {
    const { id } = useParams();
    const [ngo, setNgo] = useState(null);

    useEffect(() => {
        axios.get(`http://localhost:3000/users/view/${id}`)
            .then(response => {
                setNgo(response.data);
            })
            .catch(error => {
                console.error("Error fetching NGO details:", error);
            });
    }, [id]);

    if (!ngo) {
        return <div className="loading">Loading...</div>;
    }

    const handleBlockNgo = async (ngoId, isBlocked) => {
        try {
            const response = await axios.put(`http://localhost:3000/ngos/toggle-block/${ngoId}`, {
                isBlocked: !isBlocked
            });

            if (response.status === 200) {
                alert(`NGO has been ${response.data.isBlocked ? "blocked" : "unblocked"} successfully.`);
                setNgo({ ...ngo, isBlocked: response.data.isBlocked });
            } else {
                alert(response.data.error || "Error toggling block status.");
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Failed to update block status.");
        }
    };

    return (
        <div className="view-ngo-container">
            <Sidebar />
            <div className="view-ngo-content">
                <Navbar />
                <div className="ngo-card">
                    <div className="ngo-header">
                    <img 
                                            src={ngo.photo ? `http://localhost:3000/${ngo.photo}` : "/src/assets/User_icon_2.svg.png"} 
                                            alt="ong" 
                                            className="ong-photo" 
                                        />
                        <div className="ngo-info">
                            <h2>{ngo.name}</h2>
                            <p className="email">{ngo.email}</p>
                            <p className="id">ID: {ngo.id}</p>
                            <div className="ngo-actions">
                                <button
                                    className="block-btn"
                                    onClick={() => handleBlockNgo(ngo._id, ngo.isBlocked)}
                                    style={{ color: ngo.isBlocked ? "green" : "red" }}
                                >
                                    {ngo.isBlocked ? <FaUnlock /> : <FaBan />}
                                    {ngo.isBlocked ? " Unblock" : " Block"}
                                </button>
                            </div>
                        </div>
                    </div>
                    <div className="ngo-details">
                        <table className="details-table">
                            <tbody>
                                <tr>
                                    <td><strong>Type:</strong></td>
                                    <td>{ngo.type || "N/A"}</td>
                                </tr>
                                <tr>
                                    <td><strong>Phone:</strong></td>
                                    <td>{ngo.phone}</td>
                                </tr>
                                
                                <tr>
                                    <td><strong>Address:</strong></td>
                                    <td>{ngo.address || "N/A"}</td>
                                </tr>
                                
                                <tr>
                                    <td><strong>Tax ID:</strong></td>
                                    <td>{ngo.id_fiscale || "N/A"}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ViewNGO;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/view-restaurant.jsx">
import React, { useEffect, useState } from "react";
import axios from "axios";
import { useParams } from "react-router-dom";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "/src/assets/styles/backoffcss/viewRestaurant.css"; // Ensure you have the correct CSS
import { FaBan, FaUnlock } from "react-icons/fa";

const ViewRestaurant = () => {
    const { id } = useParams();
    const [restaurant, setRestaurant] = useState(null);

    useEffect(() => {
        axios.get(`http://localhost:3000/users/view/${id}`)
            .then(response => {
                setRestaurant(response.data);
            })
            .catch(error => {
                console.error("Error fetching restaurant details:", error);
            });
    }, [id]);

    if (!restaurant) {
        return <div className="loading">Loading...</div>;
    }

    const handleBlockRestaurant = async (restaurantId, isBlocked) => {
        try {
            const response = await axios.put(`http://localhost:3000/users/toggle-block/${restaurantId}`, {
                isBlocked: !isBlocked
            });

            if (response.status === 200) {
                alert(`Restaurant has been ${response.data.isBlocked ? "blocked" : "unblocked"} successfully.`);
                setRestaurant({ ...restaurant, isBlocked: response.data.isBlocked });
            } else {
                alert(response.data.error || "Error toggling block status.");
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Failed to update block status.");
        }
    };

    return (
        <div className="view-restaurant-container">
            <Sidebar />
            <div className="view-restaurant-content">
                <Navbar />
                <div className="restaurant-card">
                    <div className="restaurant-header">
                    <img 
                                            src={restaurant.photo ? `http://localhost:3000/${restaurant.photo}` : "/src/assets/User_icon_2.svg.png"} 
                                            alt="restaurant" 
                                            className="restaurant-photo" 
                                        />
                        <div className="restaurant-info">
                            <h2>{restaurant.name}</h2>
                            <p className="email">{restaurant.email}</p>
                            <p className="id">ID: {restaurant.id}</p>
                            <div className="restaurant-actions">
                                <button
                                    className="block-btn"
                                    onClick={() => handleBlockRestaurant(restaurant._id, restaurant.isBlocked)}
                                    style={{ color: restaurant.isBlocked ? "green" : "red" }}
                                >
                                    {restaurant.isBlocked ? <FaUnlock /> : <FaBan />}
                                    {restaurant.isBlocked ? " Unblock" : " Block"}
                                </button>
                            </div>
                        </div>
                    </div>
                    <div className="restaurant-details">
                        <table className="details-table">
                            <tbody>
                                <tr>
                                    <td><strong>Phone:</strong></td>
                                    <td>{restaurant.phone}</td>
                                </tr>
                                <tr>
                                    <td><strong>Tax Referecence:</strong></td>
                                    <td>{restaurant.taxReference || "N/A"}</td>
                                </tr>
                                <tr>
                                    <td><strong>Address:</strong></td>
                                    <td>{restaurant.address || "N/A"}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ViewRestaurant;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/view-student.jsx">
import React, { useEffect, useState } from "react";
import axios from "axios";
import { useParams } from "react-router-dom";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "/src/assets/styles/backoffcss/viewStudent.css"; 
import { FaBan, FaUnlock } from "react-icons/fa";

const ViewStudent = () => {
    const { id } = useParams();
    const [student, setStudent] = useState(null);

    useEffect(() => {
        axios.get(`http://localhost:3000/users/view/${id}`)
            .then(response => {
                setStudent(response.data);
            })
            .catch(error => {
                console.error("Error fetching student details:", error);
            });
    }, [id]);

    if (!student) {
        return <div className="loading">Loading...</div>;
    }

    const handleBlockUser = async (userId, isBlocked) => {
        try {
            const response = await axios.put(`http://localhost:3000/users/toggle-block/${userId}`, {
                isBlocked: !isBlocked
            });

            if (response.status === 200) {
                alert(`User has been ${response.data.isBlocked ? "blocked" : "unblocked"} successfully.`);
                setStudent({ ...student, isBlocked: response.data.isBlocked });
            } else {
                alert(response.data.error || "Error toggling block status.");
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Failed to update block status.");
        }
    };

    return (
        <div className="view-student-container">
            <Sidebar />
            <div className="view-student-content">
                <Navbar />
                <div className="student-card">
                    <div className="student-header">
                    <img 
                                            src={student.photo ? `http://localhost:3000/${student.photo}` : "/src/assets/User_icon_2.svg.png"} 
                                            alt="Student" 
                                            className="student-photo" 
                                        />
                        <div className="student-info">
                            <h2>{student.name}</h2>
                            <p className="email">{student.email}</p>
                            <p className="id">ID: {student.id}</p>
                            <div className="student-actions">
                                <button
                                    className="block-btn"
                                    onClick={() => handleBlockUser(student._id, student.isBlocked)}
                                    style={{ color: student.isBlocked ? "green" : "red" }}
                                >
                                    {student.isBlocked ? <FaUnlock /> : <FaBan />}
                                    
                                </button>
                            </div>
                        </div>
                    </div>
                    <div className="student-details">
                        <table className="details-table">
                            <tbody>
                                <tr>
                                    <td><strong>Phone:</strong></td>
                                    <td>{student.phone}</td>
                                </tr>
                                <tr>
                                    <td><strong>Age:</strong></td>
                                    <td>{student.age || "N/A"}</td>
                                </tr>
                                <tr>
                                    <td><strong>Sex:</strong></td>
                                    <td>{student.sexe}</td>
                                </tr>
                                <tr>
                                    <td><strong>Address:</strong></td>
                                    <td>{student.address || "N/A"}</td>
                                </tr>
                                <tr>
                                    <td><strong>Student Card:</strong></td>
                                    <td>{student.studentCard || "N/A"}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ViewStudent;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/view-supermarket.jsx">
import React, { useEffect, useState } from "react";
import axios from "axios";
import { useParams } from "react-router-dom";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "/src/assets/styles/backoffcss/viewSupermarket.css"; 
import { FaBan, FaUnlock } from "react-icons/fa";

const ViewSupermarket = () => {
    const { id } = useParams();
    const [supermarket, setSupermarket] = useState(null);

    useEffect(() => {
        axios.get(`http://localhost:3000/users/view/${id}`)
            .then(response => {
                setSupermarket(response.data);
            })
            .catch(error => {
                console.error("Error fetching supermarket details:", error);
            });
    }, [id]);

    if (!supermarket) {
        return <div className="loading">Loading...</div>;
    }

    const handleBlockUser = async (userId, isBlocked) => {
        try {
            const response = await axios.put(`http://localhost:3000/users/toggle-block/${userId}`, {
                isBlocked: !isBlocked
            });

            if (response.status === 200) {
                alert(`Supermarket has been ${response.data.isBlocked ? "blocked" : "unblocked"} successfully.`);
                setSupermarket({ ...supermarket, isBlocked: response.data.isBlocked });
            } else {
                alert(response.data.error || "Error toggling block status.");
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Failed to update block status.");
        }
    };

    return (
        <div className="view-supermarket-container">
            <Sidebar />
            <div className="view-supermarket-content">
                <Navbar />
                <div className="supermarket-card">
                    <div className="supermarket-header">
                    <img 
                                            src={supermarket.photo ? `http://localhost:3000/${supermarket.photo}` : "/src/assets/User_icon_2.svg.png"} 
                                            alt="supermarket" 
                                            className="supermarket-photo" 
                                        />
                        <div className="supermarket-info">
                            <h2>{supermarket.name}</h2>
                            <p className="email">{supermarket.email}</p>
                            <p className="id">ID: {supermarket.id}</p>
                            <div className="supermarket-actions">
                                <button
                                    className="block-btn"
                                    onClick={() => handleBlockUser(supermarket._id, supermarket.isBlocked)}
                                    style={{ color: supermarket.isBlocked ? "green" : "red" }}
                                >
                                    {supermarket.isBlocked ? <FaUnlock /> : <FaBan />}
                                    {supermarket.isBlocked ? " Unblock" : " Block"}
                                </button>
                            </div>
                        </div>
                    </div>
                    <div className="supermarket-details">
                        <table className="details-table">
                            <tbody>
                                <tr>
                                    <td><strong>Phone:</strong></td>
                                    <td>{supermarket.phone}</td>
                                </tr>
                                <tr>
                                    <td><strong>Tax Registration Number:</strong></td>
                                    <td>{supermarket.taxReference || "N/A"}</td>
                                </tr>
                                <tr>
                                    <td><strong>Address:</strong></td>
                                    <td>{supermarket.address || "N/A"}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ViewSupermarket;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/view-transporter.jsx">
import React, { useEffect, useState } from "react";
import axios from "axios";
import { useParams } from "react-router-dom";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "/src/assets/styles/backoffcss/viewTransporter.css";
import { FaBan, FaUnlock } from "react-icons/fa";

const ViewTransporter = () => {
    const { id } = useParams();
    const [transporter, setTransporter] = useState(null);

    useEffect(() => {
        axios.get(`http://localhost:3000/users/view/${id}`)
            .then(response => {
                setTransporter(response.data);
            })
            .catch(error => {
                console.error("Error fetching transporter details:", error);
            });
    }, [id]);

    if (!transporter) {
        return <div className="loading">Loading...</div>;
    }

    const handleBlockUser = async (userId, isBlocked) => {
        try {
            const response = await axios.put(`http://localhost:3000/users/toggle-block/${userId}`, {
                isBlocked: !isBlocked
            });

            if (response.status === 200) {
                alert(`Transporter has been ${response.data.isBlocked ? "blocked" : "unblocked"} successfully.`);
                setTransporter({ ...transporter, isBlocked: response.data.isBlocked });
            } else {
                alert(response.data.error || "Error toggling block status.");
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Failed to update block status.");
        }
    };

    return (
        <div className="view-transporter-container">
            <Sidebar />
            <div className="view-transporter-content">
                <Navbar />
                <div className="transporter-card">
                    <div className="transporter-header">
                       <img 
                                            src={transporter.photo ? `http://localhost:3000/${transporter.photo}` : "/src/assets/User_icon_2.svg.png"} 
                                            alt="transporter" 
                                            className="transporter-photo" 
                                        />
                        <div className="transporter-info">
                            <h2>{transporter.name}</h2>
                            <p className="email">{transporter.email}</p>
                            <p className="id">ID: {transporter.id}</p>
                            <div className="transporter-actions">
                                <button
                                    className="block-btn"
                                    onClick={() => handleBlockUser(transporter._id, transporter.isBlocked)}
                                    style={{ color: transporter.isBlocked ? "green" : "red" }}
                                >
                                    {transporter.isBlocked ? <FaUnlock /> : <FaBan />}
                                    {transporter.isBlocked ? " Unblock" : " Block"}
                                </button>
                            </div>
                        </div>
                    </div>
                    <div className="transporter-details">
                        <table className="details-table">
                            <tbody>
                                <tr>
                                    <td><strong>Phone:</strong></td>
                                    <td>{transporter.phone}</td>
                                </tr>
                                <tr>
                                    <td><strong>Vehicle Type:</strong></td>
                                    <td>{transporter.vehiculeType || "N/A"}</td>
                                </tr>
                                <tr>
                                    <td><strong>Address:</strong></td>
                                    <td>{transporter.address || "N/A"}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ViewTransporter;
</file>

<file path="sustainafood-frontend/src/pages/Contact.jsx">
import { useState } from 'react';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import '../assets/styles/Contact.css';
import { FaPhone, FaEnvelope, FaMapMarkerAlt, FaClock } from 'react-icons/fa';  // Importation des icônes

const Contact = () => {
  const [feedback, setFeedback] = useState({
    name: '',
    email: '',
    comment: '',
  });

  const [submitted, setSubmitted] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFeedback({ ...feedback, [name]: value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!feedback.name || !feedback.email || !feedback.comment) {
      alert('Please fill in all fields before submitting!');
      return;
    }
    setSubmitted(true);
  };

  return (
    <>
      <Navbar />
      <div className="contact-page">
        <h2 className="contact-title">Get In Touch</h2>
        <a className='contact-message'> Have a question, a suggestion, or need assistance? We’re here to help! Whether you're looking for support,
          partnership opportunities, or more information about our services, feel free to reach out. Our team will respond as soon as possible.</a>
        <div className="contact-container">

          <div className="contact-info">
            <div className="contact-box">
              <FaMapMarkerAlt size={30} color="#8dc73f" />  {/* Icône localisation */}

              <div className="content">
                <h4>Address</h4>
                <p>Pôle Technologique El Ghazela , Ariana Tunis</p>
              </div>
            </div>
            <div className="contact-box">
              <FaPhone size={30} color="#8dc73f" />  {/* Icône téléphone */}

              <div className="content">
                <h4>Phone</h4>
                <p>+216 123 456 789</p>
              </div>
            </div>
            <div className="contact-box">
              <FaEnvelope size={30} color="#8dc73f" />  {/* Icône e-mail */}
              <div className="content">
                <h4>Email</h4>
                <p>info@sustainafood.com</p>
              </div>
            </div>
            <div className="contact-box">
              <FaClock size={30} color="#8dc73f" />  {/* Icône heure */}
              <div className="content">
                <h4>Working Hours</h4>
                <p>Mon - Fri: 9 AM - 6 PM</p>
              </div>
            </div>
          </div>
          <div className="feedback-form-container">
            <h3>Leave a message</h3>
            <form onSubmit={handleSubmit} className="feedback-form">
              <input type="text" name="name" placeholder="Your Name" value={feedback.name} onChange={handleChange} required />
              <input type="email" name="email" placeholder="Your Email" value={feedback.email} onChange={handleChange} required />

              <textarea name="comment" placeholder="Your Message" value={feedback.comment} onChange={handleChange} required />
              <button className="feedback-success" type="submit">Send</button>
            </form>
            {submitted && (
              <div className="feedback-success">
                <p>Thank you for your feedback, {feedback.name}!</p>
                <button onClick={() => setSubmitted(false)}>Edit Feedback</button>
              </div>
            )}
          </div>
        </div>
        <div className="contact-map">
          <iframe
            src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3164.329763530718!2d10.1772!3d36.8760!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x12d347f3d5b8d4d5%3A0x3a8d6db8ed2f31b0!2sAriana+Soghra!5e0!3m2!1sen!2stn!4v1622064481553"
            width="100%"
            height="400"
            style={{ border: 0 }}
            allowFullScreen=""
            loading="lazy"
            referrerPolicy="no-referrer-when-downgrade"
          />

        </div>
      </div>
      <Footer />
    </>
  );
};

export default Contact;
</file>

<file path="sustainafood-frontend/src/pages/Continueinfo.jsx">
"use client"

import { useState, useContext } from "react"
import { AuthContext } from "../contexts/AuthContext"
import { useNavigate } from "react-router-dom"
import ReCAPTCHA from "react-google-recaptcha"
import { getUserById, updateUserwithemail } from "../api/userService"
import { useAuth } from "../contexts/AuthContext"
import { FaCamera } from "react-icons/fa"
import "../assets/styles/ContinueInfo.css"

const ContinueInfo = () => {
  const { user, token } = useAuth();
  const { login } = useContext(AuthContext);
  const navigate = useNavigate();
  const [error, setError] = useState(null);
  const [fileName, setFileName] = useState("");
  const [imagePreview, setImagePreview] = useState(null);
  const [profilePhotoFile, setProfilePhotoFile] = useState(null);
  const [formData, setFormData] = useState({
    phone: "",
    name: "",
    address: "",
    role: "ong", // Default to ONG
  });
  const [captchaValue, setCaptchaValue] = useState(null);
  const [errors, setErrors] = useState({});

  const validateName = (name) => /^[a-zA-Z\s]+$/.test(name);
  const validatePhone = (phone) => /^\d{8,15}$/.test(phone);
  const validateCIN = (cin) => /^\d{8}$/.test(cin);
  const validateFiscalID = (id) => /^TN\d{8}$/.test(id);
  const validateTaxReference = (ref) => /^VAT-\d{8}$/.test(ref);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));

    // Validate field immediately
    const newErrors = { ...errors };
    switch (name) {
      case "name":
        if (value && !validateName(value)) {
          newErrors[name] = "Invalid name format";
        } else {
          delete newErrors[name];
        }
        break;
      case "phone":
        if (value && !validatePhone(value)) {
          newErrors[name] = "Invalid phone number format";
        } else {
          delete newErrors[name];
        }
        break;
      case "num_cin":
        if (value && !validateCIN(value)) {
          newErrors[name] = "CIN must be exactly 8 digits";
        } else {
          delete newErrors[name];
        }
        break;
      case "id_fiscale":
        if (value && !validateFiscalID(value)) {
          newErrors[name] = "Invalid fiscal ID format (must be TN followed by 8 digits)";
        } else {
          delete newErrors[name];
        }
        break;
      case "taxReference":
        if (value && !validateTaxReference(value)) {
          newErrors[name] = "Invalid Tax Reference format (must be like VAT-12345678)";
        } else {
          delete newErrors[name];
        }
        break;
    }
    setErrors(newErrors);
  };

  const handleRoleChange = (e) => {
    const { value } = e.target;

    // Define role-specific fields
    let roleSpecificFields = {};
    switch (value) {
      case "student":
        roleSpecificFields = { sexe: "male", age: "", num_cin: "" };
        break;
      case "ong":
        roleSpecificFields = { id_fiscale: "", type: "charitable" };
        break;
      case "transporter":
        roleSpecificFields = { vehiculeType: "car" };
        break;
      case "restaurant":
      case "supermarket":
        roleSpecificFields = { taxReference: "" };
        break;
      default:
        roleSpecificFields = {};
    }

    // Remove irrelevant fields when role changes
    const { vehiculeType, ...rest } = formData; // Remove vehiculeType for non-transporter roles

    // Update formData with the new role and role-specific fields
    setFormData({
      ...rest,
      role: value,
      ...roleSpecificFields,
    });
  };

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      setFileName(file.name);
      setProfilePhotoFile(file);
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    if (!captchaValue) {
      setError("Please complete the reCAPTCHA.");
      return;
    }

    if (!formData.phone || !formData.role || !formData.address || !formData.name) {
      setError("Please fill in all required fields.");
      return;
    }

    if (Object.keys(errors).length > 0) {
      setError("Please fix the errors in the form.");
      return;
    }

    const email = localStorage.getItem("email from google");
    const id = localStorage.getItem("user_id");

    if (!id || !email) {
      setError("Error: User not found.");
      return;
    }

    const data = new FormData();

    // Append common fields
    data.append("phone", formData.phone);
    data.append("name", formData.name);
    data.append("address", formData.address);
    data.append("role", formData.role);

    // Append role-specific fields
    switch (formData.role) {
      case "student":
        data.append("sexe", formData.sexe);
        data.append("age", formData.age);
        data.append("num_cin", formData.num_cin);
        break;
      case "ong":
        data.append("id_fiscale", formData.id_fiscale);
        data.append("type", formData.type);
        break;
      case "transporter":
        data.append("vehiculeType", formData.vehiculeType);
        break;
      case "restaurant":
      case "supermarket":
        data.append("taxReference", formData.taxReference);
        break;
    }

    data.append("email", email);

    if (profilePhotoFile) {
      data.append("photo", profilePhotoFile);
    }

    try {
      const response = await updateUserwithemail(id, data);
      const userResponse = await getUserById(id);
      const user = userResponse.data;

      if (!user) {
        setError("Error: User data not retrieved.");
        return;
      }

      login(user, token);

      const authData = JSON.parse(localStorage.getItem("authData") || "{}");
      localStorage.setItem("user", JSON.stringify(user));
      localStorage.setItem("authData", JSON.stringify({ ...authData, email: user.email }));

      navigate(user.role === "admin" ? "/dashboard" : "/profile");
    } catch (err) {
      console.error("Error during registration:", err);
      setError(err.response?.data?.error || "Registration error.");
    }
  };

  return (
    <div className="continueinfo-container">
      <div className="continueinfo-card">
        <h2 className="continueinfo-title">Complete Your Profile</h2>
        <p className="continueinfo-description">Please provide additional information to complete your registration.</p>
        <form onSubmit={handleSubmit} className="continueinfo-form">
          {/* Common Fields */}
          <div className="continueinfo-form-group">
            <label htmlFor="name" className="continueinfo-label">
              Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={formData.name}
              onChange={handleChange}
              required
              className={`continueinfo-input ${errors.name ? "continueinfo-input-error" : ""}`}
            />
            {errors.name && <p className="continueinfo-error-message">{errors.name}</p>}
          </div>

          <div className="continueinfo-form-group">
            <label htmlFor="role" className="continueinfo-label">
              Role
            </label>
            <select
              id="role"
              name="role"
              value={formData.role}
              onChange={handleRoleChange}
              className="continueinfo-select"
            >
              <option value="ong">ONG</option>
              <option value="restaurant">Restaurant</option>
              <option value="supermarket">Supermarket</option>
              <option value="student">Student</option>
              <option value="transporter">Transporter</option>
            </select>
          </div>

          <div className="continueinfo-form-group">
            <label htmlFor="phone" className="continueinfo-label">
              Phone Number
            </label>
            <input
              type="tel"
              id="phone"
              name="phone"
              value={formData.phone}
              onChange={handleChange}
              required
              className={`continueinfo-input ${errors.phone ? "continueinfo-input-error" : ""}`}
            />
            {errors.phone && <p className="continueinfo-error-message">{errors.phone}</p>}
          </div>

          <div className="continueinfo-form-group">
            <label htmlFor="address" className="continueinfo-label">
              Address
            </label>
            <input
              type="text"
              id="address"
              name="address"
              value={formData.address}
              onChange={handleChange}
              required
              className="continueinfo-input"
            />
          </div>

          {/* Role-Specific Fields */}
          {formData.role === "student" && (
            <>
              <div className="continueinfo-form-group">
                <label htmlFor="sexe" className="continueinfo-label">
                  Gender
                </label>
                <select
                  id="sexe"
                  name="sexe"
                  value={formData.sexe}
                  onChange={handleChange}
                  className="continueinfo-select"
                >
                  <option value="male">Male</option>
                  <option value="female">Female</option>
                  <option value="other">Other</option>
                </select>
              </div>
              <div className="continueinfo-form-group">
                <label htmlFor="age" className="continueinfo-label">
                  Age
                </label>
                <input
                  type="number"
                  id="age"
                  name="age"
                  value={formData.age}
                  onChange={handleChange}
                  required
                  className="continueinfo-input"
                />
              </div>
              <div className="continueinfo-form-group">
                <label htmlFor="num_cin" className="continueinfo-label">
                  CIN Number
                </label>
                <input
                  type="text"
                  id="num_cin"
                  name="num_cin"
                  value={formData.num_cin}
                  onChange={handleChange}
                  required
                  className={`continueinfo-input ${errors.num_cin ? "continueinfo-input-error" : ""}`}
                />
                {errors.num_cin && <p className="continueinfo-error-message">{errors.num_cin}</p>}
              </div>
            </>
          )}

          {formData.role === "ong" && (
            <>
              <div className="continueinfo-form-group">
                <label htmlFor="id_fiscale" className="continueinfo-label">
                  Fiscal ID
                </label>
                <input
                  type="text"
                  id="id_fiscale"
                  name="id_fiscale"
                  value={formData.id_fiscale}
                  onChange={handleChange}
                  required
                  className={`continueinfo-input ${errors.id_fiscale ? "continueinfo-input-error" : ""}`}
                />
                {errors.id_fiscale && <p className="continueinfo-error-message">{errors.id_fiscale}</p>}
              </div>
              <div className="continueinfo-form-group">
                <label htmlFor="type" className="continueinfo-label">
                  ONG Type
                </label>
                <select
                  id="type"
                  name="type"
                  value={formData.type}
                  onChange={handleChange}
                  className="continueinfo-select"
                >
                  <option value="advocacy">Advocacy</option>
                  <option value="operational">Operational</option>
                  <option value="charitable">Charitable</option>
                  <option value="development">Development</option>
                  <option value="environmental">Environmental</option>
                  <option value="human-rights">Human Rights</option>
                  <option value="relief">Relief</option>
                  <option value="research">Research</option>
                  <option value="philanthropic">Philanthropic</option>
                  <option value="social_welfare">Social Welfare</option>
                  <option value="cultural">Cultural</option>
                  <option value="faith_based">Faith Based</option>
                </select>
              </div>
            </>
          )}

          {formData.role === "transporter" && (
            <div className="continueinfo-form-group">
              <label htmlFor="vehiculeType" className="continueinfo-label">
                Vehicle Type
              </label>
              <select
                id="vehiculeType"
                name="vehiculeType"
                value={formData.vehiculeType}
                onChange={handleChange}
                className="continueinfo-select"
              >
                <option value="car">Car</option>
                <option value="motorbike">Motorbike</option>
                <option value="bicycle">Bicycle</option>
                <option value="van">Van</option>
                <option value="truck">Truck</option>
                <option value="scooter">Scooter</option>
              </select>
            </div>
          )}

          {(formData.role === "restaurant" || formData.role === "supermarket") && (
            <div className="continueinfo-form-group">
              <label htmlFor="taxReference" className="continueinfo-label">
                Tax Reference
              </label>
              <input
                type="text"
                id="taxReference"
                name="taxReference"
                value={formData.taxReference}
                onChange={handleChange}
                required
                className={`continueinfo-input ${errors.taxReference ? "continueinfo-input-error" : ""}`}
              />
              {errors.taxReference && <p className="continueinfo-error-message">{errors.taxReference}</p>}
            </div>
          )}

          {/* Profile Photo Upload */}
          <div className="continueinfo-form-group">
            <label htmlFor="file" className="continueinfo-label">
              Profile Photo
            </label>
            <div className="continueinfo-file-input">
              <button
                type="button"
                className="continueinfo-file-button"
                onClick={() => document.getElementById("file").click()}
              >
                <FaCamera className="continueinfo-camera-icon" />
                <span>Upload photo</span>
              </button>
              <input id="file" type="file" onChange={handleFileChange} className="continueinfo-hidden-input" />
              {imagePreview && (
                <img
                  src={imagePreview || "/placeholder.svg"}
                  alt="Profile Preview"
                  className="continueinfo-image-preview"
                />
              )}
              {fileName && <span className="continueinfo-file-name">{fileName}</span>}
            </div>
          </div>

          {/* reCAPTCHA */}
          <div className="continueinfo-recaptcha">
            <ReCAPTCHA
              sitekey="6LeXoN8qAAAAAHnZcOwetBZ9TfyOl8K_wg7j97hq"
              onChange={(value) => setCaptchaValue(value)}
            />
          </div>

          {/* Error Message */}
          {error && <p className="continueinfo-error">{error}</p>}

          {/* Submit Button */}
          <button type="submit" className="continueinfo-submit-button">
            Complete Registration
          </button>
        </form>
      </div>
    </div>
  );
};

export default ContinueInfo;
</file>

<file path="sustainafood-frontend/src/pages/ForgetPass.jsx">
import React, { useState } from "react";
import { useNavigate } from 'react-router-dom';
import axios from "axios";  // ✅ Import Axios
import '../assets/styles/ForgetPass.css';

const ForgetPass = () => {
  const [email, setEmail] = useState("");
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post("http://localhost:3000/users/forgot-password", { email });

      if (response.headers["content-type"].includes("application/json")) {
        console.log("Reset code sent:", response.data);

        // ✅ Redirect to ResetCode page with email as a query parameter
        navigate(`/reset-code?email=${encodeURIComponent(email)}`);
      } else {
        throw new Error("Unexpected response type");
      }
    } catch (err) {
      console.error("Error sending reset code", err);
      alert("Error: Unable to send reset code. Please try again.");
    }
  };

  return (
    <div className="forget-pass-container">
      <div className="forget-pass-card">
        <h2>Forgot Password?</h2>
        <p>Enter your email to receive a password reset link.</p>
        <form onSubmit={handleSubmit}>
          <input
            type="email"
            placeholder="Enter your email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
          <button type="submit">Send Reset Link</button>
        </form>
      </div>
    </div>
  );
};

export default ForgetPass;
</file>

<file path="sustainafood-frontend/src/pages/ResetCode.jsx">
import React, { useState } from "react";
import { useNavigate } from 'react-router-dom';
import '../assets/styles/ForgetPass.css';

const ResetCode = () => {
  const [resetCode, setResetCode] = useState("");
  const navigate = useNavigate();
  const searchParams = new URLSearchParams(window.location.search);
  const email = searchParams.get('email');

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch('http://localhost:3000/users/reset-code', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, resetCode }),
      });

      const data = await response.json();
      if (response.ok) {
        alert('Reset code verified');
        navigate(`/reset-password?email=${encodeURIComponent(email)}`);
      } else {
        alert(data.error || 'Invalid reset code');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error verifying reset code');
    }
  };

  return (
    <div className="forget-pass-container">
      <div className="forget-pass-card">
        <h2>Enter Reset Code</h2>
        <p>Check your email for the reset code and enter it below.</p>
        <form onSubmit={handleSubmit}>
          <input
            type="text"
            placeholder="Enter the reset code"
            value={resetCode}
            onChange={(e) => setResetCode(e.target.value)}
            required
          />
          <button type="submit">Verify Code</button>
        </form>
      </div>
    </div>
  );
};

export default ResetCode;
</file>

<file path="sustainafood-frontend/src/pages/ResetPassword.jsx">
import React, { useState } from "react";
import { useNavigate } from 'react-router-dom';
import '../assets/styles/ForgetPass.css';

const ResetPassword = () => {
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const navigate = useNavigate();
  const searchParams = new URLSearchParams(window.location.search);
  const email = searchParams.get('email');

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (newPassword !== confirmPassword) {
      alert("Passwords do not match!");
      return;
    }

    try {
      const response = await fetch('http://localhost:3000/users/reset-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, newPassword }),
      });

      const data = await response.json();
      if (response.ok) {
        alert('Password reset successfully');
        navigate('/login');
      } else {
        alert(data.error || 'Error resetting password');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error resetting password');
    }
  };

  return (
    <div className="forget-pass-container">
      <div className="forget-pass-card">
        <h2>Reset Your Password</h2>
        <form onSubmit={handleSubmit}>
          <input
            type="password"
            placeholder="New Password"
            value={newPassword}
            onChange={(e) => setNewPassword(e.target.value)}
            required
          />
          <input
            type="password"
            placeholder="Confirm Password"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            required
          />
          <button type="submit">Reset Password</button>
        </form>
      </div>
    </div>
  );
};

export default ResetPassword;
</file>

<file path="sustainafood-frontend/src/pages/style.css">
@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;700&display=swap");

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Poppins", sans-serif;
}

a {
  text-decoration: none;
}

.header {
  position: fixed;
  height: 80px;
  width: 100%;
  z-index: 100;
  padding: 0 20px;
}

.nav {
  max-width: 1100px;
  width: 100%;
  margin: 0 auto;
}

.nav, .nav_item {
  display: flex;
  height: 100%;
  align-items: center;
  justify-content: space-between;
}

.nav_logo, .nav_link, .button {
  color: #fff;
}

.nav_logo {
  font-size: 25px;
}

.nav_item {
  column-gap: 25px;
}

.nav_link:hover {
  color: #d9d9d9;
}

.button {
  padding: 6px 24px;
  border: 2px solid #fff;
  background: transparent;
  border-radius: 6px;
  cursor: pointer;
}

.button:active {
  transform: scale(0.98);
}

/* Home */
.home {
  position: relative;
  height: 100vh;
  width: 100%;
  background-image: url("website-forms-bg.jpg");
  background-size: cover;
  background-position: center;
}

.home::before {
  content: "";
  position: absolute;
  height: 100%;
  width: 100%;
  background-color: rgba(0, 0, 0, 0.6);
  z-index: 100;
  opacity: 0;
  pointer-events: none;
  transition: all 0.5s ease-out;
}

.home.show::before {
  opacity: 1;
  pointer-events: auto;
}

/* Form Styling */
.form_container {
  position: fixed;
  max-width: 320px;
  width: 100%;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) scale(1.2);
  z-index: 101;
  background: #fff;
  padding: 25px;
  border-radius: 12px;
  box-shadow: rgba(0, 0, 0, 0.1);
  opacity: 0;
  pointer-events: none;
  transition: all 0.4s ease-out;
}

.home.show .form_container {
  opacity: 1;
  pointer-events: auto;
  transform: translate(-50%, -50%) scale(1);
}

.signup_form {
  display: none;
}

.form_container.active .signup_form {
  display: block;
}

.form_container.active .login_form {
  display: none;
}

.form_close {
  position: absolute;
  top: 10px;
  right: 20px;
  color: #0b0217;
  font-size: 22px;
  opacity: 0.7;
  cursor: pointer;
}

.form_container h2 {
  font-size: 22px;
  color: #0b0217;
  text-align: center;
}

.input_box {
  position: relative;
  margin-top: 30px;
  width: 100%;
  height: 40px;
}

.input_box input {
  height: 100%;
  width: 100%;
  border: none;
  outline: none;
  padding: 0 30px;
  color: #333;
  transition: all 0.2s ease;
  border-bottom: 1.5px solid #aaaaaa;
}

.input_box input:focus {
  border-color: #7d2ae8;
}

.input_box i {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  font-size: 20px;
  color: #707070;
}

.input_box i.email, .input_box i.password {
  left: 0;
}

.input_box input:focus ~ i.email,
.input_box input:focus ~ i.password {
  color: #7d2ae8;
}

.input_box i.pw_hide {
  right: 0;
  font-size: 18px;
  cursor: pointer;
}

.option_field {
  margin-top: 14px;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.form_container a {
  color: #7d2ae8;
  font-size: 12px;
}

.form_container a:hover {
  text-decoration: underline;
}

.checkbox {
  display: flex;
  column-gap: 8px;
  white-space: nowrap;
}

.checkbox input {
  accent-color: #7d2ae8;
}

.checkbox label {
  font-size: 12px;
  cursor: pointer;
  user-select: none;
  color: #0b0217;
}

.form_container .button {
  background: #7d2ae8;
  margin-top: 30px;
  width: 100%;
  padding: 10px 0;
  border-radius: 10px;
}

.login_signup {
  font-size: 12px;
  text-align: center;
  margin-top: 15px;
}
</file>

<file path="sustainafood-frontend/vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})
</file>

<file path="sustainafood-backend/routes/productRoutes.js">
const express = require('express');
const router = express.Router();
const productController = require('../controllers/productController');
const upload = require('../Middleware/Upload'); // Import your Multer configuration

// Routes
router.get('/all', productController.getAllProducts);
router.get('/:id', productController.getProductById); // Get product by ID
router.get('/donation/:idDonation', productController.getProductsByDonationId);
router.get('/status/:status', productController.getProductsByStatus);

// Create a new product with image upload
router.post(
    '/create',
    upload.single('image'), // Use Multer to handle a single file upload for the 'image' field
    productController.createProduct
);

// Update a product with optional image upload
router.put(
    '/update/:id',
    upload.single('image'), // Use Multer to handle a single file upload for the 'image' field
    productController.updateProduct
);

router.delete('/delete/:id', productController.deleteProduct);

module.exports = router;
</file>

<file path="sustainafood-backend/routes/users.js">
var express=require('express');
const router = express.Router();
const userController=require('../controllers/UserController');
// Import de votre config Multer
const upload = require("../Middleware/Upload");


// Use Multer to handle file uploads for both "photo" and "image_carte_etudiant"
router.post(
  '/create',
  upload.fields([
    { name: "photo", maxCount: 1 },
    { name: "image_carte_etudiant", maxCount: 1 }
  ]),
  userController.addUser
);
router.get('/list', userController.getUsers);
router.get('/details/:id', userController.getUserById);
router.delete('/delete/:id', userController.deleteUser);

// Route de mise à jour d'un utilisateur (avec upload Multer)
router.put(
    "/update/:id",
    upload.fields([
      { name: "photo", maxCount: 1 },                 // Pour la photo de profil
      { name: "image_carte_etudiant", maxCount: 1 },  // Pour la carte étudiante (optionnel)
    ]),
    userController.updateUser
  );

router.post('/login', userController.user_signin);
router.post('/userwinthemailandpss', userController.getUserByEmailAndPassword);
router.post('/forgot-password', userController.sendResetCode);
router.post('/reset-code', userController.validateResetCode);
router.post('/reset-password', userController.resetPassword);

router.put('/toggle-block/:id', userController.toggleBlockUser);
router.get('/view/:id', userController.viewStudent);
router.get('/view/:id', userController.viewRestaurant);
router.get('/view/:id', userController.viewSupermarket);
router.get('/view/:id', userController.viewNGO);
router.get('/view/:id', userController.viewTransporter);
router.put("/update-user/:email", userController.updateUserWithEmail);
router.post('/createUser' , userController.createUser);
router.put('/deactivate-account/:id', userController.deactivateAccount);
router.put('/change-password/:id', userController.changePassword);
router.post("/send-2fa-code", userController.send2FACode);
router.post("/validate-2fa-code", userController.validate2FACode);
router.post("/toggle-2fa", userController.toggle2FA);
router.post("/send2FACodeforsigninwithgoogle", userController.send2FACodeforsigninwithgoogle);
module.exports = router;
</file>

<file path="sustainafood-backend/test/user-2fa.test.js">
const request = require('supertest');
const mongoose = require('mongoose');
const app = require('../app');
const User = require('../models/User');

const mongoUri = 'mongodb://localhost:27017/sustainafood'; // ✅ Remplace par ta base

beforeAll(async () => {
  await mongoose.connect(mongoUri);
});

afterAll(async () => {
  await mongoose.connection.close();
});

describe('✅ TEST FONCTIONNALITÉ 2FA POUR UTILISATEUR AVEC 2FA ACTIVÉ', () => {
  let userEmail = "mariemtouzri5@gmail.com"; // ✅ Remplacer par un user réel
  let twoFACode = null;

  // ✅ Envoi du code 2FA
  it('✅ Devrait envoyer un code 2FA pour test2fa@gmail.com', async () => {
    const res = await request(app).post('/users/send-2fa-code').send({ email: userEmail });

    console.log('Réponse envoi code 2FA:', res.body);

    expect(res.statusCode).toBe(200);
    expect(res.body).toHaveProperty('message', '2FA code sent successfully');

    // Récupérer le code généré en base
    const user = await User.findOne({ email: userEmail });
    twoFACode = user.twoFACode;
    console.log('✅ Code 2FA récupéré depuis MongoDB :', twoFACode);
  });

  // ✅ Vérification code correct
  it('✅ Devrait valider le bon code 2FA et recevoir un token', async () => {
    const res = await request(app).post('/users/validate-2fa-code').send({
      email: userEmail,
      twoFACode: twoFACode
    });

    console.log('Réponse validation 2FA:', res.body);

    expect(res.statusCode).toBe(200);
    expect(res.body).toHaveProperty('token');
    expect(res.body).toHaveProperty('role');
    expect(res.body).toHaveProperty('id');
  });

  // ❌ Test mauvais code
  it('❌ Devrait échouer avec un mauvais code 2FA', async () => {
    // ✅ Renvoi nouveau code valide pour simuler un mauvais ensuite
    await request(app).post('/users/send-2fa-code').send({ email: userEmail });

    const res = await request(app).post('/users/validate-2fa-code').send({
      email: userEmail,
      twoFACode: "000000" // Faux code volontaire
    });

    console.log('Réponse mauvais code 2FA:', res.body);

    expect(res.statusCode).toBe(400);
    expect(res.body).toHaveProperty('error', 'Invalid 2FA code'); // ✅ Message attendu
  });
});
</file>

<file path="sustainafood-backend/test/user-signin.test.js">
const request = require('supertest');
const mongoose = require('mongoose');
const app = require('../app'); // Ton app.js complet

const mongoUri = 'mongodb://localhost:27017/sustainafood'; // ⚠️ Ta base de développement

beforeAll(async () => {
  await mongoose.connect(mongoUri, {
    // (Tu peux retirer les warnings ici aussi, voir plus bas)
  });
});

afterAll(async () => {
  await mongoose.connection.close(); // Ne pas supprimer la base, attention !
});

describe('✅ TEST SIGN IN SUR DONNEES EXISTANTES', () => {

  it('✅ Devrait se connecter avec un utilisateur existant', async () => {
    const res = await request(app).post('/users/login').send({
      email: "carrefour@gmail.com", // Met ton email existant ici
      password: "carrefour"        // Met ton mot de passe correspondant
    });

    console.log(res.body); // 🔹 Pour voir la réponse complète dans la console

    // ✅ Attentes
    expect(res.statusCode).toBe(200);
    expect(res.body).toHaveProperty('token');
    expect(res.body).toHaveProperty('role'); // Optionnel : tu peux préciser le role attendu
    expect(res.body).toHaveProperty('id');
  });

  it('❌ Devrait échouer avec un mauvais mot de passe pour cet email', async () => {
    const res = await request(app).post('/users/login').send({
      email: "carrefour@gmail.com", // Même email
      password: "WrongPassword" // Mauvais mot de passe
    });

    console.log(res.body); // Pour voir la réponse complète dans la console

    // ✅ Attentes
    expect(res.statusCode).toBe(400);
    expect(res.body).toHaveProperty('error', 'Invalid credentials');
  });

});
</file>

<file path="sustainafood-frontend/src/api/productService.js">
import axios from "axios";

const PRODUCT_BASE_URL = 'http://localhost:3000/product';

// ✅ Get all products
export const getAllProducts = async () => {
  try {
    return await axios.get(`${PRODUCT_BASE_URL}/all`);
  } catch (error) {
    console.error("Error fetching all products:", error.response?.data || error.message);
    throw error;
  }
};

// ✅ Get product by ID
export const getProductById = async (id) => {
  try {
    return await axios.get(`${PRODUCT_BASE_URL}/${id}`);
  } catch (error) {
    console.error("Error fetching product by ID:", error.response?.data || error.message);
    throw error;
  }
};

// ✅ Get products by Donation ID
export const getProductsByDonationId = async (idDonation) => {
  try {
    return await axios.get(`${PRODUCT_BASE_URL}/donation/${idDonation}`);
  } catch (error) {
    console.error("Error fetching products by donation ID:", error.response?.data || error.message);
    throw error;
  }
};

// ✅ Get products by Status
export const getProductsByStatus = async (status) => {
  try {
    return await axios.get(`${PRODUCT_BASE_URL}/status/${status}`);
  } catch (error) {
    console.error("Error fetching products by status:", error.response?.data || error.message);
    throw error;
  }
};

// ✅ Create a new product (with optional image upload)
export const createProduct = async (productData, imageFile = null) => {
  try {
    // If there's an image, use FormData for multipart/form-data
    if (imageFile) {
      const formData = new FormData();
      // Append the image file
      formData.append("image", imageFile);
      // Append other product data fields
      Object.keys(productData).forEach((key) => {
        formData.append(key, productData[key]);
      });

      return await axios.post(`${PRODUCT_BASE_URL}/create`, formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });
    } else {
      // If no image, send as JSON
      return await axios.post(`${PRODUCT_BASE_URL}/create`, productData, {
        headers: {
          "Content-Type": "application/json",
        },
      });
    }
  } catch (error) {
    console.error("Error creating product:", error.response?.data || error.message);
    throw error;
  }
};

// ✅ Update a product by ID (with optional image upload)
export const updateProduct = async (id, productData, imageFile = null) => {
  try {
    // If there's an image, use FormData for multipart/form-data
    if (imageFile) {
      const formData = new FormData();
      // Append the image file
      formData.append("image", imageFile);
      // Append other product data fields
      Object.keys(productData).forEach((key) => {
        formData.append(key, productData[key]);
      });

      return await axios.put(`${PRODUCT_BASE_URL}/update/${id}`, formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });
    } else {
      // If no image, send as JSON
      return await axios.put(`${PRODUCT_BASE_URL}/update/${id}`, productData, {
        headers: {
          "Content-Type": "application/json",
        },
      });
    }
  } catch (error) {
    console.error("Error updating product:", error.response?.data || error.message);
    throw error;
  }
};

// ✅ Delete a product by ID
export const deleteProduct = async (id) => {
  try {
    return await axios.delete(`${PRODUCT_BASE_URL}/delete/${id}`);
  } catch (error) {
    console.error("Error deleting product:", error.response?.data || error.message);
    throw error;
  }
};
</file>

<file path="sustainafood-frontend/src/assets/styles/AccountSettings.css">
.accountsettings-page {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }
  
  .accountsettings-content {
    flex: 1;
    background-color: #f2f7eb;
    padding: 2rem 0;
  }
  
  .accountsettings-container {
    max-width: 600px;
    margin: 0 auto;
    padding: 2rem;
    background-color: #ffffff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .accountsettings-title {
    color: #2e7d32;
    font-size: 2rem;
    margin-bottom: 1.5rem;
  }
  
  .accountsettings-section {
    margin-bottom: 2rem;
  }
  
  .accountsettings-section h2 {
    color: #388e3c;
    font-size: 1.5rem;
    margin-bottom: 1rem;
  }
  
  .accountsettings-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .accountsettings-form-group {
    display: flex;
    flex-direction: column;
  }
  
  .accountsettings-form-group label {
    margin-bottom: 0.5rem;
    color: #4a4a4a;
  }
  
  .accountsettings-form-group input {
    padding: 0.5rem;
    border: 1px solid #ccc;
    border-radius: 4px;
  }
  
  .accountsettings-button {
    background-color: #4caf50;
    color: white;
    border: none;
    padding: 0.75rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
  }
  
  .accountsettings-button:hover {
    background-color: #45a049;
  }
  
  .accountsettings-twofa-toggle {
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  
  .accountsettings-switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 34px;
  }
  
  .accountsettings-switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }
  
  .accountsettings-slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;
  }
  
  .accountsettings-slider:before {
    position: absolute;
    content: "";
    height: 26px;
    width: 26px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: .4s;
  }
  
  .accountsettings-switch input:checked + .accountsettings-slider {
    background-color: #4caf50;
  }
  
  .accountsettings-switch input:checked + .accountsettings-slider:before {
    transform: translateX(26px);
  }
  
  .accountsettings-slider.accountsettings-round {
    border-radius: 34px;
  }
  
  .accountsettings-slider.accountsettings-round:before {
    border-radius: 50%;
  }
  
  .accountsettings-section p {
    margin-bottom: 1rem;
    color: #666;
    line-height: 1.5;
  }
  
  .accountsettings-deactivate {
    background-color: #f44336;
  }
  
  .accountsettings-deactivate:hover {
    background-color: #d32f2f;
  }
  
  /* Add these styles to your existing CSS file */

.custom-alert {
  position: fixed;
  top: 24px;
  left: 50%;
  transform: translateX(-50%);
  z-index: 1000;
  min-width: 300px;
  max-width: 90%;
  background: white;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  overflow: hidden;
  animation: slideIn 0.3s ease-out;
}

.custom-alert.success {
  border-left: 4px solid #4caf50;
}

.custom-alert.error {
  border-left: 4px solid #f44336;
}

.alert-content {
  display: flex;
  align-items: center;
  padding: 16px;
  gap: 12px;
}

.alert-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 24px;
  height: 24px;
}

.success .alert-icon {
  color: #4caf50;
}

.error .alert-icon {
  color: #f44336;
}

.alert-close {
  background: none;
  border: none;
  padding: 4px;
  cursor: pointer;
  color: #666;
  margin-left: auto;
  border-radius: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background-color 0.2s;
}

.alert-close:hover {
  background-color: rgba(0, 0, 0, 0.05);
}

.alert-progress {
  height: 3px;
  background: #e0e0e0;
  width: 100%;
}

.success .alert-progress {
  background: #4caf50;
  animation: progress 3s linear forwards;
}

.error .alert-progress {
  background: #f44336;
  animation: progress 3s linear forwards;
}

@keyframes slideIn {
  from {
    transform: translate(-50%, -100%);
    opacity: 0;
  }
  to {
    transform: translate(-50%, 0);
    opacity: 1;
  }
}

@keyframes progress {
  from {
    width: 100%;
  }
  to {
    width: 0%;
  }
}

/* Add a slide-out animation when the alert is being removed */
.custom-alert.hiding {
  animation: slideOut 0.3s ease-in forwards;
}

@keyframes slideOut {
  from {
    transform: translate(-50%, 0);
    opacity: 1;
  }
  to {
    transform: translate(-50%, -100%);
    opacity: 0;
  }
}

/* Add some sparkle effects for success messages */
.success .alert-icon {
  position: relative;
}

.success .alert-icon::before,
.success .alert-icon::after {
  content: "✨";
  position: absolute;
  font-size: 12px;
  animation: sparkle 1.5s ease-in-out infinite;
}

.success .alert-icon::before {
  top: -8px;
  right: -8px;
}

.success .alert-icon::after {
  bottom: -8px;
  left: -8px;
  animation-delay: 0.75s;
}

@keyframes sparkle {
  0%,
  100% {
    opacity: 0;
    transform: scale(0.5);
  }
  50% {
    opacity: 1;
    transform: scale(1);
  }
}

/* Responsive adjustments */
@media (max-width: 480px) {
  .custom-alert {
    min-width: calc(100% - 32px);
    margin: 0 16px;
  }
}

/* Confirmation Modal Styles */
.confirmation-modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.confirmation-modal {
  background: white;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  padding: 20px;
  max-width: 400px;
  width: 90%;
  text-align: center;
}

.confirmation-modal-content p {
  font-size: 16px;
  color: #333;
  margin-bottom: 20px;
}

.confirmation-modal-buttons {
  display: flex;
  justify-content: center;
  gap: 10px;
}

.confirmation-modal-button {
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.3s;
}

.confirmation-modal-button.confirm {
  background-color: #4caf50;
  color: white;
}

.confirmation-modal-button.confirm:hover {
  background-color: #45a049;
}

.confirmation-modal-button.cancel {
  background-color: #f44336;
  color: white;
}

.confirmation-modal-button.cancel:hover {
  background-color: #d32f2f;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/dashboard.css">
/* Base layout */
.dashboard-container {
    display: flex;
    min-height: 100vh;
    background-color: #f5f7fa;
  }
  
  /* Main content area */
  .dashboard-content {
    flex-grow: 1;
    padding: 24px;
    overflow-x: hidden;
  }
  
  /* Card stats container */
  .card-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    gap: 24px;
    margin-top: 32px;
    margin-bottom: 32px;
  }
  
  /* Individual stat cards */
  .card-dashbord {
    width: 100%;
    height: auto;
    min-height: 140px;
    padding: 20px;
    font-size: 15px;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    transition: transform 0.2s, box-shadow 0.2s;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    background-color: white;
  }
  
  .card-dashbord:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);
  }
  
  /* Charts and status container */
  .charts-status-container {
    display: grid;
    grid-template-columns: 1fr 350px;
    gap: 24px;
    margin-top: 32px;
  }
  
  /* Charts container */
  .charts-container {
    background-color: white;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    height: 100%;
  }
  
  /* Donation status section */
  .project-status {
    background-color: white;
    padding: 20px;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    height: 100%;
  }
  
  .project-status h3 {
    margin-top: 0;
    margin-bottom: 20px;
    font-size: 18px;
    font-weight: 600;
  }
  
  /* Status items */
  .project-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 16px;
    padding-bottom: 8px;
    border-bottom: 1px solid #f0f0f0;
  }
  
  .project-item:last-child {
    margin-bottom: 0;
    border-bottom: none;
  }
  
  .project-info {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }
  
  /* Progress bars */
  .progress-container {
    height: 8px;
    width: 100%;
    max-width: 180px;
    border-radius: 4px;
    background: #eef1f6;
    overflow: hidden;
    margin-top: 6px;
  }
  
  .progress-bar {
    height: 100%;
    border-radius: 4px;
  }
  
  .progress-text {
    font-size: 13px;
    font-weight: 600;
    width: 40px;
    text-align: right;
    margin-left: 10px;
  }
  
  /* Navbar styling */
  .navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px 24px;
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
  }
  
  /* Search container */
  .search-container {
    width: 280px;
    padding: 8px 16px;
    background: #f5f7fa;
    border: 1px solid #e0e4e8;
    border-radius: 8px;
    display: flex;
    align-items: center;
    transition: all 0.2s;
  }
  
  .search-container:focus-within {
    border-color: #4a90e2;
    box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
  }
  
  .search-container input {
    border: none;
    outline: none;
    background: transparent;
    padding: 8px;
    width: 100%;
    font-size: 14px;
  }
  
  /* Responsive adjustments */
  @media (max-width: 1200px) {
    .charts-status-container {
      grid-template-columns: 1fr;
    }
  }
  
  @media (max-width: 768px) {
    .dashboard-content {
      padding: 16px;
    }
  
    .card-container {
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 16px;
    }
  
    .navbar {
      flex-direction: column;
      gap: 16px;
    }
  
    .search-container {
      width: 100%;
    }
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/ProductList.css">
/* General Dashboard Styles */
.dashboard-container {
    display: flex;
    min-height: 100vh;
  }
  
  .dashboard-content {
    flex: 1;
    display: flex;
    flex-direction: column;
  }
  
  /* Product List Styles */
  .product-list {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    margin: 20px;
  }
  
  /* Header Container: "Product Management" title and "Export to PDF" button */
  .header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
  }
  
  .header-container h2 {
    font-size: 24px;
    margin: 0;
    color: #333;
  }
  
  /* Export PDF Button */
  .export-pdf-btn {
    background-color: #4CAF50;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    display: flex;
    align-items: center;
    gap: 8px;  /* space between icon and text */
    transition: background-color 0.2s ease;
  }
  
  .export-pdf-btn:hover {
    background-color: #45a049;
  }
  
  /* Search Container */
  .search-container {
    margin-bottom: 20px;
  }
  
  .search-container input[type="text"] {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
    outline: none; /* remove default focus outline */
  }
  
  .search-container input[type="text"]:focus {
    border-color: #007bff; /* highlight on focus */
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.3); /* add a subtle shadow */
  }
  
  
  /* Table Styles */
  table {
    width: 100%;
    border-collapse: collapse;
  }
  
  thead {
    background-color: #f8f9fa; /* Optional: Light grey background for thead */
  }
  
  th,
  td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #ddd;
  }
  
  th {
    font-weight: bold;
    color: #333;
  }
  
  tbody tr:hover {
    background-color: #f5f5f5; /* Optional: Highlight row on hover */
  }
  
  /* Action Buttons */
  .action-btn {
    background-color: #007bff;
    color: white;
    padding: 8px 12px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-right: 5px;
    font-size: 14px;
    transition: background-color 0.2s ease;
  }
  
  .action-btn:hover {
    background-color: #0056b3;
  }
  
  /* Pagination Styles */
  .pagination {
    display: flex;
    justify-content: center;
    list-style: none;
    padding: 0;
    margin-top: 20px;
  }
  
  .pagination li {
    margin: 0 5px;
  }
  
  .pagination a {
    color: #333;
    padding: 8px 12px;
    text-decoration: none;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: white;
    transition: background-color 0.2s ease;
  }
  
  .pagination a:hover,
  .pagination a:focus {
    background-color: #eee;
  }
  
  .pagination .active a {
    background-color: #007bff;
    color: white;
    border-color: #007bff;
  }
  
  .pagination .disabled a {
    color: #999;
    cursor: not-allowed;
    background-color: #f9f9f9;
    border-color: #ddd;
  }
  
  /* Loading and Error States */
  .product-list > div {  /* Targeting the loading/error divs */
    padding: 20px;
    text-align: center;
    font-size: 16px;
    color: #555;
  }
  
  
  
  /* Responsive Design */
  @media (max-width: 768px) {
    .product-list {
      margin: 10px;
      padding: 10px;
    }
  
    .header-container {
      flex-direction: column;
      align-items: flex-start;
    }
  
    .header-container h2 {
      margin-bottom: 10px;
    }
  
    .search-container input[type="text"] {
      padding: 8px;
      font-size: 14px;
    }
  
    th,
    td {
      padding: 8px;
      font-size: 14px;
    }
  
    .action-btn {
      padding: 6px 10px;
      font-size: 12px;
    }
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/backoffcss/RequestTable.css">
/* RequestTable.css -  Mirrors the structure of ProductList.css */

/* General Dashboard Styles */
.dashboard-container {
    display: flex;
    min-height: 100vh;
  }
  
  .dashboard-content {
    flex: 1;
    display: flex;
    flex-direction: column;
  }
  
  /* Request List Styles */
  .request-list {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    margin: 20px;
  }
  
  /* Header Container: "Request Management" title and "Export to PDF" button */
  .header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
  }
  
  .header-container h2 {
    font-size: 24px;
    margin: 0;
    color: #333;
  }
  
  /* Export PDF Button */
  .export-pdf-btn {
    background-color: #4CAF50;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    display: flex;
    align-items: center;
    gap: 8px; /* space between icon and text */
    transition: background-color 0.2s ease;
  }
  
  .export-pdf-btn:hover {
    background-color: #45a049;
  }
  
  /* Search Container */
  .search-container {
    margin-bottom: 20px;
  }
  
  .search-container input[type="text"] {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
    outline: none; /* remove default focus outline */
  }
  
  .search-container input[type="text"]:focus {
    border-color: #007bff; /* highlight on focus */
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.3); /* add a subtle shadow */
  }
  
  /* Table Styles */
  table {
    width: 100%;
    border-collapse: collapse;
  }
  
  thead {
    background-color: #f8f9fa; /* Optional: Light grey background for thead */
  }
  
  th,
  td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #ddd;
  }
  
  th {
    font-weight: bold;
    color: #333;
  }
  
  tbody tr:hover {
    background-color: #f5f5f5; /* Optional: Highlight row on hover */
  }
  
  /* Action Buttons (If you have action buttons in RequestTable) */
  .action-btn {
    background-color: #007bff;
    color: white;
    padding: 8px 12px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-right: 5px;
    font-size: 14px;
    transition: background-color 0.2s ease;
  }
  
  .action-btn:hover {
    background-color: #0056b3;
  }
  
  /* Pagination Styles */
  .pagination {
    display: flex;
    justify-content: center;
    list-style: none;
    padding: 0;
    margin-top: 20px;
  }
  
  .pagination li {
    margin: 0 5px;
  }
  
  .pagination a {
    color: #333;
    padding: 8px 12px;
    text-decoration: none;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: white;
    transition: background-color 0.2s ease;
  }
  
  .pagination a:hover,
  .pagination a:focus {
    background-color: #eee;
  }
  
  .pagination .active a {
    background-color: #007bff;
    color: white;
    border-color: #007bff;
  }
  
  .pagination .disabled a {
    color: #999;
    cursor: not-allowed;
    background-color: #f9f9f9;
    border-color: #ddd;
  }
  
  /* Loading and Error States */
  .request-list > div { /* Corrected selector */
    padding: 20px;
    text-align: center;
    font-size: 16px;
    color: #555;
  }
  
  /* Responsive Design */
  @media (max-width: 768px) {
    .request-list { /* Corrected selector */
      margin: 10px;
      padding: 10px;
    }
  
    .header-container {
      flex-direction: column;
      align-items: flex-start;
    }
  
    .header-container h2 {
      margin-bottom: 10px;
    }
  
    .search-container input[type="text"] {
      padding: 8px;
      font-size: 14px;
    }
  
    th,
    td {
      padding: 8px;
      font-size: 14px;
    }
  
    .action-btn {
      padding: 6px 10px;
      font-size: 12px;
    }
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/DetailsDonations.css">
/* Enhanced CSS for DetailsDonations component */
.details-donation-page {
    font-family: "Poppins", sans-serif;
    background: linear-gradient(135deg, #f5f9ed 0%, #edf5e0 100%);
    padding: 40px 0;
    min-height: 100vh;
    position: relative;
    overflow: hidden;
  }
  
  .details-donation-page::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%238dc43f' fill-opacity='0.05' fill-rule='evenodd'/%3E%3C/svg%3E");
    pointer-events: none;
    z-index: 0;
  }
  
  .details-donation-container {
    width: 85%;
    max-width: 1200px;
    margin: 0 auto;
    background: rgba(255, 255, 255, 0.95);
    border-radius: 20px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1), 0 10px 25px rgba(141, 196, 63, 0.1), 0 0 0 1px rgba(255, 255, 255, 0.1);
    overflow: hidden;
    min-height: 500px;
    backdrop-filter: blur(10px);
    transform: translateZ(0);
    transition: all 0.5s cubic-bezier(0.215, 0.61, 0.355, 1);
    position: relative;
    z-index: 1;
  }
  
  .details-donation-container:hover {
    transform: translateY(-5px) translateZ(0);
    box-shadow: 0 25px 70px rgba(0, 0, 0, 0.12), 0 15px 35px rgba(141, 196, 63, 0.15), 0 0 0 1px rgba(255, 255, 255, 0.2);
  }
  
  /* Header section */
  .details-donation-header {
    background: linear-gradient(135deg, #8dc43f, #7aaa36);
    padding: 40px 30px;
    color: white;
    position: relative;
    overflow: hidden;
  }
  
  .details-donation-header::before {
    content: "";
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0) 70%);
    transform: rotate(30deg);
    pointer-events: none;
  }
  
  .details-donation-header::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 15px;
    background: url("data:image/svg+xml,%3Csvg viewBox='0 0 1200 120' preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0 0v46.29c47.79 22.2 103.59 32.17 158 28 70.36-5.37 136.33-33.31 206.8-37.5 73.84-4.36 147.54 16.88 218.2 35.26 69.27 18 138.3 24.88 209.4 13.08 36.15-6 69.85-17.84 104.45-29.34C989.49 25 1113-14.29 1200 52.47V0z' fill='%23ffffff' opacity='.25'%3E%3C/path%3E%3Cpath d='M0 0v15.81c13 21.11 27.64 41.05 47.69 56.24C99.41 111.27 165 111 224.58 91.58c31.15-10.15 60.09-26.07 89.67-39.8 40.92-19 84.73-46 130.83-49.67 36.26-2.85 70.9 9.42 98.6 31.56 31.77 25.39 62.32 62 103.63 73 40.44 10.79 81.35-6.69 119.13-24.28s75.16-39 116.92-43.05c59.73-5.85 113.28 22.88 168.9 38.84 30.2 8.66 59 6.17 87.09-7.5 22.43-10.89 48-26.93 60.65-49.24V0z' fill='%23ffffff' opacity='.5'%3E%3C/path%3E%3Cpath d='M0 0v5.63C149.93 59 314.09 71.32 475.83 42.57c43-7.64 84.23-20.12 127.61-26.46 59-8.63 112.48 12.24 165.56 35.4C827.93 77.22 886 95.24 951.2 90c86.53-7 172.46-45.71 248.8-84.81V0z' fill='%23ffffff' opacity='.75'%3E%3C/path%3E%3C/svg%3E");
    background-size: cover;
    background-position: center;
  }
  
  .details-donation-title-container {
    display: flex;
    align-items: center;
    justify-content: space-between;
    position: relative;
    z-index: 2;
  }
  
  .details-donation-title {
    font-size: 2.5rem;
    font-weight: 800;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 15px;
    text-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    letter-spacing: -0.5px;
    position: relative;
  }
  
  .details-donation-title::after {
    content: "";
    position: absolute;
    bottom: -10px;
    left: 0;
    width: 60px;
    height: 4px;
    background: rgba(255, 255, 255, 0.5);
    border-radius: 2px;
  }
  
  .details-donation-actions {
    display: flex;
    gap: 15px;
  }
  
  .details-donation-action-icon {
    background: rgba(255, 255, 255, 0.2);
    border: none;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    color: white;
    font-size: 1.2rem;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    position: relative;
    overflow: hidden;
  }
  
  .details-donation-action-icon::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle, rgba(255, 255, 255, 0.3) 0%, rgba(255, 255, 255, 0) 70%);
    opacity: 0;
    transition: opacity 0.4s ease;
  }
  
  .details-donation-action-icon:hover {
    transform: translateY(-5px) scale(1.05);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
  }
  
  .details-donation-action-icon:hover::before {
    opacity: 1;
  }
  
  .details-donation-action-icon.delete {
    background: rgba(220, 53, 69, 0.3);
  }
  
  .details-donation-action-icon.delete:hover {
    background: rgba(220, 53, 69, 0.8);
  }
  
  /* Content section */
  .details-donation-content {
    padding: 40px;
    position: relative;
  }
  
  .details-donation-info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 25px;
    margin-bottom: 40px;
  }
  
  .details-donation-info-item {
    display: flex;
    align-items: flex-start;
    gap: 20px;
    background: linear-gradient(135deg, #f9f9f9, #f5f5f5);
    padding: 25px;
    border-radius: 16px;
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    position: relative;
    overflow: hidden;
    border: 1px solid rgba(0, 0, 0, 0.05);
  }
  
  
  
  .details-donation-info-item:hover {
    transform: translateY(-8px);
    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.08);
    border-color: rgba(141, 196, 63, 0.2);
  }
  
  .details-donation-info-item:hover::before {
    opacity: 1;
  }
  
  .details-donation-info-icon {
    font-size: 1.8rem;
    color: #8dc43f;
    background: rgba(141, 196, 63, 0.1);
    width: 60px;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 16px;
    transition: all 0.3s ease;
  }
  
  .details-donation-info-item:hover .details-donation-info-icon {
    background: rgba(141, 196, 63, 0.2);
    transform: scale(1.1);
  }
  
  .details-donation-info-content {
    flex: 1;
  }
  
  .details-donation-info-label {
    font-weight: 600;
    color: #555;
    margin-bottom: 8px;
    font-size: 0.95rem;
    text-transform: uppercase;
    letter-spacing: 1px;
  }
  
  .details-donation-info-value {
    font-size: 1.2rem;
    color: #333;
    font-weight: 500;
  }
  .details-donation-edit-input {
  width: 100%;
  padding: 12px 18px;
  border: 2px solid #e0e0e0;
  border-radius: 10px;
  font-size: 1rem;
  transition: all 0.3s ease;
  background-color: #f9f9f9;
  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.03);
  margin-bottom: 15px;
}

.details-donation-edit-input:focus {
  border-color: #8dc43f;
  box-shadow: 0 0 0 3px rgba(141, 196, 63, 0.2), inset 0 2px 4px rgba(0, 0, 0, 0.03);
  outline: none;
}

.details-donation-edit-date {
  width: 100%;
  padding: 12px 18px;
  border: 2px solid #e0e0e0;
  border-radius: 10px;
  font-size: 1rem;
  transition: all 0.3s ease;
  background-color: #f9f9f9;
  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.03);
  margin-top: 5px;
}

.details-donation-edit-date:focus {
  border-color: #8dc43f;
  box-shadow: 0 0 0 3px rgba(141, 196, 63, 0.2), inset 0 2px 4px rgba(0, 0, 0, 0.03);
  outline: none;
}
  /* Products section */
  .details-donation-products-section {
    margin-top: 40px;
    position: relative;
  }
  
  .details-donation-section-title {
    font-size: 1.8rem;
    color: #333;
    margin: 0 0 25px 0;
    display: flex;
    align-items: center;
    gap: 15px;
    position: relative;
    padding-bottom: 15px;
  }
  
  .details-donation-section-title::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    width: 80px;
    height: 4px;
    background: linear-gradient(90deg, #8dc43f, rgba(141, 196, 63, 0.3));
    border-radius: 2px;
  }
  
  .details-donation-products-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
  }
  
  .details-donation-product-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 20px;
    background: #fff;
    border-radius: 16px;
    margin-bottom: 0;
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    border: 1px solid rgba(0, 0, 0, 0.05);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.03);
    position: relative;
    overflow: hidden;
  }
  
  .details-donation-product-item::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 4px;
    height: 100%;
    background: #8dc43f;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .details-donation-product-item:hover {
    transform: translateY(-5px) translateX(5px);
    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.08);
    border-color: rgba(141, 196, 63, 0.2);
  }
  
  .details-donation-product-item:hover::before {
    opacity: 1;
  }
  
  .details-donation-product-info {
    display: flex;
    align-items: center;
    gap: 20px;
  }
  
  .details-donation-product-icon {
    font-size: 1.8rem;
    background: rgba(141, 196, 63, 0.1);
    width: 50px;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 12px;
    transition: all 0.3s ease;
  }
  
  .details-donation-product-item:hover .details-donation-product-icon {
    background: rgba(141, 196, 63, 0.2);
    transform: scale(1.1);
  }
  
  .details-donation-product-details {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }
  
  .details-donation-product-name {
    font-weight: 600;
    font-size: 1.1rem;
    color: #333;
    margin: 0;
  }
  
  .details-donation-product-quantity {
    color: #666;
    font-size: 0.9rem;
    margin: 0;
  }
  
  .details-donation-product-status {
    padding: 8px 18px;
    border-radius: 30px;
    font-size: 0.85rem;
    font-weight: 600;
    text-transform: capitalize;
    letter-spacing: 0.5px;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
    transition: all 0.3s ease;
  }
  
  .details-donation-product-status.available {
    background-color: rgba(141, 196, 63, 0.15);
    color: #7aaa36;
    border: 1px solid rgba(141, 196, 63, 0.3);
  }
  
  .details-donation-product-status.pending {
    background-color: rgba(241, 196, 15, 0.15);
    color: #f39c12;
    border: 1px solid rgba(241, 196, 15, 0.3);
  }
  
  .details-donation-product-status.delivered {
    background-color: rgba(52, 152, 219, 0.15);
    color: #2980b9;
    border: 1px solid rgba(52, 152, 219, 0.3);
  }
  
  /* Edit mode styles */
  .details-donation-edit-input {
    width: 100%;
    padding: 12px 18px;
    border: 2px solid #e0e0e0;
    border-radius: 10px;
    font-size: 1rem;
    transition: all 0.3s ease;
    background-color: #f9f9f9;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.03);
    margin-bottom: 0;
  }
  
  .details-donation-edit-input:focus {
    border-color: #8dc43f;
    box-shadow: 0 0 0 3px rgba(141, 196, 63, 0.2), inset 0 2px 4px rgba(0, 0, 0, 0.03);
    outline: none;
  }
  
  .details-donation-edit-date {
    width: 100%;
    padding: 12px 18px;
    border: 2px solid #e0e0e0;
    border-radius: 10px;
    font-size: 1rem;
    transition: all 0.3s ease;
    background-color: #f9f9f9;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.03);
    margin-top: 5px;
  }
  
  .details-donation-edit-date:focus {
    border-color: #8dc43f;
    box-shadow: 0 0 0 3px rgba(141, 196, 63, 0.2), inset 0 2px 4px rgba(0, 0, 0, 0.03);
    outline: none;
  }
  
  .details-donation-edit-select {
    width: 100%;
    padding: 12px 18px;
    border: 2px solid #e0e0e0;
    border-radius: 10px;
    background-color: #f9f9f9;
    font-size: 1rem;
    transition: all 0.3s ease;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.03);
    appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23333' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 12px center;
    background-size: 16px;
    padding-right: 40px;
  }
  
  .details-donation-edit-select:focus {
    border-color: #8dc43f;
    box-shadow: 0 0 0 3px rgba(141, 196, 63, 0.2), inset 0 2px 4px rgba(0, 0, 0, 0.03);
    outline: none;
  }
  
  .details-donation-edit-product-row {
    display: grid;
    grid-template-columns: 2fr 1fr 1fr auto;
    gap: 15px;
    margin-bottom: 20px;
    align-items: center;
    background: #f8f9fa;
    padding: 25px;
    border-radius: 16px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.03);
    transition: all 0.3s ease;
    border: 1px solid rgba(0, 0, 0, 0.05);
    position: relative;
    overflow: hidden;
  }
  
  .details-donation-edit-product-row:hover {
    background: #f5f5f5;
    border-color: rgba(141, 196, 63, 0.2);
  }
  
  /* Fixed: Make edit product row full width on mobile */
  @media (max-width: 768px) {
    .details-donation-edit-product-row {
      grid-template-columns: 1fr;
      gap: 15px;
      padding: 20px;
    }
  
    .details-donation-edit-product-row > * {
      margin-bottom: 10px;
    }
  
    .details-donation-delete-product-button {
      margin: 0 auto;
    }
  }
  
  .details-donation-delete-product-button {
    background: rgba(220, 53, 69, 0.1);
    border: none;
    color: #dc3545;
    cursor: pointer;
    font-size: 1.2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    transition: all 0.3s ease;
  }
  
  .details-donation-delete-product-button:hover {
    background: rgba(220, 53, 69, 0.2);
    transform: rotate(90deg);
  }
  
  .details-donation-add-product-button {
    background: linear-gradient(135deg, #8dc43f, #7aaa36);
    color: white;
    border: none;
    padding: 14px 25px;
    border-radius: 10px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    display: flex;
    align-items: center;
    gap: 10px;
    margin-top: 25px;
    box-shadow: 0 5px 15px rgba(141, 196, 63, 0.3);
    position: relative;
    overflow: hidden;
  }
  
  .details-donation-add-product-button::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.2) 0%, rgba(255, 255, 255, 0) 100%);
    opacity: 0;
    transition: opacity 0.4s ease;
  }
  
  .details-donation-add-product-button:hover {
    background: linear-gradient(135deg, #7aaa36, #6a9530);
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(141, 196, 63, 0.4);
  }
  
  .details-donation-add-product-button:hover::before {
    opacity: 1;
  }
  
  /* Action buttons */
  .details-donation-actions-container {
    display: flex;
    justify-content: center;
    margin-top: 40px;
  }
  
  .details-donation-request-button {
    background: linear-gradient(135deg, #8dc43f, #7aaa36);
    color: white;
    border: none;
    padding: 16px 40px;
    border-radius: 50px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    box-shadow: 0 10px 25px rgba(141, 196, 63, 0.3);
    position: relative;
    overflow: hidden;
    letter-spacing: 0.5px;
  }
  
  .details-donation-request-button::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      rgba(255, 255, 255, 0) 0%,
      rgba(255, 255, 255, 0.3) 50%,
      rgba(255, 255, 255, 0) 100%
    );
    transition: all 0.6s ease;
  }
  
  .details-donation-request-button:hover {
    background: linear-gradient(135deg, #7aaa36, #6a9530);
    transform: translateY(-5px);
    box-shadow: 0 15px 35px rgba(141, 196, 63, 0.4);
  }
  
  .details-donation-request-button:hover::before {
    left: 100%;
  }
  
  /* Loading and error states */
  .details-donation-loading,
  .details-donation-error {
    text-align: center;
    padding: 80px 50px;
    font-size: 1.4rem;
    color: #6c757d;
    background: #f8f9fa;
    border-radius: 16px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
    position: relative;
    overflow: hidden;
  }
  
  .details-donation-loading::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 4px;
    background: linear-gradient(90deg, #f8f9fa, #8dc43f, #f8f9fa);
    background-size: 200% 100%;
    animation: loading-animation 2s infinite;
  }
  
  @keyframes loading-animation {
    0% {
      background-position: 100% 0;
    }
    100% {
      background-position: -100% 0;
    }
  }
  
  /* Responsive styles */
  @media (max-width: 992px) {
    .details-donation-container {
      width: 90%;
    }
  
    .details-donation-products-list {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }
  }
  
  @media (max-width: 768px) {
    .details-donation-container {
      width: 95%;
    }
  
    .details-donation-header {
      padding: 30px 20px;
    }
  
    .details-donation-content {
      padding: 30px 20px;
    }
  
    .details-donation-title-container {
      flex-direction: column;
      text-align: center;
      gap: 20px;
    }
  
    .details-donation-title::after {
      left: 50%;
      transform: translateX(-50%);
    }
  
    .details-donation-actions {
      position: static;
      transform: none;
      justify-content: center;
    }
  
    .details-donation-title {
      font-size: 2rem;
      justify-content: center;
    }
  
    .details-donation-products-list {
      grid-template-columns: 1fr;
    }
  }
  
  @media (max-width: 576px) {
    .details-donation-content {
      padding: 20px 15px;
    }
  
    .details-donation-info-grid {
      grid-template-columns: 1fr;
    }
  
    .details-donation-request-button {
      width: 100%;
    }
  }
  
  /* Animations */
  @keyframes details-donation-fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes details-donation-pulse {
    0% {
      box-shadow: 0 0 0 0 rgba(141, 196, 63, 0.4);
    }
    70% {
      box-shadow: 0 0 0 10px rgba(141, 196, 63, 0);
    }
    100% {
      box-shadow: 0 0 0 0 rgba(141, 196, 63, 0);
    }
  }
  
  .details-donation-fade-in {
    animation: details-donation-fadeIn 0.6s ease forwards;
  }
  
  .details-donation-pulse {
    animation: details-donation-pulse 2s infinite;
  }
  
  /* Custom scrollbar */
  .details-donation-container::-webkit-scrollbar {
    width: 8px;
  }
  
  .details-donation-container::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
  }
  
  .details-donation-container::-webkit-scrollbar-thumb {
    background: rgba(141, 196, 63, 0.5);
    border-radius: 10px;
  }
  
  .details-donation-container::-webkit-scrollbar-thumb:hover {
    background: rgba(141, 196, 63, 0.7);
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/ListDonationsRequest.css">
/* General container styling */
.container {
    padding: 20px;
    max-width: 1200px;
    margin: 0 auto;
  }
  
  /* Page Title */
  .title {
    color: #228b22;
    font-size: 28px;
    margin-bottom: 20px;
    text-align: center;
  }
  
  /* Donation Card */
  .donation-card-listrequestsdonation {
    background: #f8f9fa;
    border-left: 4px solid #228b22;

    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease-in-out;
    display: flex;
    flex-direction: column;
  }
  
  .donation-card-listrequestsdonation:hover {
    transform: scale(1.02);
  }
  
  /* Profile Info */
  .profile-info {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-bottom: 15px;
  }
  
  .dropdown-img {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid #228b22;
  }
  
  .profile-info p {
    margin: 0;
    font-size: 16px;
    font-weight: bold;
  }
  
  /* Products List (Now using Flexbox) */
  .product-list-listrequestsdonation {
    list-style: none;
    padding: 0;
    display: flex; /* FLEXBOX */
    flex-wrap: wrap; /* Allow wrapping if needed */
    gap: 10px;
    margin-top: 10px;
    justify-content: space-between;
  }
  
  /* Product Item - Now Using Flex */
/* Products List - Aligned & Compact */
.product-list-listrequestsdonation {
    list-style: none;
    padding: 0;
    display: flex;
    flex-direction: column; /* Stack items */
    gap: 8px;
    margin-top: 10px;
  }
  
  /* Product Item - Now More Structured */
  .product-item-listrequestsdonation {
    background: #ffffff;
    padding: 10px;
    border-left: 3px solid #228b22;
    border-radius: 5px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    font-size: 14px;
  }
  
  /* Product Details */
  .product-details {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
  }
  
  .product-details span {
    display: block;
    font-size: 13px;
    color: #333;
  }
  
  /* Quantity Highlighted */
  .product-quantity {
    font-size: 16px;
    font-weight: bold;
    color: #d9534f; /* Rouge pour attirer l'attention */
    padding: 4px 8px;
    border-radius: 4px;
  }
  
  /* Responsive Design */
  @media (max-width: 768px) {
    .product-item-listrequestsdonation {
      flex-direction: column; /* Stack on small screens */
      align-items: flex-start;
    }
  
    .product-quantity {
      font-size: 14px;
      padding: 6px;
    }
  }
  
  
  .product-item-listrequestsdonation span {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 14px;
    padding: 5px 0;
  }
  
  /* Button Container */
  .button-container {
    display: flex;
    justify-content: space-evenly;
    margin-top: 15px;
  }
  
  .accept-btn, .reject-btn {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    font-weight: bold;
    transition: background 0.3s ease-in-out;
  }
  
  .accept-btn {
    background-color: #28a745;
    color: white;
  }
  
  .accept-btn:hover {
    background-color: #218838;
  }
  
  .reject-btn {
    background-color: #dc3545;
    color: white;
  }
  
  .reject-btn:hover {
    background-color: #c82333;
  }
  
  /* Responsive Design */
  @media (max-width: 768px) {
    .donation-card {
      padding: 15px;
    }
  
    /* Stack product items in one column on small screens */
    .product-item {
      width: 100%;
    }
  
    .profile-info {
      flex-direction: column;
      align-items: flex-start;
    }
  }
  .search-container {
    display: flex;
    align-items: center;
    justify-content: center;
    background: white;
    padding: 8px;
    border-radius: 25px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    width: 320px;
    margin: 0 auto 20px;
    transition: all 0.3s ease-in-out;
  }
  
  .search-container:hover {
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }
  
  .search-icon {
    color: #555;
    margin-right: 8px;
  }
  
  .search-input-requests {
    border: none;
    outline: none;
    font-size: 16px;
    width: 100%;
    padding: 8px;
    background: transparent;
  }
  .controls {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 15px;
    margin: 20px 0;
  }
  
  .select {
    padding: 10px;
    font-size: 16px;
    border-radius: 25px;
    border: 1px solid #ccc;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    transition: 0.3s;
    cursor: pointer;
    background: white;
    color: #333;
    font-weight: bold;
  }
  
  .select:hover {
    border-color: #228b22;
    transform: scale(1.05);
  }
  
  .filter-checkbox {
    display: flex;
    align-items: center;
    font-size: 16px;
    color: #333;
  }
  
  .filter-icon {
    margin-right: 8px;
  }
  
  .filter-checkbox input {
    margin-right: 5px;
  }
  .content-list {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 20px;
  }
</file>

<file path="sustainafood-frontend/src/assets/styles/ListOfDonations.css">
/* ===== Global Styles ===== */
body {
  margin: 0;
  font-family: "Poppins", sans-serif;
  background-color: #f0f8f0;
  box-sizing: border-box;
}

/* ===== Container Principal ===== */
.container-listdonation {
  width: 80%;
  margin: auto;
  padding: 40px 0;
}

/* ===== Header Section ===== */
.profile-headerLIST {
  display: flex;
  align-items: center;
  justify-content: space-between;
  background-color: #ffffff;
  padding: 20px 30px;
  border-radius: 10px;
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
  margin-bottom: 20px;
}

.profile-headerLIST h1 {
  font-size: 40px;
  color: #228b22;
  margin: 0;
}

/* ===== Search Bar ===== */
.groupsearch {
  position: relative;
  display: flex;
  align-items: center;
}

.inputsearch {
  width: 250px;
  padding: 10px 15px;
  border: 1px solid #ddd;
  border-radius: 30px;
  font-size: 16px;
  outline: none;
  transition: all 0.3s ease;
  padding-left: 40px;
}

.inputsearch:focus {
  border-color: #56ab2f;
  box-shadow: 0px 0px 8px rgba(34, 139, 34, 0.3);
}

.iconsearch {
  position: absolute;
  left: 12px;
  width: 20px;
  height: 20px;
  fill: #228b22;
}

/* ===== Liste des donations ===== */
.contentlist {
  display: flex;
  flex-direction: column;
  gap: 20px;
  width: 100%;
}

.contentlist > div {
  background: transparent;
  padding: 0px;
  border-radius: 10px;
  transition: transform 0.3s ease;
  width: 100%;
}

.donor-profile .projects {
  display: grid;
  grid-template-columns: 1fr;
  gap: 20px;
  width: 100%;
}

/* Grid layout for donation cards on larger screens */
@media (min-width: 768px) {
  .donor-profile .projects {
    grid-template-columns: repeat(2, 1fr);
  }
}

/* ===== Responsive Design ===== */
@media (max-width: 1024px) {
  .container-listdonation {
    width: 95%;
  }
}

@media (max-width: 768px) {
  .profile-headerLIST {
    flex-direction: column;
    text-align: center;
    gap: 15px;
  }

  .inputsearch {
    width: 100%;
  }

  .donor-profile .projects {
    grid-template-columns: 1fr;
  }
}

@media (max-width: 480px) {
  .donation-card-footer {
    justify-content: center;
  }

  .btnseemorelist,
  .btnseelist {
    width: 100%;
    text-align: center;
  }
}

/* Style du select avec position à droite */
.sort-select {
  width: 20px;
  padding: 8px 12px;
  background-color: #fff;
  border: 1px solid #ccc;
  border-radius: 50px;
  font-size: 16px;
  color: #333;
  appearance: none; /* Supprime le style par défaut du select */
  cursor: pointer;
  right: 20px; /* 20px à partir du bord droit */
  top: 10px; /* 10px à partir du bord supérieur */
}

/* Style du select au focus */
.sort-select:focus {
  border-color: #228b22;
  outline: none;
}
</file>

<file path="sustainafood-frontend/src/assets/styles/Profile.css">
body{
    background: rgba(220, 238, 221, 0.781);

 }


 .all{
    
    background: #ffffffaa;
    border-radius: 12px;
    padding: 5px;
    margin-left: 30px;
    margin-top: 30px;
    position: relative;
    box-shadow: #604b4a53 0px 20px 20px 10px;
 }
 .card-white {
    margin-left: 30px;
    margin-top: 13px;
    margin-bottom: 13px;
    width: 290px;
    height: 380px;
    background:#ffffff77;
    
    border-radius: 12px;
    padding: 3px;
    position: relative;
    transition: all 0.5s ease-in-out;
  }
  

  .card-white .mail {
    position: absolute;
    right: 2rem;
    top: 1.4rem;
    background: transparent;
    border: none;
  }

  .card-white .mail svg {
    stroke: #8dc73f;
    stroke-width: 3px;
  }

  .card-white .mail svg:hover {
    stroke: #8dc73f;
  }

  .card-white .profile-pic {
    position: absolute;
    width: calc(100% - 6px);
    height: calc(100% - 6px);
   
    border-radius: 11px;
    z-index: 1;
    border: 0px solid #8dc73f;
    overflow: hidden;
    transition: all 0.5s ease-in-out 0.2s, z-index 0.5s ease-in-out 0.2s;
  }

  .card-white  .profile-pic img {
    -o-object-fit: cover;
    object-fit: cover;
    width: 100%;
    height: 100%;
    -o-object-position: 0px 0px;
    object-position: 0px 0px;
    transition: all 0.5s ease-in-out 0s;
  }

  .card-white  .profile-pic svg {
    width: 100%;
    height: 100%;
    -o-object-fit: cover;
    object-fit: cover;
    -o-object-position: 0px 0px;
    object-position: 0px 0px;
    transform-origin: 45% 20%;
    transition: all 0.5s ease-in-out 0s;
  }

  .card-white  .bottom {
    position: absolute;
    bottom: 3px;
    left: 3px;
    right: 3px;
    background: #8dc73f;
    top: 80%;
    border-radius: 12px;
    z-index: 2;
    box-shadow: rgba(96, 75, 74, 0.1882352941) 0px 5px 5px 0px inset;
    overflow: hidden;
    transition: all 0.5s cubic-bezier(0.645, 0.045, 0.355, 1) 0s;
  }

  .card-white .bottom .content {
    position: absolute;
    bottom: 0;
    left: 1.5rem;
    right: 1.5rem;
    height: 160px;
  }

  .card-white .bottom .content .name {
    display: block;
    font-size: 1.2rem;
    color: white;
    margin-top:-65px;

    font-weight: bold;
  }

  .card-white .bottom .content .about-me {
    display: block;
    font-size: 0.9rem;
    color: white;
    margin-top: 5px;
  }

  .card-white .bottom .bottom-bottom {
    position: absolute;
    bottom: 1rem;
    left: 1.5rem;
    right: 1.5rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .card-white .bottom .bottom-bottom .social-links-container {
    display: flex;
    gap: 1rem;
  }

  .card-white .bottom .bottom-bottom .social-links-container svg {
    height: 20px;
    fill: white;
    filter: drop-shadow(0 5px 5px rgba(165, 132, 130, 0.1333333333));
  }

  .card-white .bottom .bottom-bottom .social-links-container svg:hover {
    fill: #f55d56;
    transform: scale(1.2);
  }

  .card-white  .bottom .bottom-bottom .button {
    background: white;
    color: #8dc73f;
    border: none;
    border-radius: 12px;
    font-size: 0.6rem;
    padding: 0.4rem 0.6rem;
    box-shadow: rgba(165, 132, 130, 0.1333333333) 0px 5px 5px 0px;
  }

  .card-white  .bottom .bottom-bottom .button:hover {
    background: #f55d56;
    color: white;
  }

  .card-white :hover {
    border-top-left-radius: 55px;
  }

  .card-white:hover .bottom {
    top: 20%;
    border-radius: 80px 29px 29px 29px;
    transition: all 0.5s cubic-bezier(0.645, 0.045, 0.355, 1) 0.2s;
  }

  .card-white:hover .profile-pic {
    width: 100px;
    height: 100px;
    aspect-ratio: 1;
    top: 10px;
    left: 10px;
    border-radius: 50%;
    z-index: 3;
    border: 7px solid #8dc73f;
    box-shadow: rgba(96, 75, 74, 0.1882352941) 0px 5px 5px 0px;
    transition: all 0.5s ease-in-out, z-index 0.5s ease-in-out 0.1s;
  }

  .card-white:hover .profile-pic:hover {
    transform: scale(1.3);
    border-radius: 0px;
  }

  .card-white:hover .profile-pic img {
    transform: scale(1);

    -o-object-position: 0px 25px;
    object-position: 0px ;
    transition: all 0.5s ease-in-out 0.5s;
  }

  .card-white:hover .profile-pic svg {
    transform: scale(2.5);
    transition: all 0.5s ease-in-out 0.5s;
  }

  /* From Uiverse.io by Admin12121 */ 
.menu {
    padding: 0.5rem;
    background-color: #fff;
    position: relative;
    display: flex;
    justify-content: center;
    border-radius: 15px;
    box-shadow: 0 10px 25px 0 rgba(#000, 0.075);
  }
  
  .link {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    width: 70px;
    height: 50px;
    border-radius: 8px;
    position: relative;
    z-index: 1;
    overflow: hidden;
    transform-origin: center left;
    transition: height 0.2s ease-in;
    text-decoration: none;
    color: inherit;
    &:before {
      position: absolute;
      z-index: -1;
      content: "";
      display: block;
      border-radius: 8px;
      width: 100%;
      height: 100%;
      top: 0;
      transform: translateY(100%);
      transition: transform 0.2s ease-in;
      transform-origin: center right;
      background-color: #eee;
    }
  
    &:hover,
    &:focus {
      outline: 0;
      width: 130px;
  
      &:before,
      .link-title {
        transform: translateY(0);
        opacity: 1;
      }
    }
  }
  
  .link-icon {
    width: 28px;
    height: 28px;
    display: block;
    flex-shrink: 0;
    left: 18px;
    position: absolute;
    svg {
      width: 28px;
      height: 28px;
    }
  }
  
  .link-title {
    transform: translateX(100%);
    transition: transform 0.2s ease-in;
    transform-origin: center right;
    display: block;
    text-align: center;
    text-indent: 28px;
    width: 100%;
  }
  



  /* Réinitialisation de base */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  
  /* Corps de la page */
  body {
    font-family: 'Helvetica Neue', Arial, sans-serif;
    background-color: #F0F4F3; /* Couleur de fond pâle/vert clair */
    color: #333;
  }
  
  /* Conteneur principal */
  .container-profile {
    width: 100%;
    max-width: 1400px;
    margin: 0 auto;
    padding: 20px;
    margin-top: -70px;

  }
  
  /* En-tête */
  .profile-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    

  }
  
  .profile-header h1 {
    font-size: 24px;
  }
  
  .date-switcher button {
    background-color: #fff;
    border: 1px solid #ddd;
    padding: 8px 16px;
    border-radius: 8px;
    cursor: pointer;
  }
  
  /* Mise en page principale en grille : 3 colonnes */
  .main {
    display: grid;
    grid-template-columns: 1fr 1.2fr 1fr; /* Ajuster les proportions si besoin */
    gap: 20px;
    margin-top: -70px;

  }
  .main {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    gap: 20px; /* Ajoute un espace entre les éléments */
  }
  
  .left-column, .right-column { 
    flex: 1; /* 1 part d'espace */
    min-width: 300px;
  }
  
  .center-column { 
    flex: 1.5; /* 1.5 fois la taille des autres colonnes */
    min-width: 450px; /* Facultatif : ajuster en fonction de la proportion */
  }
  
  
  
  /* Colonne de gauche */
  .left-column {
    
    display: flex;
    flex-direction: column;
    gap: 20px;
  }
  
  /* Carte Profil */
  .profile-cardfront {
    background-color: #fff;
    border-radius: 12px;
    display: flex;
    align-items: center;
    gap: 15px;

  }
  
  .profile-pic {
    width: 180px;
    height: 180px;
    border-radius: 50%;
    object-fit: cover;
  }
  
  .profile-info h2 {
    margin-bottom: 5px;
    font-size: 18px;
  }
  
  .profile-info .profile-p {
    margin-bottom: 10px;
    font-size: 14px;
    color: #777;
  }
  
  .profile-actions {
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .profile-actions p {
    margin: 0;
    font-size: 14px;
  }
  
  .profile-actions button {
    background-color: #50C9A7; /* Couleur de bouton (vert) */
    color: #fff;
    border: none;
    border-radius: 8px;
    padding: 8px 12px;
    cursor: pointer;
  }
  
  /* Informations détaillées */
  .detailed-info {
    background-color: #fff;
    border-radius: 12px;
    padding: 20px;
  }
  
  .detailed-info h3 {
    margin-bottom: 10px;
    font-size: 16px;
  }
  
  .detailed-info ul {
    list-style-type: none;
  }
  
  .detailed-info li {
    margin-bottom: 8px;
    font-size: 14px;
  }
  
  /* Colonne centrale */
  .center-column {
    background-color: #fff;
    border-radius: 12px;
    padding: 20px;
  }
  
  .center-column h3 {
    margin-bottom: 20px;
    font-size: 18px;
  }
  
  .projects {
    display: flex;
    flex-direction: column;
    gap: 15px;
        width: 500px;

  }
  
  /* Cartes projets */
  .project-card {
    background-color: #F9FAFB;
    border-radius: 10px;
    padding: 15px;
    width: 553px;

  }
  
  .project-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 5px;
  }
  
  .project-header h4 {
    margin: 0;
    font-size: 16px;
  }
  
  .project-header span {
    font-size: 12px;
    color: #999;
  }
  
  .project-card p {
    font-size: 14px;
    margin-bottom: 10px;
  }
  
  .project-avatars {
    display: flex;
    gap: 5px;
  }
  
  .project-avatars img {
    width: 24px;
    height: 24px;
    border-radius: 50%;
  }
  
  /* Colonne de droite */
  .right-column {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }
  
  /* Section Calendrier */
  .calendar-section {
    background-color: #fff;
    border-radius: 12px;
    padding: 20px;
  }
  
  .calendar-section h3 {
    margin-bottom: 10px;
  }
  
  .calendar {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }
  
  .weekdays, .days {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    text-align: center;
  }
  
  .weekdays div {
    font-weight: bold;
    color: #666;
  }
  
  .days div {
    padding: 8px 0;
    border-radius: 6px;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  
  .days div:hover {
    background-color: #E5E7EB;
  }
  
  /* Section Inbox */
  .inbox-section {
    background-color: #fff;
    border-radius: 12px;
    padding: 20px;
  }
  
  .inbox-section h3 {
    margin-bottom: 10px;
    font-size: 16px;
  }
  
  .message {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 0;
    border-bottom: 1px solid #f0f0f0;
    margin-left: 50px;
    width: 300px;
  }
  
  .message:last-child {
    border-bottom: none;
  }
  
  .message-header {
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .message-header img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
  }
  
  .message-header strong {
    display: block;
    font-size: 14px;
    color: #000;
  }
  
  .message-header p {
    font-size: 12px;
    color: #777;
  }
  
  .time {
    font-size: 12px;
    color: #999;
  }
  .btnProfile{
    color: #8dc73f;
    font-weight: bold;
  }
  /* From Uiverse.io by sohoning */ 
.winner-cards {
  position: relative;
  height: 150px;
  
  transition-duration: 0.5s;
  background: none;
  overflow: hidden;
}

.winner-cards:hover {
  height: 270px;
}

.winner-cards:hover .winner-outlinePage {
  box-shadow: 0 10px 15px #b1985e;
}

.winner-cards:hover .winner-detailPage {
  display: flex;
}

.winner-outlinePage {
  position: relative;
  background: linear-gradient(45deg, #fffbf0, #ffdd87);
  width: 350px;
  height: 150px;
  border-radius: 25px;
  transition-duration: 0.5s;
  z-index: 2;
}

.winner-detailPage {
  position: relative;
  display: none;
  width: 350px;
  height: 120px;
  background: white;
  top: -20px;
  z-index: 1;
  transition-duration: 1s;
  border-radius: 0 0 25px 25px;
  overflow: hidden;
  align-items: center;
  justify-content: flex-start;
}

.winner-splitLine {
  position: absolute;
  width: 200px;
  height: 10px;
  top: 100px;
  background-image: linear-gradient(
    to right,
    transparent 10%,
    #ffe8a0 20%,
    #f7b733 50%,
    #ffe8a0 70%,
    transparent 90%
  );
  z-index: 1;
}

.winner-trophy {
  position: absolute;
  right: 0px;
  top: 4px;
  z-index: 2;
}

.winner-ranking_number {
  position: relative;
  color: #ffc64b;
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  font-weight: 700;
  font-size: 80px;
  left: 10px;
  padding: 0;
  margin: 0;
  top: -5px;
}

.winner-ranking_word {
  position: relative;
  font-size: 40px;
  color: #424c50;
}

.winner-userAvatar {
  position: absolute;
  bottom: 6px;
  left: 20px;
}

.winner-userName {
  position: relative;
  font-weight: 600;
  color: #6b7578;
  left: 75px;
  font-size: 18px;
  margin-top: 10px;

}

.winner-medals {
  position: absolute;
  top: 15px;
  right: 5px;
  
}

.winner-gradesBox {
  position: relative;
  height: 75px;
  top: 10px;
  margin-right: 10px;
  margin-left: 15px;
}

.winner-gradesIcon {
  position: absolute;
  top: 10px;
  left: 10px;
}

.winner-gradesBoxLabel {
  position: relative;
  display: block;
  color: #424c50;
  letter-spacing: 6px;
  font-family: Arial, Helvetica, sans-serif;
  margin-top: 20px;
  font-weight: 800;
  font-size: 13px;
  left: 100px;
}

.winner-gradesBoxNum {
  position: relative;
  font-family: Arial, Helvetica, sans-serif;
  display: block;
  font-size: 25px;
  font-weight: 800;
  color: #ea9518;
  top: -5px;
  left: 99px;

}

.winner-timeNum {
  color: #6cabf6;
}

.winner-slide-in-top {
  animation: winner-slide-in-top 1s cubic-bezier(0.65, 0.05, 0.36, 1) both;
}

@keyframes winner-slide-in-top {
  0% {
    transform: translateY(-100px);
    opacity: 0;
  }

  100% {
    transform: translateY(0);
    opacity: 1;
  }
}

/* From Uiverse.io by kamehame-ha */  
.feedback-cards {
    display: flex;
    
    flex-direction: column;
    gap: 15px;
  }
  
  .feedback-cards .feedback-red {
    background-color: #f43f5e;
  }
  
  .feedback-cards .feedback-blue {
    background-color: #3b82f6;
  }
  
  .feedback-cards .feedback-green {
    background-color: #22c55e;
  }
  
  .feedback-cards .feedback-card {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    text-align: center;
    height: 100px;
    width: 250px;
    border-radius: 10px;
    color: white;
    cursor: pointer;
    transition: 400ms;
  }
  
  .feedback-cards .feedback-card p.feedback-tip {
    font-size: 1em;
    font-weight: 700;
  }
  
  .feedback-cards .feedback-card p.feedback-second-text {
    font-size: .7em;
  }
  
  .feedback-cards .feedback-card:hover {
    transform: scale(1.1, 1.1);
  }
  
  .feedback-cards:hover > .feedback-card:not(:hover) {
    filter: blur(10px);
    transform: scale(0.9, 0.9);
  }
  .donation-card {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
    width: 521px;
    text-align: center; /* Centre le contenu */
  }
  
  .donation-title {
    text-align: center;
    font-size: 22px;
    color: #2c3e50;
  }
  
  .donation-p {
    text-align: left; /* Alignement du texte */
    margin: 5px 0;
    color: #555;
  }
  
  .donation-ul {
    list-style-type: none;
    padding: 0;
    text-align: left; /* Alignement du texte */
  }
  
  .donation-li {
    background: #ecf0f1;
    padding: 8px;
    border-radius: 5px;
    margin: 5px 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .status {
    padding: 3px 8px;
    border-radius: 5px;
    font-size: 12px;
    color: white;
  }
  
  .available {
    background-color: #27ae60;
  }
  
  .pending {
    background-color: #f39c12;
  }
  
  .donation-card-content {
    margin-left: 0px;
    text-align: left; /* Alignement du texte */
  }
  .btnseemore{
    margin-left: 406px;
    margin-top: 10px;
    font-size: 12px;
    padding:  5px 10px; 
    background-color: black;
    color: white;
    border-radius: 5px;
    border: none;
  }
  .userrole{ 
    color:white;
    font-size : 40px;
    font-style:oblique }
  @media (max-width: 1024px) {
    .main {
      flex-direction: column; /* Les colonnes passent en mode vertical */
      align-items: center; /* Centre le contenu */
    }
  
    .left-column, .center-column, .right-column {
      width: 90%; /* Chaque colonne prendra presque toute la largeur */
      text-align: center;
    }
  }
 
  @media (max-width: 700px) {
    .userrole{
       color:white;
      size : 20px;
      font-style:oblique }
    .profile-header  {
      font-size: 20px;
    }
  
    .btnProfile {
      font-size: 12px;
      padding: 6px 10px;
    }
  
    .profile-pic img {
      width: 30px;
      height: 40px;
    }
  
    .card-white {
      margin-bottom: 5px;
      height: auto;
      
      background: rgba(255, 255, 255, 0.7);
      border-radius: 10px;
      padding: 5px;
      position: relative;
      transition: all 0.4s ease-in-out;
    }
  
    .card-white .mail {
      position: absolute;
      right: 1rem;
      top: 1rem;
      background: transparent;
      border: none;
    }
  
    .card-white .mail svg {
      stroke: #8dc73f;
      stroke-width: 2px;
    }
  
    .card-white .profile-pic {
      position: center;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      z-index: 1;
      border: 3px solid #8dc73f;
      overflow: hidden;
      transition: all 0.4s ease-in-out;
    }
  
  
    
   
  
  }

  /* Add these styles to your CSS file for the enhanced welcome message */

.welcome-message {
  position: fixed;
  top: 80px;
  left: 50%;
  transform: translateX(-50%);
  background: linear-gradient(135deg, #8dc73f 0%, #50C9A7 100%);
  color: white;
  padding: 15px 30px;
  border-radius: 12px;
  z-index: 1000;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
  animation: popIn 0.5s ease-out forwards, fadeOut 0.5s ease-in forwards 4.5s;
  overflow: hidden;
  min-width: 300px;
  text-align: center;
}

.welcome-message-content {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  position: relative;
  z-index: 2;
}

.welcome-icon {
  font-size: 24px;
  animation: bounce 1s ease infinite;
}

.confetti-container {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
  pointer-events: none;
}

.confetti {
  position: absolute;
  width: 10px;
  height: 10px;
  top: -10px;
  animation: confettiFall linear forwards;
}

.confetti-0 {
  background-color: #f55d56;
  transform: rotate(0deg);
}

.confetti-1 {
  background-color: #f7b733;
  transform: rotate(45deg);
}

.confetti-2 {
  background-color: #50C9A7;
  transform: rotate(90deg);
}

.confetti-3 {
  background-color: #6cabf6;
  transform: rotate(135deg);
}

.confetti-4 {
  background-color: #ffffff;
  transform: rotate(180deg);
}

@keyframes popIn {
  0% { transform: translate(-50%, -20px); opacity: 0; }
  50% { transform: translate(-50%, 10px); opacity: 1; }
  100% { transform: translate(-50%, 0); opacity: 1; }
}

@keyframes fadeOut {
  0% { opacity: 1; }
  100% { opacity: 0; }
}

@keyframes bounce {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-5px); }
}

@keyframes confettiFall {
  0% { 
    top: -10px; 
    transform: translateX(0) rotate(0deg); 
  }
  100% { 
    top: 100%; 
    transform: translateX(20px) rotate(360deg); 
  }
}

/* Enhance the existing feedback cards with animations */
.feedback-cards .feedback-card {
  transition: transform 0.4s ease, filter 0.4s ease;
  position: relative;
  overflow: hidden;
}

.feedback-cards .feedback-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
  transition: left 0.7s ease;
}

.feedback-cards .feedback-card:hover::before {
  left: 100%;
}

/* Enhance the winner card with better animations */
.winner-cards:hover .winner-outlinePage {
  box-shadow: 0 15px 30px rgba(177, 152, 94, 0.4);
  transform: translateY(-5px);
  transition: all 0.5s ease;
}

.winner-cards .winner-outlinePage {
  transition: all 0.5s ease;
}

/* Add party stars to the trophy */
.winner-icon.winner-trophy {
  position: relative;
}

.winner-icon.winner-trophy::before,
.winner-icon.winner-trophy::after {
  content: '✨';
  position: absolute;
  font-size: 20px;
  animation: twinkle 1.5s ease-in-out infinite alternate;
}

.winner-icon.winner-trophy::before {
  top: 10px;
  right: 10px;
  animation-delay: 0.2s;
}

.winner-icon.winner-trophy::after {
  top: 40px;
  left: 10px;
  animation-delay: 0.7s;
}

@keyframes twinkle {
  0% { opacity: 0.3; transform: scale(0.8); }
  100% { opacity: 1; transform: scale(1.2); }
}

/* Add a pop effect to the profile card on hover */
.card-white {
  transition: all 0.5s ease-in-out, transform 0.3s ease;
}

.card-white:hover {
  transform: translateY(-5px);
}

/* Add a party animation to the user role text */
.userrole {
  position: relative;
  display: inline-block;
}

.userrole::after {
  content: '🎊';
  position: absolute;
  right: -30px;
  top: 50%;
  transform: translateY(-50%);
  font-size: 24px;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.card-white:hover .userrole::after {
  opacity: 1;
  animation: partyPop 1s ease infinite;
}

@keyframes partyPop {
  0%, 100% { transform: translateY(-50%) rotate(0deg); }
  25% { transform: translateY(-50%) rotate(10deg); }
  75% { transform: translateY(-50%) rotate(-10deg); }
}
</file>

<file path="sustainafood-frontend/src/contexts/AuthContext.jsx">
import { createContext, useContext, useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";

// Create the context
export const AuthContext = createContext();

// Custom hook to use AuthContext
export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const navigate = useNavigate();

  // Retrieve initial authentication state from localStorage safely
  const [user, setUser] = useState(() => {
    const storedUser = localStorage.getItem("user");
    return storedUser && storedUser !== "undefined" ? JSON.parse(storedUser) : null;
  });

  const [token, setToken] = useState(() => {
    const storedToken = localStorage.getItem("token");
    return storedToken && storedToken !== "undefined" ? storedToken : null;
  });
  // State for password reset
  const [resetStatus, setResetStatus] = useState(""); // Track reset status
  const [error, setError] = useState(""); // Track error messages
  const [loading, setLoading] = useState(false); // Track loading state

  // Login function
  const login = (userData, token , is2FAEnabled) => {
    setUser({ ...userData, is2FAEnabled }); // Include is2FAEnabled in user data
    console.log("User logged in:", userData);
    setToken(token);
    localStorage.setItem("user", JSON.stringify({ ...userData, is2FAEnabled }));
    localStorage.setItem("token", token);
    console.log("the token in local storge est from authicontext in fn login:", token)
    navigate("/profile"); // Redirect after login
  };

  // Logout function
  const logout = () => {
    setUser(null);
    setToken(null);
    localStorage.removeItem("user");
    localStorage.removeItem("token");
    navigate("/login"); // Redirect to login page
  };

  // Check if the user is authenticated
  const isAuthenticated = () => !!token;


    // Clear the welcome message
    const clearWelcomeMessage = () => {
      setUser((prevUser) => {
        if (!prevUser) return prevUser;
        const updatedUser = { ...prevUser, welcomeMessage: "" };
        localStorage.setItem("user", JSON.stringify(updatedUser));
        return updatedUser;
      });
    };

  // Send password reset code
  const sendResetCode = async (email) => {
    setLoading(true);
    try {
      const response = await axios.post("/api/auth/send-reset-code", { email });
      setResetStatus("Reset code sent successfully.");
      setLoading(false);
    } catch (err) {
      setError("Error sending reset code.");
      setLoading(false);
    }
  };
  // Validate the password reset code
  const validateResetCode = async (email, resetCode) => {
    setLoading(true);
    try {
      const response = await axios.post("/api/auth/validate-reset-code", { email, resetCode });
      setResetStatus("Reset code validated successfully.");
      setLoading(false);
    } catch (err) {
      setError("Invalid or expired reset code.");
      setLoading(false);
    }
  };

  // Reset password
  const resetPassword = async (email, newPassword) => {
    setLoading(true);
    try {
      const response = await axios.post("/api/auth/reset-password", { email, newPassword });
      setResetStatus("Password successfully reset.");
      setLoading(false);
    } catch (err) {
      setError("Error resetting password.");
      setLoading(false);
    }
  };




  // Method to get the role of the current user
  const getRole = () => {
    return user?.role || null;
  };

  return (
    <AuthContext.Provider value={{
      user,
      token,
      login,
      logout,
      isAuthenticated, getRole,
      sendResetCode,
      validateResetCode,
      resetPassword,
      clearWelcomeMessage,
      resetStatus,
      error,
      loading,
    }}>
      {children}
    </AuthContext.Provider>
  );
};

export default AuthProvider;
</file>

<file path="sustainafood-frontend/src/pages/AccountSettings.tsx">
import React, { useState, useEffect } from "react";
import Navbar from "../components/Navbar";
import Footer from "../components/Footer";
import "../assets/styles/AccountSettings.css";
import { useAuth } from "../contexts/AuthContext";
import { deactivateAccount, changePassword, toggle2FA, getUserById } from "../api/userService";
import ConfirmationModal from "../pages/ConfirmationModal"; // Import the ConfirmationModal

const AccountSettings = () => {
  const [is2FAEnabled, setIs2FAEnabled] = useState(false);
  const { user, token, logout } = useAuth();

  const [currentPassword, setCurrentPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [showAlert, setShowAlert] = useState(false);
  const [alertMessage, setAlertMessage] = useState("");
  const [alertType, setAlertType] = useState("success");

  const [showConfirmationModal, setShowConfirmationModal] = useState(false); // State for confirmation modal

  const handleChangePassword = async (e) => {
    e.preventDefault();

    if (newPassword !== confirmPassword) {
      setAlertMessage("New password and Confirm password do not match!");
      setAlertType("error");
      setShowAlert(true);
      return;
    }

    try {
      const response = await changePassword(user.id, currentPassword, newPassword);

      if (response.status === 200) {
        setAlertMessage("Password changed successfully!");
        setAlertType("success");
        setShowAlert(true);
        setCurrentPassword("");
        setNewPassword("");
        setConfirmPassword("");
      }
    } catch (error) {
      console.error("Error changing password:", error);
      setAlertMessage(error.response?.data?.error || "Failed to change password");
      setAlertType("error");
      setShowAlert(true);
    }
  };

  const handleDeactivateAccount = async () => {
    setShowConfirmationModal(true); // Show the confirmation modal
  };

  const confirmDeactivateAccount = async () => {
    setShowConfirmationModal(false); // Hide the confirmation modal

    if (user && user.id) {
      try {
        const response = await deactivateAccount(user.id, token);

        if (response.status === 200) {
          setAlertMessage("Your account has been deactivated. You can reactivate it by logging in.");
          setAlertType("success");
          setShowAlert(true);

          // Delay the logout to allow the alert to be displayed
          setTimeout(() => {
            logout();
          }, 3000); // Logout after 3 seconds
        }
      } catch (error) {
        console.error("Error deactivating account:", error);
        setAlertMessage("Failed to deactivate account. Please try again.");
        setAlertType("error");
        setShowAlert(true);
      }
    } else {
      setAlertMessage("User information is not available. Please try again.");
      setAlertType("error");
      setShowAlert(true);
    }
  };

  const cancelDeactivateAccount = () => {
    setShowConfirmationModal(false); // Hide the confirmation modal
  };

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const response = await getUserById(user.id);
        setIs2FAEnabled(response.data.is2FAEnabled);
      } catch (error) {
        console.error("Error fetching user data:", error);
      }
    };

    fetchUserData();
  }, [user.id]);

  const handle2FAToggle = async () => {
    try {
      const response = await toggle2FA(user.email);

      if (response.status === 200) {
        setIs2FAEnabled(!is2FAEnabled);
        setAlertMessage(`2FA has been ${!is2FAEnabled ? "enabled" : "disabled"}.`);
        setAlertType("success");
        setShowAlert(true);
      }
    } catch (error) {
      console.error("Error toggling 2FA:", error);
      setAlertMessage("Failed to toggle 2FA. Please try again.");
      setAlertType("error");
      setShowAlert(true);
    }
  };

  useEffect(() => {
    if (showAlert) {
      const timer = setTimeout(() => {
        setShowAlert(false);
      }, 3000); // Dismiss after 3 seconds

      return () => clearTimeout(timer); // Cleanup the timer
    }
  }, [showAlert]);

  return (
    <div className="accountsettings-page">
      <Navbar />
      {showAlert && (
        <div className={`custom-alert ${alertType}`}>
          <div className="alert-content">
            {alertType === "success" && (
              <div className="alert-icon">
                <svg viewBox="0 0 24 24" width="24" height="24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path
                    d="M20 6L9 17L4 12"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                </svg>
              </div>
            )}
            {alertType === "error" && (
              <div className="alert-icon">
                <svg viewBox="0 0 24 24" width="24" height="24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path
                    d="M12 8V12M12 16H12.01M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                  />
                </svg>
              </div>
            )}
            <span>{alertMessage}</span>
            <button className="alert-close" onClick={() => setShowAlert(false)} aria-label="Close alert">
              <svg viewBox="0 0 24 24" width="18" height="18" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" />
              </svg>
            </button>
          </div>
          {/* Animated progress bar for auto-dismiss */}
          <div className="alert-progress"></div>
        </div>
      )}

      {/* Confirmation Modal */}
      {showConfirmationModal && (
        <ConfirmationModal
          message="Are you sure you want to deactivate your account? You can reactivate it later by logging in."
          onConfirm={confirmDeactivateAccount}
          onCancel={cancelDeactivateAccount}
        />
      )}

      <div className="accountsettings-content">
        <div className="accountsettings-container">
          <h1 className="accountsettings-title">Account Settings</h1>

          {/* Change Password Section */}
          <section className="accountsettings-section">
            <h2>Change Password</h2>
            <form onSubmit={handleChangePassword} className="accountsettings-form">
              <div className="accountsettings-form-group">
                <label htmlFor="currentPassword">Current Password</label>
                <input
                  type="password"
                  id="currentPassword"
                  required
                  value={currentPassword}
                  onChange={(e) => setCurrentPassword(e.target.value)}
                />
              </div>
              <div className="accountsettings-form-group">
                <label htmlFor="newPassword">New Password</label>
                <input
                  type="password"
                  id="newPassword"
                  required
                  value={newPassword}
                  onChange={(e) => setNewPassword(e.target.value)}
                />
              </div>
              <div className="accountsettings-form-group">
                <label htmlFor="confirmPassword">Confirm New Password</label>
                <input
                  type="password"
                  id="confirmPassword"
                  required
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                />
              </div>
              <button type="submit" className="accountsettings-button">
                Change Password
              </button>
            </form>
          </section>

          {/* 2FA Section */}
          <section className="accountsettings-section">
            <h2>Two-Factor Authentication (2FA)</h2>
            <div className="accountsettings-twofa-toggle">
              <label className="accountsettings-switch">
                <input
                  type="checkbox"
                  checked={is2FAEnabled}
                  onChange={handle2FAToggle}
                />
                <span className="accountsettings-slider accountsettings-round"></span>
              </label>
              <span>{is2FAEnabled ? "Enabled" : "Disabled"}</span>
            </div>
            {is2FAEnabled && <p>2FA is enabled. Use an authenticator app to generate codes.</p>}
          </section>

          {/* Deactivate Account Section */}
          <section className="accountsettings-section">
            <h2>Deactivate Account</h2>
            <p>
              Warning: Deactivating your account will temporarily suspend your access to
              SustainaFood. Your data will be preserved, and you can reactivate your account at
              any time by logging in.
            </p>
            <button
              onClick={handleDeactivateAccount}
              className="accountsettings-button accountsettings-deactivate"
            >
              Deactivate Account
            </button>
          </section>
        </div>
      </div>
      <Footer />
    </div>
  );
};

export default AccountSettings;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/AdminProfile.jsx">
import React, { useEffect, useState } from "react";
import axios from "axios";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "/src/assets/styles/backoffcss/adminProfile.css";
import { FaCamera, FaEdit, FaTimes, FaSave } from "react-icons/fa";
import { useAuth } from "../../contexts/AuthContext";
import { getUserById, updateUser } from "../../api/userService";

const AdminProfile = () => {
  const { user: authUser, token } = useAuth();
  const [admin, setAdmin] = useState({
    name: "",
    email: "",
    address: "",
    phone: "",
    photo: "",
  });
  const [profilePhotoFile, setProfilePhotoFile] = useState(null);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [editedData, setEditedData] = useState({ ...admin });
  const [errors, setErrors] = useState({});

  useEffect(() => {
    if (!token) {
      console.error("No token found. User is not authenticated.");
      return;
    }

    const fetchUserData = async () => {
      try {
        if (!authUser || !authUser.id) {
          console.error("⛔ authUser id is undefined!");
          return;
        }
        const response = await getUserById(authUser.id);
        const userData = response.data;
        setAdmin({
          name: userData.name || "",
          email: userData.email || "",
          address: userData.address || "",
          phone: userData.phone || "",
          photo: userData.photo
            ? `http://localhost:3000/${userData.photo}`
            : "/src/assets/admin.jpg",
        });
      } catch (error) {
        console.error("❌ Backend Error:", error);
      }
    };
    fetchUserData();
  }, [authUser, token]);

  const handleImageUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      setAdmin((prev) => ({
        ...prev,
        photo: URL.createObjectURL(file),
      }));
      setProfilePhotoFile(file);
    }
  };

  const handleSaveImage = async (e) => {
    e.preventDefault();
    try {
      if (!authUser || !authUser.id) {
        console.error("⛔ authUser id is undefined!");
        alert("User authentication error. Please log in again.");
        return;
      }
      if (!profilePhotoFile) {
        alert("Please select an image to upload.");
        return;
      }
      const formData = new FormData();
      formData.append("photo", profilePhotoFile);
      console.log("Uploading file:", formData.get("photo"));
      const response = await updateUser(authUser.id, formData);
      if (response.status === 200) {
        const updatedUser = response.data;
        setAdmin((prev) => ({
          ...prev,
          photo: updatedUser.photo
            ? `http://localhost:3000/${updatedUser.photo}`
            : prev.photo,
        }));
        setProfilePhotoFile(null);
        alert("Profile image updated successfully!");
      } else {
        alert("Failed to update profile image. Status: " + response.status);
      }
    } catch (error) {
      console.error("❌ Error updating profile image:", error);
      alert("An error occurred while updating the profile image.");
    }
  };

  const openEditModal = () => {
    setEditedData({ ...admin });
    setErrors({});
    setIsEditModalOpen(true);
  };
  const closeModal = () => {
    setIsEditModalOpen(false);
    setErrors({});
  };

  const isValidEmail = (email) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const isValidPhone = (phone) => {
    const phoneRegex = /^\+?[\d\s-]{7,}$/;
    return phoneRegex.test(phone);
  };

  // New validation function
  const validateFields = (data) => {
    const newErrors = {};

    if (!data.name) {
      newErrors.name = "Name is required.";
    } else if (data.name.length < 2) {
      newErrors.name = "Name must be at least 2 characters.";
    }

    if (!data.email) {
      newErrors.email = "Email is required.";
    } else if (!isValidEmail(data.email)) {
      newErrors.email = "A valid email is required.";
    }

    if (!data.address) {
      newErrors.address = "Address is required.";
    }

    if (!data.phone) {
      newErrors.phone = "Phone number is required.";
    } else if (!isValidPhone(data.phone)) {
      newErrors.phone = "Invalid phone number format (e.g., +1234567890).";
    }

    return newErrors;
  };

  const handleSaveChanges = async () => {
    const validationErrors = validateFields(editedData);

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    setErrors({});
    try {
      if (!authUser || !authUser.id) {
        console.error("⛔ authUser id is undefined!");
        alert("User authentication error. Please log in again.");
        return;
      }
      const updatedData = {
        name: editedData.name,
        email: editedData.email,
        address: editedData.address,
        phone: editedData.phone,
      };
      const response = await updateUser(authUser.id, updatedData);
      if (response.status === 200) {
        setAdmin((prev) => ({
          ...prev,
          name: editedData.name,
          email: editedData.email,
          address: editedData.address,
          phone: editedData.phone,
        }));
        alert("Profile updated successfully!");
      } else {
        alert("Failed to update profile. Status: " + response.status);
      }
    } catch (error) {
      console.error("❌ Error updating profile:", error);
      alert("An error occurred while updating the profile.");
    } finally {
      closeModal();
    }
  };

  return (
    <div className="admin-dashboard">
      <Sidebar />
      <div className="profile-container">
        <Navbar />
        <div className="profile-header">
          <h2>My Profile</h2>
          <div className="profile-line"></div>
        </div>
        <div className="profile-card">
          <form onSubmit={handleSaveImage}>
            <div className="profile-pic">
              <img src={admin.photo} alt="Profile" />
              <label className="upload-icon">
                <FaCamera />
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleImageUpload}
                  className="file-input"
                />
              </label>
            </div>
            <button type="submit" className="save-image-btn">
              <FaSave className="save-icon" /> Save Image
            </button>
          </form>
          <div>
            <h2>{admin.name}</h2>
            <p>{admin.email}</p>
            <p>{admin.address}</p>
            <p>{admin.phone}</p>
          </div>
        </div>
        <div className="info-section">
          <div className="section-header">
            <h3>Personal Information</h3>
            <button className="edit-btn" onClick={openEditModal}>
              <FaEdit /> Edit
            </button>
          </div>
          <div className="profile-line"></div>
          <div className="info-grid">
            <div>
              <p className="label">Name</p>
              <p>{admin.name}</p>
            </div>
            <div>
              <p className="label">Email Address</p>
              <p>{admin.email}</p>
            </div>
            <div>
              <p className="label">Address</p>
              <p>{admin.address}</p>
            </div>
            <div>
              <p className="label">Phone Number</p>
              <p>{admin.phone}</p>
            </div>
          </div>
        </div>
        {isEditModalOpen && (
          <div className="modal-overlay">
            <div className="modal-content">
              <div className="modal-header">
                <h3>Edit Personal Information</h3>
                <button className="close-btn" onClick={closeModal}>
                  <FaTimes />
                </button>
              </div>
              <div className="modal-body">
                <label>Name</label>
                <input
                  type="text"
                  value={editedData.name}
                  onChange={(e) =>
                    setEditedData({ ...editedData, name: e.target.value })
                  }
                />
                {errors.name && <p className="error">{errors.name}</p>}
                <label>Email Address</label>
                <input
                  type="email"
                  value={editedData.email}
                  onChange={(e) =>
                    setEditedData({ ...editedData, email: e.target.value })
                  }
                />
                {errors.email && <p className="error">{errors.email}</p>}
                <label>Address</label>
                <input
                  type="text"
                  value={editedData.address}
                  onChange={(e) =>
                    setEditedData({ ...editedData, address: e.target.value })
                  }
                />
                {errors.address && <p className="error">{errors.address}</p>}
                <label>Phone Number</label>
                <input
                  type="text"
                  value={editedData.phone}
                  onChange={(e) =>
                    setEditedData({ ...editedData, phone: e.target.value })
                  }
                />
                {errors.phone && <p className="error">{errors.phone}</p>}
              </div>
              <div className="modal-footer">
                <button className="save-btn" onClick={handleSaveChanges}>
                  Save Changes
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminProfile;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/DonationTransactionList.jsx">
import React, { useEffect, useState } from "react";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "../../assets/styles/backoffcss/studentList.css";
import { FaEye, FaFilePdf, FaSort } from "react-icons/fa"; // Removed FaTrash
import ReactPaginate from "react-paginate";
import { Link } from "react-router-dom";
import logo from '../../assets/images/logooo.png';
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";
import {
    getAllDonationTransactions,
    // Removed deleteDonationTransaction since it's no longer used
} from "../../api/donationTransactionService";

const DonationTransactionList = () => {
    const [donationTransactions, setDonationTransactions] = useState([]);
    const [currentPage, setCurrentPage] = useState(0);
    const [searchQuery, setSearchQuery] = useState("");
    const [sortField, setSortField] = useState("id");
    const [sortOrder, setSortOrder] = useState("asc");
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const transactionsPerPage = 3;

    const pagesVisited = currentPage * transactionsPerPage;

    useEffect(() => {
        const fetchDonationTransactions = async () => {
            setLoading(true);
            setError(null);
            try {
                const transactions = await getAllDonationTransactions(); // Returns array directly
                console.log("Fetched Transactions:", transactions);
                if (Array.isArray(transactions)) {
                    setDonationTransactions(transactions);
                } else {
                    console.error("Response is not a valid array:", transactions);
                    setDonationTransactions([]);
                    setError("No data returned from the server or invalid format.");
                }
            } catch (error) {
                console.error("Error fetching donation transactions:", {
                    message: error.message,
                    response: error.response ? error.response.data : null,
                    status: error.response ? error.response.status : null,
                });
                setError("Failed to fetch donation transactions. Please try again.");
                setDonationTransactions([]);
            } finally {
                setLoading(false);
            }
        };
        fetchDonationTransactions();
    }, []);

    const exportToPDF = () => {
        const doc = new jsPDF({
            orientation: "landscape",
            unit: "mm",
            format: "a4",
        });

        doc.setFillColor(245, 245, 245);
        doc.rect(0, 0, doc.internal.pageSize.width, 40, "F");

        doc.setDrawColor(144, 196, 60);
        doc.setLineWidth(1.5);
        doc.line(0, 40, doc.internal.pageSize.width, 40);

        const imgWidth = 30, imgHeight = 30;
        doc.addImage(logo, "PNG", 5, 5, imgWidth, imgHeight);

        const title = "DONATION TRANSACTIONS LIST";
        doc.setFontSize(28);
        doc.setTextColor(50, 62, 72);
        doc.setFont("helvetica", "bold");
        doc.text(title, doc.internal.pageSize.width / 2, 20, { align: "center" });

        const today = new Date();
        const dateStr = today.toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
        });
        doc.setFontSize(10);
        doc.setTextColor(80, 80, 80);
        doc.text(`Generated: ${dateStr}`, doc.internal.pageSize.width - 50, 38);

        autoTable(doc, {
            head: [["ID", "Request Need", "Donation", "Status", "Allocated Products", "Created At", "Updated At"]],
            body: donationTransactions.map((tx) => [
                tx.id?.toString() || "N/A",
                tx.requestNeed?._id?.toString() || tx.requestNeed?.toString() || "N/A", // Handle nested or simple requestNeed
                tx.donation?._id?.toString() || tx.donation?.toString() || "N/A", // Handle null donation
                tx.status || "N/A",
                tx.allocatedProducts && tx.allocatedProducts.length > 0
                    ? tx.allocatedProducts.map(p => `${p.product?._id || p.product || "N/A"} (Qty: ${p.quantity})`).join(", ")
                    : "None",
                tx.createdAt ? new Date(tx.createdAt).toLocaleDateString() : "N/A",
                tx.updatedAt ? new Date(tx.updatedAt).toLocaleDateString() : "N/A",
            ]),
            startY: 50,
            theme: "grid",
            styles: {
                fontSize: 9,
                cellPadding: 6,
                lineColor: [200, 200, 200],
                lineWidth: 0.2,
                valign: "middle",
                textColor: [45, 45, 45],
            },
            headStyles: {
                fillColor: [70, 80, 95],
                textColor: [255, 255, 255],
                fontStyle: "bold",
                halign: "center",
                fontSize: 10,
            },
            alternateRowStyles: {
                fillColor: [250, 250, 250],
            },
            didDrawPage: (data) => {
                doc.setDrawColor(200, 200, 200);
                doc.setLineWidth(0.5);
                doc.line(15, doc.internal.pageSize.height - 20, doc.internal.pageSize.width - 15, doc.internal.pageSize.height - 20);

                doc.setFillColor(144, 196, 60);
                doc.roundedRect(doc.internal.pageSize.width / 2 - 15, doc.internal.pageSize.height - 18, 30, 12, 3, 3, "F");
                doc.setTextColor(255, 255, 255);
                doc.setFontSize(9);
                doc.text(`Page ${data.pageNumber} of ${doc.internal.getNumberOfPages()}`, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 10, { align: "center" });

                doc.setTextColor(120, 120, 120);
                doc.setFontSize(8);
                doc.setFont("helvetica", "italic");
                doc.text("Confidential - For internal use only", 15, doc.internal.pageSize.height - 10);

                doc.text("©SustainaFood", doc.internal.pageSize.width - 45, doc.internal.pageSize.height - 10);
            },
        });

        doc.save(`Donation_Transactions_${today.toISOString().split("T")[0]}.pdf`);
    };

    const filteredTransactions = donationTransactions.filter(tx => {
        const createdAtString = tx.createdAt ? new Date(tx.createdAt).toLocaleDateString() : "";
        const updatedAtString = tx.updatedAt ? new Date(tx.updatedAt).toLocaleDateString() : "";
        return (
            (tx.id?.toString() || "").includes(searchQuery) ||
            (tx.requestNeed?._id?.toString() || tx.requestNeed?.toString() || "").includes(searchQuery) ||
            (tx.donation?._id?.toString() || tx.donation?.toString() || "").includes(searchQuery) ||
            (tx.status || "").toLowerCase().includes(searchQuery.toLowerCase()) ||
            createdAtString.includes(searchQuery) ||
            updatedAtString.includes(searchQuery)
        );
    });

    const sortedTransactions = filteredTransactions.sort((a, b) => {
        if (sortField === "id") {
            return sortOrder === "asc" ? (a.id || 0) - (b.id || 0) : (b.id || 0) - (a.id || 0);
        } else if (sortField === "status") {
            return sortOrder === "asc" ? (a.status || "").localeCompare(b.status || "") : (b.status || "").localeCompare(a.status || "");
        } else if (sortField === "createdAt") {
            return sortOrder === "asc"
                ? (new Date(a.createdAt) || 0) - (new Date(b.createdAt) || 0)
                : (new Date(b.createdAt) || 0) - (new Date(a.createdAt) || 0);
        } else if (sortField === "updatedAt") {
            return sortOrder === "asc"
                ? (new Date(a.updatedAt) || 0) - (new Date(b.updatedAt) || 0)
                : (new Date(b.updatedAt) || 0) - (new Date(a.updatedAt) || 0);
        }
        return 0;
    });

    const displayTransactions = sortedTransactions.slice(pagesVisited, pagesVisited + transactionsPerPage);
    const pageCount = Math.ceil(filteredTransactions.length / transactionsPerPage);

    const changePage = ({ selected }) => {
        setCurrentPage(selected);
    };

    return (
        <div className="dashboard-container">
            <Sidebar />
            <div className="dashboard-content">
                <Navbar setSearchQuery={setSearchQuery} />
                <div className="student-list">
                    <div className="header-container">
                        <h2>Donation Transaction Management</h2>
                        <button className="export-pdf-btn" onClick={exportToPDF}>
                            <FaFilePdf /> Export to PDF
                        </button>
                    </div>
                    <div className="sort-container">
                        <label>Sort by:</label>
                        <select value={sortField} onChange={(e) => setSortField(e.target.value)}>
                            <option value="id">ID</option>
                            <option value="status">Status</option>
                            <option value="createdAt">Created At</option>
                            <option value="updatedAt">Updated At</option>
                        </select>
                        <select value={sortOrder} onChange={(e) => setSortOrder(e.target.value)}>
                            <option value="asc">Ascending</option>
                            <option value="desc">Descending</option>
                        </select>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Request Need</th>
                                <th>Donation</th>
                                <th>Status</th>
                                <th>Allocated Products</th>
                                <th>Created At</th>
                                <th>Updated At</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {loading ? (
                                <tr>
                                    <td colSpan="8" style={{ textAlign: "center" }}>
                                        Loading...
                                    </td>
                                </tr>
                            ) : error ? (
                                <tr>
                                    <td colSpan="8" style={{ textAlign: "center", color: "red" }}>
                                        {error}
                                    </td>
                                </tr>
                            ) : displayTransactions.length > 0 ? (
                                displayTransactions.map((tx) => (
                                    <tr key={tx._id}>
                                        <td>{tx.id || "N/A"}</td>
                                        <td>{tx.requestNeed?._id?.toString() || tx.requestNeed?.toString() || "N/A"}</td>
                                        <td>{tx.donation?._id?.toString() || tx.donation?.toString() || "N/A"}</td>
                                        <td>{tx.status || "N/A"}</td>
                                        <td>
                                            {tx.allocatedProducts && tx.allocatedProducts.length > 0
                                                ? tx.allocatedProducts.map(p => `${p.product?._id || p.product || "N/A"} (Qty: ${p.quantity})`).join(", ")
                                                : "None"}
                                        </td>
                                        <td>{tx.createdAt ? new Date(tx.createdAt).toLocaleDateString() : "N/A"}</td>
                                        <td>{tx.updatedAt ? new Date(tx.updatedAt).toLocaleDateString() : "N/A"}</td>
                                        <td className="action-buttons">
                                            <button className="view-btn">
                                                <Link to={`/donation-transactions/view/${tx._id}`}>
                                                    <FaEye />
                                                </Link>
                                            </button>
                                            {/* Removed delete button */}
                                        </td>
                                    </tr>
                                ))
                            ) : (
                                <tr>
                                    <td colSpan="8" style={{ textAlign: "center" }}>
                                        No transactions available
                                    </td>
                                </tr>
                            )}
                        </tbody>
                    </table>

                    <ReactPaginate
                        previousLabel={"Previous"}
                        nextLabel={"Next"}
                        pageCount={pageCount}
                        onPageChange={changePage}
                        containerClassName={"pagination"}
                        previousLinkClassName={"previousBttn"}
                        nextLinkClassName={"nextBttn"}
                        disabledClassName="paginationDisabled"
                        activeClassName="paginationActive"
                    />
                </div>
            </div>
        </div>
    );
};

export default DonationTransactionList;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/ONGList.jsx">
import React, { useEffect, useState } from "react";
import axios from "axios";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "/src/assets/styles/backoffcss/ngoList.css";
import { FaEye, FaTrash, FaBan, FaUnlock, FaFilePdf, FaSort } from "react-icons/fa";
import ReactPaginate from "react-paginate";
import { Link } from "react-router-dom";
import logo from '../../assets/images/logooo.png';  // Import the logo

import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";

const ONGList = () => {
    const [ongs, setONGs] = useState([]); // Liste complète des ONGs
    const [currentPage, setCurrentPage] = useState(0);
    const [searchQuery, setSearchQuery] = useState(""); // State to store the search query
    const [sortField, setSortField] = useState("name"); // State to store the sorting field
    const [sortOrder, setSortOrder] = useState("asc"); // State to store the sorting order
    const ongsPerPage = 5; // Nombre d'ONGs par page

    // Calculate pagesVisited
    const pagesVisited = currentPage * ongsPerPage;

    // Récupération des ONGs depuis le backend
    useEffect(() => {
        axios.get("http://localhost:3000/users/list")
            .then(response => {
                const ongUsers = response.data.filter(user => user.role === "ong");
                setONGs(ongUsers);
            })
            .catch(error => console.error("Error fetching ONGs:", error));
    }, []);

    // Fonction pour bloquer/débloquer une ONG
    const handleBlockONG = async (ongId, isBlocked) => {
        try {
            const response = await axios.put(`http://localhost:3000/users/toggle-block/${ongId}`, {
                isBlocked: !isBlocked
            });

            if (response.status === 200) {
                alert(`ONG has been ${response.data.isBlocked ? "blocked" : "unblocked"} successfully.`);
                // Update the UI after blocking/unblocking
                setONGs(ongs.map(ong =>
                    ong._id === ongId ? { ...ong, isBlocked: response.data.isBlocked } : ong
                ));
            } else {
                alert(response.data.error || "Error toggling block status.");
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Failed to update block status.");
        }
    };

    // Fonction pour supprimer une ONG
    const deleteONG = async (ongId) => {
        if (!window.confirm("Are you sure you want to delete this ONG?")) return;

        try {
            await axios.delete(`http://localhost:3000/users/delete/${ongId}`);
            alert("ONG deleted!");
            setONGs(ongs.filter(ong => ong._id !== ongId));
        } catch (error) {
            console.error("Error deleting ONG:", error);
        }
    };

    // Fonction pour exporter la liste en PDF
    const exportToPDF = () => {
        const doc = new jsPDF({
            orientation: "landscape",
            unit: "mm",
            format: "a4",
        });
    
        // Header background - changed to a neutral light gray
        doc.setFillColor(245, 245, 245); // Light gray instead of green
        doc.rect(0, 0, doc.internal.pageSize.width, 40, "F");
    
        // Decorative bottom line - keeping main color as accent
        doc.setDrawColor(144, 196, 60); // Main color #90C43C
        doc.setLineWidth(1.5);
        doc.line(0, 40, doc.internal.pageSize.width, 40);
    
        // Logo
        const imgWidth = 30, imgHeight = 30;
        doc.addImage(logo, "PNG", 5, 5, imgWidth, imgHeight);
    
        // Title - changed to dark slate blue
        const title = "ONG LIST";
        doc.setFontSize(28);
        doc.setTextColor(50, 62, 72); // Dark slate blue instead of green
        doc.setFont("helvetica", "bold");
        doc.text(title, doc.internal.pageSize.width / 2, 20, { align: "center" });
    
        // Date
        const today = new Date();
        const dateStr = today.toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
        });
        doc.setFontSize(10);
        doc.setTextColor(80, 80, 80); // Dark gray
        doc.text(`Generated: ${dateStr}`, doc.internal.pageSize.width - 50, 38);
    
        // Table
        autoTable(doc, {
            head: [["ID", "Name", "Email", "Phone", "Tax Reference", "Status"]],
            body: ongs.map((ong, index) => [
                (index + 1).toString(),
                ong.name,
                ong.email,
                ong.phone || "N/A",
                ong.id_fiscale || "N/A",
                ong.isActive ? "Active" : "Inactive",
            ]),
            startY: 50,
            theme: "grid",
            styles: {
                fontSize: 9,
                cellPadding: 6,
                lineColor: [200, 200, 200], // Light gray borders
                lineWidth: 0.2,
                valign: "middle",
                textColor: [45, 45, 45], // Dark gray text
            },
            headStyles: {
                fillColor: [70, 80, 95], // Dark blue-gray instead of green
                textColor: [255, 255, 255],
                fontStyle: "bold",
                halign: "center",
                fontSize: 10,
            },
            alternateRowStyles: {
                fillColor: [250, 250, 250], // Very light gray instead of light green
            },
            didDrawCell: (data) => {
                if (data.section === "body" && data.column.index === 5) {
                    const status = data.cell.text[0];
                    if (status === "Active") {
                        doc.setFillColor(144, 196, 60); // Main green for active status only
                        doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F");
                        doc.setTextColor(255, 255, 255); // White text
                    } else if (status === "Inactive") {
                        doc.setFillColor(220, 220, 220); // Light gray for inactive
                        doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F");
                        doc.setTextColor(100, 100, 100); // Dark gray text
                    }
                }
            },
            didDrawPage: (data) => {
                // Footer line
                doc.setDrawColor(200, 200, 200); // Light gray line
                doc.setLineWidth(0.5);
                doc.line(15, doc.internal.pageSize.height - 20, doc.internal.pageSize.width - 15, doc.internal.pageSize.height - 20);
    
                // Page numbers - using main color as accent
                doc.setFillColor(144, 196, 60); // Main green #90C43C
                doc.roundedRect(doc.internal.pageSize.width / 2 - 15, doc.internal.pageSize.height - 18, 30, 12, 3, 3, "F");
                doc.setTextColor(255, 255, 255);
                doc.setFontSize(9);
                doc.text(`Page ${data.pageNumber} of ${doc.internal.getNumberOfPages()}`, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 10, { align: "center" });
    
                // Confidentiality notice
                doc.setTextColor(120, 120, 120);
                doc.setFontSize(8);
                doc.setFont("helvetica", "italic");
                doc.text("Confidential - For internal use only", 15, doc.internal.pageSize.height - 10);
    
                // Institution info
                doc.text("© SustainaFood", doc.internal.pageSize.width - 45, doc.internal.pageSize.height - 10);
            },
        });
    
        doc.save(`ONG_Directory_${today.toISOString().split("T")[0]}.pdf`);
    };
    // Filtering the ONGs based on the search query
    const filteredONGs = ongs.filter(ong => {
        const phoneString = ong.phone.toString(); // Convert phone number to string for searching
        return (
            ong.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
            ong.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
            phoneString.includes(searchQuery) // Search in the phone number as a string
        );
    });

    // Sorting the ONGs based on the selected field and order
    const sortedONGs = filteredONGs.sort((a, b) => {
        if (sortField === "name") {
            return sortOrder === "asc" ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name);
        } else if (sortField === "email") {
            return sortOrder === "asc" ? a.email.localeCompare(b.email) : b.email.localeCompare(a.email);
        } else if (sortField === "phone") {
            return sortOrder === "asc" ? a.phone - b.phone : b.phone - a.phone;
        } else if (sortField === "id_fiscale") {
            return sortOrder === "asc" ? (a.id_fiscale || "").localeCompare(b.id_fiscale || "") : (b.id_fiscale || "").localeCompare(a.id_fiscale || "");
        } else if (sortField === "isActive") {
            return sortOrder === "asc" ? (a.isActive ? 1 : -1) - (b.isActive ? 1 : -1) : (b.isActive ? 1 : -1) - (a.isActive ? 1 : -1);
        }
        return 0;
    });

    const displayONGs = sortedONGs.slice(pagesVisited, pagesVisited + ongsPerPage);

    const pageCount = Math.ceil(filteredONGs.length / ongsPerPage);

    const changePage = ({ selected }) => {
        setCurrentPage(selected);
    };

    return (
        <div className="dashboard-container">
            <Sidebar />
            <div className="dashboard-content">
                <Navbar setSearchQuery={setSearchQuery} /> {/* Pass search setter to Navbar */}
                <div className="ong-list">
                    <div className="header-container">
                        <h2>ONG Management</h2>
                        <button className="export-pdf-btn" onClick={exportToPDF}>
                            <FaFilePdf /> Export to PDF
                        </button>
                    </div>
                    <div className="sort-container">
                        <label>Sort by:</label>
                        <select value={sortField} onChange={(e) => setSortField(e.target.value)}>
                            <option value="name">Name</option>
                            <option value="email">Email</option>
                            <option value="phone">Phone</option>
                            <option value="id_fiscale">Tax Reference</option>
                            <option value="isActive">Active Status</option>
                        </select>
                        <select value={sortOrder} onChange={(e) => setSortOrder(e.target.value)}>
                            <option value="asc">Ascending</option>
                            <option value="desc">Descending</option>
                        </select>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Photo</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Phone</th>
                                <th>Tax Reference</th>
                                <th>Active</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {displayONGs.map((ong, index) => (
                                <tr key={ong._id}>
                                    <td>{pagesVisited + index + 1}</td>
                                    <td>
                                        <img
                                            src={ong.photo ? `http://localhost:3000/${ong.photo}` : "/src/assets/User_icon_2.svg.png"}
                                            alt="ong"
                                            className="ong-photoList"
                                        />
                                    </td>
                                    <td>{ong.name}</td>
                                    <td>{ong.email}</td>
                                    <td>{ong.phone}</td>
                                    <td>{ong.id_fiscale || "N/A"}</td>
                                    <td>{ong.isActive ? "Yes" : "No"}</td>
                                    <td className="action-buttons">
                                        <button className="view-btn">
                                            <Link to={`/ongs/view/${ong._id}`}>
                                                <FaEye />
                                            </Link>
                                        </button>
                                        <button
                                            className="block-btn"
                                            onClick={() => handleBlockONG(ong._id, ong.isBlocked)}
                                            style={{ color: ong.isBlocked ? "green" : "red" }}
                                        >
                                            {ong.isBlocked ? <FaUnlock /> : <FaBan />}
                                        </button>
                                        <button className="delete-btn" onClick={() => deleteONG(ong._id)}>
                                            <FaTrash />
                                        </button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>

                    {/* Pagination */}
                    <ReactPaginate
                        previousLabel={"Previous"}
                        nextLabel={"Next"}
                        pageCount={pageCount}
                        onPageChange={changePage}
                        containerClassName={"pagination"}
                        previousLinkClassName={"previousBttn"}
                        nextLinkClassName={"nextBttn"}
                        disabledClassName={"paginationDisabled"}
                        activeClassName={"paginationActive"}
                    />
                </div>
            </div>
        </div>
    );
};

export default ONGList;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/RestaurantList.jsx">
import React, { useEffect, useState } from "react";
import axios from "axios";
import { Link } from "react-router-dom";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "/src/assets/styles/backoffcss/restaurantList.css";
import { FaEye, FaTrash, FaBan, FaUnlock, FaFilePdf, FaSort } from "react-icons/fa";
import ReactPaginate from "react-paginate";
import logo from '../../assets/images/logooo.png';  // Import the logo

import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";

const RestaurantList = () => {
    const [restaurants, setRestaurants] = useState([]); // Liste complète des restaurants
    const [currentPage, setCurrentPage] = useState(0);
    const [searchQuery, setSearchQuery] = useState(""); // State to store the search query
    const [sortField, setSortField] = useState("name"); // State to store the sorting field
    const [sortOrder, setSortOrder] = useState("asc"); // State to store the sorting order
    const restaurantsPerPage = 5; // Nombre de restaurants par page

    // Calculate pagesVisited
    const pagesVisited = currentPage * restaurantsPerPage;

    // Récupération des restaurants depuis le backend
    useEffect(() => {
        axios.get("http://localhost:3000/users/list")
            .then(response => {
                const restaurantUsers = response.data.filter(user => user.role === "restaurant");
                setRestaurants(restaurantUsers);
            })
            .catch(error => console.error("Error fetching restaurants:", error));
    }, []);

    // Fonction pour bloquer/débloquer un restaurant
    const handleBlockRestaurant = async (restaurantId, isBlocked) => {
        try {
            const response = await axios.put(`http://localhost:3000/users/toggle-block/${restaurantId}`, {
                isBlocked: !isBlocked
            });

            if (response.status === 200) {
                alert(`Restaurant has been ${response.data.isBlocked ? "blocked" : "unblocked"} successfully.`);
                // Update the UI after blocking/unblocking
                setRestaurants(restaurants.map(restaurant =>
                    restaurant._id === restaurantId ? { ...restaurant, isBlocked: response.data.isBlocked } : restaurant
                ));
            } else {
                alert(response.data.error || "Error toggling block status.");
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Failed to update block status.");
        }
    };

    // Fonction pour supprimer un restaurant
    const deleteRestaurant = async (restaurantId) => {
        if (!window.confirm("Are you sure you want to delete this restaurant?")) return;

        try {
            await axios.delete(`http://localhost:3000/users/delete/${restaurantId}`);
            alert("Restaurant deleted!");
            setRestaurants(restaurants.filter(restaurant => restaurant._id !== restaurantId));
        } catch (error) {
            console.error("Error deleting restaurant:", error);
        }
    };

    // Fonction pour exporter la liste en PDF
    const exportToPDF = () => {
        const doc = new jsPDF({
            orientation: "landscape",
            unit: "mm",
            format: "a4",
        });
    
        // Header background - changed to a neutral light gray
        doc.setFillColor(245, 245, 245); // Light gray instead of green
        doc.rect(0, 0, doc.internal.pageSize.width, 40, "F");
    
        // Decorative bottom line - keeping main color as accent
        doc.setDrawColor(144, 196, 60); // Main color #90C43C
        doc.setLineWidth(1.5);
        doc.line(0, 40, doc.internal.pageSize.width, 40);
    
        // Logo
        const imgWidth = 30, imgHeight = 30;
        doc.addImage(logo, "PNG", 5, 5, imgWidth, imgHeight);
    
        // Title - changed to dark slate blue
        const title = "RESTAURANTS LIST";
        doc.setFontSize(28);
        doc.setTextColor(50, 62, 72); // Dark slate blue instead of green
        doc.setFont("helvetica", "bold");
        doc.text(title, doc.internal.pageSize.width / 2, 20, { align: "center" });
    
        // Date
        const today = new Date();
        const dateStr = today.toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
        });
        doc.setFontSize(10);
        doc.setTextColor(80, 80, 80); // Dark gray
        doc.text(`Generated: ${dateStr}`, doc.internal.pageSize.width - 50, 38);
    
        // Table
        autoTable(doc, {
            head: [["ID", "Name", "Email", "Phone", "Tax Reference", "Status"]],
            body: restaurants.map((restaurant, index) => [
                (index + 1).toString(),
                restaurant.name,
                restaurant.email,
                restaurant.phone || "N/A",
                restaurant.taxReference || "N/A",
                restaurant.isActive ? "Active" : "Inactive",
            ]),
            startY: 50,
            theme: "grid",
            styles: {
                fontSize: 9,
                cellPadding: 6,
                lineColor: [200, 200, 200], // Light gray borders
                lineWidth: 0.2,
                valign: "middle",
                textColor: [45, 45, 45], // Dark gray text
            },
            headStyles: {
                fillColor: [70, 80, 95], // Dark blue-gray instead of green
                textColor: [255, 255, 255],
                fontStyle: "bold",
                halign: "center",
                fontSize: 10,
            },
            alternateRowStyles: {
                fillColor: [250, 250, 250], // Very light gray instead of light green
            },
            didDrawCell: (data) => {
                if (data.section === "body" && data.column.index === 5) {
                    const status = data.cell.text[0];
                    if (status === "Active") {
                        doc.setFillColor(144, 196, 60); // Main green for active status only
                        doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F");
                        doc.setTextColor(255, 255, 255); // White text
                    } else if (status === "Inactive") {
                        doc.setFillColor(220, 220, 220); // Light gray for inactive
                        doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F");
                        doc.setTextColor(100, 100, 100); // Dark gray text
                    }
                }
            },
            didDrawPage: (data) => {
                // Footer line
                doc.setDrawColor(200, 200, 200); // Light gray line
                doc.setLineWidth(0.5);
                doc.line(15, doc.internal.pageSize.height - 20, doc.internal.pageSize.width - 15, doc.internal.pageSize.height - 20);
    
                // Page numbers - using main color as accent
                doc.setFillColor(144, 196, 60); // Main green #90C43C
                doc.roundedRect(doc.internal.pageSize.width / 2 - 15, doc.internal.pageSize.height - 18, 30, 12, 3, 3, "F");
                doc.setTextColor(255, 255, 255);
                doc.setFontSize(9);
                doc.text(`Page ${data.pageNumber} of ${doc.internal.getNumberOfPages()}`, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 10, { align: "center" });
    
                // Confidentiality notice
                doc.setTextColor(120, 120, 120);
                doc.setFontSize(8);
                doc.setFont("helvetica", "italic");
                doc.text("Confidential - For internal use only", 15, doc.internal.pageSize.height - 10);
    
                // Institution info
                doc.text("© SustainaFood", doc.internal.pageSize.width - 45, doc.internal.pageSize.height - 10);
            },
        });
    
        doc.save(`Restaurant_Directory_${today.toISOString().split("T")[0]}.pdf`);
    };

    // Filtering the restaurants based on the search query
    const filteredRestaurants = restaurants.filter(restaurant => {
        const phoneString = restaurant.phone.toString(); // Convert phone number to string for searching
        return (
            restaurant.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
            restaurant.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
            phoneString.includes(searchQuery) // Search in the phone number as a string
        );
    });

    // Sorting the restaurants based on the selected field and order
    const sortedRestaurants = filteredRestaurants.sort((a, b) => {
        if (sortField === "name") {
            return sortOrder === "asc" ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name);
        } else if (sortField === "email") {
            return sortOrder === "asc" ? a.email.localeCompare(b.email) : b.email.localeCompare(a.email);
        } else if (sortField === "phone") {
            return sortOrder === "asc" ? a.phone - b.phone : b.phone - a.phone;
        } else if (sortField === "taxReference") {
            return sortOrder === "asc" ? (a.taxReference || "").localeCompare(b.taxReference || "") : (b.taxReference || "").localeCompare(a.taxReference || "");
        } else if (sortField === "isActive") {
            return sortOrder === "asc" ? (a.isActive ? 1 : -1) - (b.isActive ? 1 : -1) : (b.isActive ? 1 : -1) - (a.isActive ? 1 : -1);
        }
        return 0;
    });

    const displayRestaurants = sortedRestaurants.slice(pagesVisited, pagesVisited + restaurantsPerPage);

    const pageCount = Math.ceil(filteredRestaurants.length / restaurantsPerPage);

    const changePage = ({ selected }) => {
        setCurrentPage(selected);
    };

    return (
        <div className="dashboard-container">
            <Sidebar />
            <div className="dashboard-content">
                <Navbar setSearchQuery={setSearchQuery} /> {/* Pass search setter to Navbar */}
                <div className="restaurant-list">
                    <div className="header-container">
                        <h2>Restaurant Management</h2>
                        <button className="export-pdf-btn" onClick={exportToPDF}>
                            <FaFilePdf /> Export to PDF
                        </button>
                    </div>
                    <div className="sort-container">
                        <label>Sort by:</label>
                        <select value={sortField} onChange={(e) => setSortField(e.target.value)}>
                            <option value="name">Name</option>
                            <option value="email">Email</option>
                            <option value="phone">Phone</option>
                            <option value="taxReference">Tax Reference</option>
                            <option value="isActive">Active Status</option>
                        </select>
                        <select value={sortOrder} onChange={(e) => setSortOrder(e.target.value)}>
                            <option value="asc">Ascending</option>
                            <option value="desc">Descending</option>
                        </select>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Photo</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Phone</th>
                                <th>Tax Reference</th>
                                <th>Active</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {displayRestaurants.map((restaurant, index) => (
                                <tr key={restaurant._id}>
                                    <td>{pagesVisited + index + 1}</td>
                                    <td>
                                        <img
                                            src={restaurant.photo ? `http://localhost:3000/${restaurant.photo}` : "/src/assets/User_icon_2.svg.png"}
                                            alt="restaurant"
                                            className="restaurant-photoList"
                                        />
                                    </td>
                                    <td>{restaurant.name}</td>
                                    <td>{restaurant.email}</td>
                                    <td>{restaurant.phone}</td>
                                    <td>{restaurant.taxReference || "N/A"}</td>
                                    <td>{restaurant.isActive ? "Yes" : "No"}</td>
                                    <td className="action-buttons">
                                        <button className="view-btn">
                                            <Link to={`/restaurants/view/${restaurant._id}`} className="view-btn">
                                                <FaEye />
                                            </Link>
                                        </button>
                                        <button
                                            className="block-btn"
                                            onClick={() => handleBlockRestaurant(restaurant._id, restaurant.isBlocked)}
                                            style={{ color: restaurant.isBlocked ? "green" : "red" }}
                                        >
                                            {restaurant.isBlocked ? <FaUnlock /> : <FaBan />}
                                        </button>
                                        <button className="delete-btn" onClick={() => deleteRestaurant(restaurant._id)}>
                                            <FaTrash />
                                        </button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>

                    {/* Pagination */}
                    <ReactPaginate
                        previousLabel={"Previous"}
                        nextLabel={"Next"}
                        pageCount={pageCount}
                        onPageChange={changePage}
                        containerClassName={"pagination"}
                        previousLinkClassName={"previousBttn"}
                        nextLinkClassName={"nextBttn"}
                        disabledClassName={"paginationDisabled"}
                        activeClassName={"paginationActive"}
                    />
                </div>
            </div>
        </div>
    );
};

export default RestaurantList;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/StudentList.jsx">
import  { useEffect, useState } from "react";
import axios from "axios";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "/src/assets/styles/backoffcss/studentList.css";
import { FaEye, FaTrash, FaBan, FaUnlock, FaFilePdf, FaSort } from "react-icons/fa";
import ReactPaginate from "react-paginate";
import { Link } from "react-router-dom";
import logo from '../../assets/images/logooo.png';  // Import the logo

import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";

const StudentList = () => {
    const [students, setStudents] = useState([]); // Liste complète des étudiants
    const [currentPage, setCurrentPage] = useState(0);
    const [searchQuery, setSearchQuery] = useState(""); // State to store the search query
    const [sortField, setSortField] = useState("name"); // State to store the sorting field
    const [sortOrder, setSortOrder] = useState("asc"); // State to store the sorting order
    const studentsPerPage = 3; // Nombre d'étudiants par page

    // Calculate pagesVisited
    const pagesVisited = currentPage * studentsPerPage;

    // Récupération des étudiants depuis le backend
    useEffect(() => {
        axios.get("http://localhost:3000/users/list")
            .then(response => {
                const studentUsers = response.data.filter(user => user.role === "student");
                setStudents(studentUsers);
            })
            .catch(error => console.error("Error fetching students:", error));
    }, []);

    // Fonction pour bloquer/débloquer un étudiant
    const handleBlockUser = async (userId, isBlocked) => {
        try {
            const response = await axios.put(`http://localhost:3000/users/toggle-block/${userId}`, {
                isBlocked: !isBlocked
            });

            if (response.status === 200) {
                alert(`User has been ${response.data.isBlocked ? "blocked" : "unblocked"} successfully.`);
                // Update the UI after blocking/unblocking
                setStudents(students.map(student =>
                    student._id === userId ? { ...student, isBlocked: response.data.isBlocked } : student
                ));
            } else {
                alert(response.data.error || "Error toggling block status.");
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Failed to update block status.");
        }
    };

    // Fonction pour supprimer un étudiant
    const deleteUser = async (userId) => {
        if (!window.confirm("Are you sure you want to delete this student?")) return;

        try {
            await axios.delete(`http://localhost:3000/users/delete/${userId}`);
            alert("Student deleted!");
            setStudents(students.filter(user => user._id !== userId));
        } catch (error) {
            console.error("Error deleting student:", error);
        }
    };

    // Fonction pour exporter la liste en PDF
    const exportToPDF = () => {
        const doc = new jsPDF({
          orientation: "landscape",
          unit: "mm",
          format: "a4",
        });
      
        // Header background - changed to a neutral light gray
        doc.setFillColor(245, 245, 245); // Light gray instead of green
        doc.rect(0, 0, doc.internal.pageSize.width, 40, "F");
      
        // Decorative bottom line - keeping main color as accent
        doc.setDrawColor(144, 196, 60); // Main color #90C43C
        doc.setLineWidth(1.5);
        doc.line(0, 40, doc.internal.pageSize.width, 40);
      
        // Logo
        const imgWidth = 30, imgHeight = 30;
        doc.addImage(logo, "PNG", 5, 5, imgWidth, imgHeight);
      
        // Title - changed to dark slate blue
        const title = "STUDENTS LIST";
        doc.setFontSize(28);
        doc.setTextColor(50, 62, 72); // Dark slate blue instead of green
        doc.setFont("helvetica", "bold");
        doc.text(title, doc.internal.pageSize.width / 2, 20, { align: "center" });
      
        // Date
        const today = new Date();
        const dateStr = today.toLocaleDateString("en-US", {
          year: "numeric",
          month: "long",
          day: "numeric",
        });
        doc.setFontSize(10);
        doc.setTextColor(80, 80, 80); // Dark gray
        doc.text(`Generated: ${dateStr}`, doc.internal.pageSize.width - 50, 38);
      
        // Table
        autoTable(doc, {
          head: [["ID", "Name", "Email", "Phone", "CIN", "Age", "Sex", "Status"]],
          body: students.map((student, index) => [
            (index + 1).toString(),
            student.name,
            student.email,
            student.phone || "N/A",
            student.num_cin || "N/A",
            student.age ? student.age.toString() : "N/A",
            student.sexe || "N/A",
            student.isActive ? "Active" : "Inactive",
          ]),
          startY: 50,
          theme: "grid",
          styles: {
            fontSize: 9,
            cellPadding: 6,
            lineColor: [200, 200, 200], // Light gray borders
            lineWidth: 0.2,
            valign: "middle",
            textColor: [45, 45, 45], // Dark gray text
          },
          headStyles: {
            fillColor: [70, 80, 95], // Dark blue-gray instead of green
            textColor: [255, 255, 255],
            fontStyle: "bold",
            halign: "center",
            fontSize: 10,
          },
          alternateRowStyles: {
            fillColor: [250, 250, 250], // Very light gray instead of light green
          },
          didDrawCell: (data) => {
            if (data.section === "body" && data.column.index === 7) {
              const status = data.cell.text[0];
              if (status === "Active") {
                doc.setFillColor(144, 196, 60); // Main green for active status only
                doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F");
                doc.setTextColor(255, 255, 255); // White text
              } else if (status === "Inactive") {
                doc.setFillColor(220, 220, 220); // Light gray for inactive
                doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F");
                doc.setTextColor(100, 100, 100); // Dark gray text
              }
            }
          },
          didDrawPage: (data) => {
            // Footer line
            doc.setDrawColor(200, 200, 200); // Light gray line
            doc.setLineWidth(0.5);
            doc.line(15, doc.internal.pageSize.height - 20, doc.internal.pageSize.width - 15, doc.internal.pageSize.height - 20);
      
            // Page numbers - using main color as accent
            doc.setFillColor(144, 196, 60); // Main green #90C43C
            doc.roundedRect(doc.internal.pageSize.width / 2 - 15, doc.internal.pageSize.height - 18, 30, 12, 3, 3, "F");
            doc.setTextColor(255, 255, 255);
            doc.setFontSize(9);
            doc.text(`Page ${data.pageNumber} of ${doc.internal.getNumberOfPages()}`, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 10, { align: "center" });
      
            // Confidentiality notice
            doc.setTextColor(120, 120, 120);
            doc.setFontSize(8);
            doc.setFont("helvetica", "italic");
            doc.text("Confidential - For internal use only", 15, doc.internal.pageSize.height - 10);
      
            // Institution info
            doc.text("©SustainaFood", doc.internal.pageSize.width - 45, doc.internal.pageSize.height - 10);
          },
        });
      
        doc.save(`Student_Directory_${today.toISOString().split("T")[0]}.pdf`);
      };



    // Filtering the students based on the search query
    const filteredStudents = students.filter(student => {
        const phoneString = student.phone ? student.phone.toString() : "";
        const ageString = student.age ? student.age.toString() : "";
        const numCinString = student.num_cin ? student.num_cin.toString() : "";
        const sexeString = student.sexe ? student.sexe.toString().toLowerCase() : "";
        return (
            student.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
            student.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
            phoneString.includes(searchQuery) || // Search in phone number
            ageString.includes(searchQuery) ||
            numCinString.includes(searchQuery) ||
            sexeString.includes(searchQuery)
        );
    });

    // Sorting the students based on the selected field and order
    const sortedStudents = filteredStudents.sort((a, b) => {
        if (sortField === "name") {
            return sortOrder === "asc" ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name);
        } else if (sortField === "email") {
            return sortOrder === "asc" ? a.email.localeCompare(b.email) : b.email.localeCompare(a.email);
        } else if (sortField === "phone") {
            return sortOrder === "asc" ? a.phone - b.phone : b.phone - a.phone;
        } else if (sortField === "num_cin") {
            return sortOrder === "asc" ? (a.num_cin || "").localeCompare(b.num_cin || "") : (b.num_cin || "").localeCompare(a.num_cin || "");
        } else if (sortField === "age") {
            return sortOrder === "asc" ? a.age - b.age : b.age - a.age;
        } else if (sortField === "sexe") {
            return sortOrder === "asc" ? a.sexe.localeCompare(b.sexe) : b.sexe.localeCompare(a.sexe);
        } else if (sortField === "isActive") {
            return sortOrder === "asc" ? (a.isActive ? 1 : -1) - (b.isActive ? 1 : -1) : (b.isActive ? 1 : -1) - (a.isActive ? 1 : -1);
        }
        return 0;
    });

    const displayStudents = sortedStudents.slice(pagesVisited, pagesVisited + studentsPerPage);

    const pageCount = Math.ceil(filteredStudents.length / studentsPerPage);

    const changePage = ({ selected }) => {
        setCurrentPage(selected);
    };

    return (
        <div className="dashboard-container">
            <Sidebar />
            <div className="dashboard-content">
                <Navbar setSearchQuery={setSearchQuery} /> {/* Pass search setter to Navbar */}
                <div className="student-list">
                    <div className="header-container">
                        <h2>Student Management</h2>
                        <button className="export-pdf-btn" onClick={exportToPDF}>
                            <FaFilePdf /> Export to PDF
                        </button>
                    </div>
                    <div className="sort-container">
                        <label>Sort by:</label>
                        <select value={sortField} onChange={(e) => setSortField(e.target.value)}>
                            <option value="name">Name</option>
                            <option value="email">Email</option>
                            <option value="phone">Phone</option>
                            <option value="num_cin">CIN</option>
                            <option value="age">Age</option>
                            <option value="sexe">Sex</option>
                            <option value="isActive">Active Status</option>
                        </select>
                        <select value={sortOrder} onChange={(e) => setSortOrder(e.target.value)}>
                            <option value="asc">Ascending</option>
                            <option value="desc">Descending</option>
                        </select>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Photo</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Phone</th>
                                <th>CIN</th>
                                <th>Age</th>
                                <th>Sex</th>
                                <th>Active</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {displayStudents.map((student, index) => (
                                <tr key={student._id}>
                                    <td>{pagesVisited + index + 1}</td>
                                    <td>
                                        <img
                                            src={student.photo ? `http://localhost:3000/${student.photo}` : "/src/assets/User_icon_2.svg.png"}
                                            alt="Student"
                                            className="student-photoList"
                                        />
                                    </td>
                                    <td>{student.name}</td>
                                    <td>{student.email}</td>
                                    <td>{student.phone}</td>
                                    <td>{student.num_cin || "N/A"}</td>
                                    <td>{student.age || "N/A"}</td>
                                    <td>{student.sexe}</td>
                                    <td>{student.isActive ? "Yes" : "No"}</td>
                                    <td className="action-buttons">
                                        <button className="view-btn">
                                            <Link to={`/students/view/${student._id}`}>
                                                <FaEye />
                                            </Link>
                                        </button>
                                        <button
                                            className="block-btn"
                                            onClick={() => handleBlockUser(student._id, student.isBlocked)}
                                            style={{ color: student.isBlocked ? "green" : "red" }}
                                        >
                                            {student.isBlocked ? <FaUnlock /> : <FaBan />}
                                        </button>
                                        <button className="delete-btn" onClick={() => deleteUser(student._id)}>
                                            <FaTrash />
                                        </button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>

                    {/* Pagination */}
                    <ReactPaginate
                        previousLabel={"Previous"}
                        nextLabel={"Next"}
                        pageCount={pageCount}
                        onPageChange={changePage}
                        containerClassName={"pagination"}
                        previousLinkClassName={"previousBttn"}
                        nextLinkClassName={"nextBttn"}
                        disabledClassName={"paginationDisabled"}
                        activeClassName={"paginationActive"}
                    />
                </div>
            </div>
        </div>
    );
};

export default StudentList;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/SupermarketList.jsx">
import React, { useEffect, useState } from "react";
import axios from "axios";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "/src/assets/styles/backoffcss/supermarketList.css";
import { FaEye, FaTrash, FaBan, FaUnlock, FaFilePdf, FaSort } from "react-icons/fa";
import ReactPaginate from "react-paginate";
import { Link } from "react-router-dom";
import logo from '../../assets/images/logooo.png';  // Import the logo

import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";

const SupermarketList = () => {
    const [supermarkets, setSupermarkets] = useState([]); // Liste complète des supermarchés
    const [currentPage, setCurrentPage] = useState(0);
    const [searchQuery, setSearchQuery] = useState(""); // State to store the search query
    const [sortField, setSortField] = useState("name"); // State to store the sorting field
    const [sortOrder, setSortOrder] = useState("asc"); // State to store the sorting order
    const supermarketsPerPage = 5; // Nombre de supermarchés par page

    // Calculate pagesVisited
    const pagesVisited = currentPage * supermarketsPerPage;

    // Récupération des supermarchés depuis le backend
    useEffect(() => {
        axios.get("http://localhost:3000/users/list")
            .then(response => {
                const supermarketUsers = response.data.filter(user => user.role === "supermarket");
                setSupermarkets(supermarketUsers);
            })
            .catch(error => console.error("Error fetching supermarkets:", error));
    }, []);

    // Fonction pour bloquer/débloquer un supermarché
    const handleBlockUser = async (userId, isBlocked) => {
        try {
            const response = await axios.put(`http://localhost:3000/users/toggle-block/${userId}`, {
                isBlocked: !isBlocked
            });

            if (response.status === 200) {
                alert(`User has been ${response.data.isBlocked ? "blocked" : "unblocked"} successfully.`);
                // Update the UI after blocking/unblocking
                setSupermarkets(supermarkets.map(supermarket =>
                    supermarket._id === userId ? { ...supermarket, isBlocked: response.data.isBlocked } : supermarket
                ));
            } else {
                alert(response.data.error || "Error toggling block status.");
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Failed to update block status.");
        }
    };

    // Fonction pour supprimer un supermarché
    const deleteSupermarket = async (supermarketId) => {
        if (!window.confirm("Are you sure you want to delete this supermarket?")) return;

        try {
            await axios.delete(`http://localhost:3000/users/delete/${supermarketId}`);
            alert("Supermarket deleted!");
            setSupermarkets(supermarkets.filter(supermarket => supermarket._id !== supermarketId));
        } catch (error) {
            console.error("Error deleting supermarket:", error);
        }
    };

    // Fonction pour exporter la liste en PDF
    const exportToPDF = () => {
        const doc = new jsPDF({
            orientation: "landscape",
            unit: "mm",
            format: "a4",
        });
    
        // Header background - changed to a neutral light gray
        doc.setFillColor(245, 245, 245); // Light gray instead of green
        doc.rect(0, 0, doc.internal.pageSize.width, 40, "F");
    
        // Decorative bottom line - keeping main color as accent
        doc.setDrawColor(144, 196, 60); // Main color #90C43C
        doc.setLineWidth(1.5);
        doc.line(0, 40, doc.internal.pageSize.width, 40);
    
        // Logo
        const imgWidth = 30, imgHeight = 30;
        doc.addImage(logo, "PNG", 5, 5, imgWidth, imgHeight);
    
        // Title - changed to dark slate blue
        const title = "SUPERMARKET LIST";
        doc.setFontSize(28);
        doc.setTextColor(50, 62, 72); // Dark slate blue instead of green
        doc.setFont("helvetica", "bold");
        doc.text(title, doc.internal.pageSize.width / 2, 20, { align: "center" });
    
        // Date
        const today = new Date();
        const dateStr = today.toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
        });
        doc.setFontSize(10);
        doc.setTextColor(80, 80, 80); // Dark gray
        doc.text(`Generated: ${dateStr}`, doc.internal.pageSize.width - 50, 38);
    
        // Table
        autoTable(doc, {
            head: [["ID", "Name", "Email", "Phone", "Tax Reference", "Status"]],
            body: supermarkets.map((supermarket, index) => [
                (index + 1).toString(),
                supermarket.name,
                supermarket.email,
                supermarket.phone || "N/A",
                supermarket.taxReference || "N/A",
                supermarket.isActive ? "Active" : "Inactive",
            ]),
            startY: 50,
            theme: "grid",
            styles: {
                fontSize: 9,
                cellPadding: 6,
                lineColor: [200, 200, 200], // Light gray borders
                lineWidth: 0.2,
                valign: "middle",
                textColor: [45, 45, 45], // Dark gray text
            },
            headStyles: {
                fillColor: [70, 80, 95], // Dark blue-gray instead of green
                textColor: [255, 255, 255],
                fontStyle: "bold",
                halign: "center",
                fontSize: 10,
            },
            alternateRowStyles: {
                fillColor: [250, 250, 250], // Very light gray instead of light green
            },
            didDrawCell: (data) => {
                if (data.section === "body" && data.column.index === 5) {
                    const status = data.cell.text[0];
                    if (status === "Active") {
                        doc.setFillColor(144, 196, 60); // Main green for active status only
                        doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F");
                        doc.setTextColor(255, 255, 255); // White text
                    } else if (status === "Inactive") {
                        doc.setFillColor(220, 220, 220); // Light gray for inactive
                        doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F");
                        doc.setTextColor(100, 100, 100); // Dark gray text
                    }
                }
            },
            didDrawPage: (data) => {
                // Footer line
                doc.setDrawColor(200, 200, 200); // Light gray line
                doc.setLineWidth(0.5);
                doc.line(15, doc.internal.pageSize.height - 20, doc.internal.pageSize.width - 15, doc.internal.pageSize.height - 20);
    
                // Page numbers - using main color as accent
                doc.setFillColor(144, 196, 60); // Main green #90C43C
                doc.roundedRect(doc.internal.pageSize.width / 2 - 15, doc.internal.pageSize.height - 18, 30, 12, 3, 3, "F");
                doc.setTextColor(255, 255, 255);
                doc.setFontSize(9);
                doc.text(`Page ${data.pageNumber} of ${doc.internal.getNumberOfPages()}`, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 10, { align: "center" });
    
                // Confidentiality notice
                doc.setTextColor(120, 120, 120);
                doc.setFontSize(8);
                doc.setFont("helvetica", "italic");
                doc.text("Confidential - For internal use only", 15, doc.internal.pageSize.height - 10);
    
                // Institution info
                doc.text("© SustainaFood", doc.internal.pageSize.width - 45, doc.internal.pageSize.height - 10);
            },
        });
    
        doc.save(`Supermarket_Directory_${today.toISOString().split("T")[0]}.pdf`);
    };

    // Filtering the supermarkets based on the search query
    const filteredSupermarkets = supermarkets.filter(supermarket => {
        const phoneString = supermarket.phone.toString(); // Convert phone number to string for searching
        return (
            supermarket.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
            supermarket.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
            phoneString.includes(searchQuery) // Search in the phone number as a string
        );
    });

    // Sorting the supermarkets based on the selected field and order
    const sortedSupermarkets = filteredSupermarkets.sort((a, b) => {
        if (sortField === "name") {
            return sortOrder === "asc" ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name);
        } else if (sortField === "email") {
            return sortOrder === "asc" ? a.email.localeCompare(b.email) : b.email.localeCompare(a.email);
        } else if (sortField === "phone") {
            return sortOrder === "asc" ? a.phone - b.phone : b.phone - a.phone;
        } else if (sortField === "taxReference") {
            return sortOrder === "asc" ? (a.taxReference || "").localeCompare(b.taxReference || "") : (b.taxReference || "").localeCompare(a.taxReference || "");
        } else if (sortField === "isActive") {
            return sortOrder === "asc" ? (a.isActive ? 1 : -1) - (b.isActive ? 1 : -1) : (b.isActive ? 1 : -1) - (a.isActive ? 1 : -1);
        }
        return 0;
    });

    const displaySupermarkets = sortedSupermarkets.slice(pagesVisited, pagesVisited + supermarketsPerPage);

    const pageCount = Math.ceil(filteredSupermarkets.length / supermarketsPerPage);

    const changePage = ({ selected }) => {
        setCurrentPage(selected);
    };

    return (
        <div className="dashboard-container">
            <Sidebar />
            <div className="dashboard-content">
                <Navbar setSearchQuery={setSearchQuery} /> {/* Pass search setter to Navbar */}
                <div className="supermarket-list">
                    <div className="header-container">
                        <h2>Supermarket Management</h2>
                        <button className="export-pdf-btn" onClick={exportToPDF}>
                            <FaFilePdf /> Export to PDF
                        </button>
                    </div>
                    <div className="sort-container">
                        <label>Sort by:</label>
                        <select value={sortField} onChange={(e) => setSortField(e.target.value)}>
                            <option value="name">Name</option>
                            <option value="email">Email</option>
                            <option value="phone">Phone</option>
                            <option value="taxReference">Tax Reference</option>
                            <option value="isActive">Active Status</option>
                        </select>
                        <select value={sortOrder} onChange={(e) => setSortOrder(e.target.value)}>
                            <option value="asc">Ascending</option>
                            <option value="desc">Descending</option>
                        </select>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Photo</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Phone</th>
                                <th>Tax Reference</th>
                                <th>Active</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {displaySupermarkets.map((supermarket, index) => (
                                <tr key={supermarket._id}>
                                    <td>{pagesVisited + index + 1}</td>
                                    <td>
                                        <img
                                            src={supermarket.photo ? `http://localhost:3000/${supermarket.photo}` : "/src/assets/User_icon_2.svg.png"}
                                            alt="supermarket"
                                            className="supermarket-photoList"
                                        />
                                    </td>
                                    <td>{supermarket.name}</td>
                                    <td>{supermarket.email}</td>
                                    <td>{supermarket.phone}</td>
                                    <td>{supermarket.taxReference || "N/A"}</td>
                                    <td>{supermarket.isActive ? "Yes" : "No"}</td>
                                    <td className="action-buttons">
                                        <button className="view-btn">
                                            <Link to={`/supermarkets/view/${supermarket._id}`}>
                                                <FaEye />
                                            </Link>
                                        </button>
                                        <button
                                            className="block-btn"
                                            onClick={() => handleBlockUser(supermarket._id, supermarket.isBlocked)}
                                            style={{ color: supermarket.isBlocked ? "green" : "red" }}
                                        >
                                            {supermarket.isBlocked ? <FaUnlock /> : <FaBan />}
                                        </button>
                                        <button className="delete-btn" onClick={() => deleteSupermarket(supermarket._id)}>
                                            <FaTrash />
                                        </button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>

                    {/* Pagination */}
                    <ReactPaginate
                        previousLabel={"Previous"}
                        nextLabel={"Next"}
                        pageCount={pageCount}
                        onPageChange={changePage}
                        containerClassName={"pagination"}
                        previousLinkClassName={"previousBttn"}
                        nextLinkClassName={"nextBttn"}
                        disabledClassName={"paginationDisabled"}
                        activeClassName={"paginationActive"}
                    />
                </div>
            </div>
        </div>
    );
};

export default SupermarketList;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/TransporterList.jsx">
import React, { useEffect, useState } from "react";
import axios from "axios";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "/src/assets/styles/backoffcss/transporterList.css";
import { FaEye, FaTrash, FaBan, FaUnlock, FaFilePdf, FaSort } from "react-icons/fa";
import ReactPaginate from "react-paginate";
import { Link } from "react-router-dom";
import logo from '../../assets/images/logooo.png';  // Import the logo

import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";

const TransporterList = () => {
    const [transporters, setTransporters] = useState([]); // Liste complète des transporteurs
    const [currentPage, setCurrentPage] = useState(0);
    const [searchQuery, setSearchQuery] = useState(""); // State to store the search query
    const [sortField, setSortField] = useState("name"); // State to store the sorting field
    const [sortOrder, setSortOrder] = useState("asc"); // State to store the sorting order
    const transportersPerPage = 5; // Nombre de transporteurs par page

    // Calculate pagesVisited
    const pagesVisited = currentPage * transportersPerPage;

    // Récupération des transporteurs depuis le backend
    useEffect(() => {
        axios.get("http://localhost:3000/users/list")
            .then(response => {
                const transporterUsers = response.data.filter(user => user.role === "transporter");
                setTransporters(transporterUsers);
            })
            .catch(error => console.error("Error fetching transporters:", error));
    }, []);

    // Fonction pour bloquer/débloquer un transporteur
    const handleBlockUser = async (userId, isBlocked) => {
        try {
            const response = await axios.put(`http://localhost:3000/users/toggle-block/${userId}`, {
                isBlocked: !isBlocked
            });

            if (response.status === 200) {
                alert(`User has been ${response.data.isBlocked ? "blocked" : "unblocked"} successfully.`);
                // Update the UI after blocking/unblocking
                setTransporters(transporters.map(transporter =>
                    transporter._id === userId ? { ...transporter, isBlocked: response.data.isBlocked } : transporter
                ));
            } else {
                alert(response.data.error || "Error toggling block status.");
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Failed to update block status.");
        }
    };

    // Fonction pour supprimer un transporteur
    const deleteTransporter = async (transporterId) => {
        if (!window.confirm("Are you sure you want to delete this transporter?")) return;

        try {
            await axios.delete(`http://localhost:3000/users/delete/${transporterId}`);
            alert("Transporter deleted!");
            setTransporters(transporters.filter(transporter => transporter._id !== transporterId));
        } catch (error) {
            console.error("Error deleting transporter:", error);
        }
    };

    // Fonction pour exporter la liste en PDF
    const exportToPDF = () => {
        const doc = new jsPDF({
            orientation: "landscape",
            unit: "mm",
            format: "a4",
        });
    
        // Header background - changed to a neutral light gray
        doc.setFillColor(245, 245, 245); // Light gray instead of green
        doc.rect(0, 0, doc.internal.pageSize.width, 40, "F");
    
        // Decorative bottom line - keeping main color as accent
        doc.setDrawColor(144, 196, 60); // Main color #90C43C
        doc.setLineWidth(1.5);
        doc.line(0, 40, doc.internal.pageSize.width, 40);
    
        // Logo
        const imgWidth = 30, imgHeight = 30;
        doc.addImage(logo, "PNG", 5, 5, imgWidth, imgHeight);
    
        // Title - changed to dark slate blue
        const title = "TRANSPORTER LIST";
        doc.setFontSize(28);
        doc.setTextColor(50, 62, 72); // Dark slate blue instead of green
        doc.setFont("helvetica", "bold");
        doc.text(title, doc.internal.pageSize.width / 2, 20, { align: "center" });
    
        // Date
        const today = new Date();
        const dateStr = today.toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
        });
        doc.setFontSize(10);
        doc.setTextColor(80, 80, 80); // Dark gray
        doc.text(`Generated: ${dateStr}`, doc.internal.pageSize.width - 50, 38);
    
        // Table
        autoTable(doc, {
            head: [["ID", "Name", "Email", "Phone", "Vehicle Type", "Status"]],
            body: transporters.map((transporter, index) => [
                (index + 1).toString(),
                transporter.name,
                transporter.email,
                transporter.phone || "N/A",
                transporter.vehiculeType || "N/A",
                transporter.isActive ? "Active" : "Inactive",
            ]),
            startY: 50,
            theme: "grid",
            styles: {
                fontSize: 9,
                cellPadding: 6,
                lineColor: [200, 200, 200], // Light gray borders
                lineWidth: 0.2,
                valign: "middle",
                textColor: [45, 45, 45], // Dark gray text
            },
            headStyles: {
                fillColor: [70, 80, 95], // Dark blue-gray instead of green
                textColor: [255, 255, 255],
                fontStyle: "bold",
                halign: "center",
                fontSize: 10,
            },
            alternateRowStyles: {
                fillColor: [250, 250, 250], // Very light gray instead of light green
            },
            didDrawCell: (data) => {
                if (data.section === "body" && data.column.index === 5) {
                    const status = data.cell.text[0];
                    if (status === "Active") {
                        doc.setFillColor(144, 196, 60); // Main green for active status only
                        doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F");
                        doc.setTextColor(255, 255, 255); // White text
                    } else if (status === "Inactive") {
                        doc.setFillColor(220, 220, 220); // Light gray for inactive
                        doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F");
                        doc.setTextColor(100, 100, 100); // Dark gray text
                    }
                }
            },
            didDrawPage: (data) => {
                // Footer line
                doc.setDrawColor(200, 200, 200); // Light gray line
                doc.setLineWidth(0.5);
                doc.line(15, doc.internal.pageSize.height - 20, doc.internal.pageSize.width - 15, doc.internal.pageSize.height - 20);
    
                // Page numbers - using main color as accent
                doc.setFillColor(144, 196, 60); // Main green #90C43C
                doc.roundedRect(doc.internal.pageSize.width / 2 - 15, doc.internal.pageSize.height - 18, 30, 12, 3, 3, "F");
                doc.setTextColor(255, 255, 255);
                doc.setFontSize(9);
                doc.text(`Page ${data.pageNumber} of ${doc.internal.getNumberOfPages()}`, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 10, { align: "center" });
    
                // Confidentiality notice
                doc.setTextColor(120, 120, 120);
                doc.setFontSize(8);
                doc.setFont("helvetica", "italic");
                doc.text("Confidential - For internal use only", 15, doc.internal.pageSize.height - 10);
    
                // Institution info
                doc.text("© SustainaFood", doc.internal.pageSize.width - 45, doc.internal.pageSize.height - 10);
            },
        });
    
        doc.save(`Transporter_Directory_${today.toISOString().split("T")[0]}.pdf`);
    };

    // Filtering the transporters based on the search query
    const filteredTransporters = transporters.filter(transporter => {
        const phoneString = transporter.phone.toString(); // Convert phone number to string for searching
        return (
            transporter.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
            transporter.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
            phoneString.includes(searchQuery) // Search in the phone number as a string
        );
    });

    // Sorting the transporters based on the selected field and order
    const sortedTransporters = filteredTransporters.sort((a, b) => {
        if (sortField === "name") {
            return sortOrder === "asc" ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name);
        } else if (sortField === "email") {
            return sortOrder === "asc" ? a.email.localeCompare(b.email) : b.email.localeCompare(a.email);
        } else if (sortField === "phone") {
            return sortOrder === "asc" ? a.phone - b.phone : b.phone - a.phone;
        } else if (sortField === "vehiculeType") {
            return sortOrder === "asc" ? (a.vehiculeType || "").localeCompare(b.vehiculeType || "") : (b.vehiculeType || "").localeCompare(a.vehiculeType || "");
        } else if (sortField === "isActive") {
            return sortOrder === "asc" ? (a.isActive ? 1 : -1) - (b.isActive ? 1 : -1) : (b.isActive ? 1 : -1) - (a.isActive ? 1 : -1);
        }
        return 0;
    });

    const displayTransporters = sortedTransporters.slice(pagesVisited, pagesVisited + transportersPerPage);

    const pageCount = Math.ceil(filteredTransporters.length / transportersPerPage);

    const changePage = ({ selected }) => {
        setCurrentPage(selected);
    };

    return (
        <div className="dashboard-container">
            <Sidebar />
            <div className="dashboard-content">
                <Navbar setSearchQuery={setSearchQuery} /> {/* Pass search setter to Navbar */}
                <div className="transporter-list">
                    <div className="header-container">
                        <h2>Transporter Management</h2>
                        <button className="export-pdf-btn" onClick={exportToPDF}>
                            <FaFilePdf /> Export to PDF
                        </button>
                    </div>
                    <div className="sort-container">
                        <label>Sort by:</label>
                        <select value={sortField} onChange={(e) => setSortField(e.target.value)}>
                            <option value="name">Name</option>
                            <option value="email">Email</option>
                            <option value="phone">Phone</option>
                            <option value="vehiculeType">Vehicle Type</option>
                            <option value="isActive">Active Status</option>
                        </select>
                        <select value={sortOrder} onChange={(e) => setSortOrder(e.target.value)}>
                            <option value="asc">Ascending</option>
                            <option value="desc">Descending</option>
                        </select>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Photo</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Phone</th>
                                <th>Vehicle Type</th>
                                <th>Active</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {displayTransporters.map((transporter, index) => (
                                <tr key={transporter._id}>
                                    <td>{pagesVisited + index + 1}</td>
                                    <td>
                                        <img
                                            src={transporter.photo ? `http://localhost:3000/${transporter.photo}` : "/src/assets/User_icon_2.svg.png"}
                                            alt="transporter"
                                            className="transporter-photoList"
                                        />
                                    </td>
                                    <td>{transporter.name}</td>
                                    <td>{transporter.email}</td>
                                    <td>{transporter.phone}</td>
                                    <td>{transporter.vehiculeType || "N/A"}</td>
                                    <td>{transporter.isActive ? "Yes" : "No"}</td>
                                    <td className="action-buttons">
                                        <button className="view-btn">
                                            <Link to={`/transporters/view/${transporter._id}`}>
                                                <FaEye />
                                            </Link>
                                        </button>
                                        <button
                                            className="block-btn"
                                            onClick={() => handleBlockUser(transporter._id, transporter.isBlocked)}
                                            style={{ color: transporter.isBlocked ? "green" : "red" }}
                                        >
                                            {transporter.isBlocked ? <FaUnlock /> : <FaBan />}
                                        </button>
                                        <button className="delete-btn" onClick={() => deleteTransporter(transporter._id)}>
                                            <FaTrash />
                                        </button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>

                    {/* Pagination */}
                    <ReactPaginate
                        previousLabel={"Previous"}
                        nextLabel={"Next"}
                        pageCount={pageCount}
                        onPageChange={changePage}
                        containerClassName={"pagination"}
                        previousLinkClassName={"previousBttn"}
                        nextLinkClassName={"nextBttn"}
                        disabledClassName={"paginationDisabled"}
                        activeClassName={"paginationActive"}
                    />
                </div>
            </div>
        </div>
    );
};

export default TransporterList;
</file>

<file path="sustainafood-frontend/src/pages/ConfirmationModal.jsx">
import React from "react";

const ConfirmationModal = ({ message, onConfirm, onCancel }) => {
  return (
    <div className="confirmation-modal-overlay">
      <div className="confirmation-modal">
        <div className="confirmation-modal-content">
          <p>{message}</p>
          <div className="confirmation-modal-buttons">
            <button className="confirmation-modal-button confirm" onClick={onConfirm}>
              Yes
            </button>
            <button className="confirmation-modal-button cancel" onClick={onCancel}>
              No
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ConfirmationModal;
</file>

<file path="sustainafood-frontend/src/pages/Editprofile.jsx">
"use client"

import { useState, useEffect } from "react"
import Navbar from "../components/Navbar"
import pdp from "../assets/images/pdp1.png" // Default fallback image
import "../assets/styles/EditProfile.css" // Import the CSS file
import upload from "../assets/images/upload.png"
import Footer from "../components/Footer"
import { useNavigate } from "react-router-dom"
import { useAuth } from "../contexts/AuthContext"
import { getUserById, updateUser } from "../api/userService"
import { FaCamera } from "react-icons/fa"

const EditProfile = () => {
  const [fileName, setFileName] = useState("")
  const [imagePreview, setImagePreview] = useState(null)
  const [studentCardPreview, setStudentCardPreview] = useState(null)
  const [errors, setErrors] = useState({})

  const navigate = useNavigate()
  const { user: authUser } = useAuth()
  const [authUserId, setAuthUserId] = useState(null)
  const role = authUser?.role
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    photo: "",
    address: "",
    // For student
    sexe: "",
    num_cin: "",
    age: "",
    image_carte_etudiant: null,
    // For ONG
    id_fiscale: "",
    type: "",
    // For restaurant/supermarket
    taxReference: "",
    // For transporter
    vehiculeType: "",
  })

  useEffect(() => {
    const fetchUserDetails = async () => {
      if (typeof authUser.id === "string") {
        setAuthUserId(authUser.id)
        if (authUser && authUser.id) {
          try {
            const response = await getUserById(authUser.id)
            const userData = response.data
            setFormData({
              name: userData.name || "",
              email: userData.email || "",
              phone: userData.phone || "",
              photo: userData.photo || "",
              address: userData.address || "",
              sexe: userData.sexe || "",
              num_cin: userData.num_cin || "",
              age: userData.age || "",
              image_carte_etudiant: userData.image_carte_etudiant || null,
              id_fiscale: userData.id_fiscale || "",
              type: userData.type || "",
              taxReference: userData.taxReference || "",
              vehiculeType: userData.vehiculeType || "",
            })
          } catch (error) {
            console.error("Error fetching user data:", error)
          }
        }
      } else if (typeof authUser.id === "number") {
        setAuthUserId(authUser._id)
        if (authUser && authUser._id) {
          try {
            const response = await getUserById(authUser._id)
            const userData = response.data
            setFormData({
              name: userData.name || "",
              email: userData.email || "",
              phone: userData.phone || "",
              photo: userData.photo || "",
              address: userData.address || "",
              sexe: userData.sexe || "",
              num_cin: userData.num_cin || "",
              age: userData.age || "",
              image_carte_etudiant: userData.image_carte_etudiant || null,
              id_fiscale: userData.id_fiscale || "",
              type: userData.type || "",
              taxReference: userData.taxReference || "",
              vehiculeType: userData.vehiculeType || "",
            })
          } catch (error) {
            console.error("Error fetching user data:", error)
          }
        }
      }
    }
    fetchUserDetails()
  }, [authUser])

  const profilePhotoUrl =
    formData.photo && typeof formData.photo === "string" ? `http://localhost:3000/${formData.photo}` : pdp

  // Validation function for the fields
  const validateFields = () => {
    const newErrors = {}

    // Common required fields
    if (!formData.name) {
      newErrors.name = "Name is required."
    } else if (!/^[a-zA-Z\s]+$/.test(formData.name)) {
      newErrors.name = "Invalid name format."
    }

    if (!formData.email) {
      newErrors.email = "Email is required."
    } else if (!/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(formData.email)) {
      newErrors.email = "Please enter a valid email address (e.g., name@example.com)."
    }

    if (!formData.phone) {
      newErrors.phone = "Phone number is required."
    } else if (!/^\d{8,15}$/.test(formData.phone)) {
      newErrors.phone = "Invalid phone number format."
    }

    if (!formData.address) {
      newErrors.address = "Address is required."
    }

    // Role-specific fields
    if (role === "student") {
      if (!formData.sexe) {
        newErrors.sexe = "Gender is required."
      }
      if (!formData.age) {
        newErrors.age = "Age is required."
      }
      if (!formData.num_cin) {
        newErrors.num_cin = "CIN number is required."
      } else if (!/^\d{8}$/.test(formData.num_cin)) {
        newErrors.num_cin = "Invalid CIN format (must be 8 digits)."
      }
      if (!formData.image_carte_etudiant) {
        newErrors.image_carte_etudiant = "Student card image is required."
      }
    }

    if (role === "ong") {
      if (!formData.id_fiscale) {
        newErrors.id_fiscale = "Fiscal ID is required."
      } else if (!/^TN\d{8}$/.test(formData.id_fiscale)) {
        newErrors.id_fiscale = "Invalid fiscal ID format (must be TN followed by 8 digits)."
      }
      if (!formData.type) {
        newErrors.type = "ONG type is required."
      }
    }

    if (role === "restaurant" || role === "supermarket") {
      if (!formData.taxReference) {
        newErrors.taxReference = "Tax reference is required."
      } else if (!/^VAT-\d{8}$/.test(formData.taxReference)) {
        newErrors.taxReference = "Invalid tax reference format (must be VAT- followed by 8 digits)."
      }
    }

    if (role === "transporter") {
      if (!formData.vehiculeType) {
        newErrors.vehiculeType = "Vehicle type is required."
      }
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  // Handles changes in form fields
  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData((prev) => ({ ...prev, [name]: value }))

    const newErrors = { ...errors }
    switch (name) {
      case "name":
        if (!value) {
          newErrors[name] = "Name is required."
        } else if (!/^[a-zA-Z\s]+$/.test(value)) {
          newErrors[name] = "Invalid name format."
        } else {
          delete newErrors[name]
        }
        break
      case "email":
        if (!value) {
          newErrors[name] = "Email is required."
        } else if (!/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(value)) {
          newErrors[name] = "Please enter a valid email."
        } else {
          delete newErrors[name]
        }
        break
      case "phone":
        if (!value) {
          newErrors[name] = "Phone number is required."
        } else if (!/^\d{8,15}$/.test(value)) {
          newErrors[name] = "Invalid phone number format."
        } else {
          delete newErrors[name]
        }
        break
      case "address":
        if (!value) {
          newErrors[name] = "Address is required."
        } else {
          delete newErrors[name]
        }
        break
      case "sexe":
        if (!value) {
          newErrors[name] = "Gender is required."
        } else {
          delete newErrors[name]
        }
        break
      case "age":
        if (!value) {
          newErrors[name] = "Age is required."
        } else {
          delete newErrors[name]
        }
        break
      case "num_cin":
        if (!value) {
          newErrors[name] = "CIN number is required."
        } else if (!/^\d{8}$/.test(value)) {
          newErrors[name] = "Invalid CIN format (8 digits)."
        } else {
          delete newErrors[name]
        }
        break
      case "id_fiscale":
        if (!value) {
          newErrors[name] = "Fiscal ID is required."
        } else if (!/^TN\d{8}$/.test(value)) {
          newErrors[name] = "Invalid fiscal ID format (TN + 8 digits)."
        } else {
          delete newErrors[name]
        }
        break
      case "type":
        if (!value) {
          newErrors[name] = "ONG type is required."
        } else {
          delete newErrors[name]
        }
        break
      case "taxReference":
        if (!value) {
          newErrors[name] = "Tax reference is required."
        } else if (!/^VAT-\d{8}$/.test(value)) {
          newErrors[name] = "Invalid format (VAT- + 8 digits)."
        } else {
          delete newErrors[name]
        }
        break
      case "vehiculeType":
        if (!value) {
          newErrors[name] = "Vehicle type is required."
        } else {
          delete newErrors[name]
        }
        break
    }
    setErrors(newErrors)
  }

  // Handles file uploads
  const handleFileChange = (event) => {
    const { name, files } = event.target
    if (files && files.length > 0) {
      const file = files[0]
      setFormData((prev) => ({ ...prev, [name]: file }))

      const reader = new FileReader()
      if (name === "photo") {
        reader.onload = (e) => setImagePreview(e.target.result)
        reader.readAsDataURL(file)
        setFileName(file.name)
      } else if (name === "image_carte_etudiant") {
        reader.onload = (e) => setStudentCardPreview(e.target.result)
        reader.readAsDataURL(file)
        const newErrors = { ...errors }
        delete newErrors.image_carte_etudiant
        setErrors(newErrors)
      }
    }
  }

  // Form submission
  const handleSubmit = async (e) => {
    e.preventDefault()
    if (!validateFields()) {
      return
    }

    const data = new FormData()
    data.append("name", formData.name)
    data.append("email", formData.email)
    data.append("phone", formData.phone)
    data.append("address", formData.address)
    data.append("age", formData.age)
    data.append("sexe", formData.sexe)
    data.append("num_cin", formData.num_cin)
    data.append("id_fiscale", formData.id_fiscale)
    data.append("type", formData.type)
    data.append("taxReference", formData.taxReference)
    data.append("vehiculeType", formData.vehiculeType)

    if (formData.photo instanceof File) {
      data.append("photo", formData.photo)
    } else if (formData.photo) {
      data.append("photo", formData.photo)
    }
    if (role === "student" && formData.image_carte_etudiant instanceof File) {
      data.append("image_carte_etudiant", formData.image_carte_etudiant)
    } else if (role === "student" && formData.image_carte_etudiant) {
      data.append("image_carte_etudiant", formData.image_carte_etudiant)
    }

    try {
      await updateUser(authUserId, data)
      navigate("/profile")
    } catch (error) {
      console.error("Error updating profile:", error)
      alert("Error occurred while updating. Please try again.")
    }
  }

  return (
    <>
      <Navbar />
      <div className="editprofile-container rounded bg-white mt-5 mb-5">
        <div className="editprofile-profile-image-container">
          <img src={imagePreview || profilePhotoUrl} className="editprofile-profile-image" alt="Profile Preview" />
          <label htmlFor="file-upload-photo" className="editprofile-photo-icon" title="Change Photo">
            <FaCamera style={{ fontSize: "18px", color: "white" }} />
          </label>
          <input
            id="file-upload-photo"
            type="file"
            name="photo"
            accept="image/*"
            onChange={handleFileChange}
            style={{ display: "none" }}
          />
          <br />
          <span className="editprofile-font-weight-bold">{formData.name || "User Name"}</span>
          <br />
          <span className="editprofile-text-black-50">{formData.email || "email@example.com"}</span>
        </div>

        <div>
          <h2 className="editprofile-text-right" style={{ marginTop: "70px", color: "#71a63f" }}>
            Profile Settings
          </h2>
          <form onSubmit={handleSubmit}>
            {/* Common fields */}
            <div className="editprofile-row">
              <div className="col-md-6 login-input-block">
                <input
                  type="text"
                  className={`login-input ${errors.name ? "error" : ""}`}
                  name="name"
                  value={formData.name}
                  onChange={handleChange}
                  required
                  placeholder=" "
                />
                <label className="login-label">Name</label>
                {errors.name && <div className="error-field">{errors.name}</div>}
              </div>
              <div className="col-md-6 login-input-block">
                <input
                  type="email"
                  className={`login-input ${errors.email ? "error" : ""}`}
                  name="email"
                  value={formData.email}
                  onChange={handleChange}
                  required
                  placeholder=" "
                />
                <label className="login-label">Email</label>
                {errors.email && <div className="error-field">{errors.email}</div>}
              </div>
            </div>

            <div className="editprofile-row">
              <div className="col-md-6 login-input-block">
                <input
                  type="number"
                  className={`login-input ${errors.phone ? "error" : ""}`}
                  name="phone"
                  value={formData.phone}
                  onChange={handleChange}
                  required
                  placeholder=" "
                />
                <label className="login-label">Phone Number</label>
                {errors.phone && <div className="error-field">{errors.phone}</div>}
              </div>
              <div className="col-md-6 login-input-block">
                <input
                  type="text"
                  className={`login-input ${errors.address ? "error" : ""}`}
                  name="address"
                  value={formData.address}
                  onChange={handleChange}
                  required
                  placeholder=" "
                />
                <label className="login-label">Address</label>
                {errors.address && <div className="error-field">{errors.address}</div>}
              </div>
            </div>

            {/* Role-specific fields */}
            {role === "student" && (
              <>
                <div className="editprofile-row">
                  <div className="col-md-6 login-input-block">
                    <select
                      className={`login-input ${errors.sexe ? "error" : ""}`}
                      name="sexe"
                      value={formData.sexe}
                      onChange={handleChange}
                      required
                    >
                      <option value="">Select Gender</option>
                      <option value="male">Male</option>
                      <option value="female">Female</option>
                      <option value="other">Other</option>
                    </select>
                    <label className="login-label">Gender</label>
                    {errors.sexe && <div className="error-field">{errors.sexe}</div>}
                  </div>
                  <div className="col-md-6 login-input-block">
                    <input
                      type="number"
                      className={`login-input ${errors.age ? "error" : ""}`}
                      name="age"
                      value={formData.age}
                      onChange={handleChange}
                      required
                      placeholder=" "
                    />
                    <label className="login-label">Age</label>
                    {errors.age && <div className="error-field">{errors.age}</div>}
                  </div>
                </div>
                <div className="editprofile-row">
                  <div className="col-md-6 login-input-block">
                    <input
                      type="text"
                      className={`login-input ${errors.num_cin ? "error" : ""}`}
                      name="num_cin"
                      value={formData.num_cin}
                      onChange={handleChange}
                      required
                      placeholder=" "
                    />
                    <label className="login-label">CIN Number</label>
                    {errors.num_cin && <div className="error-field">{errors.num_cin}</div>}
                  </div>
                </div>
                <div className="row3">
                  <div className="col-md-6 login-input-block">
                    <label htmlFor="file-upload-student" className="custom-file-upload">
                      <img src={upload} alt="upload" style={{ width: "20px", height: "10px", color: "gray" }} />
                      Choose Student Card Image
                    </label>
                    <input
                      id="file-upload-student"
                      type="file"
                      name="image_carte_etudiant"
                      onChange={handleFileChange}
                      required
                    />
                    {formData.image_carte_etudiant && typeof formData.image_carte_etudiant === "object" && (
                      <div className="file-name">
                        <p>{formData.image_carte_etudiant.name}</p>
                      </div>
                    )}
                    {(studentCardPreview || (typeof formData.image_carte_etudiant === "string" && formData.image_carte_etudiant)) && (
                      <div className="student-card-preview" style={{ marginTop: "10px" }}>
                        <img
                          src={studentCardPreview || `http://localhost:3000/${formData.image_carte_etudiant}`}
                          alt="Student Card Preview"
                          style={{ width: "200px", height: "auto", border: "1px solid #ccc", borderRadius: "5px" }}
                        />
                      </div>
                    )}
                    {errors.image_carte_etudiant && (
                      <div className="error-field">{errors.image_carte_etudiant}</div>
                    )}
                  </div>
                </div>
              </>
            )}

            {role === "ong" && (
              <>
                <div className="editprofile-row">
                  <div className="col-md-6 login-input-block">
                    <input
                      type="text"
                      className={`login-input ${errors.id_fiscale ? "error" : ""}`}
                      name="id_fiscale"
                      value={formData.id_fiscale}
                      onChange={handleChange}
                      required
                      placeholder=" "
                    />
                    <label className="login-label">Fiscal ID</label>
                    {errors.id_fiscale && <div className="error-field">{errors.id_fiscale}</div>}
                  </div>
                  <div className="col-md-6 login-input-block" style={{ marginLeft: "-22px" }}>
                    <select
                      className={`login-input ${errors.type ? "error" : ""}`}
                      name="type"
                      value={formData.type}
                      onChange={handleChange}
                      required
                    >
                      <option value="">Select ONG Type</option>
                      <option value="advocacy">Advocacy</option>
                      <option value="operational">Operational</option>
                      <option value="charitable">Charitable</option>
                      <option value="development">Development</option>
                      <option value="environmental">Environmental</option>
                      <option value="human-rights">Human Rights</option>
                      <option value="relief">Relief</option>
                      <option value="research">Research</option>
                      <option value="philanthropic">Philanthropic</option>
                      <option value="social_welfare">Social Welfare</option>
                      <option value="cultural">Cultural</option>
                      <option value="faith_based">Faith Based</option>
                    </select>
                    <label className="login-label">ONG Type</label>
                    {errors.type && <div className="error-field">{errors.type}</div>}
                  </div>
                </div>
              </>
            )}

            {(role === "restaurant" || role === "supermarket") && (
              <div className="editprofile-row">
                <div className="col-md-6 login-input-block">
                  <input
                    type="text"
                    className={`login-input ${errors.taxReference ? "error" : ""}`}
                    name="taxReference"
                    value={formData.taxReference}
                    onChange={handleChange}
                    required
                    placeholder=" "
                  />
                  <label className="login-label">Tax Reference</label>
                  {errors.taxReference && <div className="error-field">{errors.taxReference}</div>}
                </div>
              </div>
            )}

            {role === "transporter" && (
              <div className="editprofile-row">
                <div className="col-md-6 login-input-block">
                  <select
                    className={`login-input ${errors.vehiculeType ? "error" : ""}`}
                    name="vehiculeType"
                    value={formData.vehiculeType}
                    onChange={handleChange}
                    required
                  >
                    <option value="">Select Vehicle Type</option>
                    <option value="car">Car</option>
                    <option value="motorbike">Motorbike</option>
                    <option value="bicycle">Bicycle</option>
                    <option value="van">Van</option>
                    <option value="truck">Truck</option>
                    <option value="scooter">Scooter</option>
                  </select>
                  <label className="login-label">Vehicle Type</label>
                  {errors.vehiculeType && <div className="error-field">{errors.vehiculeType}</div>}
                </div>
              </div>
            )}

            <div className="text-center">
              <button className="btn login-button" type="submit">
                Save Profile
              </button>
            </div>
          </form>
        </div>
      </div>
      <br />
      <br />
      <Footer />
    </>
  )
}

export default EditProfile
</file>

<file path="sustainafood-frontend/src/pages/Home.jsx">
// Home.jsx
import React from 'react';
import styled, { createGlobalStyle, keyframes } from 'styled-components';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import donation1 from '../assets/images/donation1.jpg';
import donation2 from '../assets/images/donation2.jpg';
import donation3 from '../assets/images/donation3.jpg';
import { useAuth } from "../contexts/AuthContext";

// Replace this with the actual path to your background pattern image:
import patternBg from '../assets/images/bg.png';

const GlobalStyle = createGlobalStyle`
  body {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    background: #f0f8f0;
    box-sizing: border-box;
  }
`;

const fade = keyframes`
  0% { opacity: 0; }
  8% { opacity: 1; }
  33% { opacity: 1; }
  41% { opacity: 0; }
  100% { opacity: 0; }
`;

const HomeContainer = styled.div`
  display: flex;
  flex-direction: column;
  gap: 60px;
`;

/* ===== HERO SECTION ===== */
const HeroSection = styled.section`
  position: relative;
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: space-between;
  padding: 60px 80px;
  gap: 30px;

  /* 
    1) We set the pattern image to repeat. 
    2) We apply a semi-transparent overlay for readability.
    3) You can adjust background-size depending on your pattern's scale.
  */
  background: 
    linear-gradient(rgba(230, 242, 230, 0.85), rgba(230, 242, 230, 0.85)),
    url(${patternBg}) repeat center center;
  background-size: 200px 200px; 
  overflow: hidden; /* So the wave is contained properly */
`;

const HeroText = styled.div`
  flex: 1 1 500px;
  z-index: 2; /* Make sure text stays above the wave */
  h1 {
    font-size: 48px;
    color: #228b22;
    margin-bottom: 20px;
  }
  p {
    font-size: 20px;
    color: #555;
    margin-bottom: 30px;
    line-height: 1.5;
  }
`;

const CallToAction = styled.a`
  display: inline-block;
  padding: 16px 32px;
  font-size: 18px;
  background: #228b22;
  color: white;
  border-radius: 30px;
  text-decoration: none;
  transition: background 0.3s;
  &:hover {
    background: #56ab2f;
  }
`;

const SliderContainer = styled.div`
  position: relative;
  flex: 1 1 500px;
  width: 100%;
  height: 400px;
  border-radius: 20px;
  overflow: hidden;
  z-index: 2; /* Above the wave shape */
`;

const SlideImage = styled.img`
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 20px;
  box-shadow: rgba(133, 189, 150, 0.3) 0px 15px 25px -5px;
  opacity: 0;
  animation: ${fade} 12s infinite;
  animation-fill-mode: forwards;
`;

const Slide1 = styled(SlideImage)`
  animation-delay: 0s;
`;
const Slide2 = styled(SlideImage)`
  animation-delay: 4s;
`;
const Slide3 = styled(SlideImage)`
  animation-delay: 8s;
`;

/* ===== WAVE SHAPE ===== */
const Wave = styled.svg`
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: auto;
  z-index: 1; /* Behind text and slider, but above background */
`;

/* ===== FEATURES SECTION ===== */
const SectionWrapper = styled.section`
  padding: 60px 80px;
  background: ${props => props.bgColor || '#fff'};
  text-align: ${props => props.align || 'center'};
`;

const SectionTitle = styled.h2`
  font-size: 36px;
  color: #228b22;
  margin-bottom: 40px;
`;

const FeaturesGrid = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 30px;
  justify-content: center;
`;

const FeatureCard = styled.div`
  background: #f9fff9;
  border-radius: 15px;
  box-shadow: rgba(0, 0, 0, 0.05) 0px 4px 12px;
  padding: 20px;
  flex: 1 1 250px;
  max-width: 300px;
  h3 {
    font-size: 24px;
    color: #228b22;
    margin-bottom: 10px;
  }
  p {
    font-size: 16px;
    color: #555;
    line-height: 1.4;
  }
`;

/* ===== PROPOSED SOLUTION SECTION ===== */
const ProposedSolutionList = styled.ul`
  list-style: disc;
  margin-left: 40px;
  font-size: 18px;
  color: #555;
  li {
    margin-bottom: 10px;
    line-height: 1.6;
  }
`;

const Home = () => {
  const { user: authUser, token, logout } = useAuth();

  return (
    <>
      <GlobalStyle />
      <Navbar />
      <HomeContainer>
        {/* Hero Section */}
        <HeroSection>
          <HeroText>
            <h1>Welcome to SustainaFood</h1>
            <p>
              Connecting donors, recipients, and transporters to reduce food waste and bring help where it's needed.
            </p>
            {!authUser && <CallToAction href="/signup">Join Us Today</CallToAction>}
          </HeroText>
          <SliderContainer>
            <Slide1 src={donation1} alt="Donation 1" />
            <Slide2 src={donation2} alt="Donation 2" />
            <Slide3 src={donation3} alt="Donation 3" />
          </SliderContainer>

          {/* Decorative Wave at the bottom of Hero */}
          <Wave viewBox="0 0 1440 320">
            <path
              fill="#f0f8f0"
              fillOpacity="1"
              d="M0,96L30,90C60,85,120,75,180,64C240,53,300,43,360,64C420,85,480,139,540,170.7C600,203,660,213,720,224C780,235,840,245,900,240C960,235,1020,213,1080,181.3C1140,149,1200,107,1260,112C1320,117,1380,171,1410,197.3L1440,224L1440,320L1410,320C1380,320,1320,320,1260,320C1200,320,1140,320,1080,320C1020,320,960,320,900,320C840,320,780,320,720,320C660,320,600,320,540,320C480,320,420,320,360,320C300,320,240,320,180,320C120,320,60,320,30,320L0,320Z"
            />
          </Wave>
        </HeroSection>

        {/* Features Section */}
        <SectionWrapper>
          <SectionTitle>Our Key Features</SectionTitle>
          <FeaturesGrid>
            <FeatureCard>
              <h3>User Management</h3>
              <p>Seamlessly register, authenticate, and manage your profile.</p>
            </FeatureCard>
            <FeatureCard>
              <h3>Food Donation Management</h3>
              <p>Donate, track, and manage food donations easily.</p>
            </FeatureCard>
            <FeatureCard>
              <h3>Logistics & AI Routing</h3>
              <p>Efficiently schedule and optimize deliveries with AI.</p>
            </FeatureCard>
            <FeatureCard>
              <h3>Notifications & Feedback</h3>
              <p>Stay updated with real-time notifications and provide feedback.</p>
            </FeatureCard>
          </FeaturesGrid>
        </SectionWrapper>

        {/* Proposed Solution Section */}
        <SectionWrapper bgColor="#e8f5e9" align="left">
          <SectionTitle>Our Proposed Solution</SectionTitle>
          <ProposedSolutionList>
            <li>
              <strong>Real-time Analytics:</strong> Track the impact of actions and adjust strategies as needed.
            </li>
            <li>
              <strong>Free Services for All Stakeholders:</strong> Completely free services for NGOs, partner companies, and other stakeholders.
            </li>
            <li>
              <strong>Artificial Intelligence:</strong> Optimize routes and stock management to reduce logistics costs and improve efficiency.
            </li>
            <li>
              <strong>Gamification:</strong> Reward both consumers and merchants to encourage active participation.
            </li>
            <li>
              <strong>Awareness Campaign:</strong> Collaborate with local associations to expand the partner network and maximize national impact.
            </li>
          </ProposedSolutionList>
          <p
            style={{
              fontSize: '18px',
              color: '#555',
              marginTop: '20px',
              lineHeight: '1.6'
            }}
          >
            In summary, SustainaFood offers a flexible, intelligent, and scalable solution to effectively combat food waste in Tunisia.
          </p>
        </SectionWrapper>
      </HomeContainer>
      <Footer />
    </>
  );
};

export default Home;
</file>

<file path="sustainafood-frontend/src/pages/MyDonationsList.jsx">
import React, { useEffect, useState } from 'react';
import { getDonationByUserId } from "../api/donationService";
import { useAuth } from "../contexts/AuthContext";
import Composantdonation from "../components/Composantdonation";
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import styled, { createGlobalStyle } from 'styled-components';
import { FaSearch, FaFilter } from "react-icons/fa";

const GlobalStyle = createGlobalStyle`
  body {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    background: #f0f8f0;
    box-sizing: border-box;
  }
`;

const Container = styled.div`
  padding: 40px 60px;
  text-align: center;
`;

const Title = styled.h1`
  color: #228b22;
  font-size: 40px;
  margin-bottom: 20px;
`;

const SearchContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  background: white;
  padding: 8px;
  border-radius: 25px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  width: 320px;
  margin: auto;
  transition: all 0.3s ease-in-out;

  &:hover {
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }
`;

const SearchIcon = styled(FaSearch)`
  color: #555;
  margin-right: 8px;
`;

const SearchInput = styled.input`
  border: none;
  outline: none;
  font-size: 16px;
  width: 100%;
  padding: 8px;
  background: transparent;
`;

const Controls = styled.div`
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 15px;
  margin: 20px 0;
`;

const FilterIcon = styled(FaFilter)`
  margin-right: 8px;
`;

const Select = styled.select`
  padding: 10px;
  font-size: 16px;
  border-radius: 25px;
  border: 1px solid #ccc;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  transition: 0.3s;
  cursor: pointer;
  background: white;
  color: #333;
  font-weight: bold;

  &:hover {
    border-color: #228b22;
    transform: scale(1.05);
  }
`;

const ContentList = styled.div`
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 20px;
`;

const LoadingMessage = styled.div`
  font-size: 18px;
  color: #555;
`;

const NoDonations = styled.p`
  font-size: 18px;
  color: #888;
`;

const PaginationControls = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  gap: 10px;

  button {
    padding: 10px 20px;
    font-size: 16px;
    background: #228b22;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s;

    &:hover {
      background: #56ab2f;
    }

    &:disabled {
      background: #ccc;
      cursor: not-allowed;
    }
  }

  span {
    font-size: 16px;
    color: #333;
  }
`;

export default function MyDonationsList() {
  const [donations, setDonations] = useState([]);
  const [filteredDonations, setFilteredDonations] = useState([]);
  const [loading, setLoading] = useState(true);
  const { user: authUser } = useAuth();
  const user = JSON.parse(localStorage.getItem('user'));
  const userid = user ? (user._id || user.id) : null; 
  const [searchQuery, setSearchQuery] = useState("");
  const [sortOption, setSortOption] = useState("date");
  const [statusFilter, setStatusFilter] = useState("all");
  const [categoryFilter, setCategoryFilter] = useState("all");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(6); // Adjust this number as needed

  // Fetch donations
  useEffect(() => {
    const fetchDonations = async () => {
      if (!userid) {
        setError('User ID not found');
        setLoading(false);
        return;
      }

      try {
        const response = await getDonationByUserId(userid);
        setDonations(response.data);
      } catch (err) {
        setError(err.response?.data?.message || 'Error fetching donation data');
      } finally {
        setLoading(false);
      }
    };

    fetchDonations();
  }, [userid]);


  useEffect(() => {
    let updatedDonations = [...donations];

    if (searchQuery) {
      updatedDonations = updatedDonations.filter((donation) =>
        donation.title.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    if (statusFilter !== "all") {
      updatedDonations = updatedDonations.filter((donation) => donation.status === statusFilter);
    }

    if (categoryFilter !== "all") {
      updatedDonations = updatedDonations.filter((donation) => donation.category === categoryFilter);
    }

    updatedDonations.sort((a, b) => {
      if (sortOption === "title") {
        return a.title.localeCompare(b.title);
      } else if (sortOption === "status") {
        return a.status.localeCompare(b.status);
      } else {
        return new Date(a.expirationDate) - new Date(b.expirationDate);
      }
    });

    setFilteredDonations(updatedDonations);
    setCurrentPage(1); // Reset to page 1 when filters change
  }, [searchQuery, sortOption, statusFilter, categoryFilter, donations]);

  // Pagination logic
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentDonations = filteredDonations.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(filteredDonations.length / itemsPerPage);

  return (
    <>
      <GlobalStyle />
      <Navbar />
      <Container>
        <Title>My Donations</Title>

        {/* 🔍 Stylish Search Bar */}
        <SearchContainer>
          <SearchIcon />
          <SearchInput
            type="text"
            placeholder="Search donations..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </SearchContainer>

        {/* 🎯 Advanced Filters & Sorting */}
        <Controls>
          <Select value={sortOption} onChange={(e) => setSortOption(e.target.value)}>
            <option value="date">📆 Sort by Expiration Date</option>
            <option value="title">🔠 Sort by Title</option>
            <option value="status">🔄 Sort by Status</option>
          </Select>

          <Select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>
            <option value="all">🟢 All Statuses</option>
            <option value="pending">🕒 Pending</option>
            <option value="approved">✅ Accepted</option>
            <option value="rejected">❌ Rejected</option>
          </Select>

          <Select value={categoryFilter} onChange={(e) => setCategoryFilter(e.target.value)}>
            <option value="all">📦 All Categories</option>
            <option value="prepared_meals">🍽️ Prepared Meals</option>
            <option value="packaged_products">🛒 Packaged Products</option>
          </Select>
        </Controls>

        {/* 🔄 Display Donations */}
        <ContentList>
          {loading ? (
            <LoadingMessage>Loading...</LoadingMessage>
          ) : currentDonations.length > 0 ? (
            currentDonations.map((donationItem) => (
              <Composantdonation key={donationItem._id} donation={donationItem} />
            ))
          ) : (
            <NoDonations>No matching donations found.</NoDonations>
          )}
        </ContentList>

        {/* Pagination Controls */}
        <PaginationControls>
          <button
            onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
            disabled={currentPage === 1}
          >
            Previous
          </button>
          <span>Page {currentPage} of {totalPages}</span>
          <button
            onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}
            disabled={currentPage === totalPages}
          >
            Next
          </button>
        </PaginationControls>
      </Container>
      <Footer />
    </>
  );
}
</file>

<file path="sustainafood-frontend/src/pages/Not-Found.jsx">
import { Link } from "react-router-dom"
import Navbar from "../components/Navbar" // Import the Navbar component
import Footer from "../components/Footer" // Import the Footer component
import "../assets/styles/Notfound.css" // Import the styles for the NotFound page

const NotFound = () => {
    return (
      <div className="notfound-container">
        <Navbar />
  
        <div className="notfound-content">
          <div className="notfound-card">
            <div className="notfound-icon-container">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="notfound-icon"
              >
                <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path>
                <path d="M12 8v4"></path>
                <path d="M12 16h.01"></path>
              </svg>
            </div>
  
            <h1 className="notfound-title">404</h1>
            <h2 className="notfound-subtitle">Page Not Found</h2>
  
            <p className="notfound-message">
              We couldn't find the page you're looking for. The page might have been moved, deleted, or never existed.
            </p>
  
            <div className="notfound-actions">
              <Link to="/" className="notfound-btn notfound-btn-primary">
                Return Home
              </Link>
              <Link to="/contact" className="notfound-btn notfound-btn-secondary">
                Contact Support
              </Link>
            </div>
          </div>
        </div>
  
        <Footer />
      </div>
    )
  }
  
  export default NotFound
</file>

<file path="sustainafood-frontend/src/pages/Profile.jsx">
import { useEffect, useState } from 'react';
import '../assets/styles/Profile.css';
import pdp from '../assets/images/pdp.png';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import edit from '../assets/images/edit.png';
import { Link, useNavigate } from 'react-router-dom';
import { getUserById } from "../api/userService";
import { useAuth } from "../contexts/AuthContext";
import RoleSpecificProfile from '../components/RoleSpecificProfile';
import dhiaphoto from '../assets/images/dhiaphoto.png';
import assilphoto from '../assets/images/assilphoto.png';
const Profile = () => {
  const navigate = useNavigate();
  const { user: authUser, token, clearWelcomeMessage } = useAuth(); // Add clearWelcomeMessage
  const [user, setUser] = useState(authUser);
  const [error, setError] = useState("");
  const [welcomeMessage, setWelcomeMessage] = useState(authUser?.welcomeMessage || "");

  const profilePhotoUrl = user?.photo ? `http://localhost:3000/${user.photo}` : pdp;

  useEffect(() => {
    const fetchUser = async () => {
      if (typeof authUser.id === "number") {
        if (!authUser || !authUser._id) return;
        try {
          const response = await getUserById(authUser._id);
          setUser(response.data);
        } catch (error) {
          console.error("Backend Error:", error);
        }
      }
      else if (typeof authUser.id === "string") {
        if (!authUser || !authUser.id) return;
        try {
          const response = await getUserById(authUser.id);
          setUser(response.data);
        } catch (error) {
          console.error("Backend Error:", error);
        }
      }
    };

    if (authUser && (authUser._id || authUser.id)) {
      fetchUser();
    }
  }, [authUser]);
  

  useEffect(() => {
    if (welcomeMessage) {
      // Display the message for 5 seconds
      const timer = setTimeout(() => {
        setWelcomeMessage(""); // Clear the local state
        clearWelcomeMessage(); // Clear the message from the context
      }, 5000);

      return () => clearTimeout(timer); // Cleanup the timer
    }
  }, [welcomeMessage, clearWelcomeMessage]);
  

  return (
    <>
      <Navbar />
      <div className="container-profile">
      {welcomeMessage && (
        <div className="welcome-message">
          <div className="welcome-message-content">
            <div className="welcome-icon">🎉</div>
            <span>{welcomeMessage}</span>
          </div>
          <div className="confetti-container">
            {Array.from({ length: 20 }).map((_, i) => (
              <div
                key={i}
                className={`confetti confetti-${i % 5}`}
                style={{
                  left: `${Math.random() * 100}%`,
                  animationDelay: `${Math.random() * 3}s`,
                  animationDuration: `${3 + Math.random() * 2}s`,
                }}
              ></div>
            ))}
          </div>
        </div>
      )}
        <header>
          <div className="profile-header">
            <h1>My Profile</h1>
            <div className="date-switcher">
              <button className='btnProfile'>
                <Link to="/edit-profile">
                  <img style={{ marginRight: '8px', marginTop: '6px' }} width="18px" src={edit} alt="Edit Profile" />
                </Link>
                Edit
              </button>
            </div>
          </div>
        </header>

        <div className="main">
          <div className="left-column">
            <div className="profile-card">
              <div className="card-white ">
                <button className="mail">
                  {/*  <svg xmlns="http://www.w3.org/2000/svg" width={24} height={24} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth={2} strokeLinecap="round" strokeLinejoin="round">
                    <rect width={20} height={16} x={2} y={4} rx={2} />
                    <path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" />
                  </svg>*/}
                </button>
                <div className="profile-pic">
                  <img src={profilePhotoUrl} alt="Profile" />
                </div>
                <div className="bottom">
                  <div className="content">
                    <span className="name">Description</span>
                    <span className="about-me">
                      Lorem ipsum dolor sit amet consectetur adipisicinFcls Lorem ipsum dolor sit amet consectetur adipisicinFcls
                    </span>
                  </div>
                  <div className="bottom-bottom">
                    <h1 className='userrole'>
                      {user?.role || 'Loading...'}
                    </h1>
                    {/* <button className="button">Contact Me</button> */}
                  </div>
                </div>
              </div>
            </div>

            <div className="detailed-info">
              <h3>Detailed Information</h3>
              <ul>
                <li><strong>Name:</strong> {user?.name || 'Loading...'}</li>
                <li><strong>Email Address:</strong> {user?.email || 'Loading...'}</li>
                <li><strong>Phone:</strong> {user?.phone || 'Loading...'}</li>
                <li><strong>Address:</strong> {user?.address || 'Loading...'}</li>
              </ul>
            </div>
          </div>

          <div className="center-column">
            {/* Affichage personnalisé en fonction du rôle */}
            <RoleSpecificProfile user={user} />
          </div>

          <div className="right-column">

            <div >

              <div className="winner-cards">
                <div className="winner-outlinePage">
                  <svg
                    className="winner-icon winner-trophy"
                    viewBox="0 0 1024 1024"
                    version="1.1"
                    xmlns="http://www.w3.org/2000/svg"
                    width="160"
                    height="160"
                  >
                    <path
                      d="M469.333333 682.666667h85.333334v128h-85.333334zM435.2 810.666667h153.6c4.693333 0 8.533333 3.84 8.533333 8.533333v34.133333h-170.666666v-34.133333c0-4.693333 3.84-8.533333 8.533333-8.533333z"
                      fill="#ea9518"
                      data-spm-anchor-id="a313x.search_index.0.i10.40193a81WcxQiT"
                      className=""
                    ></path>
                    <path
                      d="M384 853.333333h256a42.666667 42.666667 0 0 1 42.666667 42.666667v42.666667H341.333333v-42.666667a42.666667 42.666667 0 0 1 42.666667-42.666667z"
                      fill="#6e4a32"
                      data-spm-anchor-id="a313x.search_index.0.i1.40193a81WcxQiT"
                      className=""
                    ></path>
                    <path
                      d="M213.333333 256v85.333333a42.666667 42.666667 0 0 0 85.333334 0V256H213.333333zM170.666667 213.333333h170.666666v128a85.333333 85.333333 0 1 1-170.666666 0V213.333333zM725.333333 256v85.333333a42.666667 42.666667 0 0 0 85.333334 0V256h-85.333334z m-42.666666-42.666667h170.666666v128a85.333333 85.333333 0 1 1-170.666666 0V213.333333z"
                      fill="#f4ea2a"
                      data-spm-anchor-id="a313x.search_index.0.i9.40193a81WcxQiT"
                      className=""
                    ></path>
                    <path
                      d="M298.666667 85.333333h426.666666a42.666667 42.666667 0 0 1 42.666667 42.666667v341.333333a256 256 0 1 1-512 0V128a42.666667 42.666667 0 0 1 42.666667-42.666667z"
                      fill="#f2be45"
                      data-spm-anchor-id="a313x.search_index.0.i5.40193a81WcxQiT"
                      className=""
                    ></path>
                    <path
                      d="M512 469.333333l-100.309333 52.736 19.157333-111.701333-81.152-79.104 112.128-16.298667L512 213.333333l50.176 101.632 112.128 16.298667-81.152 79.104 19.157333 111.701333z"
                      fill="#FFF2A0"
                    ></path>
                  </svg>
                  <p className="winner-ranking_number">1<span className="winner-ranking_word">st</span></p>
                  <div className="winner-splitLine"></div>
                  <svg
                    className="winner-icon winner-userAvatar"
                    viewBox="0 0 1024 1024"
                    version="1.1"
                    xmlns="http://www.w3.org/2000/svg"
                    width="25"
                    height="25"
                  >
                    <path
                      d="M512 0C228.693 0 0 228.693 0 512s228.693 512 512 512 512-228.693 512-512S795.307 0 512 0z m0 69.973c244.053 0 442.027 197.973 442.027 442.027 0 87.04-25.6 168.96-69.973 237.227-73.387-78.507-170.667-133.12-281.6-151.893 69.973-34.133 119.467-105.813 119.467-187.733 0-116.053-93.867-209.92-209.92-209.92s-209.92 93.867-209.92 209.92c0 83.627 47.787 155.307 119.467 187.733-110.933 20.48-208.213 75.093-281.6 153.6-44.373-68.267-69.973-150.187-69.973-238.933 0-244.053 197.973-442.027 442.027-442.027z"
                      fill="#8a8a8a"
                    ></path>
                  </svg>
                  <p className="winner-userName">{user?.name || 'Loading...'}</p>
                </div>
                <div className="winner-detailPage">
                  <svg
                    className="winner-icon winner-medals winner-slide-in-top"
                    viewBox="0 0 1024 1024"
                    version="1.1"
                    xmlns="http://www.w3.org/2000/svg"
                    width="80"
                    height="80"
                  >
                    <path
                      d="M896 42.666667h-128l-170.666667 213.333333h128z"
                      fill="#FF4C4C"
                    ></path>
                    <path
                      d="M768 42.666667h-128l-170.666667 213.333333h128z"
                      fill="#3B8CFF"
                    ></path>
                    <path d="M640 42.666667h-128L341.333333 256h128z" fill="#F1F1F1"></path>
                    <path
                      d="M128 42.666667h128l170.666667 213.333333H298.666667z"
                      fill="#FF4C4C"
                    ></path>
                    <path
                      d="M256 42.666667h128l170.666667 213.333333h-128z"
                      fill="#3B8CFF"
                    ></path>
                    <path
                      d="M384 42.666667h128l170.666667 213.333333h-128z"
                      fill="#FBFBFB"
                    ></path>
                    <path
                      d="M298.666667 256h426.666666v213.333333H298.666667z"
                      fill="#E3A815"
                    ></path>
                    <path
                      d="M512 661.333333m-320 0a320 320 0 1 0 640 0 320 320 0 1 0-640 0Z"
                      fill="#FDDC3A"
                    ></path>
                    <path
                      d="M512 661.333333m-256 0a256 256 0 1 0 512 0 256 256 0 1 0-512 0Z"
                      fill="#E3A815"
                    ></path>
                    <path
                      d="M512 661.333333m-213.333333 0a213.333333 213.333333 0 1 0 426.666666 0 213.333333 213.333333 0 1 0-426.666666 0Z"
                      fill="#F5CF41"
                    ></path>
                    <path
                      d="M277.333333 256h469.333334a21.333333 21.333333 0 0 1 0 42.666667h-469.333334a21.333333 21.333333 0 0 1 0-42.666667z"
                      fill="#D19A0E"
                    ></path>
                    <path
                      d="M277.333333 264.533333a12.8 12.8 0 1 0 0 25.6h469.333334a12.8 12.8 0 1 0 0-25.6h-469.333334z m0-17.066666h469.333334a29.866667 29.866667 0 1 1 0 59.733333h-469.333334a29.866667 29.866667 0 1 1 0-59.733333z"
                      fill="#F9D525"
                    ></path>
                    <path
                      d="M512 746.666667l-100.309333 52.736 19.157333-111.701334-81.152-79.104 112.128-16.298666L512 490.666667l50.176 101.632 112.128 16.298666-81.152 79.104 19.157333 111.701334z"
                      fill="#FFF2A0"
                    ></path>
                  </svg>
                  <div className="winner-gradesBox">
                    <svg
                      className="winner-icon winner-gradesIcon"
                      viewBox="0 0 1024 1024"
                      version="1.1"
                      xmlns="http://www.w3.org/2000/svg"
                      width="60"
                      height="60"
                    >
                      <path
                        d="M382.6 805H242.2c-6.7 0-12.2-5.5-12.2-12.2V434.3c0-6.7 5.5-12.2 12.2-12.2h140.4c6.7 0 12.2 5.5 12.2 12.2v358.6c0 6.6-5.4 12.1-12.2 12.1z"
                        fill="#ea9518"
                        data-spm-anchor-id="a313x.search_index.0.i36.40193a81WcxQiT"
                        className=""
                      ></path>
                      <path
                        d="M591.1 805H450.7c-6.7 0-12.2-5.5-12.2-12.2V254.9c0-6.7 5.5-12.2 12.2-12.2h140.4c6.7 0 12.2 5.5 12.2 12.2v537.9c0 6.7-5.5 12.2-12.2 12.2z"
                        fill="#f2be45"
                        data-spm-anchor-id="a313x.search_index.0.i35.40193a81WcxQiT"
                        className=""
                      ></path>
                      <path
                        d="M804.4 805H663.9c-6.7 0-12.2-5.5-12.2-12.2v-281c0-6.7 5.5-12.2 12.2-12.2h140.4c6.7 0 12.2 5.5 12.2 12.2v281c0.1 6.7-5.4 12.2-12.1 12.2z"
                        fill="#ea9518"
                        data-spm-anchor-id="a313x.search_index.0.i37.40193a81WcxQiT"
                        className=""
                      ></path>
                    </svg>
                    <p className="winner-gradesBoxLabel">SCORE</p>
                    <p className="winner-gradesBoxNum">1105</p>
                  </div>
                </div>
              </div>

            </div>

            <div className="inbox-section">
              <h3>FeedBacks</h3>
              <div className="feedback-cards">
                <div className="feedback-card ">
                  <div className="message ">
                    <div className="message-header feedback-tip">
                      <img src={dhiaphoto} alt="Avatar" />
                      <div>
                        <strong>Borji Dhia </strong>
                        <p>thank you for your donation </p>
                      </div>
                    </div>
                    <span className="time">10:30 AM</span>
                  </div>
                </div>
                <div className="feedback-card " >
                  <div className="message " >
                    <div className="message-header feedback-tip">
                      <img src={dhiaphoto} alt="Avatar" />
                      <div>
                        <strong>BEN REBAH Ahmed</strong>
                        <p>thank you for your donation </p>
                      </div>
                    </div>
                    <span className="time">10:30 AM</span>
                  </div>
                </div>
                <div className="feedback-card " >
                  <div className="message " >
                    <div className="message-header feedback-tip">
                      <img src={assilphoto} alt="Avatar" />
                      <div>
                        <strong>HAMMEMI Assil</strong>
                        <p>thank you for your donation </p>
                      </div>
                    </div>
                    <span className="time">10:30 AM</span>
                  </div>
                </div>
              </div>

            </div>
          </div>
        </div>
      </div>
      <Footer />
    </>
  );
};

export default Profile;
</file>

<file path="sustainafood-frontend/src/pages/Signup.jsx">
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import ReCAPTCHA from "react-google-recaptcha"; // ✅ Import ReCAPTCHA
import "../assets/styles/log.css";
import logo from "../assets/images/LogoCh.png";
import loginImg from "../assets/images/signupCh.png";
import fbimg from "../assets/images/fb.png";
import gglimg from "../assets/images/ggl.jpg";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowLeft } from "@fortawesome/free-solid-svg-icons";
import { signupUser } from "../api/userService";
import { FaEye, FaEyeSlash } from "react-icons/fa"; // Icons for password visibility
import { FaCamera } from "react-icons/fa"; // For the profile photo icon
import styled from "styled-components";

const All = styled.div`
  background-color: #eee;
  border: none;
  color: black;
  padding: 3px 15px;
  margin: 4px 0;
  width: 100%;
`;

const StyledWrapper = styled.div`
  /* Button styling for the plus button */
  .plusButton {
    --plus_sideLength: 2.5rem;
    --plus_topRightTriangleSideLength: 0.9rem;
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    border: 1px solid white;
    width: var(--plus_sideLength);
    height: var(--plus_sideLength);
    background-color: #8dc73f;
    overflow: hidden;
  }
  .plusButton::before {
    position: absolute;
    content: "";
    top: 0;
    right: 0;
    width: 0;
    height: 0;
    border-width: 0 var(--plus_topRightTriangleSideLength) var(--plus_topRightTriangleSideLength) 0;
    border-style: solid;
    border-color: transparent white transparent transparent;
    transition-timing-function: ease-in-out;
    transition-duration: 0.2s;
  }
  .plusButton:hover {
    cursor: pointer;
  }
  .plusButton:hover::before {
    --plus_topRightTriangleSideLength: calc(var(--plus_sideLength) * 2);
  }
  .plusButton:focus-visible::before {
    --plus_topRightTriangleSideLength: calc(var(--plus_sideLength) * 2);
  }
  .plusButton > .plusIcon {
    fill: white;
    width: calc(var(--plus_sideLength) * 0.5);
    height: calc(var(--plus_sideLength) * 0.5);
    z-index: 1;
    transition-timing-function: ease-in-out;
    transition-duration: 0.2s;
  }
  .plusButton:hover > .plusIcon {
    fill: black;
    transform: rotate(180deg);
  }
  .plusButton:focus-visible > .plusIcon {
    fill: black;
    transform: rotate(180deg);
  }
`;

const HiddenFileInput = styled.input`
  display: none;
`;

const ImagePreview = styled.img`
  width: 30px;
  height: 30px;
  border-radius: 50%;
  object-fit: cover;
  margin-left: 10px;
`;

const Signup = () => {
  const [fileName, setFileName] = useState("");
  const [imagePreview, setImagePreview] = useState(null);
  const [profilePhotoFile, setProfilePhotoFile] = useState(null);

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      setFileName(file.name);
      setProfilePhotoFile(file); // Save the actual file for uploading
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const navigate = useNavigate();
  const [isRightPanelActive, setIsRightPanelActive] = useState(false);

  // Input fields state
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [phone, setPhone] = useState("");
  const [name, setName] = useState("");
  const [address, setAddress] = useState("");
  const [role, setRole] = useState("ong");
  const [error, setError] = useState("");
  const [id_fiscale, setId_fiscale] = useState("");
  const [num_cin, setNum_cin] = useState("");
  const [sexe, setSexe] = useState("male");
  const [age, setAge] = useState("");
  const [taxReference, setTaxReference] = useState("");
  const [vehiculeType, setVehiculeType] = useState("car");
  const [type, setType] = useState("charitable");
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const isOng = role === "ong";
  const isstudent = role === "student";
  const istransporter = role === "transporter";
  const isDonor = role === "supermarket" || role === "restaurant";

  // State for CAPTCHA
  const [captchaValue, setCaptchaValue] = useState(null);

  // State for errors
  const [errors, setErrors] = useState({
    name: "",
    email: "",
    password: "",
    confirmPassword: "",
    phone: "",
    address: "",
    role: "",
    id_fiscale: "",
    num_cin: "",
    sexe: "",
    age: "",
    taxReference: "",
    vehiculeType: "",
    type: "",
  });

  const togglePanel = () => {
    setIsRightPanelActive(!isRightPanelActive);
  };

  const validateFields = () => {
    const newErrors = {};

    if (!name.match(/^[a-zA-Z\s]+$/)) {
      newErrors.name = "Invalid name format";
    }

    if (!email.match(/^\S+@\S+\.\S+$/)) {
      newErrors.email = "Invalid email format";
    }

    if (!password.match(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*\W)[A-Za-z\d\W]+$/)) {
    
      newErrors.password = "Password must include at least one uppercase, one lowercase, one number, and one special character";
    }

    if (password !== confirmPassword) {
      newErrors.confirmPassword = "Passwords do not match";
    }

    if (!phone.match(/^\d{8,15}$/)) {
      newErrors.phone = "Invalid phone number format";
    }

    if (isstudent && !num_cin.match(/^\d{8}$/)) {
      newErrors.num_cin = "Invalid CIN format (must be 8 digits)";
    }

    if (isOng && !id_fiscale.match(/^TN\d{8}$/)) {
      newErrors.id_fiscale = "Invalid NGO fiscal ID format (must be like TN12345678)";
    }

    if (isDonor && !taxReference.match(/^VAT-\d{8}$/)) {
      newErrors.taxReference = "Invalid Tax Reference format (must be like VAT-12345678)";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSignup = async (e) => {
    e.preventDefault();
    setError("");

    if (!validateFields()) {
      return;
    }

    if (!captchaValue) {
      setError("Veuillez valider le reCAPTCHA.");
      return;
    }

    // Create a FormData object and append all fields
    const data = new FormData();
    data.append("email", email);
    data.append("password", password);
    data.append("confirmPassword", confirmPassword);
    data.append("phone", phone);
    data.append("name", name);
    data.append("address", address);
    data.append("role", role);
    if (isOng) {
      data.append("id_fiscale", id_fiscale);
      data.append("type", type);
    }
    if (isstudent) {
      data.append("sexe", sexe);
      data.append("age", age);
      data.append("num_cin", num_cin);
    }
    if (istransporter) {
      data.append("vehiculeType", vehiculeType);
    }
    if (isDonor) {
      data.append("taxReference", taxReference);
    }
    // Append profile photo file if exists
    if (profilePhotoFile) {
      data.append("photo", profilePhotoFile);
    }

    try {
      const response = await signupUser(data);
      console.log("Inscription réussie ");
      navigate("/login");
    } catch (err) {
      setError(err.response?.data?.error || "Erreur d'inscription.");
    }
  };

  return (
    <div className="aa">
      <div className={`signup-container ${isRightPanelActive ? "right-panel-active" : ""}`} id="container">
        <div className="signup-form-container signup-sign-up-container">
          <form className="signup-form" onSubmit={handleSignup}>
            <h1 className="signup-h1">Sign Up</h1>
           

            {/* Input Fields */}
            <input className="signup-input" type="text" placeholder="Name" value={name} onChange={(e) => setName(e.target.value)} required />
            {errors.name && <p className="error-message">{errors.name}</p>}

            <input className="signup-input" type="email" placeholder="Email" value={email} onChange={(e) => setEmail(e.target.value)} required />
            {errors.email && <p className="error-message">{errors.email}</p>}

            <input className="signup-input" type={showPassword ? "text" : "password"} placeholder="Password" value={password} onChange={(e) => setPassword(e.target.value)} required />
            {errors.password && <p className="error-message">{errors.password}</p>}
            <span style={{ marginBottom: "10px" }} className="auth-eye-icon" onClick={() => setShowPassword(!showPassword)}>
              {showPassword ? <FaEyeSlash /> : <FaEye />}
            </span>

            <input className="signup-input" type={showConfirmPassword ? "text" : "password"} placeholder="Confirm Password" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} required />
            {errors.confirmPassword && <p className="error-message">{errors.confirmPassword}</p>}
            <span style={{ marginBottom: "10px" }} className="auth-eye-icon" onClick={() => setShowConfirmPassword(!showConfirmPassword)}>
              {showConfirmPassword ? <FaEyeSlash /> : <FaEye />}
            </span>

            <select className="signup-input" value={role} onChange={(e) => setRole(e.target.value)} required>
              <option value="ong">ONG</option>
              <option value="restaurant">Restaurant</option>
              <option value="supermarket">Supermarket</option>
              <option value="student">Student</option>
              <option value="transporter">Transporter</option>
            </select>

            {/* Profil Photo Upload Section */}
            <All>
              <div style={{ display: "flex", alignItems: "center" }}>
                <HiddenFileInput
                  id="file"
                  type="file"
                  onChange={handleFileChange}
                />
                <div style={{ marginBottom: "9px" }}>
                  <span>Profil photo</span>
                </div>
                <br />
                {imagePreview && <ImagePreview src={imagePreview} alt="Profil" />}
                {fileName && <p>📂 {fileName}</p>}
              </div>
              <StyledWrapper>
                <div
                  tabIndex={0}
                  className="plusButton"
                  style={{ marginLeft: "380px", marginTop: "-21px" }}
                  onClick={() => document.getElementById("file").click()}
                >
                  <svg className="plusIcon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 30 30">
                    <g mask="url(#mask0_21_345)">
                      <path d="M13.75 23.75V16.25H6.25V13.75H13.75V6.25H16.25V13.75H23.75V16.25H16.25V23.75H13.75Z" />
                    </g>
                  </svg>
                </div>
              </StyledWrapper>
            </All>

            {isstudent && (
              <>
                <select className="signup-input" value={sexe} onChange={(e) => setSexe(e.target.value)} required>
                  <option value="male">Men</option>
                  <option value="female">Women</option>
                  <option value="other">OTHER</option>
                </select>
                <input className="signup-input" type="number" placeholder="Age" value={age} onChange={(e) => setAge(e.target.value)} required />
                {errors.age && <p className="error-message">{errors.age}</p>}
                <input className="signup-input" type="text" placeholder="Cin number" value={num_cin} onChange={(e) => setNum_cin(e.target.value)} required />
                {errors.num_cin && <p className="error-message">{errors.num_cin}</p>}
              </>
            )}
            {isOng && (
              <>
                <input className="signup-input" type="text" placeholder="Fiscale id" value={id_fiscale} onChange={(e) => setId_fiscale(e.target.value)} required />
                {errors.id_fiscale && <p className="error-message">{errors.id_fiscale}</p>}
                <select className="signup-input" value={type} onChange={(e) => setType(e.target.value)} required>
                  <option value="advocacy">Advocacy</option>
                  <option value="operational">Operational</option>
                  <option value="charitable">Charitable</option>
                  <option value="development">Development</option>
                  <option value="environmental">Environmental</option>
                  <option value="human-rights">Human-rights</option>
                  <option value="relief">Relief</option>
                  <option value="research">Research</option>
                  <option value="philanthropic">Philanthropic</option>
                  <option value="social_welfare">Social_welfare</option>
                  <option value="cultural">Cultural</option>
                  <option value="faith_based">Faith_based</option>
                </select>
              </>
            )}
            {istransporter && (
              <>
                <select className="signup-input" value={vehiculeType} onChange={(e) => setVehiculeType(e.target.value)} required>
                  <option value="car">CAR</option>
                  <option value="motorbike">MOTORBIKE</option>
                  <option value="bicycle">BICYCLE</option>
                  <option value="van">VAN</option>
                  <option value="truck">TRUCK</option>
                  <option value="scooter">SCOOTER</option>
                </select>
              </>
            )}
            {isDonor && (
              <>
                <input className="signup-input" type="text" placeholder="Tax reference" value={taxReference} onChange={(e) => setTaxReference(e.target.value)} required />
                {errors.taxReference && <p className="error-message">{errors.taxReference}</p>}
              </>
            )}
            <input className="signup-input" type="text" placeholder="Address" value={address} onChange={(e) => setAddress(e.target.value)} required />
            {errors.address && <p className="error-message">{errors.address}</p>}
            <input className="signup-input" type="number" placeholder="Phone Number" value={phone} onChange={(e) => setPhone(e.target.value)} required />
            {errors.phone && <p className="error-message">{errors.phone}</p>}

            {/* ✅ Google reCAPTCHA */}
            <ReCAPTCHA
              sitekey="6LeXoN8qAAAAAHnZcOwetBZ9TfyOl8K_wg7j97hq"
              onChange={(value) => setCaptchaValue(value)}
            />

            {/* Display Errors */}
            {error && <p className="error-message">{error}</p>}

            <button type="submit" className="signup-button">Sign Up</button>

            <div>
              <span style={{ fontSize: "14px", marginLeft: "-230px" }}>
                Already have an account? <a href="/login">Sign In</a>
              </span>
            </div>
          </form>
        </div>

        <div className="signup-form-container signup-sign-in-container">
          <form className="signup-form" action="#">
            <img src={logo} alt="Logo" className="signup-logo" />
            <p className="signup-p">Be a part of a movement to make the world a better place by redistributing surplus food to those who need it.</p>
          </form>
        </div>

        <div className="signup-overlay-container">
          <div className="signup-overlay">
            <div className="signup-overlay-panel signup-overlay-left">
              <img src={loginImg} alt="Logo" className="signup-logo" />
              <button className="signbtn" onClick={togglePanel}>
                <FontAwesomeIcon icon={faArrowLeft} />
              </button>
            </div>
            <div className="signup-overlay-panel signup-overlay-right">
              <h1 className="signup-h1">Join Us Today!</h1>
              <p className="signup-p">Sign up to help us reduce food waste and support your community!</p>
              <button className="signbtn" onClick={togglePanel}>Sign Up</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Signup;
</file>

<file path="sustainafood-frontend/src/PrivateRoute.jsx">
import React from "react";
import { Navigate, Outlet } from "react-router-dom";
import { useAuth } from "./contexts/AuthContext";

const PrivateRoute = ({ roles }) => {
  const { user, token } = useAuth();

  //console.log("User Role:", user?.role || "No user logged in");
  //console.log("Required Roles:", roles);

  // Redirect to login if no JWT token
  if (!token) {
    return <Navigate to="/login" replace />;
  }

  // If roles are required, check if the single user.role is included in that roles array
  if (roles?.length > 0 && !roles.includes(user?.role)) {
    console.warn("Unauthorized access: Redirecting...");
    return <Navigate to="*" replace />;
  }

  return <Outlet />;
};

export default PrivateRoute;
</file>

<file path="sustainafood-backend/.env">
EMAIL_USER=ssustainafood@gmail.com
EMAIL_PASS=itsuaevbthucswoe
TWILIO_ACCOUNT_SID=ACee9d420b131436687493bef16da27157
TWILIO_AUTH_TOKEN=cc06359f84b34e397fd31c247ba9b7bc
TWILIO_VERIFY_SERVICE_SID=VAaf9e604a83fd00670cf97bb6f1f9eb32
JWT_SECRET=a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6
</file>

<file path="sustainafood-backend/Middleware/auth.js">
const jwt = require('jsonwebtoken');
const authMiddleware = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  console.log('Auth Header:', authHeader);
  if (!authHeader) {
    return res.status(401).json({ message: 'Unauthorized - No token provided' });
  }

  const token = authHeader.split(' ')[1];
  console.log('Token:', token);
  if (!token) {
    return res.status(401).json({ message: 'Unauthorized - Invalid token format' });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    console.log('Decoded token:', decoded);
    req.user = decoded;
    next();
  } catch (error) {
    console.error('Token verification error:', error.message);
    return res.status(401).json({ message: 'Unauthorized - Invalid token' });
  }
};
</file>

<file path="sustainafood-backend/routes/donationRoutes.js">
const express = require('express');
const multer = require('multer');
const upload = multer(); // Pour parser les champs sans fichier
const router = express.Router();
const donationController = require('../controllers/donationController');

// ✅ Get all donations
router.get('/', donationController.getAllDonations);

// ✅ Get donation by ID
router.get('/:id', donationController.getDonationById);

// ✅ Get donations by User ID
router.get('/user/:userId', donationController.getDonationsByUserId);

// ✅ Get donations by Date
router.get('/date/:date', donationController.getDonationsByDate);

// ✅ Get donations by Type (donation/request)
router.get('/type/:type', donationController.getDonationsByType);

// ✅ Get donations by Category (Prepared_Meals, Packaged_Products)
router.get('/category/:category', donationController.getDonationsByCategory);

// ✅ Create a new donation (with associated products)
// Ajout de "upload.none()" pour parser les champs du FormData
router.post('/', upload.none(), donationController.createDonation);

// ✅ Update a donation (and update associated products)
router.put('/:id', donationController.updateDonation);

// ✅ Delete a donation (and delete associated products)
router.delete('/:id', donationController.deleteDonation);
router.get('/donations/:requestId',donationController.getDonationByRequestId)

module.exports = router;
</file>

<file path="sustainafood-frontend/src/api/donationTransactionService.js">
// src/api/donationTransactionService.js
import axios from 'axios';
const API_BASE = 'http://localhost:3000/donationTransaction';

// Fetch all donation transactions
export const getAllDonationTransactions = async () => {
    try {
        const response = await axios.get(`${API_BASE}/`);
        console.log("Full API Response (getAllDonationTransactions):", JSON.stringify(response, null, 2));
        console.log("Response Data:", response.data);
        return response.data;
    } catch (error) {
        console.error('Error fetching all donation transactions:', {
            message: error.message,
            response: error.response ? error.response.data : null,
            status: error.response ? error.response.status : null,
        });
        throw error;
    }
};

// Fetch donation transactions by RequestNeed ID
export const getDonationTransactionsByRequestNeedId = async (requestNeedId) => {
    try {
        const response = await axios.get(`${API_BASE}/requestNeed/${requestNeedId}`);
        console.log(`Full API Response (getDonationTransactionsByRequestNeedId ${requestNeedId}):`, response);
        return response.data;
    } catch (error) {
        console.error(`Error fetching donation transactions for RequestNeed ID ${requestNeedId}:`, error.message);
        throw error;
    }
};

// Fetch donation transactions by Donation ID
export const getDonationTransactionsByDonationId = async (donationId) => {
    try {
        const response = await axios.get(`${API_BASE}/donation/${donationId}`);
        console.log(`Full API Response (getDonationTransactionsByDonationId ${donationId}):`, response);
        return response.data;
    } catch (error) {
        console.error(`Error fetching donation transactions for Donation ID ${donationId}:`, error.message);
        throw error;
    }
};

// Fetch donation transactions by Status
export const getDonationTransactionsByStatus = async (status) => {
    try {
        const response = await axios.get(`${API_BASE}/status/${status}`);
        console.log(`Full API Response (getDonationTransactionsByStatus ${status}):`, response);
        return response.data;
    } catch (error) {
        console.error(`Error fetching donation transactions with status ${status}:`, error.message);
        throw error;
    }
};

// Create a new donation transaction
export const createDonationTransaction = async (transactionData) => {
    try {
        const response = await axios.post(`${API_BASE}/`, transactionData);
        console.log("Full API Response (createDonationTransaction):", response);
        return response.data;
    } catch (error) {
        console.error('Error creating donation transaction:', error.message);
        throw error;
    }
};

// Update a donation transaction by ID
export const updateDonationTransaction = async (id, transactionData) => {
    try {
        const response = await axios.put(`${API_BASE}/${id}`, transactionData);
        console.log(`Full API Response (updateDonationTransaction ${id}):`, response);
        return response.data;
    } catch (error) {
        console.error(`Error updating donation transaction with ID ${id}:`, error.message);
        throw error;
    }
};

// Delete a donation transaction by ID
export const deleteDonationTransaction = async (id) => {
    try {
        const response = await axios.delete(`${API_BASE}/${id}`);
        console.log(`Full API Response (deleteDonationTransaction ${id}):`, response);
        return response.data;
    } catch (error) {
        console.error(`Error deleting donation transaction with ID ${id}:`, error.message);
        throw error;
    }
};

// Accept a donation transaction
export const acceptDonationTransaction = async (transactionId) => {
    try {
        const token = localStorage.getItem('token');
        if (!token) throw new Error('No authentication token found');
        
        const response = await axios.put(
            `${API_BASE}/${transactionId}/accept`,
            {},
            {
                headers: {
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            }
        );
        console.log(`Full API Response (acceptDonationTransaction ${transactionId}):`, response);
        return response.data;
    } catch (error) {
        console.error(`Error accepting donation transaction with ID ${transactionId}:`, {
            message: error.message,
            response: error.response ? error.response.data : null,
            status: error.response ? error.response.status : null,
        });
        throw error;
    }
};

// Reject a donation transaction
export const rejectDonationTransaction = async (transactionId, reason) => {
    try {
        const token = localStorage.getItem('token');
        if (!token) throw new Error('No authentication token found');
        
        const response = await axios.put(
            `${API_BASE}/${transactionId}/reject`,
            { rejectionReason: reason },
            {
                headers: {
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            }
        );
        console.log(`Full API Response (rejectDonationTransaction ${transactionId}):`, response);
        return response.data;
    } catch (error) {
        console.error(`Error rejecting donation transaction with ID ${transactionId}:`, {
            message: error.message,
            response: error.response ? error.response.data : null,
            status: error.response ? error.response.status : null,
        });
        throw error;
    }
};

// Create and accept a donation transaction
export const createAndAcceptDonationTransaction = async (donationId, requestNeedId) => {
    try {
        const token = localStorage.getItem('token');
        if (!token) throw new Error('No authentication token found');
        
        const response = await axios.post(
            `${API_BASE}/create-and-accept`,
            { donationId, requestNeedId },
            {
                headers: {
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            }
        );
        console.log(`Full API Response (createAndAcceptDonationTransaction):`, response);
        return response.data;
    } catch (error) {
        console.error(`Error creating and accepting donation transaction:`, {
            message: error.message,
            response: error.response ? error.response.data : null,
            status: error.response ? error.response.status : null,
        });
        throw error;
    }
};

// Fetch a donation transaction by ID
export const getDonationTransactionById = async (id) => {
    try {
        const response = await axios.get(`${API_BASE}/${id}`);
        console.log(`Full API Response (getDonationTransactionById ${id}):`, response);
        return response.data;
    } catch (error) {
        console.error(`Error fetching donation transaction with ID ${id}:`, error.message);
        throw error;
    }
};

// Fetch transactions by recipient ID
export const getTransactionsByRecipientId = async (recipientId) => {
    try {
        const response = await axios.get(`${API_BASE}/recipient/${recipientId}`);
        console.log(`Full API Response (getTransactionsByRecipientId ${recipientId}):`, response);
        return response.data;
    } catch (error) {
        console.error(`Error fetching transactions for recipient ID ${recipientId}:`, error.message);
        throw error;
    }
};

export default {
    getAllDonationTransactions,
    getDonationTransactionById,
    getDonationTransactionsByRequestNeedId,
    getDonationTransactionsByDonationId,
    getDonationTransactionsByStatus,
    createDonationTransaction,
    updateDonationTransaction,
    deleteDonationTransaction,
    acceptDonationTransaction,
    rejectDonationTransaction,
    createAndAcceptDonationTransaction,
    getTransactionsByRecipientId
};
</file>

<file path="sustainafood-frontend/src/api/userService.js">
import axios from "axios";

//const API_URL = import.meta.env.VITE_API_URL + "/users";
const API_URL = "http://localhost:3000"; // Ensure this matches your backend port
// 🔹 Créer un utilisateur
export const signupUser = async (userData) => {
  return await axios.post('http://localhost:3000/users/create', userData, {
    headers: {
      "Content-Type": "multipart/form-data",
    },
  });
};

export const createuser=async(userData)=>{
  return await axios.post('http://localhost:3000/users/createUser',userData)
}
export const userwinthemailandpss = async (userData) => {
    return await axios.post('http://localhost:3000/users/userwinthemailandpss', userData);
}
// 🔹 Récupérer tous les utilisateurs
export const getUsers = async () => {
  return axios.get(`http://localhost:3000/users/list`);
};

// 🔹 Récupérer un utilisateur par ID
export const getUserById = async (id) => {
  return axios.get(`http://localhost:3000/users/details/${id}`);
};

// 🔹 Mettre à jour un utilisateur
export const updateUser = async (id, userData) => {
  return axios.put(`http://localhost:3000/users/update/${id}`, userData, {
    headers: {
      "Content-Type": "multipart/form-data",
    },
  });
};
export const updateUserwithemail = async (id, userData) => {
  return axios.put(`http://localhost:3000/users/update/${id}`, userData, {
    headers: {
      "Content-Type": "multipart/form-data",
    },
  });
};

// 🔹 Supprimer un utilisateur
export const deleteUser = async (id) => {
  return axios.delete(`http://localhost:3000/users/delete/${id}`);
};

// 🔹 Connexion utilisateur
export const loginUser = async (userData) => {
    console.log("Données envoyées :", userData); // 🔹 Vérifie si les bonnes données sont envoyées
  
    return await axios.post("http://localhost:3000/users/login", userData, {
      headers: {
        "Content-Type": "application/json",
      },
    });
  };
export const deactivateAccount = async (userId, token) => {
  return axios.put(
    `http://localhost:3000/users/deactivate-account/${userId}`,
    {},
    {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    }
  );
};



// 🔹 Toggle 2FA Status
export const toggle2FA = async (email) => {
  return await axios.post("http://localhost:3000/users/toggle-2fa", { email },    console.log("Données envoyées :", email),
  {
    headers: {
      "Content-Type": "application/json",
    },
  });
};
// userService.js

// 🔹 Validate 2FA Code
export const validate2FACode = async (data) => {
  const token = localStorage.getItem("token"); // Adjust if using a token
  try {
      const response = await axios.post(`${API_URL}/users/validate-2fa-code`, {
          email: data.email,
          twoFACode: data.twoFACode,
      }, {
          headers: token ? { Authorization: `Bearer ${token}` } : {},
      });
      console.log("API Response:", response); // Debug the response
      return response;
  } catch (error) {
      console.error("API Error:", error);
      throw error; // Re-throw to handle in the component
  }
};
export const changePassword = async (userId, currentPassword, newPassword) => {
  return axios.put(
    `http://localhost:3000/users/change-password/${userId}`, // <-- note the "/:id"
    { currentPassword, newPassword }, // No "userId" in body now
    {
      headers: {
        "Content-Type": "application/json",
      },
    }
  );
};
export const send2FACodeforsigninwithgoogle = async (email) => {
  return axios.post("http://localhost:3000/users/send2FACodeforsigninwithgoogle", { email });
};
</file>

<file path="sustainafood-frontend/src/assets/styles/AddDonation.css">
.add-donation{
    background-color: white;
    max-width: 1000px;
    position: relative;
    margin: 80px auto;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);   
    

}
.adddonation-logo{
    height: 100px;
}
/* From Uiverse.io by omar49511 */ 
.container-btn-file {
    margin-left: -655px;
    margin-top: 10px;
    display: flex
;
    position: relative;
    align-items: center;
    background-color: BLACK;
    color: #fff;
    border-style: none;
    padding: 0.7em 1em;
    border-radius: 0.5em;
    overflow: hidden;
    z-index: 1;
    box-shadow: 4px 8px 10px -3px rgba(0, 0, 0, 0.356);
    transition: all 250ms;
}
  .container-btn-file input[type="file"] {
    position: absolute;
    width: 100%;
    height: 100%;
    opacity: 0;
    cursor: pointer;
  }
  .container-btn-file > svg {
    margin-right: 1em;
  }
  .container-btn-file::before {
    content: "";
    margin-left: -19px;
    position: absolute;
    height: 100%;
    width: 0;
    border-radius: 0.5em;
    background-color: #8dc73f;
    z-index: -1;
    transition: all 350ms;
  }
  .container-btn-file:hover::before {
    width: 100%;
  }
  
  .radio-buttons-container-adddonation {
    display: flex;
    align-items: center;
    gap: 24px;
  }
  
  .radio-button-adddonation {
    display: inline-block;
    position: relative;
    cursor: pointer;
  }
  
  .radio-button__input-adddonation {
    position: absolute;
    opacity: 0;
    width: 0;
    height: 0;
  }
  
  .radio-button__label-adddonation {
    display: inline-block;
    padding-left: 30px;
    margin-bottom: 10px;
    position: relative;
    font-size: 16px;
    color: #000;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.23, 1, 0.320, 1);
  }
  
  .radio-button__custom-adddonation {
    position: absolute;
    top: 50%;
    left: 0;
    transform: translateY(-50%);
    width: 20px;
    height: 20px;
    border-radius: 50%;
    border: 2px solid #555;
    transition: all 0.3s cubic-bezier(0.23, 1, 0.320, 1);
  }
  
  .radio-button__input-adddonation:checked + .radio-button__label-adddonation .radio-button__custom-adddonation {
    transform: translateY(-50%) scale(0.9);
    border: 5px solid #8dc73f;
    color: #8dc73f;
  }
  
  .radio-button__input-adddonation:checked + .radio-button__label-adddonation {
    color: #8dc73f;
  }
  
  .radio-button__label-adddonation:hover .radio-button__custom-adddonation {
    transform: translateY(-50%) scale(1.2);
    border-color: #8dc73f;
    box-shadow: 0 0 10px #4c8bf580;
  }
  
  /* ✅ Empêcher le tableau de dépasser */
.product-table-container {
  width: 100%;
  max-width: 100%;
  overflow-x: auto; /* Permet un défilement horizontal si nécessaire */
  margin-top: 20px;
  border-radius: 8px;
  padding: 10px;
  background: white;
}

/* ✅ Adapter la largeur du tableau */
.product-table {
  width: 100%;
  border-collapse: collapse;
  table-layout: fixed; /* Fixer la largeur des colonnes */
}

/* ✅ Rendre les colonnes plus lisibles */
.product-table th, 
.product-table td {
  padding: 8px;
  border: 1px solid #ccc;
  text-align: center;
  white-space: nowrap; /* Empêcher les sauts de ligne */
  overflow: hidden;
  text-overflow: ellipsis; /* Ajouter "..." si le texte est trop long */
}

/* ✅ Style des en-têtes */
.product-table th {
  background: #8dc73f; /* Vert pour l'en-tête */
  color: white;
  font-weight: bold;
}

/* ✅ Ajuster les colonnes trop grandes */
.product-table th:nth-child(1), /* Name */
.product-table th:nth-child(3), /* Quantity */
.product-table th:nth-child(5), /* Status */
.product-table th:nth-child(7), /* Weight Unit */
.product-table th:nth-child(8), /* Total Weight */
.product-table th:nth-child(9) { /* Actions */
  width: 10%; /* Réduction de la largeur */
}

.product-table th:nth-child(2), /* Weight per Unit */
.product-table th:nth-child(4), /* Product Description */
.product-table th:nth-child(6) { /* Product Type */
  width: 15%; /* Augmentation de la largeur */
}

/* ✅ Alignement des icônes d'actions */
.action-buttons {
  display: flex;
  justify-content: center;
  gap: 5px;
}

/* ✅ Correction du bouton rouge flottant */
.red-edit-button {
  position: relative;
  z-index: 1;
}

/* ✅ Ajustement responsive */
@media screen and (max-width: 768px) {
  .product-table-container {
      padding: 5px;
  }

  .product-table th, 
  .product-table td {
      font-size: 12px; /* Texte plus petit sur mobile */
      padding: 5px;
  }
  
  .action-buttons {
      flex-direction: column;
  }
}
</file>

<file path="sustainafood-frontend/src/components/DonorProfile.jsx">
import React, { useState, useEffect } from 'react';
import { getDonationByUserId } from '../api/donationService';
import { Link } from 'react-router-dom';
import styled from 'styled-components';
import Navbar from '../components/Navbar'; // Assuming these exist in your project
import Footer from '../components/Footer'; // Assuming these exist in your project

// Styled Components
const Container = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  background: #f4f6f8;
  min-height: 100vh;
  padding: 40px 20px;
`;

const ProjectsContainer = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
  gap: 20px;
  width: 100%;
  max-width: 1200px;
`;

const ProjectCard = styled.div`
  background: white;
  border-radius: 12px;
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
  padding: 20px;
  transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
  
  &:hover {
    transform: translateY(-5px);
    box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.15);
  }
`;

const BtnSeeMore = styled(Link)`
  display: block;
  text-decoration: none;
  padding: 10px 16px;
  font-size: 16px;
  font-weight: bold;
  border-radius: 8px;
  background: #228b22;
  color: white;
  text-align: center;
  margin-top: 10px;
  transition: background 0.3s ease-in-out;

  &:hover {
    background: #1e7a1e;
  }
`;

const SearchContainer = styled.div`
  display: flex;
  justify-content: center;
  margin-bottom: 20px;
  gap: 10px;
  width: 100%;
  max-width: 600px;
`;

const SearchInput = styled.input`
  flex: 1;
  padding: 12px;
  font-size: 16px;
  border: 2px solid #ddd;
  border-radius: 6px;
  outline: none;
  transition: all 0.3s;

  &:focus {
    border-color: #228b22;
    box-shadow: 0px 0px 5px rgba(34, 139, 34, 0.3);
  }
`;

const FilterSelect = styled.select`
  padding: 12px;
  font-size: 16px;
  border: 2px solid #ddd;
  border-radius: 6px;
  outline: none;
`;

const StatusBadge = styled.span`
  display: inline-block;
  padding: 8px 14px;
  border-radius: 18px;
  font-size: 14px;
  font-weight: bold;
  color: white;
  background: ${({ status }) => {
    switch (status) {
      case 'pending':
        return 'orange';
      case 'approved':
        return '#228b22';
      case 'rejected':
        return 'red';
      default:
        return '#666';
    }
  }};
`;

const PaginationContainer = styled.div`
  display: flex;
  justify-content: center;
  margin-top: 20px;
  gap: 10px;
`;

const PageButton = styled.button`
  background: ${({ active }) => (active ? '#228b22' : '#ddd')};
  color: ${({ active }) => (active ? 'white' : '#555')};
  border: none;
  padding: 8px 12px;
  border-radius: 6px;
  cursor: pointer;
  transition: background 0.3s;

  &:hover {
    background: ${({ active }) => (active ? '#1e7a1e' : '#bbb')};
  }
`;

const ProfileHeader = styled.h3`
  text-align: center;
  font-size: 28px;
  font-weight: bold;
  color: #228b22;
  margin-bottom: 20px;
`;

const Title = styled.h3`
  font-size: 22px;
  font-weight: bold;
  color: #228b22;
  margin-bottom: 10px;
`;

const DetailText = styled.p`
  font-size: 16px;
  color: #444;
  line-height: 1.6;
  margin: 5px 0;
`;

const ProductList = styled.ul`
  list-style: none;
  padding: 0;
  margin: 10px 0 0 0;
  display: flex;
  flex-direction: column;
  width: 100%;
`;

const ProductItem = styled.li`
  background-color: #e8f5e9;
  color: #2e7d32;
  padding: 12px 20px;
  border-radius: 8px;
  font-size: 14px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
  margin-bottom: 8px;
`;

const DonorProfile = () => {
  // Retrieve user from localStorage and set userid synchronously
  const user = JSON.parse(localStorage.getItem('user'));
  const userid = user ? (user._id || user.id) : null; // Use _id or id, fallback to null

  // State variables
  const [donations, setDonations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 3; // Set to 3; change to 2 for max 2 per page

  // Fetch donations
  useEffect(() => {
    const fetchDonations = async () => {
      if (!userid) {
        setError('User ID not found');
        setLoading(false);
        return;
      }

      try {
        const response = await getDonationByUserId(userid);
        setDonations(response.data);
      } catch (err) {
        setError(err.response?.data?.message || 'Error fetching donation data');
      } finally {
        setLoading(false);
      }
    };

    fetchDonations();
  }, [userid]);

  // Search & Filter Logic
  const filteredDonations = donations
    .filter(
      (donation) =>
        donation.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        donation.description?.toLowerCase().includes(searchTerm.toLowerCase())
    )
    .filter((donation) => (statusFilter ? donation.status === statusFilter : true));

  // Pagination Logic
  const totalPages = Math.ceil(filteredDonations.length / itemsPerPage);
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentDonations = filteredDonations.slice(indexOfFirstItem, indexOfLastItem);

  const handlePageChange = (page) => {
    if (page >= 1 && page <= totalPages) {
      setCurrentPage(page);
    }
  };

  // Loading / Error Handling
  if (loading) return <div>Loading...</div>;
  if (error) return <div>{error}</div>;

  return (
    <>
      <Container>
        <ProfileHeader>Your Donations</ProfileHeader>

        {/* Search & Filter */}
        <SearchContainer>
          <SearchInput
            type="text"
            placeholder="🔍 Search donations..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <FilterSelect value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>
            <option value="">🟢 All Statuses</option>
            <option value="pending">🕒 Pending</option>
            <option value="approved">✅ Accepted</option>
            <option value="rejected">❌ Rejected</option>
          </FilterSelect>
        </SearchContainer>

        {/* Donations List */}
        <ProjectsContainer>
          {currentDonations.length > 0 ? (
            currentDonations.map((donation) => (
              <ProjectCard key={donation._id}>
                <Title>🛒 {donation.title || 'Untitled'}</Title>
                <DetailText>
                  <strong>📍 Location:</strong> {donation.location || 'Not specified'}
                </DetailText>
                <DetailText>
                  <strong>📆 Expiration Date:</strong>{' '}
                  {donation.expirationDate
                    ? new Date(donation.expirationDate).toISOString().split('T')[0]
                    : 'Not set'}
                </DetailText>
                <DetailText>
                  <strong>🚚 Delivery:</strong>{' '}
                  {donation.delivery ? 'Yes' : 'No'}
                </DetailText>
                <DetailText>
                  <strong>🔄 Status:</strong>{' '}
                  <StatusBadge status={donation.status}>
                    {donation.status || 'Unknown'}
                  </StatusBadge>
                </DetailText>
                <h4>📦 Available Products:</h4>
                <ProductList>
                  {Array.isArray(donation.products) && donation.products.length > 0 ? (
                    donation.products.map((product, index) => (
                      <ProductItem key={index}>
                        <span>
                          <strong>Name:</strong> {product.name || 'Not specified'}
                        </span>
                        <span>
                          <strong>Quantity:</strong> {product.totalQuantity || product.quantity || 0}{' '}
                          {product.weightUnitTotale || ''}
                        </span>
                        <span>
                          <strong>Status:</strong> {product.status || 'Unknown'}
                        </span>
                      </ProductItem>
                    ))
                  ) : (
                    <ProductItem>
                      {donation.category === 'prepared_meals'
                        ? `🍽️ Number of meals: ${donation.numberOfMeals || 'Not specified'}`
                        : 'No products available'}
                    </ProductItem>
                  )}
                </ProductList>
                <BtnSeeMore to={`/DetailsDonations/${donation._id}`}>See More</BtnSeeMore>
              </ProjectCard>
            ))
          ) : (
            <DetailText>No donations found.</DetailText>
          )}
        </ProjectsContainer>

        {/* Pagination */}
        {totalPages > 1 && (
          <PaginationContainer>
            <PageButton
              onClick={() => handlePageChange(currentPage - 1)}
              disabled={currentPage === 1}
            >
              Previous
            </PageButton>
            {[...Array(totalPages)].map((_, index) => (
              <PageButton
                key={index}
                active={currentPage === index + 1}
                onClick={() => handlePageChange(index + 1)}
              >
                {index + 1}
              </PageButton>
            ))}
            <PageButton
              onClick={() => handlePageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
            >
              Next
            </PageButton>
          </PaginationContainer>
        )}
      </Container>
    </>
  );
};

export default DonorProfile;
</file>

<file path="sustainafood-frontend/src/components/RecipientProfile.jsx">
import React, { useState, useEffect } from 'react';
import { getRequestsByRecipientId } from '../api/requestNeedsService';
import { Link } from 'react-router-dom';
import styled from 'styled-components';
import Navbar from '../components/Navbar'; // Assuming these exist in your project
import Footer from '../components/Footer'; // Assuming these exist in your project

// Styled Components
const Container = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  background: #f4f6f8;
  min-height: 100vh;
  padding: 40px 20px;
`;

const ProjectsContainer = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
  gap: 20px;
  width: 100%;
  max-width: 1200px;
`;

const ProjectCard = styled.div`
  background: white;
  border-radius: 12px;
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
  padding: 20px;
  transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
  
  &:hover {
    transform: translateY(-5px);
    box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.15);
  }
`;

const BtnSeeMore = styled(Link)`
  display: block;
  text-decoration: none;
  padding: 10px 16px;
  font-size: 16px;
  font-weight: bold;
  border-radius: 8px;
  background: #228b22;
  color: white;
  text-align: center;
  margin-top: 10px;
  transition: background 0.3s ease-in-out;

  &:hover {
    background: #1e7a1e;
  }
`;

const SearchContainer = styled.div`
  display: flex;
  justify-content: center;
  margin-bottom: 20px;
  gap: 10px;
  width: 100%;
  max-width: 600px;
`;

const SearchInput = styled.input`
  flex: 1;
  padding: 12px;
  font-size: 16px;
  border: 2px solid #ddd;
  border-radius: 6px;
  outline: none;
  transition: all 0.3s;

  &:focus {
    border-color: #228b22;
    box-shadow: 0px 0px 5px rgba(34, 139, 34, 0.3);
  }
`;

const FilterSelect = styled.select`
  padding: 12px;
  font-size: 16px;
  border: 2px solid #ddd;
  border-radius: 6px;
  outline: none;
`;

const StatusBadge = styled.span`
  display: inline-block;
  padding: 8px 14px;
  border-radius: 18px;
  font-size: 14px;
  font-weight: bold;
  color: white;
  background: ${({ status }) => {
    switch (status) {
      case 'pending':
        return 'orange';
      case 'approved':
        return '#228b22';
      case 'rejected':
        return 'red';
      default:
        return '#666';
    }
  }};
`;

const PaginationContainer = styled.div`
  display: flex;
  justify-content: center;
  margin-top: 20px;
  gap: 10px;
`;

const PageButton = styled.button`
  background: ${({ active }) => (active ? '#228b22' : '#ddd')};
  color: ${({ active }) => (active ? 'white' : '#555')};
  border: none;
  padding: 8px 12px;
  border-radius: 6px;
  cursor: pointer;
  transition: background 0.3s;

  &:hover {
    background: ${({ active }) => (active ? '#1e7a1e' : '#bbb')};
  }
`;

const ProfileHeader = styled.h3`
  text-align: center;
  font-size: 28px;
  font-weight: bold;
  color: #228b22;
  margin-bottom: 20px;
`;

const Title = styled.h3`
  font-size: 22px;
  font-weight: bold;
  color: #228b22;
  margin-bottom: 10px;
`;

const DetailText = styled.p`
  font-size: 16px;
  color: #444;
  line-height: 1.6;
  margin: 5px 0;
`;

const ProductList = styled.ul`
  list-style: none;
  padding: 0;
  margin: 10px 0 0 0;
  display: flex;
  flex-direction: column;
  width: 100%;
`;

const ProductItem = styled.li`
  background-color: #e8f5e9;
  color: #2e7d32;
  padding: 12px 20px;
  border-radius: 8px;
  font-size: 14px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
  margin-bottom: 8px; /* Added spacing between items */
`;

const RecipientProfile = () => {
  // Retrieve user ID from localStorage
  const user = JSON.parse(localStorage.getItem('user'));
  const userid = user?._id; // Assuming _id is the field in your user object

  // State variables
  const [requests, setRequests] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 3; // Set to 3; change to 2 if you prefer max 2 per page

  // Fetch requests
  useEffect(() => {
    const fetchRequests = async () => {
      try {
        const response = await getRequestsByRecipientId(userid);
        setRequests(response.data);
      } catch (err) {
        setError(err.response?.data?.message || 'Error fetching request data');
      } finally {
        setLoading(false);
      }
    };

    if (userid) {
      fetchRequests();
    } else {
      setError('User ID not found');
      setLoading(false);
    }
  }, [userid]);

  // Search & Filter Logic
  const filteredRequests = requests
    .filter(
      (request) =>
        request.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        request.description?.toLowerCase().includes(searchTerm.toLowerCase())
    )
    .filter((request) => (statusFilter ? request.status === statusFilter : true));

  // Pagination Logic
  const totalPages = Math.ceil(filteredRequests.length / itemsPerPage);
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentRequests = filteredRequests.slice(indexOfFirstItem, indexOfLastItem);

  const handlePageChange = (page) => {
    if (page >= 1 && page <= totalPages) {
      setCurrentPage(page);
    }
  };

  // Loading / Error Handling
  if (loading) return <div>Loading...</div>;
  if (error) return <div>{error}</div>;

  return (
    <>
      <Container>
        <ProfileHeader>My Donation Requests</ProfileHeader>

        {/* Search & Filter */}
        <SearchContainer>
          <SearchInput
            type="text"
            placeholder="🔍 Search requests..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <FilterSelect value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>
            <option value="">🟢 All Statuses</option>
            <option value="pending">🕒 Pending</option>
            <option value="approved">✅ Accepted</option>
            <option value="rejected">❌ Rejected</option>
          </FilterSelect>
        </SearchContainer>

        {/* Requests List */}
        <ProjectsContainer>
          {currentRequests.length > 0 ? (
            currentRequests.map((request) => (
              <ProjectCard key={request._id}>
                <Title>🛒 {request.title || 'Untitled'}</Title>
                <DetailText>
                  <strong>📍 Location:</strong> {request.location || 'Not specified'}
                </DetailText>
                <DetailText>
                  <strong>📆 Before Date:</strong>{' '}
                  {request.expirationDate
                    ? new Date(request.expirationDate).toISOString().split('T')[0]
                    : 'Not set'}
                </DetailText>
                <DetailText>
                  <strong>📑 Details:</strong> {request.description || 'No description'}
                </DetailText>
                <DetailText>
                  <strong>🔄 Status:</strong>{' '}
                  <StatusBadge status={request.status}>
                    {request.status || 'Unknown'}
                  </StatusBadge>
                </DetailText>
                <h4>📦 Requested Products:</h4>
                <ProductList>
                  {Array.isArray(request.requestedProducts) &&
                  request.requestedProducts.length > 0 ? (
                    request.requestedProducts.map((product, index) => (
                      <ProductItem key={index}>
                        <span>
                          <strong>Type:</strong> {product.productType || 'Not specified'}
                        </span>
                        <span>
                          <strong>Weight:</strong> {product.weightPerUnit || 0}{' '}
                          {product.weightUnit || ''}
                        </span>
                        <span>
                          <strong>Quantity:</strong> {product.totalQuantity || 0}{' '}
                          {product.weightUnitTotale || ''}
                        </span>
                        <span>
                          <strong>Status:</strong> {product.status || 'Unknown'}
                        </span>
                      </ProductItem>
                    ))
                  ) : (
                    <ProductItem>
                      {request.category === 'prepared_meals'
                        ? `🍽️ Number of meals: ${request.numberOfMeals || 'Not specified'}`
                        : 'No requested products'}
                    </ProductItem>
                  )}
                </ProductList>
                <BtnSeeMore to={`/DetailsRequest/${request._id}`}>See More</BtnSeeMore>
              </ProjectCard>
            ))
          ) : (
            <DetailText>No requests found.</DetailText>
          )}
        </ProjectsContainer>

        {/* Pagination */}
        {totalPages > 1 && (
          <PaginationContainer>
            <PageButton
              onClick={() => handlePageChange(currentPage - 1)}
              disabled={currentPage === 1}
            >
              Previous
            </PageButton>
            {[...Array(totalPages)].map((_, index) => (
              <PageButton
                key={index}
                active={currentPage === index + 1}
                onClick={() => handlePageChange(index + 1)}
              >
                {index + 1}
              </PageButton>
            ))}
            <PageButton
              onClick={() => handlePageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
            >
              Next
            </PageButton>
          </PaginationContainer>
        )}
      </Container>
    </>
  );
};

export default RecipientProfile;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/DonationList.jsx">
import React, { useEffect, useState } from "react";
// Removed axios import since it's no longer used
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import "../../assets/styles/backoffcss/studentList.css"; // Using existing CSS
import { FaEye, FaFilePdf, FaSort } from "react-icons/fa"; // Removed FaTrash
import ReactPaginate from "react-paginate";
import { Link } from "react-router-dom";
import logo from '../../assets/images/logooo.png'; // Import the logo
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";
import { getDonations } from "../../api/donationService";

const DonationList = () => {
    const [donations, setDonations] = useState([]);
    const [currentPage, setCurrentPage] = useState(0);
    const [searchQuery, setSearchQuery] = useState("");
    const [sortField, setSortField] = useState("title");
    const [sortOrder, setSortOrder] = useState("asc");
    const donationsPerPage = 3;

    const pagesVisited = currentPage * donationsPerPage;

    useEffect(() => {
        const fetchDonations = async () => {
            try {
                const response = await getDonations();
                setDonations(response.data || []); // Default to empty array if no data
                console.log("Fetched donations:", response.data); // Debug log
            } catch (error) {
                console.error("Error fetching donations:", error);
                setDonations([]); // Set empty array on error to avoid undefined
            }
        };
        fetchDonations();
    }, []);

    const exportToPDF = () => {
        const doc = new jsPDF({
            orientation: "landscape",
            unit: "mm",
            format: "a4",
        });

        // Header background - light gray
        doc.setFillColor(245, 245, 245);
        doc.rect(0, 0, doc.internal.pageSize.width, 40, "F");

        // Decorative bottom line - main color #90C43C
        doc.setDrawColor(144, 196, 60);
        doc.setLineWidth(1.5);
        doc.line(0, 40, doc.internal.pageSize.width, 40);

        // Logo
        const imgWidth = 30, imgHeight = 30;
        doc.addImage(logo, "PNG", 5, 5, imgWidth, imgHeight);

        // Title - dark slate blue
        const title = "DONATIONS LIST";
        doc.setFontSize(28);
        doc.setTextColor(50, 62, 72);
        doc.setFont("helvetica", "bold");
        doc.text(title, doc.internal.pageSize.width / 2, 20, { align: "center" });

        // Date
        const today = new Date();
        const dateStr = today.toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
        });
        doc.setFontSize(10);
        doc.setTextColor(80, 80, 80);
        doc.text(`Generated: ${dateStr}`, doc.internal.pageSize.width - 50, 38);

        // Table
        autoTable(doc, {
            head: [["ID", "Title", "Category", "Status", "Location", "Expiration Date", "Added At", "Updated At"]],
            body: donations.map((donation, index) => [
                (index + 1).toString(),
                donation.title || "N/A",
                donation.category || "N/A",
                donation.status || "N/A",
                donation.location || "N/A",
                donation.expirationDate ? new Date(donation.expirationDate).toLocaleDateString() : "N/A",
                donation.createdAt ? new Date(donation.createdAt).toLocaleDateString() : "N/A",
                donation.updatedAt ? new Date(donation.updatedAt).toLocaleDateString() : "N/A",
            ]),
            startY: 50,
            theme: "grid",
            styles: {
                fontSize: 9,
                cellPadding: 6,
                lineColor: [200, 200, 200],
                lineWidth: 0.2,
                valign: "middle",
                textColor: [45, 45, 45],
            },
            headStyles: {
                fillColor: [70, 80, 95], // Dark blue-gray
                textColor: [255, 255, 255],
                fontStyle: "bold",
                halign: "center",
                fontSize: 10,
            },
            alternateRowStyles: {
                fillColor: [250, 250, 250], // Very light gray
            },
            didDrawCell: (data) => {
                if (data.section === "body" && data.column.index === 3) { // Status column
                    const status = data.cell.text[0];
                    if (status === "fulfilled") {
                        doc.setFillColor(144, 196, 60); // Green for fulfilled
                        doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F");
                        doc.setTextColor(255, 255, 255);
                    } else if (status === "cancelled") {
                        doc.setFillColor(220, 220, 220); // Light gray for cancelled
                        doc.roundedRect(data.cell.x + 2, data.cell.y + 2, data.cell.width - 4, data.cell.height - 4, 2, 2, "F");
                        doc.setTextColor(100, 100, 100);
                    }
                }
            },
            didDrawPage: (data) => {
                // Footer line
                doc.setDrawColor(200, 200, 200);
                doc.setLineWidth(0.5);
                doc.line(15, doc.internal.pageSize.height - 20, doc.internal.pageSize.width - 15, doc.internal.pageSize.height - 20);

                // Page numbers
                doc.setFillColor(144, 196, 60);
                doc.roundedRect(doc.internal.pageSize.width / 2 - 15, doc.internal.pageSize.height - 18, 30, 12, 3, 3, "F");
                doc.setTextColor(255, 255, 255);
                doc.setFontSize(9);
                doc.text(`Page ${data.pageNumber} of ${doc.internal.getNumberOfPages()}`, doc.internal.pageSize.width / 2, doc.internal.pageSize.height - 10, { align: "center" });

                // Confidentiality notice
                doc.setTextColor(120, 120, 120);
                doc.setFontSize(8);
                doc.setFont("helvetica", "italic");
                doc.text("Confidential - For internal use only", 15, doc.internal.pageSize.height - 10);

                // Institution info
                doc.text("©SustainaFood", doc.internal.pageSize.width - 45, doc.internal.pageSize.height - 10);
            },
        });

        doc.save(`Donation_Directory_${today.toISOString().split("T")[0]}.pdf`);
    };

    const filteredDonations = donations.filter(donation => {
        const expirationDateString = donation.expirationDate ? new Date(donation.expirationDate).toLocaleDateString() : "";
        const createdAtString = donation.createdAt ? new Date(donation.createdAt).toLocaleDateString() : "";
        const updatedAtString = donation.updatedAt ? new Date(donation.updatedAt).toLocaleDateString() : "";
        return (
            (donation.title || "").toLowerCase().includes(searchQuery.toLowerCase()) ||
            (donation.category || "").toLowerCase().includes(searchQuery.toLowerCase()) ||
            (donation.status || "").toLowerCase().includes(searchQuery.toLowerCase()) ||
            (donation.location || "").toLowerCase().includes(searchQuery.toLowerCase()) ||
            expirationDateString.includes(searchQuery) ||
            createdAtString.includes(searchQuery) ||
            updatedAtString.includes(searchQuery)
        );
    });

    const sortedDonations = filteredDonations.sort((a, b) => {
        if (sortField === "title") {
            return sortOrder === "asc" ? (a.title || "").localeCompare(b.title || "") : (b.title || "").localeCompare(a.title || "");
        } else if (sortField === "category") {
            return sortOrder === "asc" ? (a.category || "").localeCompare(b.category || "") : (b.category || "").localeCompare(a.category || "");
        } else if (sortField === "status") {
            return sortOrder === "asc" ? (a.status || "").localeCompare(b.status || "") : (b.status || "").localeCompare(a.status || "");
        } else if (sortField === "location") {
            return sortOrder === "asc" ? (a.location || "").localeCompare(b.location || "") : (b.location || "").localeCompare(a.location || "");
        } else if (sortField === "expirationDate") {
            return sortOrder === "asc" 
                ? (new Date(a.expirationDate) || 0) - (new Date(b.expirationDate) || 0)
                : (new Date(b.expirationDate) || 0) - (new Date(a.expirationDate) || 0);
        } else if (sortField === "createdAt") {
            return sortOrder === "asc" 
                ? (new Date(a.createdAt) || 0) - (new Date(b.createdAt) || 0)
                : (new Date(b.createdAt) || 0) - (new Date(a.createdAt) || 0);
        } else if (sortField === "updatedAt") {
            return sortOrder === "asc" 
                ? (new Date(a.updatedAt) || 0) - (new Date(b.updatedAt) || 0)
                : (new Date(b.updatedAt) || 0) - (new Date(a.updatedAt) || 0);
        }
        return 0;
    });

    const displayDonations = sortedDonations.slice(pagesVisited, pagesVisited + donationsPerPage);
    const pageCount = Math.ceil(filteredDonations.length / donationsPerPage);

    const changePage = ({ selected }) => {
        setCurrentPage(selected);
    };

    
    return (
        <div className="dashboard-container">
            <Sidebar />
            <div className="student-dashboardcontent">
                <Navbar setSearchQuery={setSearchQuery} />
                <div className="student-list">
                    <div className="header-container">
                        <h2>Donation Management</h2>
                        <button className="export-pdf-btn" onClick={exportToPDF}>
                            <FaFilePdf /> Export to PDF
                        </button>
                    </div>
                    <div className="sort-container">
                        <label>Sort by:</label>
                        <select value={sortField} onChange={(e) => setSortField(e.target.value)}>
                            <option value="title">Title</option>
                            <option value="category">Category</option>
                            <option value="status">Status</option>
                            <option value="location">Location</option>
                            <option value="expirationDate">Expiration Date</option>
                            <option value="createdAt">Added At</option>
                            <option value="updatedAt">Updated At</option>
                        </select>
                        <select value={sortOrder} onChange={(e) => setSortOrder(e.target.value)}>
                            <option value="asc">Ascending</option>
                            <option value="desc">Descending</option>
                        </select>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Title</th>
                                <th>Category</th>
                                <th>Status</th>
                                <th>Location</th>
                                <th>Expiration Date</th>
                                <th>Added At</th>
                                <th>Updated At</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {displayDonations.length > 0 ? (
                                displayDonations.map((donation, index) => (
                                    <tr key={donation._id}>
                                        <td>{pagesVisited + index + 1}</td>
                                        <td>{donation.title || "N/A"}</td>
                                        <td>{donation.category || "N/A"}</td>
                                        <td>{donation.status || "N/A"}</td>
                                        <td>{donation.location || "N/A"}</td>
                                        <td>{donation.expirationDate ? new Date(donation.expirationDate).toLocaleDateString() : "N/A"}</td>
                                        <td>{donation.createdAt ? new Date(donation.createdAt).toLocaleDateString() : "N/A"}</td>
                                        <td>{donation.updatedAt ? new Date(donation.updatedAt).toLocaleDateString() : "N/A"}</td>
                                        <td className="action-buttons">
                                            <button className="view-btn">
                                                <Link to={`/donations/view/${donation._id}`}>
                                                    <FaEye />
                                                </Link>
                                            </button>
                                            {/* Removed delete button */}
                                        </td>
                                    </tr>
                                ))
                            ) : (
                                <tr>
                                    <td colSpan="9" style={{ textAlign: "center" }}>
                                        No donations available
                                    </td>
                                </tr>
                            )}
                        </tbody>
                    </table>

                    <ReactPaginate
                        previousLabel={"Previous"}
                        nextLabel={"Next"}
                        pageCount={pageCount}
                        onPageChange={changePage}
                        containerClassName={"pagination"}
                        previousLinkClassName={"previousBttn"}
                        nextLinkClassName={"nextBttn"}
                        disabledClassName={"paginationDisabled"}
                        activeClassName={"paginationActive"}
                    />
                </div>
            </div>
        </div>
    );
};

export default DonationList;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/ProductList.jsx">
import React, { useState, useEffect } from "react";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import { FaFilePdf, FaEye } from "react-icons/fa";
import ReactPaginate from "react-paginate";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import "../../assets/styles/backoffcss/ProductList.css";
import { getAllProducts } from "../../api/productservice";
import { getrequests } from "../../api/requestNeedsService"; // Importez getrequests
import { Link } from 'react-router-dom';

const ProductList = () => {
  const [products, setProducts] = useState([]);
  const [currentPage, setCurrentPage] = useState(0);
  const [sortField, setSortField] = useState("name");
  const [sortOrder, setSortOrder] = useState("asc");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const productsPerPage = 5;

  const pagesVisited = currentPage * productsPerPage;

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        setLoading(true);
        const productsResponse = await getAllProducts();
        const requestsResponse = await getrequests(); // Récupérer les requêtes
        console.log("Products API Response Data:", productsResponse.data);
        console.log("Requests API Response Data:", requestsResponse.data);

        // Filtrer les requêtes pour ne garder que les "prepared_meals"
        const preparedMeals = requestsResponse.data.filter(req => req.category === "prepared_meals");

        // Formatter les "prepared_meals" pour qu'ils aient la même structure que les produits
        const formattedMeals = preparedMeals.map(meal => ({
          id: meal._id,
          name: meal.mealName,
          productType: meal.mealType, // Assigner mealType à productType
          status: meal.status,
          productDescription: meal.mealDescription,
          weightPerUnit: meal.numberOfMeals,
          weightUnit: "meals",
          isPreparedMeal: true // Ajouter un indicateur pour distinguer les "prepared_meals" des produits
        }));

        // Combiner les produits et les "prepared_meals"
        const allProducts = [...productsResponse.data, ...formattedMeals];
        setProducts(allProducts);
        setLoading(false);
      } catch (error) {
        setLoading(false);
        setError("Error fetching products. Please try again later.");
        console.error("Error fetching products:", error);
      }
    };
    fetchProducts();
  }, []);

  const filteredProducts = products;

  const sortedProducts = [...filteredProducts].sort((a, b) => {
    let comparison = 0;

    if (sortField === "name") {
      comparison = (a.name || "").localeCompare(b.name || "");
    } else if (sortField === "productType") {
      comparison = (a.productType || "").localeCompare(b.productType || "");
    } else if (sortField === "status") {
      comparison = (a.status || "").localeCompare(b.status || "");
    } else if (sortField === "weight") {
      const weightA = a.weightPerUnit || 0;
      const weightB = b.weightPerUnit || 0;
      comparison = weightA - weightB;
    } else if (sortField === "id") {
      comparison = a.id - b.id;
    }

    return sortOrder === "asc" ? comparison : comparison * -1;
  });

  const exportToPDF = () => {
    const doc = new jsPDF();
    doc.setFontSize(18);
    doc.text("Product List", 10, 10);

    const tableColumn = ["ID", "Name", "Type", "Status", "Description", "Weight"];
    const tableRows = sortedProducts.map((product) => [
      product.id,
      product.name,
      product.productType,
      product.status,
      product.productDescription,
      product.weightPerUnit ? `${product.weightPerUnit} ${product.weightUnit}` : "N/A",
    ]);

    autoTable(doc, {
      head: [tableColumn],
      body: tableRows,
      startY: 20,
      theme: "grid",
      styles: {
        fontSize: 10,
        cellPadding: 3,
      },
      headStyles: {
        fillColor: "#4CAF50",
        textColor: "#ffffff",
      },
    });

    doc.save("Product_List.pdf");
  };

  const displayProducts = sortedProducts.slice(pagesVisited, pagesVisited + productsPerPage);
  const pageCount = Math.ceil(filteredProducts.length / productsPerPage);

  const changePage = ({ selected }) => {
    setCurrentPage(selected);
  };

  const handleSortChange = (e) => {
    setSortField(e.target.value);
  };

  const handleSortOrderChange = (e) => {
    setSortOrder(e.target.value);
  };

  return (
    <div className="dashboard-container">
      <Sidebar />
      <div className="dashboard-content">
        <Navbar />

        <div className="product-list">
          <div className="header-container">
            <h2>Product Management</h2>
            <button className="export-pdf-btn" onClick={exportToPDF}>
              <FaFilePdf /> Export to PDF
            </button>
          </div>

          <div className="sort-container">
            <label htmlFor="sortField">Sort By:</label>
            <select
              id="sortField"
              value={sortField}
              onChange={handleSortChange}
            >
              <option value="name">Name</option>
              <option value="productType">Type</option>
              <option value="status">Status</option>
              <option value="weight">Weight</option>
              <option value="id">ID</option>
            </select>

            <label htmlFor="sortOrder">Order:</label>
            <select
              id="sortOrder"
              value={sortOrder}
              onChange={handleSortOrderChange}
            >
              <option value="asc">Ascending</option>
              <option value="desc">Descending</option>
            </select>
          </div>

          {loading ? (
            <div>Loading products...</div>
          ) : error ? (
            <div>{error}</div>
          ) : (
            <>
              <table>
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Type</th>
                    <th>Status</th>
                    <th>Description</th>
                    <th>Weight</th>
                    <th>Actions</th>{/* Nouvelle colonne */}
                  </tr>
                </thead>
                <tbody>
                  {displayProducts.map((product) => (
                    <tr key={product.id}>
                      <td>{product.id}</td>
                      <td>{product.name}</td>
                      <td>{product.productType}</td>
                      <td>{product.status}</td>
                      <td>{product.productDescription}</td>
                      <td>{product.weightPerUnit ? `${product.weightPerUnit} ${product.weightUnit}` : "N/A"}</td>
                      <td>
                        <Link to={`/products/view/${product.id}`}>
                          <button>
                            <FaEye />{/* Utilise l'icône FaEye de react-icons/fa */}
                          </button>
                        </Link>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>

              <ReactPaginate
                previousLabel={"Previous"}
                nextLabel={"Next"}
                pageCount={pageCount}
                onPageChange={changePage}
                containerClassName={"pagination"}
                activeClassName={"active"}
              />
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default ProductList;
</file>

<file path="sustainafood-frontend/src/pages/backoffice/RequestTable.jsx">
import React, { useState, useEffect } from "react";
import Sidebar from "../../components/backoffcom/Sidebar";
import Navbar from "../../components/backoffcom/Navbar";
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";
import ReactPaginate from "react-paginate";
import { FaFilePdf, FaEye } from "react-icons/fa";
import { getrequests } from "../../api/requestNeedsService";
import "../../assets/styles/backoffcss/RequestTable.css";
import { Link } from "react-router-dom";
import axios from "axios";

const RequestTable = () => {
  const [requests, setRequests] = useState([]);
  const [currentPage, setCurrentPage] = useState(0);
  const [searchQuery, setSearchQuery] = useState("");
  const [sortField, setSortField] = useState("title");
  const [sortOrder, setSortOrder] = useState("asc");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const requestsPerPage = 5;

  // Sanitize data function
  const sanitizeRequest = (request) => {
    return {
      ...request,
      title: request.title ? request.title.trim() : "",
      category: request.category ? request.category.trim() : "",
      description: request.description ? request.description.trim() : "",
    };
  };

  useEffect(() => {
    const fetchRequests = async () => {
      try {
        setLoading(true);
        const response = await axios.get("http://localhost:3000/request");
        const sanitizedData = response.data.map(sanitizeRequest);
        setRequests(sanitizedData);
        setLoading(false);
      } catch (error) {
        setLoading(false);
        setError("Error fetching requests. Please try again later.");
        console.error("Error fetching requests:", error);
      }
    };
    fetchRequests();
  }, []);

  const sortedRequests = [...requests].sort((a, b) => {
    let comparison = 0;
    if (sortField === "title") {
      comparison = (a.title || "").localeCompare(b.title || "");
    } else if (sortField === "status") {
      comparison = (a.status || "").localeCompare(b.status || "");
    } else if (sortField === "expirationDate") {
      const dateA = a.expirationDate ? new Date(a.expirationDate) : null;
      const dateB = b.expirationDate ? new Date(b.expirationDate) : null;
      if (dateA && dateB) {
        comparison = dateA.getTime() - dateB.getTime();
      } else if (dateA) {
        comparison = -1;
      } else if (dateB) {
        comparison = 1;
      } else {
        comparison = 0;
      }
    } else if (sortField === "_id") {
      comparison = (a._id || "").localeCompare(b._id || "");
    } else if (sortField === "category") {
      comparison = (a.category || "").localeCompare(b.category || "");
    }
    return sortOrder === "asc" ? comparison : comparison * -1;
  });

  const pagesVisited = currentPage * requestsPerPage;
  const displayRequests = sortedRequests.slice(
    pagesVisited,
    pagesVisited + requestsPerPage
  );
  const pageCount = Math.ceil(requests.length / requestsPerPage);

  const changePage = ({ selected }) => {
    setCurrentPage(selected);
  };

  const handleSortChange = (e) => {
    setSortField(e.target.value);
  };

  const handleSortOrderChange = (e) => {
    setSortOrder(e.target.value);
  };

  const exportToPDF = () => {
    const doc = new jsPDF();
    doc.setFontSize(18);
    doc.text("Request List", 10, 10);

    const tableColumn = [
      "ID",
      "Title",
      "Category",
      "Expiration Date",
      "Status",
      "Description",
      "Products",
        "Location",  
    ];

    const tableRows = sortedRequests.map((request) => [
      request._id,
      request.title.trim(), // Trim on rendering
      request.category.trim(), // Trim on rendering
      new Date(request.expirationDate).toLocaleDateString(),
      request.status,
      request.description.trim(), // Trim on rendering
      request.category === "prepared_meals"
        ? `Name: ${request.mealName || "N/A"}, Description: ${
            request.mealDescription || "N/A"
          }, Number of Meals: ${request.numberOfMeals || "N/A"}, Meal Type: ${request.mealType || "N/A"}`
        : request.requestedProducts && request.requestedProducts.length > 0
        ? request.requestedProducts
            .map((p) => `${p.name.trim()} (${p.productDescription.trim()})`) 
            .join(", ")
        : "No Products",
      request.location || "N/A",  
    ]);

    autoTable(doc, {
      head: [tableColumn],
      body: tableRows,
      startY: 20,
      theme: "grid",
      styles: {
        fontSize: 10,
        cellPadding: 3,
      },
      headStyles: {
        fillColor: "#4CAF50",
        textColor: "#ffffff",
      },
    });

    doc.save("Request_List.pdf");
  };

  return (
    <div className="dashboard-container">
      <Sidebar />
      <div className="dashboard-content">
        <Navbar setSearchQuery={setSearchQuery} />

        <div className="request-list">
          <div className="header-container">
            <h2>Request Management</h2>
            <button className="export-pdf-btn" onClick={exportToPDF}>
              <FaFilePdf />
              Export to PDF
            </button>
          </div>

              <div className="sort-container">
            <label htmlFor="sortField">Sort By:</label>
            <select
              id="sortField"
              value={sortField}
              onChange={handleSortChange}
            >
              <option value="title">Title</option>
              <option value="category">Category</option>
              <option value="expirationDate">Expiration Date</option>
              <option value="status">Status</option>
              <option value="_id">ID</option>
            </select>
            <label htmlFor="sortOrder">Order:</label>
            <select
              id="sortOrder"
              value={sortOrder}
              onChange={handleSortOrderChange}
            >
              <option value="asc">Ascending</option>
              <option value="desc">Descending</option>
            </select>
          </div>

          {loading ? (
            <div>Loading requests...</div>
          ) : error ? (
            <div>{error}</div>
          ) : (
            <>
              <table>
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>Title</th>
                    <th>Category</th>
                    <th>Expiration Date</th>
                    <th>Status</th>
                    <th>Description</th>
                    <th>Products</th>
                    <th>Location</th>
                                        <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {displayRequests.map((request) => (
                    <tr key={request._id}>
                      <td>{request._id}</td>
                      <td>{request.title}</td>
                      <td>{request.category}</td>
                      <td>
                          {new Date(
                            request.expirationDate
                          ).toLocaleDateString()}
                      </td>
                      <td>{request.status}</td>
                      <td>{request.description}</td>
     <td>
{request.category === "prepared_meals" ? (
    <div>
       Name: {request.mealName || "N/A"},
       Description: {request.mealDescription || "N/A"}
     
    </div>
  ) : (
    <div>requsted product: {request.requestedProducts.length}</div>
  )}
</td>
                      <td>{request.location || "N/A"}</td>
                                            <td className="action-buttons">
                        <button className="view-btn">
                          <Link to={`/requests/view/${request._id}`}>
                            <FaEye />
                          </Link>
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
              <ReactPaginate
                previousLabel={"Previous"}
                nextLabel={"Next"}
                pageCount={pageCount}
                onPageChange={changePage}
                containerClassName={"pagination"}
                activeClassName={"active"}
              />
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default RequestTable;
</file>

<file path="sustainafood-frontend/src/pages/ListOfDonations.jsx">
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import styled, { createGlobalStyle, keyframes } from 'styled-components';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import donation1 from '../assets/images/donation1.jpg';
import donation2 from '../assets/images/donation2.jpg';
import donation3 from '../assets/images/donation3.jpg';
import donation4 from '../assets/images/donation4.png';
import donation5 from '../assets/images/fooddonation.png';
import Composantdonation from '../components/Composantdonation';
import { getDonations } from "../api/donationService";
import donation from '../assets/images/fooddonation1.png';
import patternBg from '../assets/images/bg.png';
import { FaSearch, FaFilter } from "react-icons/fa";
import { useAuth } from "../contexts/AuthContext";
import { getUserById } from "../api/userService";


// Global styles
const GlobalStyle = createGlobalStyle`
  body {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    background: #f0f8f0;
    box-sizing: border-box;
  }
`;

// Animation for slider
const fade = keyframes`
  0% { opacity: 0; }
  8% { opacity: 1; }
  33% { opacity: 1; }
  41% { opacity: 0; }
  100% { opacity: 0; }
`;

// Layout components
const HomeContainer = styled.div`
  display: flex;
  flex-direction: column;
  gap: 0;
`;

const HeroSection = styled.section`
  position: relative;
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: space-between;
  padding: 60px 80px;
  gap: 30px;
  background: 
    linear-gradient(rgba(230, 242, 230, 0.85), rgba(230, 242, 230, 0.85)),
    url(${patternBg}) repeat center center;
  background-size: 200px 200px;
  overflow: hidden;
`;

const HeroText = styled.div`
  flex: 1 1 500px;
  z-index: 2;
  h1 {
    font-size: 48px;
    color: #228b22;
    margin-bottom: 20px;
  }
  p {
    font-size: 20px;
    color: #555;
    margin-bottom: 30px;
    line-height: 1.5;
  }
`;

const CallToAction = styled.a`
  display: inline-block;
  padding: 16px 32px;
  font-size: 18px;
  background: #228b22;
  color: white;
  border-radius: 30px;
  text-decoration: none;
  transition: background 0.3s;
  &:hover {
    background: #56ab2f;
  }
`;

const SliderContainer = styled.div`
  position: relative;
  flex: 1 1 300px;
  width: 400px;
  height: 300px;
  border-radius: 20px;
  overflow: hidden;
  z-index: 2;
`;

const SlideImage = styled.img`
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 20px;
  box-shadow: rgba(133, 189, 150, 0.3) 0px 15px 25px -5px;
  opacity: 0;
  animation: ${fade} 12s infinite;
  animation-fill-mode: forwards;
`;

const Slide1 = styled(SlideImage)`
  animation-delay: 0s;
`;
const Slide2 = styled(SlideImage)`
  animation-delay: 2.4s;
`;
const Slide3 = styled(SlideImage)`
  animation-delay: 4.8s;
`;
const Slide4 = styled(SlideImage)`
  animation-delay: 7.2s;
`;
const Slide5 = styled(SlideImage)`
  animation-delay: 9.6s;
`;
const Slide = styled(SlideImage)`
  animation-delay: 12s;
`;

const Wave = styled.svg`
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: auto;
  z-index: 1;
`;

const SectionWrapper = styled.section`
  padding: 60px 80px;
  background: #fff;
  text-align: center;
`;

// Donation list styled components (transformed from ListOfRequests)
const Container = styled.div`
  padding: 40px 60px;
  text-align: center;
`;

const Title = styled.h1`
  color: #228b22;
  font-size: 40px;
  margin-bottom: 20px;
`;

const SearchContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  background: white;
  padding: 8px;
  border-radius: 25px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  width: 320px;
  margin: auto;
  transition: all 0.3s ease-in-out;

  &:hover {
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }
`;

const SearchIcon = styled(FaSearch)`
  color: #555;
  margin-right: 8px;
`;

const SearchInput = styled.input`
  border: none;
  outline: none;
  font-size: 16px;
  width: 100%;
  padding: 8px;
  background: transparent;
`;

const Controls = styled.div`
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 15px;
  margin: 20px 0;
`;

const FilterIcon = styled(FaFilter)`
  margin-right: 8px;
`;

const Select = styled.select`
  padding: 10px;
  font-size: 16px;
  border-radius: 25px;
  border: 1px solid #ccc;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  transition: 0.3s;
  cursor: pointer;
  background: white;
  color: #333;
  font-weight: bold;

  &:hover {
    border-color: #228b22;
    transform: scale(1.05);
  }
`;

const ContentList = styled.div`
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 20px;
`;

const LoadingMessage = styled.div`
  font-size: 18px;
  color: #555;
`;

const NoDonations = styled.p`
  font-size: 18px;
  color: #888;
`;

const PaginationControls = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  gap: 10px;

  button {
    padding: 10px 20px;
    font-size: 16px;
    background: #228b22;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s;

    &:hover {
      background: #56ab2f;
    }

    &:disabled {
      background: #ccc;
      cursor: not-allowed;
    }
  }

  span {
    font-size: 16px;
    color: #333;
  }
`;

const ListOfDonations = () => {
  const [donations, setDonations] = useState([]);
  const [filteredDonations, setFilteredDonations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [sortOption, setSortOption] = useState("date");
  const [statusFilter, setStatusFilter] = useState("all");
  const [categoryFilter, setCategoryFilter] = useState("all");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(6);
  const { user: authUser, token, logout } = useAuth();

  const [user, setUser] = useState(authUser);
  useEffect(() => {
    const fetchUser = async () => {
      if (typeof authUser.id === "number") {
        if (!authUser || !authUser._id) return;
        try {
          const response = await getUserById(authUser._id);
          setUser(response.data);
        } catch (error) {
          console.error("Backend Error:", error);
        }
      }
      else if (typeof authUser.id === "string") {
        if (!authUser || !authUser.id) return;
        try {
          const response = await getUserById(authUser.id);
          setUser(response.data);
        } catch (error) {
          console.error("Backend Error:", error);
        }
      }
    };

    if (authUser && (authUser._id || authUser.id)) {
      fetchUser();
    }
  }, [authUser]);
  const isDonner = user?.role === "restaurant" || user?.role === "supermarket";
  const isRecipient = user?.role === "ong" || user?.role === "student";
  useEffect(() => {
    const fetchDonations = async () => {
      try {
        const response = await getDonations();
        setDonations(response.data);
        setFilteredDonations(response.data);
        setLoading(false);
        console.log("Donations fetched:", response.data);
      } catch (error) {
        console.error("Backend Error:", error);
        setLoading(false);
      }
    };
    fetchDonations();
  }, []);

  useEffect(() => {
    let updatedDonations = [...donations];

    if (searchQuery) {
      updatedDonations = updatedDonations.filter((donation) =>
        donation.title.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    if (statusFilter !== "all") {
      updatedDonations = updatedDonations.filter((donation) => donation.status === statusFilter);
    }

    if (categoryFilter !== "all") {
      updatedDonations = updatedDonations.filter((donation) => donation.category === categoryFilter);
    }

    updatedDonations.sort((a, b) => {
      if (sortOption === "title") {
        return a.title.localeCompare(b.title);
      } else if (sortOption === "status") {
        return a.status.localeCompare(b.status);
      } else {
        return new Date(a.expirationDate) - new Date(b.expirationDate);
      }
    });

    setFilteredDonations(updatedDonations);
    setCurrentPage(1); // Reset to page 1 when filters change
  }, [searchQuery, sortOption, statusFilter, categoryFilter, donations]);

  // Pagination logic
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentDonations = filteredDonations.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(filteredDonations.length / itemsPerPage);

  return (
    <>
      <GlobalStyle />
      <Navbar />
      <HomeContainer>
        {/* Hero Section */}
        <HeroSection>
          <HeroText>
            <h1>List Of Donations in SustainaFood</h1>
            <p>
              Give if you can, receive if you need—together, we reduce food waste and spread hope!
            </p>
            {isDonner &&    <CallToAction href="/AddDonation">Add Your Donation</CallToAction>}
          </HeroText>
          <SliderContainer>
            <Slide1 src={donation1} alt="Donation 1" />
            <Slide2 src={donation2} alt="Donation 2" />
            <Slide3 src={donation3} alt="Donation 3" />
            <Slide4 src={donation4} alt="Donation 4" />
            <Slide5 src={donation5} alt="Donation 5" />
            <Slide src={donation} alt="Donation 6" />
          </SliderContainer>
          <Wave viewBox="0 0 1440 320">
            <path
              fill="#f0f8f0"
              fillOpacity="1"
              d="M0,96L30,90C60,85,120,75,180,64C240,53,300,43,360,64C420,85,480,139,540,170.7C600,203,660,213,720,224C780,235,840,245,900,240C960,235,1020,213,1080,181.3C1140,149,1200,107,1260,112C1320,117,1380,171,1410,197.3L1440,224L1440,320L1410,320C1380,320,1320,320,1260,320C1200,320,1140,320,1080,320C1020,320,960,320,900,320C840,320,780,320,720,320C660,320,600,320,540,320C480,320,420,320,360,320C300,320,240,320,180,320C120,320,60,320,30,320L0,320Z"
            />
          </Wave>
        </HeroSection>

        {/* Donations List Section */}
        <SectionWrapper>
          <Container>
            <Title>List Of Donations</Title>
            <SearchContainer>
              <SearchIcon />
              <SearchInput
                type="text"
                placeholder="Search donations..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </SearchContainer>
            <Controls>
              <Select value={sortOption} onChange={(e) => setSortOption(e.target.value)}>
                <option value="date">📆 Sort by Expiration Date</option>
                <option value="title">🔠 Sort by Title</option>
                <option value="status">🔄 Sort by Status</option>
              </Select>
              <Select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>
                <option value="all">🟢 All Statuses</option>
                <option value="pending">🕒 Pending</option>
                <option value="approved">✅ Accepted</option>
                <option value="rejected">❌ Rejected</option>
              </Select>
              <Select value={categoryFilter} onChange={(e) => setCategoryFilter(e.target.value)}>
                <option value="all">📦 All Categories</option>
                <option value="prepared_meals">🍽️ Prepared Meals</option>
                <option value="packaged_products">🛒 Packaged Products</option>
              </Select>
            </Controls>
            <ContentList>
              {loading ? (
                <LoadingMessage>Loading...</LoadingMessage>
              ) : currentDonations.length > 0 ? (
                currentDonations.map((donationItem) => (
                  <Composantdonation key={donationItem._id} donation={donationItem} />
                ))
              ) : (
                <NoDonations>No matching donations found.</NoDonations>
              )}
            </ContentList>
            <PaginationControls>
              <button onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))} disabled={currentPage === 1}>
                Previous
              </button>
              <span>Page {currentPage} of {totalPages}</span>
              <button onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))} disabled={currentPage === totalPages}>
                Next
              </button>
            </PaginationControls>
          </Container>
        </SectionWrapper>
      </HomeContainer>
      <Footer />
    </>
  );
};

export default ListOfDonations;
</file>

<file path="sustainafood-backend/controllers/donationTransactionController.js">
const DonationTransaction = require('../models/DonationTransaction');
const RequestNeed = require('../models/RequestNeed');
const Donation = require('../models/Donation');
const Product = require('../models/Product');
const Counter = require('../models/Counter');

// ✅ Get all donation transactions
async function getAllDonationTransactions(req, res) {
    try {
        const transactions = await DonationTransaction.find()
            .populate('requestNeed')
            .populate('donation')
            .populate('allocatedProducts.product');
        res.status(200).json(transactions);
    } catch (error) {
        res.status(500).json({ message: 'Server error', error });
    }
}

// ✅ Get donation transaction by ID
async function getDonationTransactionById(req, res) {
    try {
        const { id } = req.params;
        const transaction = await DonationTransaction.findById(id)
            .populate('requestNeed')
            .populate('donation')
            .populate('allocatedProducts.product');

        if (!transaction) {
            return res.status(404).json({ message: 'Donation transaction not found' });
        }

        res.status(200).json(transaction);
    } catch (error) {
        res.status(500).json({ message: 'Server error', error });
    }
}

// ✅ Get donation transactions by RequestNeed ID
async function getDonationTransactionsByRequestNeedId(req, res) {
    try {
        const { requestNeedId } = req.params;
        const transactions = await DonationTransaction.find({ requestNeed: requestNeedId })
            .populate('donation')
            .populate('allocatedProducts.product');

        if (!transactions.length) {
            return res.status(404).json({ message: 'No transactions found for this request need' });
        }

        res.status(200).json(transactions);
    } catch (error) {
        res.status(500).json({ message: 'Server error', error });
    }
}

// ✅ Get donation transactions by Donation ID
async function getDonationTransactionsByDonationId(req, res) {
    try {
        const { donationId } = req.params;
        const transactions = await DonationTransaction.find({ donation: donationId })
            .populate('requestNeed')
            .populate('allocatedProducts.product');

        if (!transactions.length) {
            return res.status(404).json({ message: 'No transactions found for this donation' });
        }

        res.status(200).json(transactions);
    } catch (error) {
        res.status(500).json({ message: 'Server error', error });
    }
}

// ✅ Get donation transactions by Status
async function getDonationTransactionsByStatus(req, res) {
    try {
        const { status } = req.params;
        const transactions = await DonationTransaction.find({ status })
            .populate('requestNeed')
            .populate('donation')
            .populate('allocatedProducts.product');

        if (!transactions.length) {
            return res.status(404).json({ message: 'No transactions found with this status' });
        }

        res.status(200).json(transactions);
    } catch (error) {
        res.status(500).json({ message: 'Server error', error });
    }
}

// ✅ Create a new donation transaction
async function createDonationTransaction(req, res) {
    try {
        const { requestNeed, donation, allocatedProducts, status } = req.body;

        // Validate required fields
        if (!requestNeed || !donation || !allocatedProducts || !status) {
            return res.status(400).json({ message: 'All fields are required' });
        }

        // Validate allocatedProducts
        if (!Array.isArray(allocatedProducts) || !allocatedProducts.length) {
            return res.status(400).json({ message: 'At least one allocated product is required' });
        }

        // Create the donation transaction
        const newTransaction = new DonationTransaction({
            requestNeed,
            donation,
            allocatedProducts,
            status
        });

        await newTransaction.save();
        res.status(201).json({ message: 'Donation transaction created successfully', newTransaction });
    } catch (error) {
        res.status(400).json({ message: 'Failed to create donation transaction', error });
    }
}

// ✅ Update a donation transaction by ID
async function updateDonationTransaction(req, res) {
    try {
        const { id } = req.params;
        const { requestNeed, donation, allocatedProducts, status } = req.body;

        const updatedTransaction = await DonationTransaction.findByIdAndUpdate(
            id,
            { requestNeed, donation, allocatedProducts, status },
            { new: true }
        )
            .populate('requestNeed')
            .populate('donation')
            .populate('allocatedProducts.product');

        if (!updatedTransaction) {
            return res.status(404).json({ message: 'Donation transaction not found' });
        }

        res.status(200).json({ message: 'Donation transaction updated successfully', updatedTransaction });
    } catch (error) {
        res.status(500).json({ message: 'Failed to update donation transaction', error });
    }
}

// ✅ Delete a donation transaction by ID
async function deleteDonationTransaction(req, res) {
    try {
        const { id } = req.params;
        const deletedTransaction = await DonationTransaction.findByIdAndDelete(id);

        if (!deletedTransaction) {
            return res.status(404).json({ message: 'Donation transaction not found' });
        }

        res.status(200).json({ message: 'Donation transaction deleted successfully' });
    } catch (error) {
        res.status(500).json({ message: 'Failed to delete donation transaction', error });
    }
}
// ✅ Get transactions by recipient ID
async function getTransactionsByRecipientId(req, res) {
    try {
        const { recipientId } = req.params;
        const transactions = await DonationTransaction.find({ recipient: recipientId })
            .populate('requestNeed')
            .populate('donation')
            .populate('allocatedProducts.product')
            .populate('donor');

        if (!transactions.length) {
            return res.status(404).json({ message: 'No transactions found for this recipient' });
        }

        res.status(200).json(transactions);
    } catch (error) {
        res.status(500).json({ message: 'Server error', error });
    }
}

// ✅ Accept a donation transaction
async function acceptDonationTransaction(req, res) {
    try {
        const { transactionId } = req.params;
        const transaction = await DonationTransaction.findById(transactionId)
            .populate('requestNeed')
            .populate('donation')
            .populate('allocatedProducts.product');

        if (!transaction) return res.status(404).json({ message: 'Transaction not found' });
        if (transaction.status !== 'pending') return res.status(400).json({ message: `Transaction cannot be accepted in its current state (${transaction.status})` });

        const donation = transaction.donation;
        for (const allocatedProduct of transaction.allocatedProducts) {
            const donationProduct = donation.products.find(p => p.product.toString() === allocatedProduct.product._id.toString());
            if (donationProduct) {
                donationProduct.quantity -= allocatedProduct.quantity;
                if (donationProduct.quantity < 0) donationProduct.quantity = 0;
            }
        }
        await donation.save();

        transaction.status = 'approved';
        transaction.responseDate = new Date();
        await transaction.save();

        await checkRequestFulfillment(transaction.requestNeed._id);

        res.status(200).json({ message: 'Donation accepted successfully', transaction });
    } catch (error) {
        res.status(500).json({ message: 'Failed to accept donation', error: error.message });
    }
}

// ✅ Reject a donation transaction
async function rejectDonationTransaction(req, res) {
    try {
        const { transactionId } = req.params;
        const { rejectionReason } = req.body;

        // Find the transaction
        const transaction = await DonationTransaction.findById(transactionId);

        if (!transaction) {
            return res.status(404).json({ message: 'Transaction not found' });
        }

        // Check if the transaction is in a state that can be rejected
        if (transaction.status !== TransactionStatus.PENDING) {
            return res.status(400).json({ 
                message: `Transaction cannot be rejected in its current state (${transaction.status})`
            });
        }

        // Update the transaction status
        transaction.status = TransactionStatus.REJECTED;
        transaction.responseDate = new Date();
        transaction.rejectionReason = rejectionReason || 'No reason provided';
        await transaction.save();

        res.status(200).json({ 
            message: 'Donation rejected successfully', 
            transaction 
        });
    } catch (error) {
        res.status(500).json({ 
            message: 'Failed to reject donation', 
            error: error.message 
        });
    }
}
// controllers/donationTransactionController.js
// controllers/donationTransactionController.js
async function createAndAcceptDonationTransaction(req, res) {
    try {
        const { donationId, requestNeedId } = req.body;
        const user = req.user;

        console.log('Creating transaction with:', { donationId, requestNeedId, userId: user?._id });

        const donation = await Donation.findById(donationId);
        if (!donation) return res.status(404).json({ message: 'Donation not found' });

        const requestNeed = await RequestNeed.findById(requestNeedId);
        if (!requestNeed) return res.status(404).json({ message: 'RequestNeed not found' });

        const recipientId = requestNeed.recipient || user._id;

        // Manually fetch and increment the counter
        const counter = await Counter.findOneAndUpdate(
            { _id: 'DonationTransactionId' },
            { $inc: { seq: 1 } },
            { new: true, upsert: true }
        );
        const transactionId = counter.seq;

        const transaction = new DonationTransaction({
            id: transactionId, // Explicitly set id
            donation: donationId,
            requestNeed: requestNeedId,
            donor: donation.donor,
            recipient: recipientId,
            allocatedProducts: donation.products.map(p => ({
                product: p.product,
                quantity: p.quantity
            })),
            status: 'approved',
            responseDate: new Date()
        });

        console.log('Transaction before save:', transaction.toObject());
        await transaction.save();
        console.log('Transaction saved:', transaction.toObject());

        donation.status = 'approved';
        await donation.save();

        await checkRequestFulfillment(requestNeedId);

        res.status(201).json({ message: 'Transaction created and accepted successfully', transaction });
    } catch (error) {
        console.error('Error creating and accepting transaction:', error);
        res.status(500).json({ message: 'Failed to create and accept transaction', error: error.message });
    }
}
  
  async function checkRequestFulfillment(requestId) {
    const request = await RequestNeed.findById(requestId).populate('requestedProducts');
    const transactions = await DonationTransaction.find({ 
      requestNeed: requestId, 
      status: 'approved' 
    }).populate('allocatedProducts.product');
  
    const requestedMap = new Map(request.requestedProducts.map(p => [p._id.toString(), p.totalQuantity]));
    const allocatedMap = new Map();
  
    transactions.forEach(t => {
      t.allocatedProducts.forEach(ap => {
        const productId = ap.product._id.toString();
        allocatedMap.set(productId, (allocatedMap.get(productId) || 0) + ap.quantity);
      });
    });
  
    const allFulfilled = [...requestedMap].every(([productId, requestedQty]) => 
      (allocatedMap.get(productId) || 0) >= requestedQty
    );
  
    if (allFulfilled) {
      request.status = 'fulfilled';
      await request.save();
    }
  }
module.exports = {
    getAllDonationTransactions,
    getDonationTransactionById,
    getDonationTransactionsByRequestNeedId,
    getDonationTransactionsByDonationId,
    getDonationTransactionsByStatus,
    createDonationTransaction,
    updateDonationTransaction,
    deleteDonationTransaction,
    getTransactionsByRecipientId,
    acceptDonationTransaction,
    rejectDonationTransaction,
    createAndAcceptDonationTransaction,
};
</file>

<file path="sustainafood-backend/controllers/productController.js">
const Product = require('../models/Product');
const Counter = require('../models/Counter');
const mongoose = require('mongoose');

// ✅ Get all products
async function getAllProducts(req, res) {
    try {
        const products = await Product.find().populate('donation');
        res.status(200).json(products);
    } catch (error) {
        console.error("Error in getAllProducts:", error);
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// ✅ Get product by ID
async function getProductById(req, res) {
    try {
        const { id } = req.params;

        // Check if 'id' is a valid integer
        const parsedId = parseInt(id, 10);
        if (isNaN(parsedId)) {
            return res.status(400).json({ message: 'Invalid product ID. Must be an integer.' });
        }

        const product = await Product.findById(parsedId).populate('donation');

        if (!product) {
            return res.status(404).json({ message: 'Product not found' });
        }

        res.status(200).json(product);
    } catch (error) {
        console.error("Error in getProductById:", error);
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// ✅ Get products by Donation ID
async function getProductsByDonationId(req, res) {
    try {
        const { idDonation } = req.params;

        if (!mongoose.Types.ObjectId.isValid(idDonation)) {
            return res.status(400).json({ message: 'Invalid Donation ID format' });
        }

        const products = await Product.find({ donation: idDonation });

        if (!products.length) {
            return res.status(404).json({ message: 'No products found for this donation' });
        }

        res.status(200).json(products);
    } catch (error) {
        console.error("Error in getProductsByDonationId:", error);
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// ✅ Get products by Status
async function getProductsByStatus(req, res) {
    try {
        const { status } = req.params;
        const products = await Product.find({ status });

        if (!products.length) {
            return res.status(404).json({ message: 'No products found with this status' });
        }

        res.status(200).json(products);
    } catch (error) {
        console.error("Error in getProductsByStatus:", error);
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// ✅ Create a new product
async function createProduct(req, res) {
    try {
        console.log('Received request to create product:', req.body);
        const { name, productType, productDescription, weightPerUnit, weightUnit, totalQuantity, donation, status } = req.body;

        // Validate required fields
        if (!name || !productType || !productDescription || !donation || !status) {
            console.log('Validation failed: Missing required fields');
            return res.status(400).json({ message: 'Please fill in all required fields.' });
        }

        // Check if an image file was uploaded
        let imagePath = null;
        if (req.files && req.files.image && req.files.image[0]) {
            imagePath = req.files.image[0].path;
            console.log('Image uploaded:', imagePath);
        }

        // Generate the ID using the Counter model
        console.log('Generating ID for new Product');
        const counter = await Counter.findOneAndUpdate(
            { _id: 'ProductId' },
            { $inc: { seq: 1 } },
            { new: true, upsert: true }
        );
        if (!counter) {
            console.log('Counter not found or created for ProductId');
            throw new Error('Counter not found or created for ProductId');
        }
        const productId = counter.seq;
        console.log(`Assigned ID: ${productId} to new Product`);

        // Build the product object
        const productData = {
            id: productId,
            name,
            productType,
            productDescription,
            weightPerUnit,
            weightUnit,
            totalQuantity,
            donation,
            status,
            image: imagePath,
            isArchived: false,
        };

        // Create the product
        console.log('Saving new product:', productData);
        const newProduct = new Product(productData);
        await newProduct.save();

        console.log('Product created successfully:', newProduct);
        res.status(201).json(newProduct);
    } catch (error) {
        console.error("Error in createProduct:", error);
        res.status(400).json({ message: 'Failed to create product', error: error.message });
    }
}

// ✅ Update a product by ID
async function updateProduct(req, res) {
    try {
        const { id } = req.params;

        // Check if 'id' is a valid integer
        const parsedId = parseInt(id, 10);
        if (isNaN(parsedId)) {
            return res.status(400).json({ message: 'Invalid product ID. Must be an integer.' });
        }

        const { name, productType, productDescription, weightPerUnit, weightUnit, totalQuantity, donation, status } = req.body;

        // Find the product by ID
        const product = await Product.findById(parsedId);

        if (!product) {
            return res.status(404).json({ message: 'Product not found' });
        }

        // Check if a new image file was uploaded
        if (req.files && req.files.image && req.files.image[0]) {
            product.image = req.files.image[0].path; // Update the image path
        }

        // Update other fields if provided
        if (name) product.name = name;
        if (productType) product.productType = productType;
        if (productDescription) product.productDescription = productDescription;
        if (weightPerUnit) product.weightPerUnit = weightPerUnit;
        if (weightUnit) product.weightUnit = weightUnit;
        if (totalQuantity) product.totalQuantity = totalQuantity;
        if (donation) product.donation = donation;
        if (status) product.status = status;

        // Save the updated product
        const updatedProduct = await product.save();

        res.status(200).json({ message: 'Product updated successfully', updatedProduct });
    } catch (error) {
        console.error("Error in updateProduct:", error);
        res.status(500).json({ message: 'Failed to update product', error: error.message });
    }
}

// ✅ Delete a product by ID
async function deleteProduct(req, res) {
    try {
        const { id } = req.params;

        // Check if 'id' is a valid integer
        const parsedId = parseInt(id, 10);
        if (isNaN(parsedId)) {
            return res.status(400).json({ message: 'Invalid product ID. Must be an integer.' });
        }

        const deletedProduct = await Product.findOneAndDelete({id: parsedId});

        if (!deletedProduct) {
            return res.status(404).json({ message: 'Product not found' });
        }

        res.status(200).json({ message: 'Product deleted successfully' });
    } catch (error) {
        console.error("Error in deleteProduct:", error);
        res.status(500).json({ message: 'Failed to delete product', error: error.message });
    }
}

module.exports = { getAllProducts, getProductById, getProductsByDonationId, getProductsByStatus, createProduct, updateProduct, deleteProduct };
</file>

<file path="sustainafood-backend/routes/donationTransactionRoutes.js">
const express = require('express');
const router = express.Router();
const donationTransactionController = require('../controllers/donationTransactionController');

// ✅ Get all donation transactions
router.get('/', donationTransactionController.getAllDonationTransactions);

// ✅ Get donation transaction by ID
router.get('/:id', donationTransactionController.getDonationTransactionById);

// ✅ Get donation transactions by RequestNeed ID
router.get('/requestNeed/:requestNeedId', donationTransactionController.getDonationTransactionsByRequestNeedId);

// ✅ Get donation transactions by Donation ID
router.get('/donation/:donationId', donationTransactionController.getDonationTransactionsByDonationId);

// ✅ Get donation transactions by Status
router.get('/status/:status', donationTransactionController.getDonationTransactionsByStatus);

// ✅ Create a new donation transaction
router.post('/', donationTransactionController.createDonationTransaction);

// ✅ Update a donation transaction by ID
router.put('/:id', donationTransactionController.updateDonationTransaction);

// ✅ Delete a donation transaction by ID
router.delete('/:id', donationTransactionController.deleteDonationTransaction);

router.get('/recipient/:recipientId', donationTransactionController.getTransactionsByRecipientId);
router.put('/:transactionId/accept', donationTransactionController.acceptDonationTransaction);
router.put('/:transactionId/reject', donationTransactionController.rejectDonationTransaction);
// New endpoint to create and accept a transaction from a donation
router.post('/create-and-accept', donationTransactionController.createAndAcceptDonationTransaction);
module.exports = router;
</file>

<file path="sustainafood-frontend/src/components/backoffcom/Sidebar.jsx">
import { Link, useLocation } from "react-router-dom";
import { useState } from "react";
import { 
    FaUsers, FaChartBar, FaCogs, FaTruck, FaUserCog, 
    FaAppleAlt, FaChevronDown, FaChevronUp, FaUniversity, 
    FaHandsHelping, FaFileAlt, FaLock, FaQuestionCircle 
} from "react-icons/fa";
import logo from '../../assets/images/logooo.png';
import "/src/assets/styles/backoffcss/sidebar.css";

// Sidebar component for navigation
const Sidebar = () => {
  // State to manage dropdown visibility
  const [showUserManagement, setShowUserManagement] = useState(false);
  const [showRecipients, setShowRecipients] = useState(false);
  const [showDonors, setShowDonors] = useState(false);
  const [showFoodDonationManagement, setShowFoodDonationManagement] = useState(false);
  const [showFoodDonation, setShowFoodDonation] = useState(false);

  const location = useLocation(); // Get current location

  return (
    <div className="sidebar">
      {/* Sidebar header with logo and title */}
      <div className="sidebar-header">
        <img src={logo} alt="Logo" className="logo" />
        <h2>SustainaFood Admin</h2>
      </div>
      <nav>
        {/* Dashboard link */}
        <Link to="/dashboard" className={location.pathname === "/dashboard" ? "active" : ""}>
          <FaChartBar className="icon" /> <span>Dashboard</span>
        </Link>
        {/* Reports link */}
        <Link to="/reports">
          <FaFileAlt className="icon" /> <span>Reports</span>
        </Link>

        {/* User Management dropdown */}
        <div className="dropdown">
          <button onClick={() => setShowUserManagement(!showUserManagement)}>
            <FaUsers className="icon" /> <span>User Management</span> 
            {showUserManagement ? <FaChevronUp /> : <FaChevronDown />}
          </button>
          {showUserManagement && (
            <div className="dropdown-content-dashboard">
              {/* Recipients submenu */}
              <button className="sub-dropdown" onClick={() => setShowRecipients(!showRecipients)}>
                <FaHandsHelping className="icon" /> <span>Recipients</span> 
                {showRecipients ? <FaChevronUp /> : <FaChevronDown />}
              </button>
              {showRecipients && (
                <ul className="sub-dropdown-content" id="recipients-dropdown" role="menu">
                  <li><Link to="/recipients/students" className={location.pathname === "/recipients/students" ? "active" : ""} role="menuitem">Students</Link></li>
                  <li><Link to="/recipients/ngos" className={location.pathname === "/recipients/ngos" ? "active" : ""} role="menuitem">NGOs</Link></li>
                </ul>
              )}

              {/* Donors submenu */}
              <button className="sub-dropdown" onClick={() => setShowDonors(!showDonors)}>
                <FaUniversity className="icon" /> <span>Donors</span> 
                {showDonors ? <FaChevronUp /> : <FaChevronDown />}
              </button>
              {showDonors && (
                <ul className="sub-dropdown-content" id="donors-dropdown" role="menu">
                  <li><Link to="/donors/supermarkets" className={location.pathname === "/donors/supermarkets" ? "active" : ""} role="menuitem">Supermarkets</Link></li>
                  <li><Link to="/donors/restaurants" className={location.pathname === "/donors/restaurants" ? "active" : ""} role="menuitem">Restaurants</Link></li>
                </ul>
              )}

              <Link to="/transporters" className={location.pathname === "/transporters" ? "active" : ""} role="menuitem">Transporters</Link>
            </div>
          )}
        </div>

        {/* Food Donation Management avec sous-menu ✅
        <div className="dropdown">
          <button
            onClick={() => setShowFoodDonation(!showFoodDonation)}
            aria-expanded={showFoodDonation}
            aria-controls="food-donation-dropdown"
          >
            <FaAppleAlt className="icon" /> <span>Food Donation Management</span> {showFoodDonation ? <FaChevronUp /> : <FaChevronDown />}
          </button>
          {showFoodDonation && (
            <nav className="dropdown-content-dashboard" id="food-donation-dropdown" role="menu">
              <Link to="/food-donation/requests" className={location.pathname === "/food-donation/requests" ? "active" : ""} role="menuitem">Request list</Link>
              <Link to="/food-donation/product" className={location.pathname === "/food-donation/product" ? "active" : ""} role="menuitem">Product list</Link>
            </nav>
          )}
        </div> */}

        {/* Food Donation Management dropdown */}
        <div className="dropdown">
          <button onClick={() => setShowFoodDonationManagement(!showFoodDonationManagement)}>
            <FaAppleAlt className="icon" /> <span>Food Donation Management</span> 
            {showFoodDonationManagement ? <FaChevronUp /> : <FaChevronDown />}
          </button>
          {showFoodDonationManagement && (
            <div className="dropdown-content-dashboard">
              <Link to="/Donations">Donation Management</Link>
              <Link to="/DonationTransList">Donation Transaction List</Link>
              <Link to="/food-donation/requests" className={location.pathname === "/food-donation/requests" ? "active" : ""} role="menuitem">Request list</Link>
              <Link to="/food-donation/product" className={location.pathname === "/food-donation/product" ? "active" : ""} role="menuitem">Product list</Link>
            </div>
          )}
        </div>

        {/* Logistics & Transport link */}
        <Link to="/logistics">
          <FaTruck className="icon" /> <span>Logistics & Transport</span>
        </Link>
        {/* Settings link */}
        <Link to="/settings">
          <FaCogs className="icon" /> <span>Settings</span>
        </Link>
        {/* Authentification link */}
        <Link to="/Authentification">
          <FaLock className="icon" /> <span>Authentification</span>
        </Link>
        {/* Help Center link */}
        <Link to="/Help-Center">
          <FaQuestionCircle className="icon" /> <span>Help Center</span>
        </Link>
      </nav>
    </div>
  );
};

export default Sidebar;
</file>

<file path="sustainafood-frontend/src/components/Composantdonation.jsx">
import React from 'react';
import { Link } from 'react-router-dom';
import styled from 'styled-components';

// Container for each card, ensuring same size across all cards
const Card = styled.div`
  background: white;
  border-radius: 12px;
  box-shadow: 0px 10px 25px rgba(0, 0, 0, 0.1);
  padding: 20px;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  width: 100%;
  max-width: 400px;
  min-height: 350px;
  border-left: 6px solid #228b22;

  &:hover {
    transform: translateY(-5px);
    box-shadow: 0px 15px 30px rgba(0, 0, 0, 0.15);
  }
`;

// Title with icon
const Title = styled.h3`
  color: #228b22;
  font-size: 22px;
  margin-bottom: 10px;
  display: flex;
  align-items: center;
  gap: 8px;
  font-weight: bold;
`;

// Details section
const Details = styled.p`
  font-size: 16px;
  color: #555;
  margin: 5px 0;
  line-height: 1.4;
  display: flex;
  align-items: center;
  gap: 6px;
  flex-wrap: wrap;
`;

// Status Badge with dynamic colors
const StatusBadge = styled.span`
  display: inline-block;
  padding: 5px 12px;
  border-radius: 20px;
  font-size: 14px;
  font-weight: bold;
  color: white;
  background: ${({ status }) => {
    switch (status) {
      case 'pending':
        return 'orange';
      case 'approved':
        return '#228b22';
      case 'rejected':
        return 'red';
      default:
        return '#888';
    }
  }};
`;

// Product list
const ProductList = styled.ul`
  list-style: none;
  padding: 0;
  margin-top: 10px;
`;

const ProductItem = styled.li`
  background: #f5f5f5;
  padding: 10px;
  border-radius: 8px;
  margin-bottom: 6px;
  font-size: 14px;
  color: #333;
  display: flex;
  flex-direction: column;
  gap: 4px;
`;

// Button to view more details
const SeeMoreButton = styled(Link)`
  display: inline-block;
  padding: 10px 16px;
  font-size: 16px;
  font-weight: bold;
  text-align: center;
  border-radius: 30px;
  background: #228b22;
  color: white;
  text-decoration: none;
  margin-top: 15px;
  transition: background 0.3s;

  &:hover {
    background: #1e7a1e;
  }
`;

export const Composantdonation = ({ donation }) => {
  if (!donation || typeof donation !== 'object' || !donation._id) {
    return <div>Invalid donation data.</div>;
  }

  const {
    _id,
    title,
    location,
    expirationDate,
    products,
    status,
  } = donation;

  return (
    <Card>
      <div>
        <Title>🛒 {title || 'Untitled Donation'}</Title>
        <Details>📍 <strong>Location:</strong> {location || 'Not specified'}</Details>
        <Details>
          📆 <strong>Expiration:</strong>{' '}
          {expirationDate ? new Date(expirationDate).toLocaleDateString() : 'Not defined'}
        </Details>
        <Details>
          🔄 <strong>Status:</strong> <StatusBadge status={status}>{status || 'Unknown'}</StatusBadge>
        </Details>

        {/* Available Products Section */}
        <h4>📦 Available Products:</h4>
        <ProductList>
          {Array.isArray(products) && products.length > 0 ? (
            products.slice(0, 2).map((product, index) => (
              <ProductItem key={index}>
                {product.productType && product.productDescription ? (
                  <>
                    <span>
                      <strong>Type:</strong> {product.productType || 'Not specified'}
                    </span>
                    <span>
                      <strong>Description:</strong> {product.productDescription || 'Not specified'}
                    </span>
                    <span>
                      <strong>Quantity:</strong>{' '}
                      {product.totalQuantity || product.quantity || 0}{' '}
                      {product.weightUnitTotale || product.weightUnit || ''}
                    </span>
                    <span>
                      <strong>Status:</strong> {product.status || 'Unknown'}
                    </span>
                  </>
                ) : (
                  <span>No product data</span>
                )}
              </ProductItem>
            ))
          ) : (
            <ProductItem>No products available</ProductItem>
          )}
        </ProductList>
      </div>

      {/* Button to view more details */}
      <SeeMoreButton to={`/DetailsDonations/${_id}`}>See More</SeeMoreButton>
    </Card>
  );
};

export default Composantdonation;
</file>

<file path="sustainafood-frontend/src/pages/ListDonationsRequest.jsx">
// src/pages/ListDonationsRequest.jsx
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import { getDonationByRequestId } from '../api/donationService';
import { getRequestById } from '../api/requestNeedsService';
import { getUserById } from '../api/userService';
import { createAndAcceptDonationTransaction } from '../api/donationTransactionService';
import imgmouna from '../assets/images/imgmouna.png';
import styled, { createGlobalStyle } from 'styled-components';
import { FaSearch } from 'react-icons/fa';

// Global Styles
const GlobalStyle = createGlobalStyle`
  body {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    background: #f0f8f0;
    box-sizing: border-box;
  }
`;

// Styled Components
const DonationContainer = styled.div`
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
`;

const Controls = styled.div`
  display: flex;
  justify-content: flex-end;
  gap: 15px;
  margin: 20px 0;
`;

const Select = styled.select`
  font-size: 16px;
  border-radius: 25px;
  border: 1px solid #ccc;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  transition: 0.3s;
  cursor: pointer;
  background: white;
  color: #333;
  font-weight: bold;
  padding: 10px 10px 10px 3px;
  
  &:hover {
    border-color: #228b22;
    transform: scale(1.05);
  }
`;

const DonationCard = styled.div`
  background: #f8f9fa;
  border-left: 4px solid #228b22;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 20px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: transform 0.2s ease-in-out;

  &:hover {
    transform: scale(1.02);
  }

  @media (max-width: 768px) {
    padding: 15px;
  }
`;

const ProfileInfo = styled.div`
  display: flex;
  align-items: center;
  gap: 15px;
  margin-bottom: 15px;

  @media (max-width: 768px) {
    flex-direction: column;
    align-items: flex-start;
  }
`;

const ProfileImg = styled.img`
  width: 50px;
  height: 50px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #228b22;
`;

const ProfileText = styled.p`
  margin: 0;
  font-size: 16px;
  font-weight: bold;
  color: #495057;
`;

const DonationDetails = styled.div`
  margin-bottom: 15px;
`;

const DonationDetail = styled.p`
  font-size: 14px;
  color: #495057;
  margin: 5px 0;

  strong {
    color: #222;
    font-weight: 600;
  }
`;

const ProductSection = styled.div`
  margin-bottom: 15px;
`;

const ProductsTitle = styled.h4`
  font-size: 16px;
  color: #222;
  margin: 0 0 10px;
`;

const ProductList = styled.ul`
  list-style: none;
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 8px;
  margin-top: 10px;
`;

const ProductItem = styled.li`
  background: #ffffff;
  padding: 10px;
  border-left: 3px solid #228b22;
  border-radius: 5px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  font-size: 14px;

  @media (max-width: 768px) {
    flex-direction: column;
    align-items: flex-start;
  }
`;

const ProductDetails = styled.div`
  display: flex;
  flex-direction: column;
  flex-grow: 1;

  span {
    display: block;
    font-size: 13px;
    color: #333;
  }
`;

const ProductQuantity = styled.span`
  font-size: 16px;
  font-weight: bold;
  color: #d9534f;
  padding: 4px 8px;
  border-radius: 4px;

  @media (max-width: 768px) {
    font-size: 14px;
    padding: 6px;
  }
`;

const ButtonContainer = styled.div`
  display: flex;
  justify-content: space-evenly;
  margin-top: 15px;
`;

const ActionButton = styled.button`
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
  font-weight: bold;
  transition: background 0.3s ease-in-out;

  &.accept-btn {
    background-color: #28a745;
    color: white;

    &:hover {
      background-color: #218838;
    }
  }

  &.reject-btn {
    background-color: #dc3545;
    color: white;

    &:hover {
      background-color: #c82333;
    }
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
`;

const PaginationControls = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  gap: 10px;

  button {
    padding: 10px 20px;
    font-size: 14px;
    background: #228b22;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s;

    &:hover:not(:disabled) {
      background: #56ab2f;
    }

    &:disabled {
      background: #ccc;
      cursor: not-allowed;
    }
  }

  span {
    font-size: 14px;
    color: #333;
  }
`;

const LoadingMessage = styled.div`
  font-size: 18px;
  color: #555;
  text-align: center;
  padding: 40px;
`;

const NoDonations = styled.p`
  font-size: 18px;
  color: #888;
  text-align: center;
  padding: 20px;
`;

const ErrorContainer = styled.div`
  text-align: center;
  padding: 40px;
`;

const DonationTitle = styled.h1`
  color: #228b22;
  font-size: 40px;
  margin-bottom: 20px;
  text-align: center;
`;

const SearchContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  background: white;
  padding: 8px;
  border-radius: 25px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  width: 320px;
  margin: 0 auto 20px;
  transition: all 0.3s ease-in-out;

  &:hover {
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }
`;

const SearchIcon = styled(FaSearch)`
  color: #555;
  margin-right: 8px;
`;

const SearchInput = styled.input`
  border: none;
  outline: none;
  font-size: 16px;
  width: 100%;
  padding: 8px;
  background: transparent;
`;

const RejectionModal = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
`;

const ModalContent = styled.div`
  background: white;
  padding: 20px;
  border-radius: 8px;
  width: 400px;
  max-width: 90%;
`;

const ModalTextarea = styled.textarea`
  width: 100%;
  min-height: 100px;
  margin: 10px 0;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
`;

const ModalButtons = styled.div`
  display: flex;
  justify-content: flex-end;
  gap: 10px;
`;

const Spinner = styled.div`
  display: inline-block;
  width: ${props => props.size === 'sm' ? '12px' : '16px'};
  height: ${props => props.size === 'sm' ? '12px' : '16px'};
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: white;
  animation: spin 1s ease-in-out infinite;
  margin-right: 5px;

  @keyframes spin {
    to { transform: rotate(360deg); }
  }
`;

const StatusBadge = styled.span`
  display: inline-block;
  padding: 3px 8px;
  border-radius: 12px;
  font-size: 12px;
  font-weight: bold;
  margin-left: 5px;
  
  &.pending {
    background-color: #fff3cd;
    color: #856404;
  }
  
  &.approved {
    background-color: #d4edda;
    color: #155724;
  }
  
  &.rejected {
    background-color: #f8d7da;
    color: #721c24;
  }
`;

const ListDonationsRequest = () => {
  const { id } = useParams();
  const [donations, setDonations] = useState([]);
  const [filteredDonations, setFilteredDonations] = useState([]);
  const [request, setRequest] = useState(null);
  const [users, setUsers] = useState({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(3);
  const [filterOption, setFilterOption] = useState('all');
  const [sortOption, setSortOption] = useState('date');
  const [searchQuery, setSearchQuery] = useState('');
  const [processing, setProcessing] = useState({});
  const [rejectionReason, setRejectionReason] = useState('');
  const [currentRejectionId, setCurrentRejectionId] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const requestResponse = await getRequestById(id);
        setRequest(requestResponse.data);

        const donationData = await getDonationByRequestId(id);
        const donationsArray = Array.isArray(donationData) ? donationData : [];
        setDonations(donationsArray);

        if (donationsArray.length > 0) {
          const userPromises = donationsArray.map(donation =>
            getUserById(donation.donor)
              .then(response => ({ id: donation.donor, data: response.data }))
              .catch(err => {
                console.error(`Error fetching user ${donation.donor}:`, err);
                return { id: donation.donor, data: null };
              })
          );
          const userResults = await Promise.all(userPromises);
          const userMap = userResults.reduce((acc, { id, data }) => {
            if (data) acc[id] = data;
            return acc;
          }, {});
          setUsers(userMap);
        }
      } catch (err) {
        console.error('Fetch error:', err.response?.data || err.message);
        setError(err.response?.data?.message || 'Failed to fetch data');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [id]);

  useEffect(() => {
    if (!request || donations.length === 0) return;

    let updatedDonations = [...donations];

    // Apply filters
    if (filterOption === 'pending' || filterOption === 'approved' || filterOption === 'rejected') {
      updatedDonations = updatedDonations.filter(d => d.status === filterOption);
    } else if (filterOption === 'full') {
      updatedDonations = updatedDonations.filter(donation =>
        donation.products.every(item => {
          const requestedProduct = request.requestedProducts?.find(
            rp => rp.productType === item.product?.productType || rp._id === item.product?._id
          );
          return requestedProduct && item.quantity >= requestedProduct.totalQuantity;
        })
      );
    }

    // Apply search
    if (searchQuery) {
      updatedDonations = updatedDonations.filter(donation => {
        const productMatch = donation.products?.some(product => 
          product.product?.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
          product.product?.productType?.toLowerCase().includes(searchQuery.toLowerCase())
        );
        const donorMatch = users[donation.donor]?.name?.toLowerCase().includes(searchQuery.toLowerCase());
        return productMatch || donorMatch;
      });
    }

    // Apply sorting
    updatedDonations.sort((a, b) => {
      if (sortOption === 'title') {
        return a.title.localeCompare(b.title);
      } else if (sortOption === 'donor') {
        return (users[a.donor]?.name || '').localeCompare(users[b.donor]?.name || '');
      } else if (sortOption === 'status') {
        return a.status.localeCompare(b.status);
      } else {
        return new Date(a.expirationDate) - new Date(b.expirationDate);
      }
    });

    setFilteredDonations(updatedDonations);
    setCurrentPage(1);
  }, [donations, request, users, filterOption, sortOption, searchQuery]);

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentDonations = filteredDonations.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(filteredDonations.length / itemsPerPage);

  const paginate = (pageNumber) => setCurrentPage(pageNumber);

  const handleAcceptDonation = async (donationId) => {
    if (!window.confirm('Are you sure you want to accept this donation?')) return;

    try {
      setProcessing(prev => ({ ...prev, [donationId]: 'accepting' }));
      const response = await createAndAcceptDonationTransaction(donationId, id);

      setDonations(prev => prev.map(d => 
        d._id === donationId ? { ...d, status: 'approved' } : d
      ));
      alert('Donation accepted and transaction created successfully!');
    } catch (error) {
      console.error('Error accepting donation:', error.response?.data || error.message);
      alert(error.response?.data?.message || 'Failed to accept donation');
    } finally {
      setProcessing(prev => ({ ...prev, [donationId]: false }));
    }
  };

  const handleRejectDonation = async (donationId) => {
    if (!rejectionReason) {
      alert('Please provide a reason for rejection');
      return;
    }

    try {
      setProcessing(prev => ({ ...prev, [donationId]: 'rejecting' }));
      // For rejection, we won't create a transaction, just update the donation status
      setDonations(prev => prev.map(d => 
        d._id === donationId ? { ...d, status: 'rejected' } : d
      ));
      setCurrentRejectionId(null);
      setRejectionReason('');
      alert('Donation rejected successfully!');
    } catch (error) {
      console.error('Error rejecting donation:', error.response?.data || error.message);
      alert(error.response?.data?.message || 'Failed to reject donation');
    } finally {
      setProcessing(prev => ({ ...prev, [donationId]: false }));
    }
  };

  const openRejectionDialog = (donationId) => {
    setCurrentRejectionId(donationId);
    setRejectionReason('');
  };

  if (loading) return <LoadingMessage>Loading...</LoadingMessage>;

  if (error) return (
    <>
      <Navbar />
      <ErrorContainer>Error: {error}</ErrorContainer>
      <Footer />
    </>
  );

  if (!request || donations.length === 0) return (
    <>
      <Navbar />
      <ErrorContainer>
        {request ? `No donations found for request: ${request.title}` : 'Request not found'}
      </ErrorContainer>
      <Footer />
    </>
  );

  return (
    <>
      <GlobalStyle />
      <Navbar />
      <DonationContainer>
        <DonationTitle>
          🤝 Donations for Request: <br />
          <span className="request-title">{request.title}</span>
        </DonationTitle>

        <Controls>
          <SearchContainer>
            <SearchIcon />
            <SearchInput
              type="text"
              placeholder="Search by product or donor..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </SearchContainer>

          <Select value={filterOption} onChange={(e) => setFilterOption(e.target.value)}>
            <option value="all">🟢 All Donations</option>
            <option value="pending">🟠 Pending</option>
            <option value="approved">🟢 Approved</option>
            <option value="rejected">🔴 Rejected</option>
            <option value="full">✅ Full Quantity Only</option>
          </Select>

          <Select value={sortOption} onChange={(e) => setSortOption(e.target.value)}>
            <option value="date">📆 Sort by Date</option>
            <option value="title">📝 Sort by Title</option>
            <option value="donor">👤 Sort by Donor</option>
            <option value="status">🔄 Sort by Status</option>
          </Select>
        </Controls>

        {currentDonations.length > 0 ? (
          currentDonations.map((donation) => {
            const userPhoto = users[donation.donor]?.photo
              ? `http://localhost:3000/${users[donation.donor].photo}`
              : imgmouna;
            return (
              <DonationCard key={donation._id}>
                <ProfileInfo>
                  <ProfileImg
                    src={userPhoto}
                    alt="Profile"
                    onError={(e) => {
                      e.target.src = imgmouna;
                      console.error(`Failed to load image: ${userPhoto}`);
                    }}
                  />
                  <ProfileText>{users[donation.donor]?.name || 'Unknown'}</ProfileText>
                  <ProfileText>{users[donation.donor]?.role || 'N/A'}</ProfileText>
                </ProfileInfo>
                <DonationDetails>
                  <DonationDetail><strong>Title:</strong> {donation.title || 'Untitled'}</DonationDetail>
                  <DonationDetail><strong>Location:</strong> {donation.location || 'Not specified'}</DonationDetail>
                  <DonationDetail>
                    <strong>Expiration Date:</strong> {donation.expirationDate ? new Date(donation.expirationDate).toLocaleDateString() : 'Not set'}
                  </DonationDetail>
                  <DonationDetail><strong>Category:</strong> {donation.category || 'Not specified'}</DonationDetail>
                  <DonationDetail>
                    <strong>Status:</strong>
                    <StatusBadge className={donation.status || 'pending'}>
                      {donation.status || 'pending'}
                    </StatusBadge>
                  </DonationDetail>
                  {donation.numberOfMeals && (
                    <DonationDetail><strong>Number of Meals:</strong> {donation.numberOfMeals}</DonationDetail>
                  )}
                </DonationDetails>
                <ProductSection>
                  <ProductsTitle>Products:</ProductsTitle>
                  <ProductList>
                    {donation.products && donation.products.length > 0 ? (
                      donation.products.map((item, itemIndex) => {
                        const requestedProduct = request.requestedProducts?.find(
                          rp => rp.productType === item.product?.productType || rp._id === item.product?._id
                        );
                        return (
                          <ProductItem key={item._id || itemIndex}>
                            <ProductDetails>
                              <span><strong>Name:</strong> {item.product?.name || 'N/A'}</span>
                              <span><strong>Type:</strong> {item.product?.productType || 'N/A'}</span>
                              <span><strong>Weight:</strong> {item.product?.weightPerUnit ? `${item.product.weightPerUnit} ${item.product.weightUnit || ''}` : 'N/A'}</span>
                            </ProductDetails>
                            <ProductQuantity>
                              <strong>Quantity:</strong> {item.quantity || 0} / {requestedProduct?.totalQuantity || 'N/A'}
                            </ProductQuantity>
                          </ProductItem>
                        );
                      })
                    ) : (
                      <ProductItem>No products available</ProductItem>
                    )}
                  </ProductList>
                </ProductSection>
                <ButtonContainer>
                  {(!donation.status || donation.status === 'pending') ? (
                    <>
                      <ActionButton
                        className="accept-btn"
                        onClick={() => handleAcceptDonation(donation._id)}
                        disabled={processing[donation._id]}
                      >
                        {processing[donation._id] === 'accepting' ? (
                          <>
                            <Spinner size="sm" /> Processing...
                          </>
                        ) : '✔ Accept'}
                      </ActionButton>
                      <ActionButton
                        className="reject-btn"
                        onClick={() => openRejectionDialog(donation._id)}
                        disabled={processing[donation._id]}
                      >
                        ✖ Reject
                      </ActionButton>
                    </>
                  ) : (
                    <div style={{
                      color: donation.status === 'approved' ? 'green' : 'red',
                      fontWeight: 'bold'
                    }}>
                      Status: {donation.status}
                    </div>
                  )}
                </ButtonContainer>
              </DonationCard>
            );
          })
        ) : (
          <NoDonations>No matching donations found.</NoDonations>
        )}

        {currentRejectionId && (
          <RejectionModal>
            <ModalContent>
              <h3>Reason for Rejection</h3>
              <p>Please explain why you're rejecting this donation:</p>
              <ModalTextarea
                value={rejectionReason}
                onChange={(e) => setRejectionReason(e.target.value)}
                placeholder="Enter rejection reason (required)..."
              />
              <ModalButtons>
                <ActionButton
                  className="cancel-btn"
                  onClick={() => setCurrentRejectionId(null)}
                >
                  Cancel
                </ActionButton>
                <ActionButton
                  className="reject-btn"
                  onClick={() => handleRejectDonation(currentRejectionId)}
                  disabled={!rejectionReason || processing[currentRejectionId]}
                >
                  {processing[currentRejectionId] === 'rejecting' ? (
                    <>
                      <Spinner size="sm" /> Submitting...
                    </>
                  ) : 'Submit Rejection'}
                </ActionButton>
              </ModalButtons>
            </ModalContent>
          </RejectionModal>
        )}

        {totalPages > 1 && (
          <PaginationControls>
            <button
              onClick={() => paginate(currentPage - 1)}
              disabled={currentPage === 1}
            >
              Previous
            </button>
            <span>Page {currentPage} of {totalPages}</span>
            <button
              onClick={() => paginate(currentPage + 1)}
              disabled={currentPage === totalPages}
            >
              Next
            </button>
          </PaginationControls>
        )}
      </DonationContainer>
      <Footer />
    </>
  );
};

export default ListDonationsRequest;
</file>

<file path="sustainafood-frontend/src/pages/ListOfRequests.jsx">
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import styled, { createGlobalStyle, keyframes } from 'styled-components';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import donation1 from '../assets/images/donation1.jpg';
import donation2 from '../assets/images/donation2.jpg';
import donation3 from '../assets/images/donation3.jpg';
import donation4 from '../assets/images/donation4.png';
import donation5 from '../assets/images/fooddonation.png';
import Composantrequest from "../components/Composantrequest";
import '../assets/styles/ListOfDonations.css';
import { getrequests } from "../api/requestNeedsService";
import donation from '../assets/images/fooddonation1.png';
import patternBg from '../assets/images/bg.png';
import { FaSearch, FaFilter } from "react-icons/fa";
import { useAuth } from "../contexts/AuthContext";
import { getUserById } from "../api/userService";


const GlobalStyle = createGlobalStyle`
  body {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    background: #f0f8f0;
    box-sizing: border-box;
  }
`;

const Container = styled.div`
  padding: 40px 60px;
  text-align: center;
`;

const Title = styled.h1`
  color: #228b22;
  font-size: 40px;
  margin-bottom: 20px;
`;

const SearchContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  background: white;
  padding: 8px;
  border-radius: 25px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  width: 320px;
  margin: auto;
  transition: all 0.3s ease-in-out;

  &:hover {
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }
`;

const SearchIcon = styled(FaSearch)`
  color: #555;
  margin-right: 8px;
`;

const SearchInput = styled.input`
  border: none;
  outline: none;
  font-size: 16px;
  width: 100%;
  padding: 8px;
  background: transparent;
`;

const Controls = styled.div`
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 15px;
  margin: 20px 0;
`;

const FilterIcon = styled(FaFilter)`
  margin-right: 8px;
`;

const Select = styled.select`
  padding: 10px;
  font-size: 16px;
  border-radius: 25px;
  border: 1px solid #ccc;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  transition: 0.3s;
  cursor: pointer;
  background: white;
  color: #333;
  font-weight: bold;

  &:hover {
    border-color: #228b22;
    transform: scale(1.05);
  }
`;

const ContentList = styled.div`
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 20px;
`;

const LoadingMessage = styled.div`
  font-size: 18px;
  color: #555;
`;

const NoRequests = styled.p`
  font-size: 18px;
  color: #888;
`;

const PaginationControls = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  gap: 10px;

  button {
    padding: 10px 20px;
    font-size: 16px;
    background: #228b22;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s;

    &:hover {
      background: #56ab2f;
    }

    &:disabled {
      background: #ccc;
      cursor: not-allowed;
    }
  }

  span {
    font-size: 16px;
    color: #333;
  }
`;

const fade = keyframes`
  0% { opacity: 0; }
  8% { opacity: 1; }
  33% { opacity: 1; }
  41% { opacity: 0; }
  100% { opacity: 0; }
`;

const HomeContainer = styled.div`
  display: flex;
  flex-direction: column;
  gap: 0;
`;

const HeroSection = styled.section`
  position: relative;
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: space-between;
  padding: 60px 80px;
  gap: 30px;
  background: 
    linear-gradient(rgba(230, 242, 230, 0.85), rgba(230, 242, 230, 0.85)),
    url(${patternBg}) repeat center center;
  background-size: 200px 200px;
  overflow: hidden;
`;

const HeroText = styled.div`
  flex: 1 1 500px;
  z-index: 2;
  h1 {
    font-size: 48px;
    color: #228b22;
    margin-bottom: 20px;
  }
  p {
    font-size: 20px;
    color: #555;
    margin-bottom: 30px;
    line-height: 1.5;
  }
`;

const CallToAction = styled.a`
  display: inline-block;
  padding: 16px 32px;
  font-size: 18px;
  background: #228b22;
  color: white;
  border-radius: 30px;
  text-decoration: none;
  transition: background 0.3s;
  &:hover {
    background: #56ab2f;
  }
`;

const SliderContainer = styled.div`
  position: relative;
  flex: 1 1 300px;
  width: 400px;
  height: 300px;
  border-radius: 20px;
  overflow: hidden;
  z-index: 2;
`;

const SlideImage = styled.img`
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 20px;
  box-shadow: rgba(133, 189, 150, 0.3) 0px 15px 25px -5px;
  opacity: 0;
  animation: ${fade} 12s infinite;
  animation-fill-mode: forwards;
`;

const Slide1 = styled(SlideImage)`
  animation-delay: 0s;
`;
const Slide2 = styled(SlideImage)`
  animation-delay: 2.4s;
`;
const Slide3 = styled(SlideImage)`
  animation-delay: 4.8s;
`;
const Slide4 = styled(SlideImage)`
  animation-delay: 7.2s;
`;
const Slide5 = styled(SlideImage)`
  animation-delay: 9.6s;
`;
const Slide = styled(SlideImage)`
  animation-delay: 12s;
`;

const Wave = styled.svg`
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: auto;
  z-index: 1;
`;

const SectionWrapper = styled.section`
  padding: 60px 80px;
  background: ${props => props.bgColor || '#fff'};
  text-align: ${props => props.align || 'center'};
`;

const ListOfRequests = () => {
  const [requests, setRequests] = useState([]);
  const [filteredRequests, setFilteredRequests] = useState([]);

  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");

  const [sortOption, setSortOption] = useState("date");
  const [statusFilter, setStatusFilter] = useState("all");
  const [categoryFilter, setCategoryFilter] = useState("all");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(6);
  const { user: authUser, token, logout } = useAuth();

  const [user, setUser] = useState(authUser);
  useEffect(() => {
    const fetchUser = async () => {
      if (typeof authUser.id === "number") {
        if (!authUser || !authUser._id) return;
        try {
          const response = await getUserById(authUser._id);
          setUser(response.data);
        } catch (error) {
          console.error("Backend Error:", error);
        }
      }
      else if (typeof authUser.id === "string") {
        if (!authUser || !authUser.id) return;
        try {
          const response = await getUserById(authUser.id);
          setUser(response.data);
        } catch (error) {
          console.error("Backend Error:", error);
        }
      }
    };

    if (authUser && (authUser._id || authUser.id)) {
      fetchUser();
    }
  }, [authUser]);
  const isDonner = user?.role === "restaurant" || user?.role === "supermarket";
  const isRecipient = user?.role === "ong" || user?.role === "student";

  useEffect(() => {
    const fetchRequests = async () => {
      try {
        const response = await getrequests();
        setRequests(response.data);
        setFilteredRequests(response.data);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching requests:", error);
        setLoading(false);
      }
    };
    fetchRequests();
  }, []);

  useEffect(() => {
    let updatedRequests = [...requests];

    if (searchQuery) {
      updatedRequests = updatedRequests.filter((request) =>
        request.title.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    if (statusFilter !== "all") {
      updatedRequests = updatedRequests.filter((request) => request.status === statusFilter);
    }

    if (categoryFilter !== "all") {
      updatedRequests = updatedRequests.filter((request) => request.category === categoryFilter);
    }

    updatedRequests.sort((a, b) => {
      if (sortOption === "title") {
        return a.title.localeCompare(b.title);
      } else if (sortOption === "status") {
        return a.status.localeCompare(b.status);
      } else {
        return new Date(a.expirationDate) - new Date(b.expirationDate);
      }
    });

    setFilteredRequests(updatedRequests);
    setCurrentPage(1); // Reset to page 1 when filters change
  }, [searchQuery, sortOption, statusFilter, categoryFilter, requests]);

  // Pagination logic
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentRequests = filteredRequests.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(filteredRequests.length / itemsPerPage);

  return (
    <>
      <GlobalStyle />
      <Navbar />
      <HomeContainer>
        <HeroSection>
          <HeroText>
            <h1>List Of Requests in SustainaFood</h1>
            <p>
              Give if you can, receive if you need—together, we reduce food waste and spread hope!
            </p>
            {isRecipient &&  <CallToAction href="/AddDonation"  >Add Your Request</CallToAction>}
          </HeroText>
          <SliderContainer>
            <Slide1 src={donation1} alt="Donation 1" />
            <Slide2 src={donation2} alt="Donation 2" />
            <Slide3 src={donation3} alt="Donation 3" />
            <Slide4 src={donation4} alt="Donation 4" />
            <Slide5 src={donation5} alt="Donation 5" />
            <Slide src={donation} alt="Donation 6" />
          </SliderContainer>
          <Wave viewBox="0 0 1440 320">
            <path
              fill="#f0f8f0"
              fillOpacity="1"
              d="M0,96L30,90C60,85,120,75,180,64C240,53,300,43,360,64C420,85,480,139,540,170.7C600,203,660,213,720,224C780,235,840,245,900,240C960,235,1020,213,1080,181.3C1140,149,1200,107,1260,112C1320,117,1380,171,1410,197.3L1440,224L1440,320L1410,320C1380,320,1320,320,1260,320C1200,320,1140,320,1080,320C1020,320,960,320,900,320C840,320,780,320,720,320C660,320,600,320,540,320C480,320,420,320,360,320C300,320,240,320,180,320C120,320,60,320,30,320L0,320Z"
            />
          </Wave>
        </HeroSection>
        <SectionWrapper>
          <Container>
            <Title>List Of Requests</Title>
            <SearchContainer>
              <SearchIcon />
              <SearchInput
                type="text"
                placeholder="Search requests..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </SearchContainer>
            <Controls>
              <Select value={sortOption} onChange={(e) => setSortOption(e.target.value)}>
                <option value="date">📆 Sort by Expiration Date</option>
                <option value="title">🔠 Sort by Title</option>
                <option value="status">🔄 Sort by Status</option>
              </Select>
              <Select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>
                <option value="all">🟢 All Statuses</option>
                <option value="pending">🕒 Pending</option>
                <option value="approved">✅ Accepted</option>
                <option value="rejected">❌ Rejected</option>
              </Select>
              <Select value={categoryFilter} onChange={(e) => setCategoryFilter(e.target.value)}>
                <option value="all">📦 All Categories</option>
                <option value="prepared_meals">🍽️ Prepared Meals</option>
                <option value="packaged_products">🛒 Packaged Products</option>
              </Select>
            </Controls>
            <ContentList>
              {loading ? (
                <LoadingMessage>Loading...</LoadingMessage>
              ) : currentRequests.length > 0 ? (
                currentRequests.map((requestItem) => (
                  <Composantrequest key={requestItem._id} request={requestItem} />
                ))
              ) : (
                <NoRequests>No matching requests found.</NoRequests>
              )}
            </ContentList>
            <PaginationControls>
              <button onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))} disabled={currentPage === 1}>
                Previous
              </button>
              <span>Page {currentPage} of {totalPages}</span>
              <button onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))} disabled={currentPage === totalPages}>
                Next
              </button>
            </PaginationControls>
          </Container>
        </SectionWrapper>
      </HomeContainer>
      <Footer />
    </>
  );
};

export default ListOfRequests;
</file>

<file path="sustainafood-frontend/src/pages/TwoFAVerification.jsx">
import React, { useState } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { useAuth } from "../contexts/AuthContext";
import { validate2FACode } from "../api/userService";

const TwoFAVerification = () => {
    const [code, setCode] = useState("");
    const navigate = useNavigate();
    const location = useLocation();
    const email = new URLSearchParams(location.search).get("email");
    const { login } = useAuth();

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const response = await validate2FACode({ email, twoFACode: code.toString() });
            console.log("API Response:", response);
            if (response.status === 200) {
                const { token, role, id } = response.data;
                if (!token || !role || !id) {
                    throw new Error("Missing token, role, or id in response");
                }
                login({ id, role, email }, token, false);
                navigate("/profile");
            } else {
                throw new Error(`Unexpected response status: ${response.status}`);
            }
        } catch (error) {
            console.error("Error verifying 2FA code:", {
                message: error.message,
                response: error.response ? error.response.data : "No response",
                status: error.response ? error.response.status : "No status",
                request: error.request ? error.request : "No request",
            });
            if (error.response && error.response.status === 500) {
                alert("Server error occurred. Please try again later or contact support.");
            } else if (error.response) {
                alert(error.response.data.error || "Invalid 2FA code");
            } else {
                alert("An unexpected error occurred. Check the console for details.");
            }
        }
    };

    return (
        <div className="forget-pass-container">
            <div className="forget-pass-card">
                <h2>2FA Verification</h2>
                <p>Check your phone for the 2FA code and enter it below.</p>
                <form onSubmit={handleSubmit}>
                    <input
                        type="text"
                        placeholder="Enter the 2FA code"
                        value={code}
                        onChange={(e) => setCode(e.target.value)}
                        required
                    />
                    <button type="submit">Verify Code</button>
                </form>
            </div>
        </div>
    );
};

export default TwoFAVerification;
</file>

<file path="sustainafood-backend/controllers/UserController.js">
const express = require("express");
const bcrypt = require("bcryptjs");
const User = require("../models/User");
const jwt = require("jsonwebtoken");
const nodemailer = require("nodemailer");
const twilio = require('twilio');
const crypto = require("crypto"); // For generating random reset codes
require("dotenv").config(); // Load environment variables

// Initialize Twilio client
const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);
const verifyServiceSid = process.env.TWILIO_VERIFY_SERVICE_SID;

// Generate a 6-digit code (used for both reset and 2FA)
const generateCode = () => Math.floor(100000 + Math.random() * 900000).toString();
/////////////////////////////////

/////////////////////////////////////////////////////////
async function createUser(req, res) {
    try {
        const { name, email, photo } = req.body;   
        const existingUser = await User.findOne({ email });

        if (existingUser) {
            return res.status(200).json({ id: existingUser._id.toString() }); 
            // 🔹 Assure un ObjectId valide pour éviter l'erreur
        }

        const user = new User({ name, email, photo });
        await user.save();

        console.log("✅ Utilisateur créé avec ID:", user._id.toString()); // 🔹 Log l'ID correctement
        res.status(201).json({ id: user._id.toString() });

    } catch (error) {
        console.error("❌ Erreur API :", error.message);
        res.status(500).json({ message: "Error creating user" });
    }
}





// Generate a 6-digit reset code
const generateResetCode = () => Math.floor(100000 + Math.random() * 900000).toString(); 

// Function to generate a reset code and send it via email
// 🚀 Send Reset Code (Forgot Password)
async function sendResetCode(req, res) {
    const { email } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) return res.status(404).json({ error: "User not found" });

        // Generate reset code
        const resetCode = generateResetCode();

        // Store reset code & expiration
        user.resetCode = resetCode;
        user.resetCodeExpires = Date.now() + 10 * 60 * 1000; // Expires in 10 minutes
        await user.save();

        // Configure email transporter
        const transporter = nodemailer.createTransport({
            service: "gmail",
            auth: {
                user: process.env.EMAIL_USER, 
                pass: process.env.EMAIL_PASS, 
            },
            tls: {
                rejectUnauthorized: false, // Désactive la vérification SSL
            },
        });
        

        // Email details
        const mailOptions = {
            from: process.env.EMAIL_USER,
            to: email,
            subject: "Password Reset Code",
            text: `Your password reset code is: ${resetCode}. This code is valid for 10 minutes.`,
        };

        // Send email
        await transporter.sendMail(mailOptions);

        res.status(200).json({ message: "Reset code sent successfully" });

    } catch (error) {
        console.error("Error sending reset code:", error);
        res.status(500).json({ error: "Error sending reset code" });
    }
}

// 🚀 Validate Reset Code
async function validateResetCode(req, res) {
    const { email, resetCode } = req.body;

    try {
        const user = await User.findOne({ email });

        if (!user || user.resetCode !== resetCode || user.resetCodeExpires < Date.now()) {
            return res.status(400).json({ error: "Invalid or expired reset code" });
        }

        res.status(200).json({ message: "Reset code verified" });

    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Server error" });
    }
}

// 🚀 Reset Password
async function resetPassword(req, res) {
    const { email, newPassword } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) return res.status(404).json({ error: "User not found" });

        // Hash the new password
        const hashedPassword = await bcrypt.hash(newPassword, 10);

        // Update user password & clear reset code
        user.password = hashedPassword;
        user.resetCode = undefined;
        user.resetCodeExpires = undefined;
        await user.save();

        res.status(200).json({ message: "Password successfully reset" });

    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Server error" });
    }
}





async function addUser(req, res) {
    try {
      const { email, password, confirmPassword, phone, name, address, role } = req.body;
  
      // Vérifier si tous les champs sont remplis
      if (!email || !password || !confirmPassword || !phone || !name || !address || !role) {
        return res.status(400).json({ error: "Veuillez remplir tous les champs." });
      }
  
      // Vérifier si les mots de passe correspondent
      if (password !== confirmPassword) {
        return res.status(400).json({ error: "Passwords do not match" });
      }
      // ✅ Vérifier si l'email existe déjà
      const existingUser = await User.findOne({ email });
      if (existingUser) {
        return res.status(400).json({ error: "Email already exists" });
      }
  
      // Hacher le mot de passe avant de le stocker
      const hashedPassword = await bcrypt.hash(password, 10);
  
      // Construire l'objet utilisateur à partir de req.body
      const userData = { ...req.body, password: hashedPassword };
  
      // Si un fichier "photo" est uploadé, utilisez le chemin fourni par Multer
      if (req.files && req.files.photo && req.files.photo[0]) {
        userData.photo = req.files.photo[0].path;
      }
  
      // Si l'utilisateur est un étudiant et qu'un fichier "image_carte_etudiant" est uploadé, ajoutez-le
      if (role === 'student') {
        if (req.files && req.files.image_carte_etudiant && req.files.image_carte_etudiant[0]) {
          userData.image_carte_etudiant = req.files.image_carte_etudiant[0].path;
        }
      }
  
      // Créer l'utilisateur avec les données et le mot de passe haché
      const user = new User(userData);
      await user.save();
      res.status(201).json(user);
    } catch (error) {
      res.status(400).json({ error: error.message });
    }
  }
  

// Get all users
async function getUsers(req, res) {
    try {
        const users = await User.find();
        res.status(200).json(users);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
}

// Get a user by ID
async function getUserById(req, res) {
    try {
        const user = await User.findById(req.params.id);
        if (!user) {
            return res.status(404).json({ error: "User not found" });
        }
        res.status(200).json(user);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
}

async function getUserByEmailAndPassword(req, res) {
    const { email, password } = req.body; // Récupérer l'email et le mot de passe depuis le corps de la requête

    try {
        // Trouver l'utilisateur par email
        const user = await User.findOne({ email: email });
        if (!user) {
            return res.status(404).json({ error: "User not found" });
        }

        // Vérifier le mot de passe
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(401).json({ error: "Invalid password" });
        }
        ////////////////////2fo
 // Étape 1 réussie : Envoyer un code de vérification
 await sendTwoFactorCode(user);

 res.status(200).json({ message: "Verification code sent to email", email });
 ////////////////////////////////
        // Si l'utilisateur est trouvé et le mot de passe est correct, renvoyer les détails de l'utilisateur
        res.status(200).json(user);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
}
// Update a user
const updateUser = async (req, res) => {
    try {
      // Récupération des champs texte depuis le corps de la requête
      const {
        role,
        name,
        email,
        phone,
        address,
        photo, // optionnel si aucun fichier n'est envoyé
        age,
        sexe,
        image_carte_etudiant, // optionnel si aucun fichier n'est envoyé
        num_cin,
        id_fiscale,
        type,
        vehiculeType,
        taxReference,
        isBlocked,
        resetCode,
        resetCodeExpires
      } = req.body;
  
      // Construction de l'objet de mise à jour
      const updateData = {};
      if (name) updateData.name = name;
      if (email) updateData.email = email;
      if (phone && !isNaN(phone)) updateData.phone = phone;
      if (address) updateData.address = address;
  
      // Si un fichier "photo" est uploadé, on utilise le chemin fourni par Multer,
      // sinon, on garde la valeur provenant du corps de la requête (si présente)
      if (req.files && req.files.photo && req.files.photo[0]) {
        updateData.photo = req.files.photo[0].path;
      } else if (photo) {
        updateData.photo = photo;
      }
  
      if (age && !isNaN(age)) updateData.age = age;
      if (sexe) updateData.sexe = sexe;
  
      // Pour "image_carte_etudiant" : priorité au fichier uploadé par Multer
      if (req.files && req.files.image_carte_etudiant && req.files.image_carte_etudiant[0]) {
        updateData.image_carte_etudiant = req.files.image_carte_etudiant[0].path;
      } else if (image_carte_etudiant) {
        updateData.image_carte_etudiant = image_carte_etudiant;
      }
  
      if (num_cin) updateData.num_cin = num_cin;
      if (id_fiscale) updateData.id_fiscale = id_fiscale;
      if (type) updateData.type = type;
      if (vehiculeType) updateData.vehiculeType = vehiculeType;
      if (taxReference) updateData.taxReference = taxReference;
      if (typeof isBlocked === "boolean") updateData.isBlocked = isBlocked;
      if (resetCode) updateData.resetCode = resetCode;
      if (resetCodeExpires) updateData.resetCodeExpires = resetCodeExpires;
  
      // Vérifier si l'utilisateur existe
      const user = await User.findById(req.params.id);
      if (!user) {
        return res.status(404).json({ error: "User not found" });
      }
  
      // Vérification pour empêcher la modification du rôle par un utilisateur non autorisé
     // if (req.body.role && req.user.role !== "admin") {
       // return res.status(403).json({ error: "Unauthorized to update role" });
     // }
      if (req.body.role) updateData.role = req.body.role;
  
      // Ne pas permettre la modification du mot de passe via cette méthode
      if (req.body.password) {
        return res.status(400).json({ error: "Password cannot be updated this way" });
      }
  
      // Mise à jour de l'utilisateur en BDD
      const updatedUser = await User.findByIdAndUpdate(req.params.id, updateData, { new: true });
      res.status(200).json(updatedUser);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  };
  

  const updateUserWithEmail = async (req, res) => {
      try {
          const { email } = req.params;
          if (!email) {
              return res.status(400).json({ error: "Email is required" });
          }
  
          const {
              phone,
              address,
              photo,
              age,
              sexe,
              image_carte_etudiant,
              num_cin,
              id_fiscal,
              type,
              vehiculeType,
              taxReference,
              isBlocked,
              resetCode,
              resetCodeExpires,
              role
          } = req.body;
  
          const user = await User.findOne({ email: email });
          if (!user) {
              return res.status(404).json({ error: "User not found" });
          }
  
          if (role && req.user.role !== "admin") {
              return res.status(403).json({ error: "Unauthorized to update role" });
          }
  
          if (req.body.password) {
              return res.status(400).json({ error: "Password cannot be updated this way" });
          }
  
          const updateData = {};
          if (phone && !isNaN(phone)) updateData.phone = phone;
          if (address) updateData.address = address;
          if (age && !isNaN(age)) updateData.age = age;
          if (sexe) updateData.sexe = sexe;
          if (num_cin) updateData.num_cin = num_cin;
          if (id_fiscal) updateData.id_fiscal = id_fiscal;
          if (type) updateData.type = type;
          if (vehiculeType) updateData.vehiculeType = vehiculeType;
          if (taxReference) updateData.taxReference = taxReference;
          if (typeof isBlocked === "boolean") updateData.isBlocked = isBlocked;
          if (resetCode) updateData.resetCode = resetCode;
          if (resetCodeExpires) updateData.resetCodeExpires = resetCodeExpires;
          if (role) updateData.role = role;
  
          if (req.files?.photo?.[0]?.path) {
              updateData.photo = req.files.photo[0].path;
          } else if (photo) {
              updateData.photo = photo;
          }
  
          if (req.files?.image_carte_etudiant?.[0]?.path) {
              updateData.image_carte_etudiant = req.files.image_carte_etudiant[0].path;
          } else if (image_carte_etudiant) {
              updateData.image_carte_etudiant = image_carte_etudiant;
          }
  
          const updatedUser = await User.findOneAndUpdate(
              { email: email },
              updateData,
              { new: true }
          );
  
          if (!updatedUser) {
              return res.status(500).json({ error: "User update failed" });
          }
  
          // 🛑 Génération du token après mise à jour 🛑
          const token = jwt.sign(
              { id: updatedUser._id, email: updatedUser.email, role: updatedUser.role },
              process.env.JWT_SECRET, // Remplace par ta clé secrète
              { expiresIn: "1h" }
          );
  
          res.status(200).json({ user: updatedUser, token });
      } catch (error) {
          res.status(500).json({ error: error.message });
      }
  };
  


// 🚀 Block or Unblock User
async function toggleBlockUser(req, res) {
    try {
        const { id } = req.params; // Get user ID from request parameters

        // Find the user by ID
        const user = await User.findById(id);
        if (!user) {
            return res.status(404).json({ error: "User not found" });
        }

        // Toggle the isBlocked field
        user.isBlocked = !user.isBlocked;
        await user.save();

        res.status(200).json({ message: `User ${user.isBlocked ? "blocked" : "unblocked"} successfully`, isBlocked: user.isBlocked });
    } catch (error) {
        console.error("Erreur lors de la mise à jour de l'utilisateur:", error);
        res.status(500).json({ error: error.message });
    }
    
}


// Delete a user
async function deleteUser(req, res) {
    try {
        const user = await User.findByIdAndDelete(req.params.id);
        if (!user) {
            return res.status(404).json({ error: "User not found" });
        }
        res.status(200).json({ message: "User deleted successfully" });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
}
///////////////////////////////////////////hedhy badltha ///////////////////////////////////////////
// Signin (generate JWT token)
// Signin (generate JWT token)

async function user_signin(req, res) {
    console.log("Requête reçue :", req.body);

    const { email, password } = req.body;

    try {
        if (!email || !password) {
            return res.status(400).json({ error: "Email and password are required" });
        }

        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ error: "Invalid credentials" });
        }

        if (user.isBlocked) {
            return res.status(403).json({ error: "Your account is blocked. Please contact support." });
        }

        let welcomeMessage = null;
        if (!user.isActive) {
            user.isActive = true;
            await user.save();
            welcomeMessage = "Your account has been reactivated. Welcome back!";
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ error: "Invalid credentials" });
        }

        if (user.is2FAEnabled) {
            if (!user.phone || isNaN(user.phone)) {
                console.error("Invalid phone number in database:", user.phone);
                return res.status(500).json({ error: "User phone number is missing or invalid" });
            }

            const phoneWithPrefix = `+216${user.phone.toString()}`;
            console.log("Sending 2FA to:", phoneWithPrefix);

            try {
                const verification = await client.verify.v2
                    .services(verifyServiceSid)
                    .verifications.create({ to: phoneWithPrefix, channel: "sms" });
                console.log("Verification SID:", verification.sid);
            } catch (verifyError) {
                console.error("Verify API error:", verifyError.message, verifyError.stack);
                return res.status(500).json({ error: "Failed to send 2FA code via Verify API", details: verifyError.message });
            }

            return res.status(200).json({ message: "2FA code sent to your phone", requires2FA: true });
        }

        const payload = {
            userId: user._id,
            role: user.role,
        };

        const token = jwt.sign(payload, process.env.JWT_SECRET || "your_jwt_secret", { expiresIn: "1h" });
        res.status(200).json({
            token,
            role: user.role,
            id: user._id,
            message: welcomeMessage,
            is2FAEnabled: user.is2FAEnabled,
        });
    } catch (error) {
        console.error("Erreur serveur détaillée :", {
            message: error.message,
            stack: error.stack,
            requestBody: req.body,
        });
        res.status(500).json({ error: "Server error", details: error.message });
    }
}



  
// 🚀 View Student by ID
async function viewStudent(req, res) {
    try {
        // Retrieve student ID from request parameters
        const studentId = req.params.id;

        // Find the student by ID
        const student = await User.findById(studentId); // Assuming you're storing student data in the User model
        if (!student) {
            return res.status(404).json({ error: "Student not found" });
        }

        // Send the student details in the response
        res.status(200).json(student);

    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Server error" });
    }
}

async function viewRestaurant(req, res) {
    try {
        // Retrieve restaurant ID from request parameters
        const restaurantId = req.params.id;

        // Find the restaurant by ID (assuming you're storing restaurant data in the User model)
        const restaurant = await User.findById(restaurantId);
        
        // Check if the restaurant exists
        if (!restaurant) {
            return res.status(404).json({ error: "Restaurant not found" });
        }

        // Send the restaurant details in the response
        res.status(200).json(restaurant);

    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Server error" });
    }
}
async function viewSupermarket(req, res) {
    try {
        // Retrieve supermarket ID from request parameters
        const supermarketId = req.params.id;

        // Find the supermarket by ID (assuming you're storing supermarket data in the User model)
        const supermarket = await User.findById(supermarketId);
        
        // Check if the supermarket exists
        if (!supermarket) {
            return res.status(404).json({ error: "Supermarket not found" });
        }

        // Send the supermarket details in the response
        res.status(200).json(supermarket);

    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Server error" });
    }
}
async function viewNGO(req, res) {
    try {
        // Récupérer l'ID de l'ONG depuis les paramètres de la requête
        const ongId = req.params.id;

        // Trouver l'ONG par ID (en supposant que les ONG sont stockées dans le modèle User)
        const ong = await User.findById(ongId);
        
        // Vérifier si l'ONG existe
        if (!ong) {
            return res.status(404).json({ error: "ONG not found" });
        }

        // Envoyer les détails de l'ONG dans la réponse
        res.status(200).json(ong);

    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Server error" });
    }
}

async function viewTransporter(req, res) {
    try {
        // Récupérer l'ID du transporteur depuis les paramètres de la requête
        const transporterId = req.params.id;

        // Trouver le transporteur par ID (en supposant que les transporteurs sont stockés dans le modèle User)
        const transporter = await User.findById(transporterId);
        
        // Vérifier si le transporteur existe
        if (!transporter) {
            return res.status(404).json({ error: "Transporter not found" });
        }

        // Envoyer les détails du transporteur dans la réponse
        res.status(200).json(transporter);

    } catch (error) {
        console.error(error);
        res.status(500).json({ error: "Server error" });
    }
}
// 🚀 Deactivate Account
async function deactivateAccount(req, res) {
    try {
        const { id } = req.params; // Get user ID from request parameters

        // Check if ID is valid
        if (!id) {
            return res.status(400).json({ error: "User ID is required" });
        }

        // Find and update the user
        const user = await User.findByIdAndUpdate(id, { isActive: false }, { new: true });

        if (!user) {
            return res.status(404).json({ error: "User not found" });
        }

        res.status(200).json({ message: "Account deactivated successfully", isActive: user.isActive });
    } catch (error) {
        console.error("Error deactivating account:", error);
        res.status(500).json({ error: "Server error" });
    }
}

// change password


async function changePassword(req, res) {
    try {
      // 1. Get the user ID from the route param
      const { id } = req.params; 
      const { currentPassword, newPassword } = req.body;
  
      if (!id) {
        return res.status(400).json({ error: "Missing user ID in route param." });
      }
  
      // 2. Find the user by ID
      const user = await User.findById(id);
      if (!user) {
        return res.status(404).json({ error: "User not found." });
      }
  
      // 3. Compare the current password
      const isMatch = await bcrypt.compare(currentPassword, user.password);
      if (!isMatch) {
        return res.status(400).json({ error: "Current password is incorrect." });
      }
  
      // 4. Hash the new password
      user.password = await bcrypt.hash(newPassword, 10);
  
      // 5. Save and respond
      await user.save();
      return res.status(200).json({ message: "Password changed successfully." });
  
    } catch (error) {
      console.error("Error changing password:", error);
      return res.status(500).json({ error: "Server error." });
    }
  }
  
  
// Generate a 6-digit 2FA code
const generate2FACode = () => Math.floor(100000 + Math.random() * 900000).toString();

// Send 2FA code via Verify API
async function send2FACode(req, res) {
    const { email } = req.body;
    try {
        const user = await User.findOne({ email });
        if (!user) return res.status(404).json({ error: "User not found" });

        if (!user.phone || isNaN(user.phone)) {
            return res.status(500).json({ error: "User phone number is missing or invalid" });
        }

        const phoneWithPrefix = `+216${user.phone.toString()}`;
        const twoFACode = generateCode();
        user.twoFACode = twoFACode;
        user.twoFACodeExpires = Date.now() + 10 * 60 * 1000;
        await user.save();

        try {
            const verification = await client.verify.v2
                .services(verifyServiceSid)
                .verifications.create({ to: phoneWithPrefix, channel: "sms" });
            console.log("Verification SID:", verification.sid);
        } catch (verifyError) {
            console.error("Verify API error:", verifyError.message, verifyError.stack);
            return res.status(500).json({ error: "Failed to send 2FA code via Verify API", details: verifyError.message });
        }

        res.status(200).json({ message: "2FA code sent successfully via SMS" });
    } catch (error) {
        console.error("Error sending 2FA code:", error);
        res.status(500).json({ error: "Error sending 2FA code", details: error.message });
    }
}
// Generate a 6-digit code (used for both reset and 2FA)
// Validate 2FA code
// Validate 2FA code
async function validate2FACode(req, res) {
    const { email, twoFACode } = req.body;
    console.log("Validating 2FA code:", { email, twoFACode, typeOfEmail: typeof email, typeOfTwoFACode: typeof twoFACode });

    // Validate input
    if (typeof email !== "string" || typeof twoFACode !== "string") {
        return res.status(400).json({ error: "Email and twoFACode must be strings" });
    }

    try {
        const user = await User.findOne({ email });
        if (!user) return res.status(400).json({ error: "User not found" });

        if (!user.phone || isNaN(user.phone)) {
            return res.status(400).json({ error: "User phone number is missing or invalid" });
        }

        const phoneWithPrefix = `+216${user.phone.toString()}`;
        console.log("Verifying 2FA for:", phoneWithPrefix);

        // Use Twilio Verify to check the code
        let verificationCheck;
        try {
            verificationCheck = await client.verify.v2
                .services(verifyServiceSid)
                .verificationChecks.create({ to: phoneWithPrefix, code: twoFACode });
            console.log("Verification Check Status:", verificationCheck.status);
        } catch (verifyError) {
            console.error("Verify Check API error:", verifyError.message, verifyError.stack);
            return res.status(500).json({ error: "Failed to verify 2FA code via Verify API", details: verifyError.message });
        }

        if (verificationCheck.status !== "approved") {
            return res.status(400).json({ error: "Invalid or expired 2FA code" });
        }

        // Debug user data before token generation
        console.log("User data for token:", {
            _id: user._id,
            email: user.email,
            role: user.role,
        });

        // Check JWT_SECRET
        if (!process.env.JWT_SECRET) {
            console.error("JWT_SECRET is not configured");
            return res.status(500).json({ error: "JWT_SECRET is not configured" });
        }

        // Generate JWT token
        const token = jwt.sign({ id: user._id, email: user.email, role: user.role }, process.env.JWT_SECRET, { expiresIn: "1h" });
        console.log("Token generated:", token);

        res.status(200).json({ token, role: user.role, id: user._id.toString() });
    } catch (error) {
        console.error("Error in validate2FACode:", {
            message: error.message,
            stack: error.stack,
            requestBody: req.body,
        });
        res.status(500).json({ error: "Server error", details: error.message });
    }
}
// Toggle 2FA status
async function toggle2FA(req, res) {
    const { email } = req.body;
    try {
        const user = await User.findOne({ email });
        if (!user) return res.status(404).json({ error: "User not found" });

        user.is2FAEnabled = !user.is2FAEnabled;
        await user.save();
        res.status(200).json({ message: `2FA ${user.is2FAEnabled ? "enabled" : "disabled"}` });
    } catch (error) {
        console.error("Error toggling 2FA:", error);
        res.status(500).json({ error: "Error toggling 2FA" });
    }
}

// Send 2FA code for Google sign-in via Verify API
const send2FACodeforsigninwithgoogle = async (req, res) => {
    try {
        const { email, phone } = req.body;

        if (!phone) return res.status(400).json({ error: "Phone number is required for SMS 2FA" });

        const user = await User.findOne({ email });
        if (!user) return res.status(404).json({ message: "User not found" });

        if (!user.is2FAEnabled) return res.status(400).json({ message: "2FA not enabled for this user", requires2FA: false });

        const twoFACode = generateCode();
        user.twoFACode = twoFACode;
        user.twoFACodeExpires = Date.now() + 10 * 60 * 1000;
        await user.save();

        const phoneWithPrefix = `+216${phone.toString()}`;
        try {
            const verification = await client.verify.v2
                .services(verifyServiceSid)
                .verifications.create({ to: phoneWithPrefix, channel: "sms" });
            console.log("Verification SID:", verification.sid);
        } catch (verifyError) {
            console.error("Verify API error:", verifyError.message, verifyError.stack);
            return res.status(500).json({ message: "Failed to send 2FA code via Verify API", details: verifyError.message });
        }

        return res.status(200).json({ message: "2FA code sent to your phone", requires2FA: true });
    } catch (error) {
        console.error("❌ Error sending 2FA code via SMS:", error);
        return res.status(500).json({ message: "Failed to send 2FA code via SMS", details: error.message });
    }
};

module.exports = {send2FACode,send2FACodeforsigninwithgoogle,changePassword,updateUserWithEmail, createUser,addUser, getUsers, getUserById,updateUser, deleteUser, user_signin,getUserByEmailAndPassword , resetPassword ,validateResetCode,sendResetCode , toggleBlockUser , viewStudent , viewRestaurant , viewSupermarket, viewNGO , viewTransporter ,deactivateAccount  , validate2FACode , toggle2FA};
</file>

<file path="sustainafood-frontend/package.json">
{
  "name": "sustainafood-frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@fortawesome/free-solid-svg-icons": "^6.7.2",
    "@fortawesome/react-fontawesome": "^0.2.2",
    "@react-oauth/google": "^0.12.1",
    "axios": "^1.8.2",
    "bootstrap": "^5.3.3",
    "firebase": "^11.3.1",
    "jsonwebtoken": "^9.0.2",
    "jspdf": "^3.0.1",
    "jspdf-autotable": "^5.0.2",
    "jwt-decode": "^3.1.2",
    "papaparse": "^5.5.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-google-recaptcha": "^3.1.0",
    "react-icons": "^5.5.0",
    "react-paginate": "^8.3.0",
    "react-router-dom": "^7.1.5",
    "recharts": "^2.15.1",
    "styled-components": "^6.1.15",
    "twilio": "^5.5.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.5",
    "@vitejs/plugin-react": "^1.3.2",
    "eslint": "^9.17.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.16",
    "globals": "^15.14.0",
    "vite": "^6.1.0"
  }
}
</file>

<file path="sustainafood-frontend/src/components/Composantrequest.jsx">
import React from 'react';
import { Link } from 'react-router-dom';
import styled from 'styled-components';

// Container for each card, ensuring same size across all cards
const Card = styled.div`
    background: white;
    border-radius: 12px;
    box-shadow: 0px 10px 25px rgba(0, 0, 0, 0.1);
    padding: 20px;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    width: 100%;
    max-width: 400px;
    min-height: 350px;
    border-left: 6px solid #228b22;

    &:hover {
        transform: translateY(-5px);
        box-shadow: 0px 15px 30px rgba(0, 0, 0, 0.15);
    }
`;

// Title with icon
const Title = styled.h3`
    color: #228b22;
    font-size: 22px;
    margin-bottom: 10px;
    display: flex;
    align-items: center;
    gap: 8px;
    font-weight: bold;
`;

// Details section
const Details = styled.p`
    font-size: 16px;
    color: #555;
    margin: 5px 0;
    line-height: 1.4;
    display: flex;
    align-items: center;
    gap: 6px;
    flex-wrap: wrap;
`;

// Status Badge with dynamic colors
const StatusBadge = styled.span`
    display: inline-block;
    padding: 5px 12px;
    border-radius: 20px;
    font-size: 14px;
    font-weight: bold;
    color: white;
    background: ${({ status }) => {
        switch (status) {
            case 'pending':
                return 'orange';
            case 'approved':
                return '#228b22';
            case 'rejected':
                return 'red';
            default:
                return '#888';
        }
    }};
`;

// Product list
const ProductList = styled.ul`
    list-style: none;
    padding: 0;
    margin-top: 10px;
`;

const ProductItem = styled.li`
    background: #f5f5f5;
    padding: 10px;
    border-radius: 8px;
    margin-bottom: 6px;
    font-size: 14px;
    color: #333;
    display: flex;
    flex-direction: column;
    gap: 4px;
`;

// Button to view more details
const SeeMoreButton = styled(Link)`
    display: inline-block;
    padding: 10px 16px;
    font-size: 16px;
    font-weight: bold;
    text-align: center;
    border-radius: 30px;
    background: #228b22;
    color: white;
    text-decoration: none;
    margin-top: 15px;
    transition: background 0.3s;

    &:hover {
        background: #1e7a1e;
    }
`;

export const Composantrequest = ({ request }) => {
  if (!request || typeof request !== 'object' || !request._id) {
      return <div>Invalid request data.</div>;
  }

  const {
      _id,
      title,
      location,
      expirationDate,
      description,
      category,
      status,
      requestedProducts,
      numberOfMeals,
      mealName, // New attribute
      mealDescription, // New attribute
      mealType
  } = request;

  return (
      <Card>
          <div>
              <Title>🛒 {title || 'Untitled Request'}</Title>
              <Details>📍 <strong>Location:</strong> {location || 'Not specified'}</Details>
              <Details>📆 <strong>Expiration:</strong> {expirationDate ? new Date(expirationDate).toLocaleDateString() : 'Not defined'}</Details>
              <Details>📝 <strong>Description:</strong> {description || 'No description'}</Details>
              <Details>📂 <strong>Category:</strong> {category || 'Not specified'}</Details>
              <Details>🔄 <strong>Status:</strong> <StatusBadge status={status}>{status || 'Unknown'}</StatusBadge></Details>

              {/* Conditional Rendering of Products or Meal Details */}
              <h4>{category === 'prepared_meals' ? '🍽️ Prepared Meals' : '📦 Requested Products:'}</h4>
              <ProductList>
                  {category === 'prepared_meals' ? (
                      <>
                          <ProductItem>Name: {mealName}</ProductItem>
                          <ProductItem>Description: {mealDescription}</ProductItem>
                          <ProductItem>Number of Meals: {numberOfMeals || 'Not specified'}</ProductItem>
                          <ProductItem>
        <p style={{ all: 'initial' }}>Meal Type: {mealType || "N/A"}</p>
      </ProductItem>                      </>
                  ) : requestedProducts && requestedProducts.length > 0 ? (
                      requestedProducts.map((product, index) => (
                          <ProductItem key={index}>
                              <span>
                                  <strong>Type:</strong> {product.productType || 'Not specified'}
                              </span>
                              <span>
                                  <strong>Weight:</strong> {product.weightPerUnit || 0} {product.weightUnit || ''}
                              </span>
                              <span>
                                  <strong>Quantity:</strong> {product.totalQuantity || 0} {product.weightUnitTotale || ''}
                              </span>
                              <span>
                                  <strong>Status:</strong> {product.status || 'Unknown'}
                              </span>
                          </ProductItem>
                      ))
                  ) : (
                      <ProductItem>{category === 'prepared_meals' ? `🍽️ Number of meals: ${numberOfMeals || 'Not specified'}` : 'No requested products'}</ProductItem>
                  )}
              </ProductList>
          </div>

          {/* Button to view more details */}
          <SeeMoreButton to={`/DetailsRequest/${_id}`}>See more</SeeMoreButton>
      </Card>
  );
};

export default Composantrequest;
</file>

<file path="sustainafood-backend/models/Donation.js">
const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const Counter = require('./Counter');

// Define Enums
const Category = {
    PREPARED_MEALS: 'prepared_meals',
    PACKAGED_PRODUCTS: 'packaged_products'
};
Object.freeze(Category);

const Status = {
    PENDING: 'pending',
    APPROVED: 'approved',
    REJECTED: 'rejected',
    PARTIALLY_FULFILLED: 'partially_fulfilled',
    FULFILLED: 'fulfilled',
    CANCELLED: 'cancelled'
};
Object.freeze(Status);

// Define Donation Schema
const donationSchema = new Schema({
    id: { type: Number, unique: true }, // Auto-incremented custom ID
    donor: { type: Schema.Types.ObjectId, ref: 'User', required: true }, // Renamed from 'user'
    title: { type: String, required: true, minlength: 3, maxlength: 100 },
    description: { type: String, maxlength: 500 },
    category: { type: String, enum: Object.values(Category), required: true }, // Lowercase naming
    products: [{
        product: { type: Schema.Types.ObjectId, ref: 'Product', required: true }, // Reference to Product
        quantity: { type: Number, required: true, min: 0 } // Donated quantity
    }],
    numberOfMeals: {
        type: Number,
        required: [
            function() { return this.category === 'prepared_meals'; },
            'Number of meals is required for prepared meals'
        ],
        min: [1, 'Number of meals cannot be negative'],
        validate: {
            validator: Number.isInteger,
            message: 'Number of meals must be an integer'
        }
    },
    location: { type: String, required: true },
    expirationDate: {
        type: Date,
        required: true,
        validate: {
            validator: (date) => date > new Date(), // Ensure future date
            message: 'Expiration date must be in the future'
        }
    },
    status: { type: String, enum: Object.values(Status), default: Status.PENDING, required: true },
    linkedRequests: [{ type: Schema.Types.ObjectId, ref: 'RequestNeed' }], // Added from concept
    mealName: { type: String },  // Add mealName
    mealDescription: { type: String },  // Add mealDescription
    MealType: { type: String} //Add MealType
}, {
    timestamps: true // Adds createdAt and updatedAt automatically
});

// Indexes for performance
donationSchema.index({ status: 1 });
donationSchema.index({ category: 1 });
donationSchema.index({ expirationDate: 1 });

// Pre-save hook for auto-incrementing ID
donationSchema.pre('save', async function(next) {
    if (this.isNew) {
        try {
            const counter = await Counter.findOneAndUpdate(
                { _id: 'DonationId' },
                { $inc: { seq: 1 } },
                { new: true, upsert: true }
            );
            this.id = counter.seq;
        } catch (err) {
            return next(new Error('Failed to generate donation ID: ' + err.message));
        }
    }
    next();
});

// Create and export the Donation model
const Donation = mongoose.model('Donation', donationSchema);
module.exports = Donation;
</file>

<file path="sustainafood-backend/models/DonationTransaction.js">
const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const Counter = require('./Counter'); // Assumes a Counter model for auto-incrementing IDs

// Define the status enum
const TransactionStatus = {
    PENDING: 'pending',
    APPROVED: 'approved',
    REJECTED: 'rejected',
    IN_PROGRESS: 'in_progress',
    COMPLETED: 'completed',
    CANCELLED: 'cancelled'
};
Object.freeze(TransactionStatus); // Prevents changes to the enum

// Define the AllocatedProduct subdocument schema (embedded in DonationTransaction)


// Define the DonationTransaction schema
const donationTransactionSchema = new Schema({
    id: {
        type: Number,
        unique: true,
        required: true
    },
    requestNeed: { 
        type: Schema.Types.ObjectId, 
        ref: 'RequestNeed', 
        required: true 
    },
    donation: { 
        type: Schema.Types.ObjectId, 
        ref: 'Donation', 
        required: true 
    },
    allocatedProducts: [{
        product: { type: Schema.Types.ObjectId, ref: 'Product' },
        quantity: { type: Number, required: true, min: 1 }
    }],
    status: { 
        type: String, 
        enum: Object.values(TransactionStatus), 
        default: TransactionStatus.PENDING, 
        required: true 
    },
    recipient: {
        type: Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    donor: {
        type: Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    responseDate: {
        type: Date
    },
    rejectionReason: {
        type: String,
        maxlength: 500
    }
}, {
    timestamps: true
});

// Pre-save hook to auto-increment the ID
// Pre-save hook to auto-increment the ID
donationTransactionSchema.pre('save', async function(next) {
    if (this.isNew) {
        try {
            console.log('Running pre-save hook for DonationTransaction');
            const counter = await Counter.findOneAndUpdate(
                { _id: 'DonationTransactionId' },
                { $inc: { seq: 1 } },
                { new: true, upsert: true }
            );
            if (!counter) {
                throw new Error('Counter not found or created');
            }
            this.id = counter.seq;
            console.log(`Assigned ID: ${this.id}`);
        } catch (err) {
            console.error('Pre-save hook error:', err);
            return next(new Error('Failed to generate transaction ID: ' + err.message));
        }
    }
    next();
});

// Add indexes for better query performance
donationTransactionSchema.index({ requestNeed: 1 });
donationTransactionSchema.index({ donation: 1 });
donationTransactionSchema.index({ status: 1 });

// Create and export the model
const DonationTransaction = mongoose.model('DonationTransaction', donationTransactionSchema);
module.exports = DonationTransaction;
</file>

<file path="sustainafood-backend/models/Product.js">
const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const Counter = require('./Counter'); // Assumes a Counter model exists for auto-incrementing IDs

// Define enums for productType
const ProductType = {
    // Packaged Products - Non-Perishable
    CANNED_GOODS: 'Canned_Goods',        // e.g., canned beans, soups
    DRY_GOODS: 'Dry_Goods',              // e.g., rice, pasta
    BEVERAGES: 'Beverages',              // e.g., bottled water, juice
    SNACKS: 'Snacks',                    // e.g., chips, granola bars
    CEREALS: 'Cereals',                  // e.g., oatmeal, cornflakes (new)
    BAKED_GOODS: 'Baked_Goods',          // e.g., packaged bread, cookies (new)
    CONDIMENTS: 'Condiments',            // e.g., ketchup, sauces (new)

    // Fresh Products
    VEGETABLES: 'Vegetables',            // e.g., carrots, potatoes
    FRUITS: 'Fruits',                    // e.g., apples, bananas
    MEAT: 'Meat',                        // e.g., fresh beef, chicken
    FISH: 'Fish',                        // e.g., fresh salmon, tuna
    DAIRY: 'Dairy',                      // e.g., milk, cheese (new)
    EGGS: 'Eggs',                        // e.g., fresh eggs (new)

    // Miscellaneous
    BABY_FOOD: 'Baby_Food',              // e.g., formula, purees (new)
    PET_FOOD: 'Pet_Food',                // e.g., dog/cat food (new)
    OTHER: 'Other'                       // Catch-all for uncategorized items                // Flexible for both
};
Object.freeze(ProductType); // Prevents changes to the enum
const MealType = {
    BREAKFAST: 'Breakfast',
    LUNCH: 'Lunch',
    DINNER: 'Dinner',
    SNACK: 'Snack',
    DESSERT: 'Dessert',
    SOUP: 'Soup',
    OTHER: 'Other'
};
Object.freeze(MealType);
// Define enums for weight units
const WeightUnit = {
    KG: 'kg',
    G: 'g',
    LB: 'lb',
    OZ: 'oz',
    ML: 'ml',
    L: 'l', // Liters
    
};
Object.freeze(WeightUnit);

// Define enums for product status
const ProductStatus = {
    AVAILABLE: 'available',
    PENDING: 'pending',
    RESERVED: 'reserved',
    OUT_OF_STOCK: 'out_of_stock'
};
Object.freeze(ProductStatus);

// Define the Product schema
const productSchema = new Schema({
    id: { 
        type: Number, 
        unique: true, 
        required: true 
    }, // Auto-incremented unique ID
    name: { 
        type: String, 
        required: true, 
        minlength: 2, 
        maxlength: 100 
    }, // Product name, 2-100 characters
    image: {
        type: String, // Could use Buffer for binary data or String for URL/path
        required: false
    },
    productType: { 
        type: String, 
        enum: Object.values(ProductType), 
        required: true 
    }, 
    MealType: { 
        type: String, 
        enum: Object.values(MealType), 
    }, // Must be one of the ProductType values
    productDescription: { 
        type: String, 
        required: true, 
        maxlength: 500 
    }, // Description, max 500 characters
    weightPerUnit: { 
        type: Number, 
        required: false, // Optional for prepared meals
        min: [0, 'Weight per unit must be non-negative'] 
    }, // Weight per item, if applicable
    weightUnit: { 
        type: String, 
        enum: Object.values(WeightUnit), 
        required: false // Optional for prepared meals
    }, // Unit of weight, if applicable
    weightUnitTotale: { 
        type: String, 
        enum: Object.values(WeightUnit), 
        required: false // Optional for prepared meals
    },
    totalQuantity: { 
        type: Number, 
        required: false, // Optional for prepared meals
        min: [0, 'Total quantity must be non-negative'],
        validate: {
            validator: Number.isInteger,
            message: 'Total quantity must be an integer'
        }
    }, // Total number of units, if applicable
    donation: { type: Schema.Types.ObjectId, ref: 'Donation' }, // Optional
    request: { type: Schema.Types.ObjectId, ref: 'RequestNeed' },// Reference to a Donation

    isArchived: { // New field to mark product as archived
        type: Boolean,
        default: false,
        required: true
    },
    archivedAt: { // Timestamp of when archived
        type: Date,
        default: null
    },
    status: { 
        type: String, 
        enum: Object.values(ProductStatus), 
        default: ProductStatus.AVAILABLE, 
        required: true 
    } // Product availability status
}, {
    timestamps: true, // Automatically adds createdAt and updatedAt fields
    toJSON: { virtuals: true }, // Include virtual fields in JSON output
    toObject: { virtuals: true } // Include virtual fields in object output
});

// Add a virtual field to calculate total weight
productSchema.virtual('totalWeight').get(function() {
    if (this.weightPerUnit && this.totalQuantity) {
        return this.weightPerUnit * this.totalQuantity;
    }
    return null; // Returns null if weight or quantity is missing
});

// Attach enums to the model for easy access
productSchema.statics.ProductType = ProductType;
productSchema.statics.WeightUnit = WeightUnit;
productSchema.statics.ProductStatus = ProductStatus;

// Auto-increment the ID before saving a new product
productSchema.pre('save', async function(next) {
    if (this.isNew) { // Only for new documents
        try {
            const counter = await Counter.findOneAndUpdate(
                { _id: 'ProductId' },
                { $inc: { seq: 1 } },
                { new: true, upsert: true }
            );
            this.id = counter.seq; // Set the new ID
        } catch (err) {
            return next(new Error('Failed to generate product ID: ' + err.message));
        }
    }
    next(); // Proceed with saving
});

// Add an index for faster queries on donation
productSchema.index({ donation: 1 });
productSchema.index({ isArchived: 1 });

// Create and export the Product model
const Product = mongoose.model('Product', productSchema);
module.exports = Product;
</file>

<file path="sustainafood-backend/models/RequestNeed.js">
const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const Counter = require('./Counter'); // Assumes a Counter model for auto-incrementing IDs

// Define the status enum
const RequestStatus = {
    PENDING: 'pending',
    APPROVED: 'approved',
    REJECTED: 'rejected',
    FULFILLED: 'fulfilled',
};
Object.freeze(RequestStatus);

// Define the category enum
const Category = {
    PREPARED_MEALS: 'prepared_meals',
    PACKAGED_PRODUCTS: 'packaged_products',
};
Object.freeze(Category);

// Define the ProductRequest subdocument schema (embedded in RequestNeed)


// Define the RequestNeed schema
const requestNeedSchema = new Schema({
    id: { type: Number },
    title: {
        type: String,
        required: [true, 'Title is required'],
        maxlength: [100, 'Title cannot exceed 100 characters'],
        trim: true
    },
    location: { 
        type: String, 
        required: [true, 'Location is required'],
        trim: true 
    },
    expirationDate: {
        type: Date,
        required: [true, 'Expiration date is required'],
        validate: {
            validator: (date) => date > new Date(), // Ensure future date
            message: 'Expiration date must be in the future'
        }
    },
    description: { 
        type: String, 
        maxlength: [500, 'Description cannot exceed 500 characters'],
        trim: true 
    },
    category: { 
        type: String, 
        enum: Object.values(Category), 
        required: [true, 'Category is required'] 
    },
    recipient: { 
        type: Schema.Types.ObjectId, 
        ref: 'User', 
        required: [true, 'Recipient is required'] 
    },
    status: { 
        type: String, 
        enum: Object.values(RequestStatus), 
        default: RequestStatus.PENDING, 
        required: [true, 'Status is required'] 
    },
    linkedDonation:[ { 
        type: Schema.Types.ObjectId, 
        ref: 'Donation', 
        required: false ,
        default: []
    }],
    requestedProducts: [{ type: Schema.Types.ObjectId, ref: 'Product',  required: [
        function() { return this.category === 'packaged_products'; }, 
        'required for prepared meals'
      ], }],


      numberOfMeals: {
        type: Number,
        required: [
            function() { return this.category === 'prepared_meals'; },
            'required for prepared meals'
        ],
        min: [1, 'Number of meals cannot be negative'],
        validate: {
            validator: function(value) {
                // Skip validation if value is null/undefined and not required
                if (value == null && this.category !== 'prepared_meals') return true;
                return Number.isInteger(value);
            },
            message: 'Number of meals must be an integer'
        }
    },
    mealName: { type: String },  
    mealDescription: { type: String }, 
    mealType: {  // ADD THIS LINE
        type: String,
        // Optionally, add an enum to restrict possible meal types
       
    }
}, {
    timestamps: { 
        createdAt: 'created_at', 
        updatedAt: 'updated_at' 
    } // Map to your custom field names
});

// Pre-save hook to auto-increment the ID
requestNeedSchema.pre('save', async function(next) {
    if (this.isNew) {
        try {
            const counter = await Counter.findOneAndUpdate(
                { _id: 'RequestNeedId' },
                { $inc: { seq: 1 } },
                { new: true, upsert: true }
            );
            this.id = counter.seq;
            next();
        } catch (err) {
            next(new Error(`Failed to generate request ID: ${err.message}`));
        }
    } else {
        next();
    }
});

// Create and export the model
const RequestNeed = mongoose.model('RequestNeed', requestNeedSchema);
module.exports = RequestNeed;
</file>

<file path="sustainafood-backend/routes/requestNeedRoutes.js">
const express = require('express');
const router = express.Router();
const authMiddleware = require('../Middleware/auth'); // Your authentication middleware
const requestNeedController = require('../controllers/requestNeedController');

router.get('/', requestNeedController.getAllRequests);
router.get('/:id', requestNeedController.getRequestById);
router.get('/recipient/:recipientId', requestNeedController.getRequestsByRecipientId);
router.get('/status/:status', requestNeedController.getRequestsByStatus);
router.post('/', requestNeedController.createRequest);
router.put('/:id', requestNeedController.updateRequest);
router.delete('/:id', requestNeedController.deleteRequest);
router.post('/addDonationToRequest/:requestId/donations', requestNeedController.addDonationToRequest);
router.post('/requestdonation/:donationId', requestNeedController.createRequestNeedForExistingDonation);
router.get('/:requestId/with-donations', requestNeedController.getRequestWithDonations);

module.exports = router;
</file>

<file path="sustainafood-frontend/src/assets/styles/Composantdonation.css">
.donation-cardlist {
    background: white;
    padding: 20px 20px 60px 20px; /* Extra padding at bottom for button area */
    border-radius: 10px;
    border-left: 3px solid #228b22;

    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
    width: 100%;
    position: relative;
    text-align: left;
    height: 100%;
    display: flex;
    flex-direction: column;
  }
  
  .donation-card-content {
    flex: 1;
    border-left: 3px solid #228b22;

  }
  
  .donation-title {
    margin-top: 0;
    color: #228b22;
    display: flex;
    align-items: center;
    gap: 5px;
  }
  
  .donation-ul {
    padding-left: 0;
    list-style-type: none;
    margin-bottom: 10px;
  }
  
  .donation-li-list {
    background: #dcebda83;
    padding: 8px;
    border-radius: 5px;
    margin: 5px 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  /* Card footer with button */
  .donation-card-footer {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    padding: 0 20px;
    background: linear-gradient(to bottom, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 1) 20%);
  }
  
  .btnseemorelist,
  .btnseelist {
    height: 35px;
    font-size: 15px;
    padding: 5px 20px;
    background-color: #228b22;
    color: white;
    border-radius: 5px;
    border: none;
    text-decoration: none;
    display: inline-block;
    transition: all 0.2s;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .btnseemorelist:hover,
  .btnseelist:hover {
    background-color: #1a6b1a;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }
  
  /* Status colors */
  .status.available {
    color: #228b22;
    font-weight: bold;
  }
  
  .status.pending {
    color: #ffa500;
    font-weight: bold;
    background-color: #fff3cd;
    padding: 2px 8px;
    border-radius: 4px;
  }
  
  .status.reserved {
    color: #ff4500;
    font-weight: bold;
  }
  
  /* Product icon */
  .product-icon {
    margin-right: 5px;
  }
  
  .donation-cardlist {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px;
  }
  
  .donation-card-content {
    background: #fff;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    width: 80%;
    max-width: 975px;
  }
  
  .donation-title {
    font-size: 1.8rem;
    font-weight: bold;
    color: #333;
    text-align: center;
    margin-bottom: 10px;
  }
  
  .donation-ul {
    list-style: none;
    padding: 0;
  }
  
  .donation-li-list {
    background: #f9f9f9;
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 10px;
  }
  
  .donation-li-list strong {
    color: #228b22;

  }
  
  /* Buttons */
  button {
    cursor: pointer;
    padding: 8px 12px;
    border-radius: 5px;
    border: none;
    font-size: 14px;
    font-weight: bold;
    transition: 0.3s;
  }
  
  button:hover {
    opacity: 0.8;
  }
  
  /* Specific Buttons */
  .btnseelist {
    display: block;
    width: 100%;
    text-align: center;
    background-color: #28a745;
    color: white;
    margin-top: 10px;
  }
  
  .btnseelist:hover {
    background-color: #218838;
  }
  
  /* Action Icons */
  .fa-trash {
    color: #c30010;
    cursor: pointer;
    font-size: 20px;
  }
  
  .fa-trash:hover {
    color: red;
  }
  
  .fa-edit {
    color: black;
    cursor: pointer;
    font-size: 20px;
  }
  
  .fa-edit:hover {
    color: #007bff;
  }
  
  .fa-save {
    color: green;
    cursor: pointer;
    font-size: 20px;
  }
  
  .fa-save:hover {
    color: #28a745;
  }
  
  .fa-times {
    color: red;
    cursor: pointer;
    font-size: 18px;
    margin-left: 10px;
  }
  
  .fa-times:hover {
    color: darkred;
  }
  
  /* Input Fields */
  input,
  textarea {
    width: 100%;
    padding: 8px;
    margin-top: 5px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 14px;
  }
  
  textarea {
    resize: vertical;
  }
  
  /* Product Edit Section */
  .donation-card-content ul li {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    align-items: center;
  }
  
  .donation-card-content ul li input {
    flex: 1;
    min-width: 100px;
  }
  
  /* Add Product Button */
  button[onClick="handleAddProduct"] {
    background-color: #228b22;
    
    color: white;
  }
  
  button[onClick="handleAddProduct"]:hover {
    background-color: #228b22;
  }
  
  /* Loader */
  div[children="Loading..."] {
    text-align: center;
    font-size: 18px;
    color: #555;
    margin-top: 20px;
  }
  .donation-cardlist {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px;
  }

  
  .donation-title {
    font-size: 1.8rem;
    font-weight: bold;
    color: #333;
    text-align: center;
    margin-bottom: 10px;
  }
  
  .donation-ul {
    list-style: none;
    padding: 0;
  }
  
  .donation-li-list {
    background: #f9f9f9;
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 10px;
  }
  
  .donation-li-list strong {
    color: #228b22;
  }
  
  /* 🛠 BUTTON STYLES */
  button {
    cursor: pointer;
    padding: 10px 15px;
    border-radius: 5px;
    border: none;
    font-size: 14px;
    font-weight: bold;
    transition: transform 0.2s ease, background-color 0.3s ease, box-shadow 0.3s ease;
  }
  
  /* 🟢 General Hover Effect */
  button:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }
  
  /* ✅ Edit Button */
  .edit-btn {
    background-color: #007bff;
    color: white;
  }
  
  .edit-btn:hover {
    background-color: #0056b3;
  }
  
  /* 💾 Save Button */
  .save-btn {
    background-color: green;
    color: white;
  }
  
  .save-btn:hover {
    background-color: #218838;
  }
  
  /* ❌ Delete Button */
  .delete-btn {
    background-color: #c30010;
    color: white;
  }
  
  .delete-btn:hover {
    background-color: red;
  }
  
  /* ➕ Add Request Button */
  .add-request-btn {
    background-color: #ff9800;
    color: white;
  }
  
  .add-request-btn:hover {
    background-color: #e68900;
  }
  
  /* 🔙 Go Back Button */
  .go-back-btn {
    background-color: #6c757d;
    color: white;
  }
  
  .go-back-btn:hover {
    background-color: #5a6268;
  }
  
  /* 👀 View Request Button */
  .view-request-btn {
    background-color: #28a745;
    color: white;
  }
  
  .view-request-btn:hover {
    background-color: #218838;
  }
  
  /* ➕ Add Product Button */
  .add-product-btn {
    background-color: #228b22;
    color: white;
    display: inline-block;
    padding: 10px 16px;
    font-size: 16px;
    font-weight: bold;
    text-align: center;
    border-radius: 30px;  
  margin-right: 10px;}
  
  .add-product-btn:hover {
    background-color: #1e571e;
  }
  
  /* 🛑 Hide View Request When Editing */
  .hide {
    display: none;
  }
  
  /* Icons (Edit, Save, Delete) */
  
  .fa-times {
    cursor: pointer;
    transition: transform 0.2s ease, color 0.2s ease;
  }
  
  /* 🔥 Animation when hovering over icons */
  .fa-trash:hover {
    color: red;
    transform: scale(1.2);
  }
  
  .fa-edit:hover {
    color: #007bff;
    transform: scale(1.2);
  }
  
  .fa-save:hover {
    color: green;
    transform: scale(1.2);
  }
  
  .fa-times:hover {
    color: darkred;
    transform: scale(1.2);
  }
  
  /* Input Fields */
  input,
  textarea {
    width: 100%;
    padding: 8px;
    margin-top: 5px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 14px;
  }
  
  textarea {
    resize: vertical;
  }
  

  .donation-card-content ul li input {
    flex: 1;
    min-width: 100px;
  }
  
  /* Loader */
  div[children="Loading..."] {
    text-align: center;
    font-size: 18px;
    color: #555;
    margin-top: 20px;
  }
  /* 🔧 Fixing Edit & Delete Icons */
.icon-container {
  display: flex;
  align-items: center;
  gap: 10px; /* Space between icons */
  margin-top: 10px; /* Add spacing from other elements */
}

/* 🎨 Icons Styling */


/* ❌ Delete Icon */
.fa-trash {
  color: red;
}

.fa-trash:hover {
  color: darkred;
  transform: scale(1.2);
}

/* ✏️ Edit Icon */
.fa-edit {
  color: #007bff;

}

.fa-edit:hover {
  color: black;
  transform: scale(1.2);
}
</file>

<file path="sustainafood-frontend/src/components/Navbar.jsx">
import { useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import { FaSignOutAlt, FaBell, FaSignInAlt, FaUserPlus } from "react-icons/fa";
import logo from "../assets/images/logooo.png";
import imgmouna from "../assets/images/imgmouna.png";
import { useAuth } from "../contexts/AuthContext";
import { getUserById } from "../api/userService";
import "../assets/styles/Navbar.css";

const Navbar = () => {
  const { user: authUser, token, logout } = useAuth();
  const [user, setUser] = useState(authUser);
  const [menuOpen, setMenuOpen] = useState(false);
  const [dropdownOpen, setDropdownOpen] = useState(null);
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const navigate = useNavigate();
  const profilePhotoUrll = user?.photo ? `http://localhost:3000/${user.photo}` : imgmouna;
  useEffect(() => {
    const fetchUser = async () => {
      if (typeof authUser.id === "number") {
        if (!authUser || !authUser._id) return;
        try {
          const response = await getUserById(authUser._id);
          setUser(response.data);
        } catch (error) {
          console.error("Backend Error:", error);
        }
      }
      else if (typeof authUser.id === "string") {
        if (!authUser || !authUser.id) return;
        try {
          const response = await getUserById(authUser.id);
          setUser(response.data);
        } catch (error) {
          console.error("Backend Error:", error);
        }
      }
    };

    if (authUser && (authUser._id || authUser.id)) {
      fetchUser();
    }
  }, [authUser]);
  
  const handleLogout = () => {
    logout();
    navigate("/login");
    localStorage.clear();
  };

  const isDonner = user?.role === "restaurant" || user?.role === "supermarket";
  const isRecipient = user?.role === "ong" || user?.role === "student";
  const isAdmin = user?.role === "admin";
  const isTransporter=user?.role === "transporter";

  return (
    <nav className="navbarfront">
      <div className="logo-container">
        <img src={logo || "/placeholder.svg"} alt="SustainaFood Logo" className="logo" />
        <h1 className="title">SustainaFood</h1>
      </div>

      {/* Menu Burger */}
      <div
        className={`menu-toggle ${mobileMenuOpen ? "open" : ""}`}
        onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
      >
        <span className="bar"></span>
        <span className="bar"></span>
        <span className="bar"></span>
      </div>

      {/* Navigation Links */}
      <ul className={`nav-links ${mobileMenuOpen ? "open" : ""}`}>
        <Link to="/" className="nav-link">
          Home
        </Link>
        <Link to="/About" className="nav-link">
          About
        </Link>
        <Link to="/Contact" className="nav-link">
          Contact
        </Link>

        {authUser ? (
          <>
            <div
              className="dropdown"
              onMouseEnter={() => setDropdownOpen("donations")}
              onMouseLeave={() => setDropdownOpen(null)}
            >
              <span className="dropdown-toggle">Donations</span>
              {dropdownOpen === "donations" && (
                <div className="dropdown-content">
                  <Link to="/ListOfDonations">List of Donations</Link>
                  <Link to="/ListOfRequests">List of Requests</Link>
                  {isRecipient && <Link to="/myrequest">My Requests</Link>}
                  {isDonner && <Link to="/mydonations">My Donations</Link>}
                </div>
              )}
            </div>
            <div
              className="dropdown"
              onMouseEnter={() => setDropdownOpen("transporter")}
              onMouseLeave={() => setDropdownOpen(null)}
            >
              <span className="dropdown-toggle">Transporter</span>
              {dropdownOpen === "transporter" && (
                <div className="dropdown-content">
                  <Link to="#">Assigned Deliveries</Link>
                  {isTransporter && <Link to="#">Route Optimization</Link>}
                </div>
              )}
            </div>
            <div
              className="dropdown"
              onMouseEnter={() => setDropdownOpen("analytics")}
              onMouseLeave={() => setDropdownOpen(null)}
            >
              <span className="dropdown-toggle">Analytics & Reporting</span>
              {dropdownOpen === "analytics" && (
                <div className="dropdown-content">
                  <Link to="#">Donation Statistics</Link>
                  <Link to="#">Personal Stats</Link>
                </div>
              )}
            </div>
            <div
              className="dropdown"
              onMouseEnter={() => setDropdownOpen("ai")}
              onMouseLeave={() => setDropdownOpen(null)}
            >
              <span className="dropdown-toggle">AI System</span>
              {dropdownOpen === "ai" && (
                <div className="dropdown-content">
                  <Link to="#">Food Item Classification</Link>
                  <Link to="#">Predictions</Link>
                </div>
              )}
            </div>

            <div className="social-icons">
              <FaBell />
            </div>

            {/* Render Profile Menu Only for Non-Admin Users */}
            {!isAdmin && (
              <div className="profile-menu" onClick={() => setMenuOpen(!menuOpen)}>
                <img
                  src={profilePhotoUrll || "/placeholder.svg"}
                  alt="Profile"
                  className="profile-img"
                />
                <div className={`dropdown-menu ${menuOpen ? "active" : ""}`}>
                  <div className="profile-info">
                    <img
                      src={profilePhotoUrll || "/placeholder.svg"}
                      alt="Profile"
                      className="dropdown-img"
                    />
                    <div>
                      <p className="user-name">{user?.name || "Loading..."}</p>
                      <p className="user-email">{user?.email || "Loading..."}</p>
                    </div>
                  </div>
                  <hr />
                  <button onClick={() => navigate("/profile")} className="menu-item">
                    Profile and visibility
                  </button>
                  <button
                    className="menu-item"
                    onClick={() => navigate("/account-settings")}
                  >
                    Account Settings
                  </button>
                  <button
                    className="menu-item"
                    onClick={() => navigate("/edit-profile")}
                  >
                    Edit Profile
                  </button>
                  <hr />
                  <button onClick={handleLogout} className="menu-item logout">
                    <FaSignOutAlt /> LogOut
                  </button>
                </div>
              </div>
            )}
          </>
        ) : (
          <div className="auth-buttons">
            <Link to="/login" className="auth-button signin">
              <FaSignInAlt /> Sign In
            </Link>
            <Link to="/signup" className="auth-button signup">
              <FaUserPlus /> Sign Up
            </Link>
          </div>
        )}
      </ul>
    </nav>
  );
};

export default Navbar;
</file>

<file path="sustainafood-frontend/src/pages/log.jsx">
import { useState, useContext } from "react";
import { useNavigate } from "react-router-dom";
import { AuthContext } from "../contexts/AuthContext";
import { loginUser } from "../api/userService"; // Ensure this is correctly imported
import { useGoogleLogin } from "@react-oauth/google";
import { createuser,getUserById } from '../api/userService'; // Exemple d'import

import "../assets/styles/log.css";
import logo from "../assets/images/LogoCh.png";
import loginImg from "../assets/images/Login-PNG-HD-Image.png";
import gglimg from "../assets/images/ggl.jpg";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowLeft } from "@fortawesome/free-solid-svg-icons";
import { FaEye, FaEyeSlash } from "react-icons/fa";




const Login = () => {
    const { login } = useContext(AuthContext);
    const navigate = useNavigate();
    const [error, setError] = useState(null);
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [isRightPanelActive, setIsRightPanelActive] = useState(false);
    const [showPassword, setShowPassword] = useState(false);

    const handleLogin = async (e) => {
        e.preventDefault();
        setError("");

        if (!email || !password) {
            setError("Please fill in all fields.");
            return;
        }

        try {
            const response = await loginUser({ email, password });

            if (response?.data?.requires2FA) {
                navigate(`/two-fa-verification?email=${encodeURIComponent(email)}`);
            } else if (response?.data?.token) {
                const userData = {
                    id: response.data.id,
                    role: response.data.role,
                    email,
                    welcomeMessage: response.data.message,
                };
                login(userData, response.data.token);

                if (userData.role === "admin") {
                    navigate("/dashboard");
                } else {
                    navigate("/profile");
                }
            } else {
                setError("Authentication failed. Please check your credentials.");
            }
        } catch (err) {
            console.error("Backend error:", err.response?.data || err.message);
            setError(err.response?.data?.error || "Login error.");
        }
    };

    const handleGoogleLogin = useGoogleLogin({
        flow: "implicit", // Au lieu de "implicit"
        onSuccess: async (tokenResponse) => {
            try {
                if (!tokenResponse || !tokenResponse.access_token) {
                    setError("Google login error.");
                    console.error("Token Response Error:", error);
                    return;
                }
                

                const userInfoResponse = await fetch("https://www.googleapis.com/oauth2/v3/userinfo", {
                    headers: { Authorization: `Bearer ${tokenResponse.access_token}` },
                });
                const userInfo = await userInfoResponse.json();

                localStorage.setItem("email from google", userInfo.email);
                localStorage.setItem("id from google", userInfo.sub);

                const userData = {
                    email: userInfo.email,
                    name: userInfo.name,
                    photo: userInfo.picture,
                };

                const response = await createuser(userData);
                const user = await getUserById(response.data.id);
                login(user.data, tokenResponse.access_token);

                localStorage.setItem("user_id", response.data.id);

                if (!user.data.role) {
                    navigate("/Continueinfo");
                } else if (user.data.is2FAEnabled) {
                    navigate(`/two-fa-verification?email=${encodeURIComponent(user.data.email)}`);
                } else {
                    navigate("/profile");
                }
            } catch (error) {
                console.error("API error:", error.response ? error.response.data : error.message);
                setError("Google login error.");
            }
        },
        onError: (error) => {
            console.error("Google login failed", error);
            setError("Google login failed.");
        },
    });

    const handleForgotPassword = () => {
        navigate("/forget-password");
    };

    const togglePanel = () => {
        setIsRightPanelActive(!isRightPanelActive);
    };

    return (
        <div className="aa">
            <div className={`signup-container ${isRightPanelActive ? "right-panel-active" : ""}`} id="container">
                <div className="signup-form-container signup-sign-up-container">
                    <form className="signup-form" onSubmit={handleLogin}>
                        <h1 className="signup-h1">Sign in</h1>
                        <div className="signup-social-container">
                            <a href="#" className="signup-social" onClick={handleGoogleLogin}>
                                <img src={gglimg} alt="Google" />
                            </a>
                        </div>
                        <span>or use your account</span>

                        <input
                            className="signup-input"
                            type="email"
                            placeholder="Email"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            required
                        />
                        <input
                            className="signup-input"
                            type={showPassword ? "text" : "password"}
                            placeholder="Password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            required
                        />
                        <span className="auth-eye-icon" onClick={() => setShowPassword(!showPassword)}>
                            {showPassword ? <FaEyeSlash /> : <FaEye />}
                        </span>

                        {error && <p className="error-message">{error}</p>}

                        <div style={{ display: "flex", alignItems: "center", marginTop: "10px" }}>
                            <label className="ios-checkbox green">
                                <input type="checkbox" />
                                <div className="checkbox-wrapper">
                                    <div className="checkbox-bg"></div>
                                    <svg fill="none" viewBox="0 0 24 24" className="checkbox-icon">
                                        <path
                                            strokeLinejoin="round"
                                            strokeLinecap="round"
                                            strokeWidth="3"
                                            stroke="currentColor"
                                            d="M4 12L10 18L20 6"
                                            className="check-path"
                                        />
                                    </svg>
                                </div>
                            </label>
                            <span style={{ fontSize: "14px", marginLeft: "5px" }}>Remember me</span>
                            <a href="#" className="signup-a" onClick={handleForgotPassword} style={{ marginLeft: "190px" }}>
                                Forgot your password?
                            </a>
                        </div>

                        <button type="submit" className="signup-button">
                            Sign In
                        </button>
                        <div>
                            <span style={{ fontSize: "14px" }}>
                                Don't have an account? <a href="/signup">Sign Up</a>
                            </span>
                        </div>
                    </form>
                </div>

                <div className="signup-form-container signup-sign-in-container">
                    <form className="signup-form">
                        <img src={logo} alt="Logo" className="signup-logo" />
                        <p className="signup-p">
                            Thank you for joining us on a mission to reduce food waste and make a positive impact.
                        </p>
                    </form>
                </div>

                <div className="signup-overlay-container">
                    <div className="signup-overlay">
                        <div className="signup-overlay-panel signup-overlay-left">
                            <img src={loginImg} alt="Login" className="signup-logo" />
                            <button className="signbtn" onClick={togglePanel}>
                                <FontAwesomeIcon icon={faArrowLeft} />
                            </button>
                        </div>
                        <div className="signup-overlay-panel signup-overlay-right">
                            <h1>Welcome Back!</h1>
                            <p>To keep connected with us please login with your personal info</p>
                            <button className="signbtn" onClick={togglePanel}>
                                Sign In
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Login;
</file>

<file path="sustainafood-frontend/src/api/donationService.js">
import axios from "axios";

export const addDonation = async (donationrData) => {
  return await axios.post('http://localhost:3000/donation/', donationrData, {
    headers: {
      "Content-Type": "application/json",
    },
  });
};
export const getDonations = async () => {
  return axios.get(`http://localhost:3000/donation/`);
};
export const getDonationById = async (id) => {
  try {
    return await axios.get(`http://localhost:3000/donation/${id}`);
  } catch (error) {
    console.error("Error fetching donation:", error);
    throw error;
  }
};
export const getDonationByRequestId = async (requestId) => {
  try {
    const response = await axios.get(`http://localhost:3000/donation/donations/${requestId}`);
    return response.data; // Return the actual data from the response
  } catch (error) {
    console.error('Error fetching donation:', error.response?.data || error.message);
    throw error; // Re-throw the error for the caller to handle
  }
};

export const getDonationByUserId = async (id) => {
  return axios.get(`http://localhost:3000/donation/user/${id}`);
};
export const getDonationsByUserId = async (id) => {

  return axios.get(`http://localhost:3000/donation/user/${id}`);
}
export const deleteDonation = async (id) => {
  return axios.delete(`http://localhost:3000/donation/${id}`);
};
// donationService.js
export const updateDonation = async (id, donationData) => {
  try {
    return await axios.put(`http://localhost:3000/donation/${id}`, donationData, {
      headers: {
        "Content-Type": "application/json",
      },
    });
  } catch (error) {
    console.error("Error updating donation:", error.response?.data || error.message);
    throw error;
  }
};
</file>

<file path="sustainafood-frontend/src/pages/DetailsRequest.jsx">
import React, { useEffect, useState } from 'react';
import { useParams, Link } from 'react-router-dom';
import '../assets/styles/Composantdonation.css';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import { getRequestById, deleteRequest, updateRequest, addDonationToRequest } from '../api/requestNeedsService';
import { FaEdit, FaTrash, FaSave, FaTimes, FaEye } from "react-icons/fa";
import styled from 'styled-components';
import logo from "../assets/images/LogoCh.png";
import { useNavigate } from "react-router-dom";

// Styled Components for Buttons
const Button = styled.button`
  display: inline-block;
  padding: 12px 20px;
  font-size: 16px;
  font-weight: 600;
  text-align: center;
  border-radius: 8px; // Slightly less rounded for a modern look
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 8px;
  color: white;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);

  // Variant-specific styles
  ${({ variant }) => variant === 'add' && `
    background: #228b22;
    &:hover { background: #228b22; transform: translateY(-2px); }
  `}
  ${({ variant }) => variant === 'cancel' && `
    background: #dc3545;
    &:hover { background: #b02a37; transform: translateY(-2px); }
  `}
  ${({ variant }) => variant === 'submit' && `
    background: #28a745;
    &:hover { background: #218838; transform: translateY(-2px); }
  `}
  ${({ variant }) => variant === 'donate' && `
    background: #228b22; // Changed to a teal color for donation buttons
    &:hover { background: #228b22; transform: translateY(-2px); }
  `}
  ${({ variant }) => variant === 'back' && `
    background: #6c757d;
    &:hover { background: #5a6268; transform: translateY(-2px); }
  `}

  &:active {
    transform: translateY(1px);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }
`;

// Styled Component for Donation Form
const DonationForm = styled.div`
  h4 {
    color: #228b22;
    font-size: 25px;
    margin-bottom: 20px;
    font-weight: 600;
  }

  div {
    margin-bottom: 15px;
  }

  label {
    display: block;
    font-weight: 500;
    color: #495057;
    margin-bottom: 6px;
    font-size: 14px;
  }

  input {
    width: 100%;
    padding: 10px 12px;
    border: 1px solid #ced4da;
    border-radius: 6px;
    font-size: 16px;
    background: #f8f9fa;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;

    &:focus {
      border-color: #17a2b8;
      box-shadow: 0 0 5px rgba(23, 162, 184, 0.3);
      outline: none;
    }
  }
`;

const DetailsRequest = () => {
  const { id } = useParams();
  const [request, setRequest] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [isAddingDonation, setIsAddingDonation] = useState(false);
  const user = JSON.parse(localStorage.getItem("user"));
  const [userid, setUserid] = useState();
  const [isTheOwner, setIsTheOwner] = useState(false);
  const [editedRequest, setEditedRequest] = useState({
    title: "",
    location: "",
    expirationDate: "",
    description: "",
    category: "",
    status: "",
    requestedProducts: [],
    numberOfMeals: ""
  });
  const [donationQuantities, setDonationQuantities] = useState([]);

  const weightUnits = ['kg', 'g', 'lb', 'oz'];
  const statuses = ['available', 'pending', 'reserved'];
    const navigate = useNavigate();

  useEffect(() => {
    if (typeof user.id === "number") {
      setUserid(user._id);
    } else if (typeof user.id === "string") {
      setUserid(user.id);
    }
  }, [user]);

  const isDonor = user?.role === "restaurant" || user?.role === "supermarket";
  const isRecipient = user?.role === "ong" || user?.role === "student";

  useEffect(() => {
    const fetchRequest = async () => {
      try {
        const response = await getRequestById(id);
        const fetchedRequest = response.data;
        setRequest(fetchedRequest);
        setEditedRequest({
          title: fetchedRequest.title || "",
          location: fetchedRequest.location || "",
          expirationDate: fetchedRequest.expirationDate || "",
          description: fetchedRequest.description || "",
          category: fetchedRequest.category || "",
          status: fetchedRequest.status || "",
          requestedProducts: fetchedRequest.requestedProducts ? [...fetchedRequest.requestedProducts] : [],
          numberOfMeals: fetchedRequest.numberOfMeals || ""
        });
        setDonationQuantities(fetchedRequest.requestedProducts.map(() => 0));
      } catch (err) {
        setError(err.response?.data?.message || 'Error fetching request data');
      } finally {
        setLoading(false);
      }
    };
    fetchRequest();
  }, [id]);

  useEffect(() => {
    if (request && userid) {
      if (request.recipient && request.recipient._id) {
        setIsTheOwner(userid === request.recipient._id);
      } else {
        setIsTheOwner(false);
      }
    }
  }, [request, userid]);

  const handleDeleteRequest = () => {
    deleteRequest(id)
      .then(() => {
        console.log("Request successfully deleted");
        window.history.back();
      })
      .catch((error) => {
        console.error("Error deleting request:", error);
      });
  };

  const handleSaveRequest = () => {
    console.log('Sending update with data:', editedRequest);
    updateRequest(id, editedRequest)
      .then((response) => {
        console.log("Server response:", response.data);
        setRequest(response.data.updatedRequest);
        setIsEditing(false);
      })
      .catch((error) => {
        console.error("Error updating request:", error.response?.data || error);
      });
  };

  const handleProductChange = (index, field, value) => {
    const updatedProducts = [...editedRequest.requestedProducts];
    if (field === 'totalQuantity' || field === 'weightPerUnit') {
      value = Number(value);
    }
    updatedProducts[index] = { ...updatedProducts[index], [field]: value };
    setEditedRequest({ ...editedRequest, requestedProducts: updatedProducts });
  };

  const handleDeleteProduct = (index) => {
    const updatedProducts = editedRequest.requestedProducts.filter((_, i) => i !== index);
    setEditedRequest({ ...editedRequest, requestedProducts: updatedProducts });
  };

  const handleAddProduct = () => {
    const newProduct = {
      productType: '',
      productDescription: '',
      weightPerUnit: 0,
      weightUnit: '',
      totalQuantity: 0,
      weightUnitTotale: '',
      status: 'available'
    };
    setEditedRequest({
      ...editedRequest,
      requestedProducts: [...editedRequest.requestedProducts, newProduct]
    });
  };

  const handleCancelEdit = () => {
    setIsEditing(false);
    setEditedRequest({
      title: request.title || "",
      location: request.location || "",
      expirationDate: request.expirationDate || "",
      description: request.description || "",
      category: request.category || "",
      status: request.status || "",
      requestedProducts: request.requestedProducts ? [...request.requestedProducts] : [],
      numberOfMeals: request.numberOfMeals || ""
    });
  };

  const handleDonationQuantityChange = (index, value) => {
    const newQuantities = [...donationQuantities];
    newQuantities[index] = Math.min(Number(value), request.requestedProducts[index].totalQuantity);
    setDonationQuantities(newQuantities);
  };
  const handleSubmitDonation = async () => {
    try {
      const token = localStorage.getItem('token');
      console.log('Token before request:', token);
  
      const donationProducts = request.requestedProducts.map((product, index) => ({
        product: product._id ? product._id.toString() : null,
        quantity: Number(donationQuantities[index]) || 0,
      })).filter(p => p.quantity > 0);
  
      const donationData = {
        products: donationProducts,
        donor: user?._id || user?.id,
        expirationDate: request.expirationDate || new Date().toISOString(),
      };
  
      console.log('Sending donation:', donationData);
      const response = await addDonationToRequest(id, donationData);
      console.log('Donation submitted:', response.donation);
  
      setIsAddingDonation(false);
      setDonationQuantities(request.requestedProducts.map(() => 0));
      setRequest(prev => ({
        ...prev,
        donations: [...(prev.donations || []), response.donation],
      }));
    } catch (error) {
      console.error('Error submitting donation:', error);
      alert(`Failed to submit donation: ${error.message || 'Unknown error'}`);
    }
  };
  
  const handleDonateAll = async () => {
    try {
      const token = localStorage.getItem('token');
      console.log('Token before request:', token);
      if (!token) {
        throw new Error('No authentication token found');
      }
  
      const donationProducts = request.requestedProducts.map((product) => ({
        product: product._id ? product._id.toString() : null,
        quantity: Number(product.totalQuantity) || 0,
      }));
  
      const donationData = {
        products: donationProducts,
        donor: user._id,
        expirationDate: request.expirationDate || new Date().toISOString(),
      };
  
      console.log('Request data:', JSON.stringify(request, null, 2));
      console.log('Sending donation:', JSON.stringify(donationData, null, 2));
  
      const response = await addDonationToRequest(id, donationData);
      console.log('Donated all:', response.donation);
  
      setIsAddingDonation(false);
      setRequest(prevRequest => ({
        ...prevRequest,
        donations: [...(prevRequest.donations || []), response.donation],
      }));
    } catch (error) {
      console.error('Error donating all:', error.response?.data || error.message);
      alert(`Failed to donate all: ${error.message || 'Unknown error'}`);
    }
  };
  
  // In the JSX:
  <Button variant="donate" onClick={handleDonateAll}>Donate all</Button>
  if (loading) return <div>Loading...</div>;
  if (error) return <div>{error}</div>;
  if (!request) return <div>No request found.</div>;

  const {
    title,
    location,
    expirationDate,
    description,
    category,
    status,
    requestedProducts,
    numberOfMeals
  } = request;

  return (
    <>
      <Navbar />
      <div className="donation-cardlist">
        <div className="donation-card-content">
          <img src={logo} alt="Logo" className="adddonation-logo" style={{ marginLeft: "47%" }} />

          <div style={{ display: "flex", alignItems: "center", justifyContent: "space-between" }}>
            {isEditing ? (
              <input
                type="text"
                value={editedRequest.title}
                onChange={(e) => setEditedRequest({ ...editedRequest, title: e.target.value })}
                placeholder="🛒 Request Title"
                style={{ fontSize: "1.5rem", fontWeight: "bold", width: "60%" }}
              />
            ) : (
              <h3 className="donation-title">
                🛒 Request: {title || "No Title"}
              </h3>
            )}
            {isTheOwner && (
              <div>
                <FaTrash className='fa-trash' onClick={handleDeleteRequest} />
                {isEditing ? (
                  <>
                    <FaSave className="fa-save" onClick={handleSaveRequest} />
                    <FaTimes className="fa-times" onClick={handleCancelEdit} />
                  </>
                ) : (
                  <FaEdit
                    className="fa-edit"
                    onClick={() => {
                      setIsEditing(true);
                      setEditedRequest({
                        ...request,
                        requestedProducts: request.requestedProducts ? [...request.requestedProducts] : []
                      });
                    }}
                  />
                )}
              </div>
            )}
          </div>

          <p><strong>📍 Location:</strong> {isEditing ? <input type="text" value={editedRequest.location} onChange={(e) => setEditedRequest({ ...editedRequest, location: e.target.value })} placeholder="📍 Location" /> : location || "Unknown location"}</p>
          <p><strong>📆 Expiration Date:</strong> {isEditing ? <input type="date" value={editedRequest.expirationDate ? new Date(editedRequest.expirationDate).toISOString().split('T')[0] : ''} onChange={(e) => setEditedRequest({ ...editedRequest, expirationDate: e.target.value })} /> : expirationDate ? new Date(expirationDate).toLocaleDateString() : "Not set"}</p>
          <p><strong>📝 Description:</strong> {isEditing ? <textarea value={editedRequest.description} onChange={(e) => setEditedRequest({ ...editedRequest, description: e.target.value })} placeholder="📝 Description" /> : description || "No description"}</p>
          <p><strong>📂 Category:</strong> {isEditing ? <input type="text" value={editedRequest.category} onChange={(e) => setEditedRequest({ ...editedRequest, category: e.target.value })} placeholder="📂 Category" /> : category || "Not specified"}</p>
          <p><strong>🔄 Status:</strong> {isEditing ? <input type="text" value={editedRequest.status} onChange={(e) => setEditedRequest({ ...editedRequest, status: e.target.value })} placeholder="🔄 Status" /> : status || "Unknown"}</p>
          {category === 'prepared_meals' && <p><strong>🍽️ Number of Meals:</strong> {isEditing ? <input type="number" value={editedRequest.numberOfMeals} onChange={(e) => setEditedRequest({ ...editedRequest, numberOfMeals: e.target.value })} placeholder="🍽️ Number of Meals" /> : numberOfMeals || "Not specified"}</p>}

          <h4>📦 Requested Products:</h4>
          <ul className="donation-ul">
            {isEditing ? (
              editedRequest.requestedProducts.map((product, index) => (
                <li key={index} style={{ display: "flex", alignItems: "center", marginBottom: "10px" }}>
                  <input type="text" value={product.productType} onChange={(e) => handleProductChange(index, 'productType', e.target.value)} placeholder="🔖 Product Type" />
                  <input type="text" value={product.productDescription} onChange={(e) => handleProductChange(index, 'productDescription', e.target.value)} placeholder="📝 Product Description" style={{ marginLeft: "10px" }} />
                  <input type="number" value={product.weightPerUnit} onChange={(e) => handleProductChange(index, 'weightPerUnit', e.target.value)} placeholder="⚖️ Weight per Unit" style={{ marginLeft: "10px" }} />
                  <select value={product.weightUnit} onChange={(e) => handleProductChange(index, 'weightUnit', e.target.value)} style={{ marginLeft: "10px", padding: "8px", borderRadius: "5px" }}>
                    <option value="">📏 Select Weight Unit</option>
                    {weightUnits.map((unit) => <option key={unit} value={unit}>{unit}</option>)}
                  </select>
                  <input type="number" value={product.totalQuantity} onChange={(e) => handleProductChange(index, 'totalQuantity', e.target.value)} placeholder="🔢 Total Quantity" style={{ marginLeft: "10px" }} />
                  <select value={product.weightUnitTotale} onChange={(e) => handleProductChange(index, 'weightUnitTotale', e.target.value)} style={{ marginLeft: "10px", padding: "8px", borderRadius: "5px" }}>
                    <option value="">📏 Select Weight Unit Totale</option>
                    {weightUnits.map((unit) => <option key={unit} value={unit}>{unit}</option>)}
                  </select>
                  <select value={product.status} onChange={(e) => handleProductChange(index, 'status', e.target.value)} style={{ marginLeft: "10px", padding: "8px", borderRadius: "5px" }}>
                    {statuses.map((status) => <option key={status} value={status}>{status}</option>)}
                  </select>
                  <FaTimes onClick={() => handleDeleteProduct(index)} style={{ color: "red", cursor: "pointer", marginLeft: "10px" }} />
                </li>
              ))
            ) : (
              requestedProducts && requestedProducts.length > 0 ? (
                requestedProducts.map((product, index) => (
                  <li className="donation-li-list" key={index}>
                    <span><strong>🔖 Type:</strong> {product.productType || 'Not specified'}</span> <br />
                    <span><strong>📝 Description:</strong> {product.productDescription || 'None'}</span> <br />
                    <span><strong>⚖️ Weight:</strong> {product.weightPerUnit || 0} {product.weightUnit || ''}</span> <br />
                    <span><strong>🔢 Total Quantity:</strong> {product.totalQuantity || 0} {product.weightUnitTotale || ''}</span> <br />
                    <span><strong>🔄 Status:</strong> {product.status || 'Unknown'}</span> <br />
                  </li>
                ))
              ) : (
                <li className="donation-li-list">
                  {category === 'prepared_meals'
                    ? `🍽️ Number of Meals: ${numberOfMeals || 'Not specified'}`
                    : 'No product requested'}
                </li>
              )
            )}
          </ul>

          {/* Donation Form */}
          {isAddingDonation && (
            <DonationForm>
              <h4>Specify the donation</h4>
              {requestedProducts.map((product, index) => (
                <div key={index}>
                  <label>
                    {product.productType} - {product.productDescription} (Max: {product.totalQuantity})
                  </label>
                  <input
                    type="number"
                    min="0"
                    max={product.totalQuantity}
                    value={donationQuantities[index]}
                    onChange={(e) => handleDonationQuantityChange(index, e.target.value)}
                    placeholder="Quantity to donate"
                  />
                </div>
              ))}
              <Button variant="donate" onClick={handleDonateAll}>Donate all</Button>
              <Button variant="donate" onClick={handleSubmitDonation}>Submit donation</Button>
            </DonationForm>
          )}

          <Button variant="back" onClick={() => window.history.back()}>🔙 Go Back</Button>

          {!isTheOwner && (
           <Button
           variant={isAddingDonation ? "cancel" : "add"}
           onClick={() => setIsAddingDonation(!isAddingDonation)}
         >
           {isAddingDonation ? 'Cancel' : 'Add Donation'}
         </Button>
          )}
         
          {isTheOwner && !isEditing && (
            <Button
  variant="submit"
  className="add-product-btn"
  as={Link}
  to={`/ListDonationsRequest/${id}`} // Dynamically insert the request ID
  style={{ textDecoration: 'none' }}
>
  👀 View Request
</Button>          )}
          {isEditing && (
            <Button variant="add" onClick={handleAddProduct} className="add-product-btn">
              ➕ Add Product
            </Button>
          )}
        </div>
      </div>
      <Footer />
    </>
  );
};

export default DetailsRequest;
</file>

<file path="sustainafood-backend/app.js">
var createError = require('http-errors');
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');
var cors = require('cors');
var mongoose = require('mongoose');
var productRouter=require('./routes/productRoutes');
var indexRouter = require('./routes/index');
var usersRouter = require('./routes/users');
var donationRouter = require('./routes/donationRoutes');
var authRouter = require('./routes/authRoutes'); // 🔹 Ajouter la route auth
var requestNeedRoutes = require('./routes/requestNeedRoutes');
var donationTransactionRoutes = require('./routes/donationTransactionRoutes');

var app = express();
// var passport = require("passport"); // ✅ Importer Passport

// View engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'twig');

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use("/uploads", express.static("uploads"));

// Enable CORS
app.use(cors());

// Routes
app.use('/', indexRouter);
app.use('/users', usersRouter);
app.use('/product', productRouter);
app.use('/donation',donationRouter);
app.use('/auth', authRouter); // 🔹 Ajouter la route d'authentification

app.use('/donationTransaction', donationTransactionRoutes);
app.use('/request', requestNeedRoutes);
// Database Connection
if (process.env.NODE_ENV !== 'test') {//pour la db de test
var mongoConfig = require('./config/database.json');
app.use(cors());
mongoose.connect(mongoConfig.url)
  .then(() => console.log("✅ Connected to MongoDB"))
  .catch(err => console.error("❌ MongoDB connection error:", err));

mongoose.connection.once('open', () => {
  console.log(" MongoDB connection established successfully");
});
}
////////////////////////////////////////////////////////////////
//require("./config/passportConfig"); // Charger la config de Passport
// app.use(passport.initialize());
////////////////////////////////////////////
// Catch 404 and forward to error handler
app.use(function (req, res, next) {
  next(createError(404));
});

// Error handler
app.use(function (err, req, res, next) {
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  res.status(err.status || 500);
  res.render('error');
});



const authRoutes = require("./routes/authRoutes");
app.use("/auth", authRoutes);
////////////////////////////


module.exports = app;
</file>

<file path="sustainafood-backend/controllers/donationController.js">
const Donation = require('../models/Donation');
const Product = require('../models/Product');
const Counter = require('../models/Counter');
const mongoose = require('mongoose');

// ✅ Get all donations
async function getAllDonations(req, res) {
    try {
        const donations = await Donation.find()
            .populate('donor')
            .populate('products.product');
        res.status(200).json(donations);
    } catch (error) {
        res.status(500).json({ message: 'Server error', error });
    }
}

// ✅ Get donation by ID
async function getDonationById(req, res) {
    try {
        const { id } = req.params;
        const donation = await Donation.findById(id)
            .populate('donor')
            .populate('products.product');
        console.log(donation);

        if (!donation) {
            return res.status(404).json({ message: 'Donation not found' });
        }

        res.status(200).json(donation);
    } catch (error) {
        console.error("Error fetching donation:", error);
        res.status(500).json({ message: 'Server error', error: error.message });
    }
}

// ✅ Get donations by User ID
async function getDonationsByUserId(req, res) {
    try {
        const { userId } = req.params;
        const donations = await Donation.find({ donor: userId })
            .populate('products.product');
        if (!donations.length) {
            return res.status(404).json({ message: 'No donations found for this user' });
        }
        res.status(200).json(donations);
    } catch (error) {
        res.status(500).json({ message: 'Server error', error });
    }
}

// ✅ Get donations by Date
async function getDonationsByDate(req, res) {
    try {
        const { date } = req.params;
        const donations = await Donation.find({ expirationDate: new Date(date) })
            .populate('products.product');
        if (!donations.length) {
            return res.status(404).json({ message: 'No donations found for this date' });
        }
        res.status(200).json(donations);
    } catch (error) {
        res.status(500).json({ message: 'Server error', error });
    }
}
// ✅ Get donations by Type (donation/request)
async function getDonationsByType(req, res) {
    try {
        const { type } = req.params;
        const donations = await Donation.find({ Type: type })
            .populate('products.product');
        if (!donations.length) {
            return res.status(404).json({ message: 'No donations found for this type' });
        }
        res.status(200).json(donations);
    } catch (error) {
        res.status(500).json({ message: 'Server error', error });
    }
}

async function getDonationsByCategory(req, res) {
    try {
        const { category } = req.params;
        const donations = await Donation.find({ Category: category })
            .populate('products.product');
        if (!donations.length) {
            return res.status(404).json({ message: 'No donations found for this category' });
        }
        res.status(200).json(donations);
    } catch (error) {
        res.status(500).json({ message: 'Server error', error });
    }
}
async function getDonationByRequestId(req, res) {
    try {
      const { requestId } = req.params;
      const donation = await Donation.find({ linkedRequests: requestId }) // Use linkedRequests field
        .populate('products.product'); // Populate nested product details
  
      if (!donation) {
        return res.status(404).json({ message: 'No donation found for this request' });
      }
  
      res.status(200).json(donation); // Return the donation data
    } catch (error) {
      console.error('Error fetching donation by request ID:', error);
      res.status(500).json({ message: 'Server error', error: error.message });
    }
  }
// ✅ Create a new donation (also creates related products)
async function createDonation(req, res) {
  let newDonation; // Declare outside try block
  try {
    let {
      title,
      location,
      expirationDate,
      description,
      category,
      Type,
      donor,
      products,
      numberOfMeals,
      status
    } = req.body;

    // Vérifier que products est un tableau
    if (!Array.isArray(products)) {
      if (typeof products === 'string') {
        products = JSON.parse(products);
      } else {
        products = [];
      }
    }

    // Filtrer les produits invalides
    products = products.filter(product =>
      product.productType &&
      product.weightPerUnit &&
      product.totalQuantity &&
      product.productDescription &&
      product.status
    );

    // Créer le don initial sans produits
    newDonation = new Donation({
      title,
      location,
      expirationDate: new Date(expirationDate),
      description,
      category: category || undefined,
      type: Type || undefined,
      donor,
      numberOfMeals,
      products: [],
      status
    });

    await newDonation.save();
    const donationId = newDonation._id;

    // Assigner un identifiant unique aux produits et les lier au don
    for (let product of products) {
      const counter = await Counter.findOneAndUpdate(
        { _id: 'ProductId' },
        { $inc: { seq: 1 } },
        { new: true, upsert: true }
      );
      product.id = counter.seq;
      product.donation = donationId;
    }

    // Insérer les produits dans la collection Product
    const createdProducts = await Product.insertMany(products);
    const productIds = createdProducts.map(product => product._id);

    // Mettre à jour le champ products du don avec les références et totalQuantity
    newDonation.products = createdProducts.map((createdProduct, index) => ({
      product: createdProduct._id,
      quantity: products[index].totalQuantity
    }));

    // Sauvegarder les modifications du don
    await newDonation.save();

    res.status(201).json({ message: 'Donation created successfully', newDonation });
  } catch (error) {
    // Gestion des erreurs : supprimer le don si une erreur survient après sa création
    if (newDonation) {
      await Donation.deleteOne({ _id: newDonation._id });
    }
    console.error("Erreur lors de la création du don :", error);
    res.status(400).json({
      message: "Échec de la création du don",
      error: error.message || error
    });
  }
}
// ✅ Update a donation (also updates related products)
async function updateDonation(req, res) {
  try {
    const { id } = req.params;
    const { products, ...donationData } = req.body;

    // Validate the donation ID
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: 'Invalid donation ID' });
    }

    // Validate products array
    if (!Array.isArray(products)) {
      return res.status(400).json({ message: 'Products must be an array' });
    }
    for (const item of products) {
      if (!mongoose.Types.ObjectId.isValid(item.product)) {
        return res.status(400).json({ message: `Invalid product ID: ${item.product}` });
      }
      if (typeof item.quantity !== 'number' || item.quantity < 0) {
        return res.status(400).json({ message: `Invalid quantity for product ${item.product}: ${item.quantity}` });
      }
    }

    // Update the donation
    const updatedDonation = await Donation.findByIdAndUpdate(
      id,
      { ...donationData, products },
      { new: true }
    )
      .populate('donor')
      .populate('products.product');

    if (!updatedDonation) {
      return res.status(404).json({ message: 'Donation not found' });
    }

    res.status(200).json({ message: 'Donation updated successfully', data: updatedDonation });
  } catch (error) {
    console.error('Error updating donation:', error);
    res.status(500).json({ message: 'Failed to update donation', error: error.message });
  }
}
// ✅ Delete a donation (also deletes related products)
async function deleteDonation  (req, res) {
    try {
        const { id } = req.params;
        const donation = await Donation.findById(id);

        if (!donation) {
            return res.status(404).json({ message: 'Donation not found' });
        }

        // Delete associated products
        await Product.deleteMany({ _id: { $in: donation.products } });

        // Delete donation
        await Donation.findByIdAndDelete(id);

        res.status(200).json({ message: 'Donation and related products deleted successfully' });
    } catch (error) {
        res.status(500).json({ message: 'Failed to delete donation', error });
    }
   

};

async function getDonationsByStatus(req, res) {
    try {
        const { status } = req.params;
        const donations = await Donation.find({ status })
            .populate('donor')
            .populate('products.product');

        if (!donations.length) {
            return res.status(404).json({ message: 'No donations found with this status' });
        }

        res.status(200).json(donations);
    } catch (error) {
        res.status(500).json({ message: 'Server error', error });
    }
}
module.exports = {getDonationByRequestId,getDonationsByUserId ,getAllDonations, getDonationById, getDonationsByDate, getDonationsByType, getDonationsByCategory, createDonation, updateDonation, deleteDonation , getDonationsByStatus };
</file>

<file path="sustainafood-frontend/src/pages/AddDonation.jsx">
import React, { useState, useRef, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import Navbar from "../components/Navbar";
import Footer from "../components/Footer";
import "../assets/styles/AddDonation.css";
import logo from "../assets/images/LogoCh.png";
import Papa from "papaparse";
import { FaEdit, FaTrash, FaSave } from "react-icons/fa";
import { addDonation } from "../api/donationService";
import { createrequests } from "../api/requestNeedsService";
import { useAuth } from "../contexts/AuthContext";

const AddDonation = () => {
  const { authUser } = useAuth();
  const navigate = useNavigate();
  const fileInputRef = useRef(null);
  const mealFileInputRef = useRef(null); // Ref for the meal CSV file input

  // Donation/Request fields
  const [title, setTitle] = useState("");
  const [location, setLocation] = useState("");
  const [expirationDate, setExpirationDate] = useState("");
  const [type, setType] = useState("donation");
  const [category, setCategory] = useState("prepared_meals");
  const [description, setDescription] = useState("");
  const [numberOfMeals, setNumberOfMeals] = useState("");
  //Prepared meals state
  const [mealName, setMealName] = useState(""); //name of the meal
  const [mealDescription, setMealDescription] = useState(""); //meal description
  const [mealType, setMealType] = useState("Breakfast");

  // Error handling
  const [error, setError] = useState(null);
  const [errors, setErrors] = useState({});

  // Products state
  const [products, setProducts] = useState([]); // CSV products
  const [manualProducts, setManualProducts] = useState([
    {
      name: "",
      productType: "Canned_Goods",
      productDescription: "",
      weightPerUnit: "",
      weightUnit: "kg",
      weightUnitTotale: "kg",
      totalQuantity: "",
      image: "",
      status: "available",
    },
  ]); // Manual products

  // Editing state for CSV table
  const [editableRow, setEditableRow] = useState(null);
  const [editedProduct, setEditedProduct] = useState({});

  // Toggle between CSV and manual entry
  const [mealEntryMode, setMealEntryMode] = useState("form"); // "form" or "upload"
  const [productEntryMode, setProductEntryMode] = useState("csv"); // "csv" or "form"

  // User data
  const user = JSON.parse(localStorage.getItem("user"));
  const [userid, setUserid] = useState();

  const isDonner = user?.role === "restaurant" || user?.role === "supermarket";
  const isRecipient = user?.role === "ong" || user?.role === "student";

  // Options for select fields
  const productTypes = [
    "Canned_Goods",
    "Dry_Goods",
    "Beverages",
    "Snacks",
    "Soup",
    "Main_Course",
    "Dessert",
    "Drinks",
    "Vegetables",
    "Fruits",
    "Meat",
    "Fish",
    "Fastfood",
    "Other",
  ];
  const MealTypes = ["Breakfast", "Lunch", "Dinner", "Snack", "Dessert", "Soup", "Other"];
  const weightUnits = ["kg", "g", "lb", "oz", "ml", "l"];
  const statuses = ["available", "pending", "reserved", "out_of_stock"];

  useEffect(() => {
    if (typeof user.id === "number") {
      setUserid(user._id);
    } else if (typeof user.id === "string") {
      setUserid(user.id);
    }
  }, [user]);

  // CSV File Upload handler for Products
  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      Papa.parse(file, {
        complete: (result) => setProducts(result.data),
        header: true,
        skipEmptyLines: true,
      });
    }
  };

  // Form validation
  const validateForm = () => {
    let tempErrors = {};
    if (!title.trim()) tempErrors.title = "Title is required";
    else if (title.length < 3) tempErrors.title = "Title must be at least 3 characters long";

    if (!location.trim()) tempErrors.location = "Location is required";
    else if (location.length < 3) tempErrors.location = "Location must be at least 3 characters long";

    if (!expirationDate) tempErrors.expirationDate = "Expiration date is required";
    else {
      const today = new Date();
      const expDate = new Date(expirationDate);
      if (isNaN(expDate.getTime())) tempErrors.expirationDate = "Invalid date format";
      else if (expDate < today) tempErrors.expirationDate = "Expiration date cannot be in the past";
    }

    if (!description.trim()) tempErrors.description = "Description is required";
    else if (description.length < 10) tempErrors.description = "Description must be at least 10 characters long";

    if (category === "prepared_meals") {
      if (!numberOfMeals || numberOfMeals <= 0) {
        tempErrors.numberOfMeals = "Number of meals is required and must be greater than 0";
      }
    }

    if (category === "packaged_products") {
      if (productEntryMode === "csv" && products.length === 0) {
        tempErrors.products = "Please upload a CSV file with products";
      } else if (productEntryMode === "form") {
        const invalidProducts = manualProducts.filter(
          (p) =>
            !p.name.trim() ||
            p.name.length < 2 ||
            !p.productType ||
            !p.productDescription ||
            p.productDescription.length > 500 ||
            !p.status ||
            (p.weightPerUnit && (isNaN(p.weightPerUnit) || p.weightPerUnit < 0)) ||
            (p.totalQuantity && (isNaN(p.totalQuantity) || p.totalQuantity < 0))
        );
        if (invalidProducts.length > 0) {
          tempErrors.products = "All manual products must have valid name (min 2 chars), type, description (max 500 chars), and status. Weight and quantity must be positive numbers if provided.";
        }
      }
    }

    setErrors(tempErrors);
    return Object.keys(tempErrors).length === 0;
  };

  // CSV table handlers
  const handleEditRow = (index) => {
    setEditableRow(index);
    setEditedProduct({ ...products[index] });
  };

  const handleRowInputChange = (e, key) => {
    setEditedProduct((prev) => ({ ...prev, [key]: e.target.value }));
  };

  const handleSaveRow = (index) => {
    const updatedProducts = [...products];
    updatedProducts[index] = editedProduct;
    setProducts(updatedProducts);
    setEditableRow(null);
    setEditedProduct({});
  };

  const handleDeleteRow = (index) => {
    setProducts(products.filter((_, i) => i !== index));
  };

  const handleDeleteList = () => {
    setProducts([]);
  };

  // Manual product handlers
  const handleManualProductChange = (index, field, value) => {
    const updated = [...manualProducts];
    updated[index][field] = value;
    setManualProducts(updated);
  };

  const handleAddManualProduct = () => {
    setManualProducts([
      ...manualProducts,
      {
        name: "",
        productType: "Canned_Goods",
        productDescription: "",
        weightPerUnit: "",
        weightUnit: "kg",
        weightUnitTotale: "kg",
        totalQuantity: "",
        image: "",
        status: "available",
      },
    ]);
  };

  const handleRemoveManualProduct = (index) => {
    setManualProducts(manualProducts.filter((_, i) => i !== index));
  };

  // Submit handler
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    const donationData = new FormData();
    donationData.append("title", title);
    donationData.append("location", location);
    donationData.append("expirationDate", expirationDate);
    donationData.append("description", description);
    donationData.append("category", category);
    donationData.append("created_at", new Date().toISOString());
    donationData.append("updated_at", new Date().toISOString());

    if (category === "prepared_meals") {
      donationData.append("numberOfMeals", numberOfMeals);
      donationData.append("mealName", mealName);
      donationData.append("mealDescription", mealDescription);
      donationData.append("mealType", mealType);
    }

    if (isDonner) {
      donationData.append("type", type);
      donationData.append("donor", userid);
      donationData.append("status", "pending");
    } else if (isRecipient) {
      donationData.append("recipient", userid);
      donationData.append("status", "pending");
    }


    if (category === "packaged_products") {
      const productsToSend = productEntryMode === "csv" ? products : manualProducts;
      donationData.append("products", JSON.stringify(productsToSend)); // Always append products, even if empty array

    }

    try {
      let response;
      if (isDonner) {
        response = await addDonation(donationData);
        console.log("Donation created successfully:", response.data);

      } else {
        response = await createrequests(donationData);
        console.log("Request created successfully:", response.data);
      }
      navigate("/ListOfDonations");
    } catch (err) {
      console.error("Error creating donation/request:", err);
      setError(err.response?.data?.message || "An error occurred while creating the donation/request.");
    }

  };

  // Reset product states when category changes
  useEffect(() => {
    if (category !== "packaged_products") {
      setProducts([]);
      setManualProducts([
        {
          name: "",
          productType: "Canned_Goods",
          productDescription: "",
          weightPerUnit: "",
          weightUnit: "kg",
          weightUnitTotale: "kg",
          totalQuantity: "",
          image: "",
          status: "available",
        },
      ]);
    }
  }, [category]);

  return (
    <>
      <Navbar />
      <div className="add-donation">
        <form className="signup-form" onSubmit={handleSubmit}>
          <img src={logo} alt="Logo" className="adddonation-logo" />
          {isDonner && <h1 className="signup-h1">Add Donation</h1>}
          {isRecipient && <h1 className="signup-h1">Add Request Need</h1>}

          <input
            className="signup-input"
            type="text"
            placeholder="Title"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            required
          />
          {errors.title && <p className="error-message">{errors.title}</p>}

          <input
            className="signup-input"
            type="text"
            placeholder="Location"
            value={location}
            onChange={(e) => setLocation(e.target.value)}
            required
          />
          {errors.location && <p className="error-message">{errors.location}</p>}

          <input
            className="signup-input"
            type="date"
            value={expirationDate}
            onChange={(e) => setExpirationDate(e.target.value)}
            required
          />
          {errors.expirationDate && <p className="error-message">{errors.expirationDate}</p>}

          {isDonner && (
            <select className="signup-input" value={type} onChange={(e) => setType(e.target.value)}>
              <option value="donation">Donation</option>
              <option value="request">Request</option>
            </select>
          )}

          <select
            className="signup-input"
            value={category}
            onChange={(e) => setCategory(e.target.value)}
          >
            <option value="prepared_meals">Prepared Meals</option>
            <option value="packaged_products">Packaged Products</option>
          </select>

          {category === "prepared_meals" && (
            <>
              <div className="radio-buttons-container-adddonation">
                <div className="radio-button-adddonation">
                  <input
                    type="radio"
                    id="meal-form"
                    name="mealEntryMode"
                    value="form"
                    checked={mealEntryMode === "form"}
                    onChange={() => setMealEntryMode("form")}
                  />
                  <label htmlFor="meal-form">Form</label>
                </div>
                <div className="radio-button-adddonation">
                  <input
                    type="radio"
                    id="meal-csv"
                    name="mealEntryMode"
                    value="csv"
                    checked={mealEntryMode === "csv"}
                    onChange={() => setMealEntryMode("csv")}
                  />
                  <label htmlFor="meal-csv">CSV File</label>
                </div>
              </div>

              {mealEntryMode === "form" && (
                <>
                  <input
                    className="signup-input"
                    type="text"
                    placeholder="Meal Name"
                    value={mealName}
                    onChange={(e) => setMealName(e.target.value)}
                    required
                  />
                  <textarea
                    className="signup-input"
                    placeholder="Meal Description"
                    value={mealDescription}
                    onChange={(e) => setMealDescription(e.target.value)}
                    required
                  />
                  <select
                    className="signup-input"
                    value={mealType}
                    onChange={(e) => setMealType(e.target.value)}
                  >
                    {MealTypes.map((type) => (
                      <option key={type} value={type}>
                        {type}
                      </option>
                    ))}
                  </select>
                </>
              )}


              <input
                className="signup-input"
                type="number"
                placeholder="Number of Meals"
                value={numberOfMeals}
                onChange={(e) => setNumberOfMeals(e.target.value)}
                required
              />
            </>
          )}

          <textarea
            className="signup-input"
            placeholder="Description"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            required
          />
          {errors.description && <p className="error-message">{errors.description}</p>}

          {category === "packaged_products" && (
            <>
              <div className="radio-buttons-container-adddonation">
                <div className="radio-button-adddonation">
                  <input
                    name="radio-group"
                    id="radio-csv"
                    className="radio-button__input-adddonation"
                    type="radio"
                    checked={productEntryMode === "csv"}
                    onChange={() => setProductEntryMode("csv")}
                  />
                  <label htmlFor="radio-csv" className="radio-button__label-adddonation">
                    <span className="radio-button__custom-adddonation"></span>
                    CSV File
                  </label>
                </div>
                <div className="radio-button-adddonation">
                  <input
                    name="radio-group"
                    id="radio-form"
                    class fiscalName="radio-button__input-adddonation"
                    type="radio"
                    checked={productEntryMode === "form"}
                    onChange={() => setProductEntryMode("form")}
                  />
                  <label htmlFor="radio-form" className="radio-button__label-adddonation">
                    <span className="radio-button__custom-adddonation"></span>
                    Form
                  </label>
                </div>
              </div>

              {productEntryMode === "csv" && products.length === 0 && (
                <>
                  <input
                    ref={fileInputRef}
                    type="file"
                    accept=".csv"
                    onChange={handleFileUpload}
                    style={{ display: "none" }}
                  />
                  <button
                    type="button"
                    className="container-btn-file"
                    onClick={() => fileInputRef.current.click()}
                  >
                    <svg
                      fill="#fff"
                      xmlns="http://www.w3.org/2000/svg"
                      width="20"
                      height="20"
                      viewBox="0 0 50 50"
                    >
                      <path d="M 25 2 C 12.309295 2 2 12.309295 2 25 C 2 37.690705 12.309295 48 25 48 C 37.690705 48 48 37.690705 48 25 C 48 12.309295 37.690705 2 25 2 z M 25 4 C 36.609824 4 46 13.390176 46 25 C 46 36.609824 36.609824 46 25 46 C 13.390176 46 4 36.609824 4 25 C 4 13.390176 13.390176 4 25 4 z M 24 13 L 24 24 L 13 24 L 13 26 L 24 26 L 24 37 L 26 37 L 26 26 L 37 26 L 37 24 L 26 24 L 26 13 L 24 13 z" />
                    </svg>
                    Upload List of Products
                  </button>
                </>
              )}

              {productEntryMode === "form" && (
                <div className="manual-product-entry">
                  {manualProducts.map((product, index) => (
                    <div key={index} className="manual-product-row">
                      <input
                        type="text"
                        placeholder="Product Name"
                        value={product.name}
                        onChange={(e) => handleManualProductChange(index, "name", e.target.value)}
                        className="signup-input"
                      />
                      <select
                        className="signup-input"
                        value={product.productType}
                        onChange={(e) => handleManualProductChange(index, "productType", e.target.value)}
                      >
                        {productTypes.map((pt) => (
                          <option key={pt} value={pt}>
                            {pt}
                          </option>
                        ))}
                      </select>
                      <textarea
                        className="signup-input"
                        placeholder="Product Description"
                        value={product.productDescription}
                        onChange={(e) =>
                          handleManualProductChange(index, "productDescription", e.target.value)
                        }
                      />
                      <input
                        type="number"
                        placeholder="Weight Per Unit"
                        value={product.weightPerUnit}
                        onChange={(e) => handleManualProductChange(index, "weightPerUnit", e.target.value)}
                        className="signup-input"
                      />
                      <select
                        className="signup-input"
                        value={product.weightUnit}
                        onChange={(e) => handleManualProductChange(index, "weightUnit", e.target.value)}
                      >
                        {weightUnits.map((wu) => (
                          <option key={wu} value={wu}>
                            {wu}
                          </option>
                        ))}
                      </select>
                      <select
                        className="signup-input"
                        value={product.weightUnitTotale}
                        onChange={(e) =>
                          handleManualProductChange(index, "weightUnitTotale", e.target.value)
                        }
                      >
                        {weightUnits.map((wu) => (
                          <option key={wu} value={wu}>
                            {wu}
                          </option>
                        ))}
                      </select>
                      <input
                        type="number"
                        placeholder="Total Quantity"
                        value={product.totalQuantity}
                        onChange={(e) => handleManualProductChange(index, "totalQuantity", e.target.value)}
                        className="signup-input"
                      />
                      <input
                        type="text"
                        placeholder="Image URL"
                        value={product.image}
                        onChange={(e) => handleManualProductChange(index, "image", e.target.value)}
                        className="signup-input"
                      />
                      <select
                        className="signup-input"
                        value={product.status}
                        onChange={(e) => handleManualProductChange(index, "status", e.target.value)}
                      >
                        <option value="available">Available</option>
                        <option value="pending">Pending</option>
                        <option value="reserved">Reserved</option>
                        <option value="out_of_stock">Out of Stock</option>
                      </select>
                      {manualProducts.length > 1 && (
                        <button type="button" onClick={() => handleRemoveManualProduct(index)}>
                          Remove
                        </button>
                      )}
                    </div>
                  ))}
                  <button type="button" onClick={handleAddManualProduct} className="signup-button">
                    Add Another Product
                  </button>
                </div>
              )}
              {errors.products && <p className="error-message">{errors.products}</p>}
            </>
          )}

          {products.length > 0 && productEntryMode === "csv" && (
            <>
              <p style={{ marginLeft: "-656px", color: "#8dc73f" }}>List of products uploaded</p>
              <div className="file-actions" style={{ marginLeft: "812px" }}>
                <FaEdit className="fa-edit" onClick={() => fileInputRef.current.click()} />
                <FaTrash className="fa-trash" onClick={handleDeleteList} />
              </div>
              <table className="product-table">
                <thead>
                  <tr>
                    {Object.keys(products[0]).map((key) => (
                      <th key={key}>{key}</th>
                    ))}
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {products.map((row, rowIndex) => (
                    <tr key={rowIndex}>
                      {editableRow === rowIndex ? (
                        Object.keys(row).map((key) => (
                          <td key={key}>
                            {key === "productType" ? (
                              <select
                                value={editedProduct[key] || ""}
                                onChange={(e) => handleRowInputChange(e, key)}
                                className="edit-input"
                              >
                                {productTypes.map((pt) => (
                                  <option key={pt} value={pt}>
                                    {pt}
                                  </option>
                                ))}
                              </select>
                            ) : key === "weightUnit" ? (
                              <select
                                value={editedProduct[key] || ""}
                                onChange={(e) => handleRowInputChange(e, key)}
                                className="edit-input"
                              >
                                {weightUnits.map((wu) => (
                                  <option key={wu} value={wu}>
                                    {wu}
                                  </option>
                                ))}
                              </select>
                            ) : key === "weightUnitTotale" ? (
                              <select
                                value={editedProduct[key] || ""}
                                onChange={(e) => handleRowInputChange(e, key)}
                                className="edit-input"
                              >
                                {weightUnits.map((wu) => (
                                  <option key={wu} value={wu}>
                                    {wu}
                                  </option>
                                ))}
                              </select>
                            ) : key === "status" ? (
                              <select
                                value={editedProduct[key] || ""}
                                onChange={(e) => handleRowInputChange(e, key)}
                                className="edit-input"
                              >
                                {statuses.map((status) => (
                                  <option key={status} value={status}>
                                    {status}
                                  </option>
                                ))}
                              </select>
                            ) : (
                              <input
                                type={key === "weightPerUnit" || key === "totalQuantity" ? "number" : "text"}
                                value={editedProduct[key] || ""}
                                onChange={(e) => handleRowInputChange(e, key)}
                                className="edit-input"
                              />
                            )}
                          </td>
                        ))
                      ) : (
                        Object.values(row).map((value, colIndex) => (
                          <td key={colIndex}>{value}</td>
                        ))
                      )}
                      <td>
                        {editableRow === rowIndex ? (
                          <FaSave className="fa-save" onClick={() => handleSaveRow(rowIndex)} />
                        ) : (
                          <FaEdit
                            className="fa-edit"
                            onClick={() => handleEditRow(rowIndex)}
                            style={{ color: "black", cursor: "pointer", fontSize: "20px" }}
                          />
                        )}
                        <FaTrash
                          className="fa-trash"
                          onClick={() => handleDeleteRow(rowIndex)}
                          style={{ color: "red", cursor: "pointer", fontSize: "20px", marginLeft: "10px" }}
                        />
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </>
          )}

          {error && <p className="error-message">{error}</p>}
          <button type="submit" className="signup-button">Add</button>
        </form>
      </div>
      <Footer />
    </>
  );
};

export default AddDonation;
</file>

<file path="sustainafood-frontend/src/pages/MyRequest.jsx">
import React, { useEffect, useState } from 'react';
import { getRequestsByRecipientId } from "../api/requestNeedsService";
import { useAuth } from "../contexts/AuthContext";
import Composantrequest from "../components/Composantrequest";
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import styled, { createGlobalStyle } from 'styled-components';
import { FaSearch, FaFilter } from "react-icons/fa";

const GlobalStyle = createGlobalStyle`
  body {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    background: #f0f8f0;
    box-sizing: border-box;
  }
`;

const Container = styled.div`
  padding: 40px 60px;
  text-align: center;
`;

const Title = styled.h1`
  color: #228b22;
  font-size: 40px;
  margin-bottom: 20px;
`;

const SearchContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  background: white;
  padding: 8px;
  border-radius: 25px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  width: 320px;
  margin: auto;
  transition: all 0.3s ease-in-out;

  &:hover {
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }
`;

const SearchIcon = styled(FaSearch)`
  color: #555;
  margin-right: 8px;
`;

const SearchInput = styled.input`
  border: none;
  outline: none;
  font-size: 16px;
  width: 100%;
  padding: 8px;
  background: transparent;
`;

const Controls = styled.div`
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 15px;
  margin: 20px 0;
`;

const FilterIcon = styled(FaFilter)`
  margin-right: 8px;
`;

const Select = styled.select`
  padding: 10px;
  font-size: 16px;
  border-radius: 25px;
  border: 1px solid #ccc;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  transition: 0.3s;
  cursor: pointer;
  background: white;
  color: #333;
  font-weight: bold;

  &:hover {
    border-color: #228b22;
    transform: scale(1.05);
  }
`;

const ContentList = styled.div`
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 20px;
`;

const LoadingMessage = styled.div`
  font-size: 18px;
  color: #555;
`;

const NoRequests = styled.p`
  font-size: 18px;
  color: #888;
`;

const PaginationControls = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  gap: 10px;

  button {
    padding: 10px 20px;
    font-size: 16px;
    background: #228b22;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s;

    &:hover {
      background: #56ab2f;
    }

    &:disabled {
      background: #ccc;
      cursor: not-allowed;
    }
  }

  span {
    font-size: 16px;
    color: #333;
  }
`;


export default function MyRequest() {
  const [requests, setRequests] = useState([]);
  const [filteredRequests, setFilteredRequests] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const { user: authUser } = useAuth();

  const [searchQuery, setSearchQuery] = useState("");
  const [sortOption, setSortOption] = useState("date");
  const [statusFilter, setStatusFilter] = useState("all");
  const [categoryFilter, setCategoryFilter] = useState("all");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(6);
  useEffect(() => {
    console.log("Current authUser:", authUser);
    console.log("LocalStorage user:", localStorage.getItem("user"));
    console.log("LocalStorage token:", localStorage.getItem("token"));
  }, []);
  useEffect(() => {
    // In MyRequest.js
const fetchRequests = async () => {
  // Get the user ID - try different possible properties
  const userId = authUser?._id || authUser?.id || authUser?.user?._id;
  
  if (!userId) {
    console.log("No user ID found in authUser:", authUser);
    setError("User not properly authenticated");
    setLoading(false);
    return;
  }

  try {
    setLoading(true);
    const response = await getRequestsByRecipientId(userId);
    setRequests(response.data);
    setFilteredRequests(response.data);
  } catch (error) {
    setError("Failed to load requests");
  } finally {
    setLoading(false);
  }
};

    fetchRequests();
  }, [authUser]);

  useEffect(() => {
    let updatedRequests = [...requests];

    // Apply filters
    if (searchQuery) {
      updatedRequests = updatedRequests.filter((request) =>
        request.title.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    if (statusFilter !== "all") {
      updatedRequests = updatedRequests.filter((request) => request.status === statusFilter);
    }

    if (categoryFilter !== "all") {
      updatedRequests = updatedRequests.filter((request) => request.category === categoryFilter);
    }

    // Apply sorting
    updatedRequests.sort((a, b) => {
      if (sortOption === "title") {
        return a.title.localeCompare(b.title);
      } else if (sortOption === "status") {
        return a.status.localeCompare(b.status);
      } else {
        return new Date(a.expirationDate) - new Date(b.expirationDate);
      }
    });

    setFilteredRequests(updatedRequests);
    setCurrentPage(1);
  }, [searchQuery, sortOption, statusFilter, categoryFilter, requests]);

  // Pagination
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentRequests = filteredRequests.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(filteredRequests.length / itemsPerPage);

  return (
 <>      
      <Navbar />
      <Container>
        <Title>My Requests</Title>

        {error && <div style={{ color: 'red', textAlign: 'center' }}>{error}</div>}

        <SearchContainer>
          <SearchIcon />
          <SearchInput
            type="text"
            placeholder="Search requests..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </SearchContainer>

        <Controls>
          <Select value={sortOption} onChange={(e) => setSortOption(e.target.value)}>
            <option value="date">📆 Sort by Expiration Date</option>
            <option value="title">🔠 Sort by Title</option>
            <option value="status">🔄 Sort by Status</option>
          </Select>

          <Select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>
            <option value="all">🟢 All Statuses</option>
            <option value="pending">🕒 Pending</option>
            <option value="approved">✅ Accepted</option>
            <option value="rejected">❌ Rejected</option>
          </Select>

          <Select value={categoryFilter} onChange={(e) => setCategoryFilter(e.target.value)}>
            <option value="all">📦 All Categories</option>
            <option value="prepared_meals">🍽️ Prepared Meals</option>
            <option value="packaged_products">🛒 Packaged Products</option>
          </Select>
        </Controls>

        <ContentList>
          {loading ? (
            <LoadingMessage>Loading your requests...</LoadingMessage>
          ) : currentRequests.length > 0 ? (
            currentRequests.map((requestItem) => (
              <Composantrequest key={requestItem._id} request={requestItem} />
            ))
          ) : (
            <NoRequests>No requests found. Create your first request!</NoRequests>
          )}
        </ContentList>

        {filteredRequests.length > itemsPerPage && (
          <PaginationControls>
            <button
              onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
              disabled={currentPage === 1}
            >
              Previous
            </button>
            <span>Page {currentPage} of {totalPages}</span>
            <button
              onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}
              disabled={currentPage === totalPages}
            >
              Next
            </button>
          </PaginationControls>)}
        </Container>
      <Footer />
      </>
    );
}
</file>

<file path="sustainafood-backend/package.json">
{
  "name": "sustainafood-backend",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "start": "node ./bin/www",
    "test": " cross-env NODE_ENV=test jest --detectOpenHandles --forceExit"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "bcrypt": "^5.1.1",
    "bcryptjs": "^3.0.2",
    "cookie-parser": "~1.4.4",
    "cors": "^2.8.5",
    "debug": "~2.6.9",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "http-errors": "~1.6.3",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.12.2",
    "morgan": "~1.9.1",
    "multer": "^1.4.5-lts.1",
    "node-fetch": "^2.6.7",
    "nodemailer": "^6.10.0",
    "passport": "^0.7.0",
    "passport-google-oauth20": "^2.0.0",
    "qrcode": "^1.5.4",
    "react-google-recaptcha": "^3.1.0",
    "speakeasy": "^2.0.0",
    "twig": "~0.10.3",
    "twilio": "^5.5.0",
    "ua-parser-js": "^2.0.2",
    "uuid": "^11.1.0",
    "wide-align": "^1.1.5"
  },
  "devDependencies": {
    "cross-env": "^7.0.3",
    "jest": "^29.7.0",
    "supertest": "^7.0.0"
  }
}
</file>

<file path="sustainafood-frontend/src/api/requestNeedsService.js">
import axios from "axios";
export const createrequests = async (requestData) => {
  return await axios.post('http://localhost:3000/request/', requestData, {
    headers: {
      "Content-Type": "application/json",
    },
  });
};
export const createRequestNeedForExistingDonation = async (donationId, requestData) => {
  console.log('Sending request data:', requestData);

  try {
    const response = await axios.post(
      `http://localhost:3000/request/requestdonation/${donationId}`,
      requestData,
      {
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
    return response.data;
  } catch (error) {
    console.error('Error in createRequestNeedForExistingDonation:', error.response?.data || error.message);
    throw error.response?.data || error;
  }
};
export const addDonationToRequest = async (requestId, donationData) => {
  const token = localStorage.getItem('token');
  if (!token) {
    throw new Error('User not authenticated - No token found');
  }

  console.log('Sending donation data:', donationData);
  console.log('Token:', token);

  try {
    const response = await axios.post(
      `http://localhost:3000/request/addDonationToRequest/${requestId}/donations`,
      donationData,
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      }
    );
    return response.data;
  } catch (error) {
    console.error('Error in addDonationToRequest:', error.response?.data || error.message);
    throw error.response?.data || error;
  }
};

export const getrequests = async () => {
  return axios.get(`http://localhost:3000/request/`);
};
export const getRequestsByRecipientId = async (id) => {
  const token = localStorage.getItem('token');
  return axios.get(`http://localhost:3000/request/recipient/${id}`, {
    headers: {
      Authorization: `Bearer ${token}`
    }
  });
};
export const getRequestById = async (id) => {
  try {
    return await axios.get(`http://localhost:3000/request/${id}`);
  } catch (error) {
    console.error("Error fetching request:", error.response?.data || error.message);
    throw error;
  }
};
export const deleteRequest = async (id) => {
  try{
  return await axios.delete(`http://localhost:3000/request/${id}`);
} catch (error) {
    console.error("Error deleting request:", error.response?.data || error.message);
    throw error;
  }
};
export const updateRequest = async (id, RequestData) => {
  console.log(RequestData);
  try{
  return await axios.put(`http://localhost:3000/request/${id}`, RequestData, {
    headers: {
      "Content-Type": "application/json",
    },
  });
} catch (error) {
    console.error("Error updating request:", error.response?.data || error.message);
    throw error;
  }
};
</file>

<file path="sustainafood-frontend/src/pages/DetailsDonations.jsx">
import React, { useEffect, useState } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import '../assets/styles/DetailsDonations.css';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import { getDonationById, deleteDonation, updateDonation } from '../api/donationService';
import { createProduct, updateProduct, getProductById, deleteProduct } from '../api/productService';
import { createRequestNeedForExistingDonation } from '../api/requestNeedsService';
import { FaEdit, FaTrash, FaSave, FaTimes, FaEye } from "react-icons/fa";
import styled from 'styled-components';
import logo from "../assets/images/LogoCh.png";

// Styled Components for Buttons
const Button = styled.button`
  display: inline-block;
  padding: 12px 20px;
  font-size: 16px;
  font-weight: 600;
  text-align: center;
  border-radius: 8px;
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 8px;
  color: white;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);

  ${({ variant }) => variant === 'add' && `background: #228b22; &:hover { background: #1e7a1e; }`}
  ${({ variant }) => variant === 'cancel' && `background: #dc3545; &:hover { background: #b02a37; }`}
  ${({ variant }) => variant === 'submit' && `background: #28a745; &:hover { background: #218838; }`}
  ${({ variant }) => variant === 'request' && `background: #007bff; &:hover { background: #0056b3; }`}
  ${({ variant }) => variant === 'back' && `background: #6c757d; &:hover { background: #5a6268; }`}

  &:active {
    transform: translateY(1px);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }
`;

const DetailsDonations = () => {
  const { id } = useParams();
  const [donation, setDonation] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const user = JSON.parse(localStorage.getItem("user"));
  const [userid, setUserid] = useState();
  const [isTheOwner, setIsTheOwner] = useState(false);
  const [showRequestForm, setShowRequestForm] = useState(false);
  const [requestedProducts, setRequestedProducts] = useState([]);
  const navigate = useNavigate();

  const [editedDonation, setEditedDonation] = useState({
    title: "",
    location: "",
    expirationDate: "",
    type: "",
    category: "",
    description: "",
    products: [],
  });

  useEffect(() => {
    if (typeof user?.id === "number") {
      setUserid(user._id);
    } else if (typeof user?.id === "string") {
      setUserid(user.id);
    }
  }, [user]);

  useEffect(() => {
    const fetchDonation = async () => {
      try {
        const response = await getDonationById(id);
        const fetchedDonation = response.data;
        setDonation(fetchedDonation);
        setEditedDonation({
          title: fetchedDonation.title || "",
          location: fetchedDonation.location || "",
          expirationDate: fetchedDonation.expirationDate || "",
          type: fetchedDonation.type || "",
          category: fetchedDonation.category || "",
          description: fetchedDonation.description || "",
          products: fetchedDonation.products && Array.isArray(fetchedDonation.products)
            ? fetchedDonation.products.map(item => ({
                product: item.product,
                name: item.product?.name || '',
                quantity: item.quantity || 0,
                totalQuantity: item.product?.totalQuantity || 0,
                status: item.product?.status || 'available',
                productDescription: item.product?.productDescription || 'Default description',
                productType: item.product?.productType || 'Other',
                _id: item.product?._id,
              }))
            : [],
        });
        setRequestedProducts(
          fetchedDonation.products.map(p => ({
            product: p.product._id,
            quantity: 0,
          }))
        );
      } catch (err) {
        setError(err.response?.data?.message || 'Error fetching donation data');
      } finally {
        setLoading(false);
      }
    };
    fetchDonation();
  }, [id]);

  useEffect(() => {
    if (donation && userid) {
      if (donation.donor && donation.donor._id) {
        setIsTheOwner(userid === donation.donor._id);
      } else {
        setIsTheOwner(false);
      }
    }
  }, [donation, userid]);

  const handleDeleteDonation = () => {
    deleteDonation(id)
      .then(() => {
        window.history.back();
      })
      .catch((error) => {
        console.error("Error deleting donation:", error);
      });
  };

  const handleSaveDonation = async () => {
    try {
      const invalidProduct = editedDonation.products.find(
        (item) => !item.name?.trim() || !item.productDescription?.trim() || !item.productType?.trim()
      );
      if (invalidProduct) {
        setError('Please fill in all required fields for all products.');
        return;
      }

      if (new Date(editedDonation.expirationDate) <= new Date()) {
        setError('Expiration date must be in the future.');
        return;
      }

      const updatedProducts = await Promise.all(
        editedDonation.products.map(async (item) => {
          if (!item.product) {
            const newProduct = {
              name: item.name,
              status: item.status || 'available',
              productType: item.productType,
              productDescription: item.productDescription,
              totalQuantity: item.quantity,
              donation: id,
            };
            const response = await createProduct(newProduct);
            return { product: response.data._id, quantity: item.quantity };
          } else {
            const existingProductResponse = await getProductById(item.product._id || item.product);
            const existingProduct = existingProductResponse.data;
            const updatedProduct = {
              ...existingProduct,
              name: item.name !== existingProduct.name ? item.name : existingProduct.name,
              status: item.status !== existingProduct.status ? item.status : existingProduct.status,
              productDescription:
                item.productDescription !== existingProduct.productDescription
                  ? item.productDescription
                  : existingProduct.productDescription,
              productType:
                item.productType !== existingProduct.productType
                  ? item.productType
                  : existingProduct.productType,
              totalQuantity:
                item.quantity !== existingProduct.totalQuantity
                  ? item.quantity
                  : existingProduct.totalQuantity,
            };
            await updateProduct(item.product._id || item.product, updatedProduct);
            return { product: item.product._id || item.product, quantity: item.quantity };
          }
        })
      );

      const updatedData = {
        ...editedDonation,
        products: updatedProducts,
      };

      const response = await updateDonation(id, updatedData);
      setDonation(response.data);
      setIsEditing(false);
      window.location.href = `/DetailsDonations/${id}`;
    } catch (error) {
      const errorMessage = error.response?.data?.message || error.message || 'Failed to update donation';
      console.error('Error updating donation:', errorMessage, error);
      setError(errorMessage);
    }
  };

  const handleProductChange = (index, field, value) => {
    const updatedProducts = [...editedDonation.products];
    if (field === 'quantity') {
      value = Number(value);
    }
    updatedProducts[index] = { ...updatedProducts[index], [field]: value };
    setEditedDonation({ ...editedDonation, products: updatedProducts });
  };

  const handleDeleteProduct = async (index) => {
    if (window.confirm("Are you sure you want to delete this product?")) {
      const productToDelete = editedDonation.products[index];
      if (productToDelete.product) {
        try {
          await deleteProduct(productToDelete.product._id);
        } catch (error) {
          console.error("Error deleting product:", error);
          setError("Failed to delete product. Please try again.");
          return;
        }
      }
      const updatedProducts = editedDonation.products.filter((_, i) => i !== index);
      setEditedDonation({ ...editedDonation, products: updatedProducts });
    }
  };

  const handleAddProduct = () => {
    const newProduct = {
      product: null,
      name: '',
      quantity: 0,
      status: 'available',
      productDescription: 'New product description',
      productType: 'Other',
    };
    setEditedDonation({
      ...editedDonation,
      products: [...editedDonation.products, newProduct],
    });
  };

  const handleSubmitRequest = async () => {
    try {
      console.log('requestedProducts:', requestedProducts);
      const productsToRequest = requestedProducts
        .filter(rp => rp.quantity > 0)
        .map(rp => ({
          product: rp.product,
          quantity: rp.quantity
        }));
  
      console.log('productsToRequest:', productsToRequest);
  
      if (productsToRequest.length === 0) {
        setError('Please specify at least one product with a quantity greater than 0.');
        return;
      }
  
      const requestData = {
        recipientId: userid,
        requestedProducts: productsToRequest,
       
      };
  
      console.log('requestData:', requestData);
      await createRequestNeedForExistingDonation(id, requestData);
      setShowRequestForm(false);
      alert('Request submitted successfully!');
      navigate("/ListOfDonations");
    } catch (error) {
      setError('Failed to create request: ' + (error.response?.data?.message || error.message));
    }
  };

  const isFormValid = requestedProducts.some(rp => rp.quantity > 0);

  if (loading) return <div className="details-donation-loading">Loading...</div>;
  if (error) return <div className="details-donation-error">{error}</div>;
  if (!donation) return <div className="details-donation-error">No donation found.</div>;

  const { title, location, expirationDate, products } = donation;

  return (
    <>
      <Navbar />
      <div className="details-donation-page">
        <div className="details-donation-container">
          <div className="details-donation-header">
            <div className="details-donation-title-container">
              {isEditing ? (
                <input
                  type="text"
                  value={editedDonation.title}
                  onChange={(e) => setEditedDonation({ ...editedDonation, title: e.target.value })}
                  className="details-donation-edit-input"
                />
              ) : (
                <h1 className="details-donation-title">🛒 {title || "Donation Title"}</h1>
              )}
              {isTheOwner && (
                <div className="details-donation-actions">
                  <button className="details-donation-action-icon delete" onClick={handleDeleteDonation}>
                    <FaTrash />
                  </button>
                  {isEditing ? (
                    <button className="details-donation-action-icon" onClick={handleSaveDonation}>
                      <FaSave />
                    </button>
                  ) : (
                    <button className="details-donation-action-icon" onClick={() => setIsEditing(true)}>
                      <FaEdit />
                    </button>
                  )}
                </div>
              )}
            </div>
          </div>

          <div className="details-donation-content">
            <div className="details-donation-info-grid">
              <div className="details-donation-info-item">
                <div className="details-donation-info-icon">📍</div>
                <div className="details-donation-info-content">
                  <div className="details-donation-info-label">Location</div>
                  {isEditing ? (
                    <input
                      type="text"
                      value={editedDonation.location}
                      onChange={(e) => setEditedDonation({ ...editedDonation, location: e.target.value })}
                      className="details-donation-edit-input"
                      placeholder="Enter location"
                    />
                  ) : (
                    <div className="details-donation-info-value">{location || "Unknown location"}</div>
                  )}
                </div>
              </div>

              <div className="details-donation-info-item">
                <div className="details-donation-info-icon">📆</div>
                <div className="details-donation-info-content">
                  <div className="details-donation-info-label">Expiration Date</div>
                  {isEditing ? (
                    <input
                      type="date"
                      value={
                        editedDonation.expirationDate
                          ? new Date(editedDonation.expirationDate).toISOString().split("T")[0]
                          : ""
                      }
                      onChange={(e) => setEditedDonation({ ...editedDonation, expirationDate: e.target.value })}
                      className="details-donation-edit-date"
                    />
                  ) : (
                    <div className="details-donation-info-value">
                      {expirationDate ? new Date(expirationDate).toLocaleDateString() : "N/A"}
                    </div>
                  )}
                </div>
              </div>
            </div>

            <div className="details-donation-products-section">
              <h2 className="details-donation-section-title">📦 Available Products</h2>
              <ul className="details-donation-products-list">
                {isEditing ? (
                  editedDonation.products.map((product, index) => (
                    <li key={index} className="details-donation-product-item">
                      <div className="details-donation-product-info">
                        <div className="details-donation-product-icon">📦</div>
                        <div className="details-donation-product-details">
                          <input
                            type="text"
                            value={product.name || ''}
                            onChange={(e) => handleProductChange(index, 'name', e.target.value)}
                            className="details-donation-edit-input"
                            placeholder="Product Name"
                          />
                          <input
                            type="text"
                            value={product.productDescription || ''}
                            onChange={(e) => handleProductChange(index, 'productDescription', e.target.value)}
                            className="details-donation-edit-input"
                            placeholder="Product Description"
                          />
                          <select
                            value={product.productType || 'Other'}
                            onChange={(e) => handleProductChange(index, 'productType', e.target.value)}
                            className="details-donation-edit-select"
                          >
                            <option value="Canned_Goods">Canned Goods</option>
                            <option value="Dry_Goods">Dry Goods</option>
                            <option value="Beverages">Beverages</option>
                            <option value="Snacks">Snacks</option>
                            <option value="Cereals">Cereals</option>
                            <option value="Baked_Goods">Baked Goods</option>
                            <option value="Condiments">Condiments</option>
                            <option value="Vegetables">Vegetables</option>
                            <option value="Fruits">Fruits</option>
                            <option value="Meat">Meat</option>
                            <option value="Fish">Fish</option>
                            <option value="Dairy">Dairy</option>
                            <option value="Eggs">Eggs</option>
                            <option value="Baby_Food">Baby Food</option>
                            <option value="Pet_Food">Pet Food</option>
                            <option value="Other">Other</option>
                          </select>
                          <input
                            type="number"
                            value={product.quantity || 0}
                            onChange={(e) => handleProductChange(index, 'quantity', e.target.value)}
                            className="details-donation-edit-input"
                            placeholder="Quantity"
                          />
                          <select
                            value={product.status || 'available'}
                            onChange={(e) => handleProductChange(index, 'status', e.target.value)}
                            className="details-donation-edit-select"
                          >
                            <option value="available">Available</option>
                            <option value="pending">Pending</option>
                            <option value="delivered">Delivered</option>
                          </select>
                        </div>
                      </div>
                      <button
                        className="details-donation-delete-product-button"
                        onClick={() => handleDeleteProduct(index)}
                      >
                        <FaTimes />
                      </button>
                    </li>
                  ))
                ) : (
                  products && Array.isArray(products) && products.length > 0 ? (
                    products.map((product, index) => (
                      <li key={index} className="details-donation-product-item">
                        <div className="details-donation-product-info">
                          <div className="details-donation-product-icon">📦</div>
                          <div className="details-donation-product-details">
                            <div className="details-donation-product-name">{product.product.name || 'Unknown Product'}</div>
                            <div className="details-donation-product-quantity">{product.quantity || 0}</div>
                            <div className={`details-donation-product-status ${product.product.status || 'available'}`}>
                              {product.product.status || ''}
                            </div>
                          </div>
                        </div>
                      </li>
                    ))
                  ) : (
                    <li className="details-donation-product-item">No products available</li>
                  )
                )}
              </ul>

              {isEditing && (
                <button
                  onClick={handleAddProduct}
                  className="details-donation-add-product-button"
                >
                  Add Product
                </button>
              )}
            </div>

            <div className="details-donation-actions-container">
              {!isTheOwner && isRecipient && (
                <div>
                  <button
                    className="details-donation-request-button"
                    onClick={() => setShowRequestForm(true)}
                  >
                    Add Request
                  </button>
                  {showRequestForm && (
                    <div className="request-form">
                      <h3>Request for {donation.title}</h3>
                      {donation.products.map((donationProduct, index) => (
                        <div key={index} className="request-product-item">
                          <label>{donationProduct.product.name}</label>
                          <input
                            type="number"
                            min="0"
                            max={donationProduct.quantity}
                            value={requestedProducts[index].quantity}
                            onChange={(e) => {
                              const newQuantity = Number(e.target.value);
                              setRequestedProducts(prev => {
                                const updated = [...prev];
                                updated[index] = { ...updated[index], quantity: newQuantity };
                                return updated;
                              });
                            }}
                          />
                          <span> (Available: {donationProduct.quantity})</span>
                        </div>
                      ))}
                      <button onClick={handleSubmitRequest} disabled={!isFormValid}>
                        Submit Request
                      </button>
                      <button onClick={() => setShowRequestForm(false)}>Cancel</button>
                    </div>
                  )}
                </div>
              )}
              {isTheOwner && (
                <button className="details-donation-request-button" as={Link}
                to={`/ListDonationsRequest/${id}`}>See Request</button>
              )}
            </div>
          </div>
        </div>
      </div>
      <Footer />
    </>
  );
};

export default DetailsDonations;
</file>

<file path="sustainafood-backend/controllers/requestNeedController.js">
const RequestNeed = require('../models/RequestNeed');
const Product = require('../models/Product');
const Counter = require('../models/Counter');
const Donation = require('../models/Donation'); // Added import for Donation
const DonationTransaction = require('../models/DonationTransaction');
const nodemailer = require("nodemailer");
const path = require("path");
const mongoose = require('mongoose');
const User = require('../models/User');
const multer = require('multer'); // Import multer

const upload = multer().none(); // Create multer instance to handle FormData

// ✅ Get all requests
async function getAllRequests(req, res) {
    try {
        const requests = await RequestNeed.find({}, 'title location expirationDate description category recipient status linkedDonation requestedProducts numberOfMeals mealName mealDescription mealType')
            .populate('recipient')
            .populate('requestedProducts');
        res.status(200).json(requests);
    } catch (error) {
        res.status(500).json({ message: 'Server error', error });
    }
}

// ✅ Get request by ID
async function getRequestById(req, res) {
    try {
        const { id } = req.params;
        const request = await RequestNeed.findById(id, 'title location expirationDate description category recipient status linkedDonation requestedProducts numberOfMeals mealName mealDescription mealType')
            .populate('recipient')
            .populate('requestedProducts');

        if (!request) {
            return res.status(404).json({ message: 'Request not found' });
        }

        res.status(200).json(request);
    } catch (error) {
        res.status(500).json({ message: 'Server error', error });
    }
}

// ✅ Get requests by Recipient ID
async function getRequestsByRecipientId(req, res) {
    try {
        const { recipientId } = req.params;
        const requests = await RequestNeed.find({ recipient: recipientId })
            .populate('requestedProducts');

        if (!requests.length) {
            return res.status(404).json({ message: 'No requests found for this recipient' });
        }

        res.status(200).json(requests);
    } catch (error) {
        res.status(500).json({ message: 'Server error', error });
    }
}

// ✅ Get requests by Status
async function getRequestsByStatus(req, res) {
    try {
        const { status } = req.params;
        const requests = await RequestNeed.find({ status })
            .populate('recipient')
            .populate('requestedProducts');

        if (!requests.length) {
            return res.status(404).json({ message: 'No requests found with this status' });
        }

        res.status(200).json(requests);
    } catch (error) {
        res.status(500).json({ message: 'Server error', error });
    }
}

// ✅ Create a new request
async function createRequest(req, res) {
    console.log("Request body received:", req.body);

    upload(req, res, async (err) => { // Use multer middleware here
        if (err) {
            return res.status(500).json({ message: "Multer error", error: err.message });
        }

        try {
            let {
                title,
                location,
                expirationDate,
                description,
                category,
                recipient,
                requestedProducts,
                status,
                linkedDonation,
                numberOfMeals,
                mealName,
                mealDescription,
                mealType  // Add mealType here
            } = req.body;

            // Ensure requestedProducts is an array and handle parsing if it's a string
            if (typeof requestedProducts === 'string') {
                try {
                    requestedProducts = JSON.parse(requestedProducts);
                    // Trim keys to remove leading/trailing spaces
                    requestedProducts = requestedProducts.map(product => {
                        const trimmedProduct = {};
                        for (let key in product) {
                            const trimmedKey = key.trim();
                            trimmedProduct[trimmedKey] = product[key];
                        }
                        return trimmedProduct;
                    });
                } catch (error) {
                    return res.status(400).json({ message: "Invalid requestedProducts format" });
                }
            } else if (!Array.isArray(requestedProducts)) {
                requestedProducts = [];
            }

            // Filter out incomplete product requests and log invalid ones
            requestedProducts = requestedProducts.filter(product => {
                const isValid = product.name &&
                    product.weightPerUnit &&
                    product.totalQuantity &&
                    product.productDescription &&
                    product.status &&
                    product.productType &&
                    product.weightUnit &&
                    product.weightUnitTotale;
                if (!isValid) {
                    console.log("Filtered out invalid product:", product);
                }
                return isValid;
            });

            // Validate expirationDate
            if (isNaN(new Date(expirationDate).getTime())) {
                return res.status(400).json({ message: "Invalid expiration date format" });
            }

            // Create the request without products first
            const newRequest = new RequestNeed({
                title,
                location,
                expirationDate: new Date(expirationDate),
                description,
                category: category || undefined,
                recipient,
                status: status || "pending",
                linkedDonation: linkedDonation || null,
                numberOfMeals: category === 'prepared_meals' ? parseInt(numberOfMeals, 10) : undefined,
                mealName: mealName || undefined,  // Use || undefined
                mealDescription: mealDescription || undefined,  // Use || undefined
                mealType: mealType || undefined,  // And mealType
                requestedProducts : []
            });

            try {
                await newRequest.save();
                let productIds = [];
                if (category === 'packaged_products' && requestedProducts.length > 0) {

                    const productDocs = requestedProducts.map(product => ({
                        ...product,
                        request: newRequest._id // Assuming your schema has a 'requestId' field
                    }));
                    const createdProducts = await Product.insertMany(productDocs);
                    productIds = createdProducts.map(product => product._id);
                    newRequest.requestedProducts = productIds;

                    await newRequest.save(); // Persist changes


                }


                console.log("Created Products:", newRequest.requestedProducts);
                return res.status(201).json({ message: 'Request created successfully', newRequest });

            } catch (err) {
                console.error("❌ Product Insertion Error:", err);
                return res.status(500).json({ message: "Failed to insert request", error: err.message });
            }


        } catch (error) {
            console.error("Request Creation Error:", error);
            res.status(500).json({
                message: "Failed to create request",
                error: error.message || error
            });
        }
    });
}

// ✅ Update a request by ID
async function updateRequest(req, res) {
    try {
        const { id } = req.params;
        const {  requestedProducts, ...requestData } = req.body;

        const updatedRequest = await RequestNeed.findByIdAndUpdate(
            id,
            {  requestedProducts, ...requestData},
            { new: true }
        )
        .populate('recipient')
        .populate('requestedProducts');

        if (!updatedRequest) {
            return res.status(404).json({ message: 'Request not found' });
        }

        res.status(200).json({ message: 'Request updated successfully', updatedRequest });
    } catch (error) {
        res.status(500).json({ message: 'Failed to update request', error });
    }
}

// ✅ Delete a request by ID
async function deleteRequest(req, res) {
    try {
        const { id } = req.params;
        const deletedRequest = await RequestNeed.findByIdAndDelete(id);

        if (!deletedRequest) {
            return res.status(404).json({ message: 'Request not found' });
        }

        res.status(200).json({ message: 'Request deleted successfully' });
    } catch (error) {
        res.status(500).json({ message: 'Failed to delete request', error });
    }
   
}

async function createRequestNeedForExistingDonation(req, res) {
    try {
        const { donationId } = req.params;
        const { recipientId, requestedProducts, description } = req.body;

        // Validate input
        if (!donationId || !mongoose.Types.ObjectId.isValid(donationId)) {
            return res.status(400).json({ message: 'Invalid donation ID' });
        }
        if (!recipientId || !mongoose.Types.ObjectId.isValid(recipientId)) {
            return res.status(400).json({ message: 'Invalid recipient ID' });
        }
        if (!requestedProducts || !Array.isArray(requestedProducts)) {
            return res.status(400).json({ message: 'requestedProducts must be an array' });
        }

        // Fetch the donation and populate its products
        const donation = await Donation.findById(donationId)
            .populate('products.product')
            .populate('donor');
        if (!donation) {
            return res.status(404).json({ message: 'Donation not found' });
        }

        // Validate donation state
        if (donation.status !== 'pending') {
            return res.status(400).json({ message: 'Donation is not available for requests (status must be pending)' });
        }
        if (new Date(donation.expirationDate) <= new Date()) {
            return res.status(400).json({ message: 'Donation has expired' });
        }

        // Fetch the recipient to validate their role
        const recipient = await User.findById(recipientId);
        if (!recipient) {
            return res.status(404).json({ message: 'Recipient not found' });
        }
        if (!['ong', 'student'].includes(recipient.role)) {
            return res.status(403).json({ message: 'Only users with role "ong" or "student" can create requests' });
        }

        // Validate requestedProducts against the donation's products
        const donationProductMap = new Map(
            donation.products.map(p => [p.product._id.toString(), { quantity: p.quantity, product: p.product }])
        );
        const validatedProducts = [];
        let totalMeals = 0;

        for (const { product: productId, quantity } of requestedProducts) {
            if (!mongoose.Types.ObjectId.isValid(productId)) {
                return res.status(400).json({ message: `Invalid product ID: ${productId}` });
            }
            if (!donationProductMap.has(productId)) {
                return res.status(400).json({ message: `Product ${productId} is not part of this donation` });
            }

            const availableQuantity = donationProductMap.get(productId).quantity;
            if (!Number.isInteger(quantity) || quantity <= 0) {
                return res.status(400).json({ message: `Quantity for product ${productId} must be a positive integer` });
            }
            if (quantity > availableQuantity) {
                return res.status(400).json({ message: `Requested quantity (${quantity}) for product ${productId} exceeds available quantity (${availableQuantity})` });
            }

            validatedProducts.push(productId);
            totalMeals += quantity;
        }

        // Create the new RequestNeed
        const newRequest = new RequestNeed({
            title: `Request for ${donation.title}`,
            location: donation.location,
            expirationDate: donation.expirationDate,
            description: description || '',
            category: donation.category,
            recipient: recipientId,
            requestedProducts: validatedProducts,
            status: 'pending',
            linkedDonation: [donationId],
            numberOfMeals: donation.category === 'prepared_meals' ? totalMeals : undefined,
        });

        await newRequest.save();

        // Update the Donation to link the new request
        await Donation.findByIdAndUpdate(
            donationId,
            { $push: { linkedRequests: newRequest._id } },
            { new: true }
        );

        // Fetch the populated request for the response
        const populatedRequest = await RequestNeed.findById(newRequest._id)
            .populate('recipient')
            .populate('requestedProducts');

        // Send notification to donor
        if (donation.donor && donation.donor.email) {
            const transporter = nodemailer.createTransport({
                service: 'gmail',
                auth: {
                    user: process.env.EMAIL_USER,
                    pass: process.env.EMAIL_PASS,
                },
                tls: {
                    rejectUnauthorized: false,
                },
            });

            const mailOptions = {
                from: process.env.EMAIL_USER,
                to: donation.donor.email,
                subject: `New Request for Your Donation: ${donation.title}`,
                text: `Dear ${donation.donor.name || 'Donor'},

A new request has been made for your donation titled "${donation.title}".

Request Details:
- Title: ${newRequest.title}
- Recipient: ${recipient.name || 'Unknown Recipient'}
- Requested Products: ${requestedProducts.map(rp => {
                    const product = donationProductMap.get(rp.product).product;
                    return `${product.name} (Quantity: ${rp.quantity})`;
                }).join(', ')}
- Expiration Date: ${newRequest.expirationDate.toLocaleDateString()}

You can review the request in your dashboard.

Best regards,
Your Platform Team`,
                html: `
                    <div style="font-family: Arial, sans-serif; color: black;">
                        <div style="text-align: center; margin-bottom: 20px;">
                            <img src="cid:logo" alt="Platform Logo" style="max-width: 150px; height: auto;" />
                        </div>
                        <h2 style="color: #228b22;">New Request for Your Donation</h2>
                        <p>Dear ${donation.donor.name || 'Donor'},</p>
                        <p>A new request has been made for your donation titled "<strong>${donation.title}</strong>".</p>
                        <h3>Request Details:</h3>
                        <ul>
                            <li><strong>Title:</strong> ${newRequest.title}</li>
                            <li><strong>Recipient:</strong> ${recipient.name || 'Unknown Recipient'}</li>
                            <li><strong>Requested Products:</strong> ${requestedProducts.map(rp => {
                                const product = donationProductMap.get(rp.product).product;
                                return `${product.name} (Quantity: ${rp.quantity})`;
                            }).join(', ')}</li>
                            <li><strong>Expiration Date:</strong> ${newRequest.expirationDate.toLocaleDateString()}</li>
                        </ul>
                        <p>You can review the request in your dashboard.</p>
                        <p style="margin-top: 20px;">Best regards,<br>Your Platform Team</p>
                    </div>
                `,
                attachments: [
                    {
                        filename: 'logo.png',
                        path: path.join(__dirname, '../uploads/logo.png'),
                        cid: 'logo',
                    },
                ],
            };

            await transporter.sendMail(mailOptions);
            console.log(`Email sent to ${donation.donor.email}`);
        }

        res.status(201).json({
            message: 'Request created successfully for the donation',
            request: populatedRequest,
        });
    } catch (error) {
        console.error('Create Request Error:', error);
        res.status(500).json({
            message: 'Failed to create request for the donation',
            error: error.message,
        });
    }
}


async function addDonationToRequest(req, res) {
    try {
      const { requestId } = req.params;
      const { products, donor, expirationDate } = req.body;
  
      // Fetch the request and populate requestedProducts and recipient
      const request = await RequestNeed.findById(requestId)
        .populate('requestedProducts')
        .populate('recipient'); // Assuming 'recipient' is a field in RequestNeed referencing the User model
      if (!request) {
        return res.status(404).json({ message: 'Request not found' });
      }
  
      console.log('Request category:', request.category);
      console.log('Request numberOfMeals:', request.numberOfMeals);
      console.log('Request linkedDonation:', request.linkedDonation);
  
      // Validate products against the request
      const productMap = new Map(request.requestedProducts.map(p => [p._id.toString(), p.totalQuantity]));
      const donationProducts = products.map(({ product, quantity }) => {
        if (!productMap.has(product)) {
          throw new Error(`Product ${product} not found in request`);
        }
        const maxQty = productMap.get(product);
        return {
          product,
          quantity: Math.min(quantity, maxQty),
        };
      });
  
      // Create the new donation
      const newDonation = new Donation({
        title: request.title,
        donor: donor || req.user.id,
        description: `Donation for request ${request.title}`,
        category: request.category,
        location: request.location,
        products: donationProducts,
        numberOfMeals: request.category === 'prepared_meals' ? (request.numberOfMeals || 1) : undefined,
        expirationDate: expirationDate || request.expirationDate,
        linkedRequests: [requestId],
      });
  
      const savedDonation = await newDonation.save();
  
      // Update the request's linkedDonation field
      if (request.linkedDonation === null || request.linkedDonation === undefined) {
        await RequestNeed.updateOne({ _id: requestId }, { $set: { linkedDonation: [] } });
      }
  
      await RequestNeed.updateOne({ _id: requestId }, { $push: { linkedDonation: savedDonation._id } });
  
      // Fetch the recipient's email and send notification
      const recipient = request.recipient; // Assuming recipient is populated
      if (!recipient || !recipient.email) {
        console.warn('Recipient email not found for request:', requestId);
      } else {
        // Populate the donor and products in the saved donation to get names
        const populatedDonation = await Donation.findById(savedDonation._id)
          .populate('donor') // Populate donor to get the name
          .populate('products.product'); // Populate products to get product names
  
        // Configure email transporter
        const transporter = nodemailer.createTransport({
          service: 'gmail',
          auth: {
            user: process.env.EMAIL_USER,
            pass: process.env.EMAIL_PASS,
          },
          tls: {
            rejectUnauthorized: false, // Disable SSL verification
          },
        });
  
        // Email details
        const mailOptions = {
          from: process.env.EMAIL_USER,
          to: recipient.email,
          subject: `New Donation Added to Your Request: ${request.title}`,
          text: `Dear ${recipient.name || 'Recipient'},
  
  A new donation has been added to your request titled "${request.title}".
  
  Donation Details:
  - Title: ${populatedDonation.title}
  - Donor: ${populatedDonation.donor?.name || 'Unknown Donor'}
  - Products: ${populatedDonation.products
            .map(p => `${p.product?.name || 'Unknown Product'} (Quantity: ${p.quantity})`)
            .join(', ')}
  - Expiration Date: ${populatedDonation.expirationDate ? new Date(populatedDonation.expirationDate).toLocaleDateString() : 'Not set'}
  
  Thank you for using our platform!
  
  Best regards,
  Your Platform Team`,
          html: `
            <div style="font-family: Arial, sans-serif; color: black;">
              <div style="text-align: center; margin-bottom: 20px;">
                <img src="cid:logo" alt="Platform Logo" style="max-width: 150px; height: auto;" />
              </div>
              <h2 style="color: #228b22;">New Donation Added to Your Request</h2>
              <p>Dear ${recipient.name || 'Recipient'},</p>
              <p>A new donation has been added to your request titled "<strong>${request.title}</strong>".</p>
              <h3>Donation Details:</h3>
              <ul>
                <li><strong>Title:</strong> ${populatedDonation.title}</li>
                <li><strong>Donor:</strong> ${populatedDonation.donor?.name || 'Unknown Donor'}</li>
                <li><strong>Products:</strong> ${populatedDonation.products
                  .map(p => `${p.product?.name || 'Unknown Product'} (Quantity: ${p.quantity})`)
                  .join(', ')}</li>
                <li><strong>Expiration Date:</strong> ${populatedDonation.expirationDate ? new Date(populatedDonation.expirationDate).toLocaleDateString() : 'Not set'}</li>
              </ul>
              <p>Thank you for using our platform!</p>
              <p style="margin-top: 20px;">Best regards,<br>Your Platform Team</p>
            </div>
          `,
          attachments: [
            {
              filename: 'logo.png',
              path: path.join(__dirname, '../uploads/logo.png'), // Adjust path to match your logo file
              cid: 'logo', // Content-ID to reference in the HTML
            },
          ],
        };
  
        // Send email
        await transporter.sendMail(mailOptions);
        console.log(`Email sent to ${recipient.email}`);
      }
  
      res.status(201).json({
        message: 'Donation added to request successfully',
        donation: savedDonation,
      });
    } catch (error) {
      console.error('Donation Error:', error);
      res.status(500).json({ message: 'Failed to add donation to request', error: error.message });
    }
  }
async function getRequestWithDonations(req, res) {
    try {
        const { requestId } = req.params;
        
        // Get the request with its donations and transactions
        const request = await RequestNeed.findById(requestId)
            .populate('recipient')
            .populate('requestedProducts')
            .populate('linkedDonation');

        if (!request) {
            return res.status(404).json({ message: 'Request not found' });
        }

        // Get all transactions related to this request
        const transactions = await DonationTransaction.find({ requestNeed: requestId })
            .populate('donation')
            .populate('allocatedProducts.product')
            .populate('donor');

        res.status(200).json({
            request,
            transactions
        });
    } catch (error) {
        res.status(500).json({ 
            message: 'Server error', 
            error: error.message 
        });
    }
}

module.exports = {
    addDonationToRequest,
    getAllRequests,
    getRequestById,
    getRequestsByRecipientId,
    getRequestsByStatus,
    createRequest,
    updateRequest,
    deleteRequest,
    createRequestNeedForExistingDonation,
    getRequestWithDonations,
};
</file>

<file path="sustainafood-frontend/src/App.jsx">
import React from "react";
import { Routes, Route, Outlet, Navigate } from "react-router-dom";
import Home from './pages/Home';
import EditProfile from './pages/Editprofile';
import Profile from './pages/Profile';
import Signup from './pages/Signup';
import Continueinfo from './pages/Continueinfo';
import Contact from './pages/Contact';
import Login from './pages/log';
import Dashboard from "./pages/backoffice/Dashboard";
import NGOList from "./pages/backoffice/ONGList.jsx";
import SupermarketList from "./pages/backoffice/SupermarketList";
import StudentList from "./pages/backoffice/StudentList";
import TransporterList from "./pages/backoffice/TransporterList";
import About from "./pages/About";
import RestaurantList from './pages/backoffice/RestaurantList';
import AdminProfile from './pages/backoffice/AdminProfile';
import ForgetPass from "./pages/ForgetPass";
import ResetCode from "./pages/ResetCode";
import ResetPassword from "./pages/ResetPassword";
import ViewStudent from './pages/backoffice/view-student';
import ViewRestaurant from './pages/backoffice/view-restaurant';
import ViewSupermarket from './pages/backoffice/view-supermarket';
import ViewNGO from './pages/backoffice/view-ngo.jsx';
import ViewTransporter from './pages/backoffice/view-transporter';
import ListDonationsRequest from './pages/ListDonationsRequest';

import PrivateRoute from "./PrivateRoute";
import NotFound from "./pages/Not-Found";
import AccountSettings from "./pages/AccountSettings.js";
import ListOfDonations from "./pages/ListOfDonations";
import AddDonation from "./pages/AddDonation";
import MyRequest from "./pages/MyRequest.jsx";
import MyDonations from "./pages/MyDonationsList.jsx"; 
import TwoFAVerification from "./pages/TwoFAVerification";

import DetailsDonations from "./pages/DetailsDonations";
import DonationList from "./pages/backoffice/DonationList.jsx";
import DonationTransactionList from "./pages/backoffice/DonationTransactionList.jsx";
import RequestTable from "./pages/backoffice/RequestTable.jsx";
import ProductList from "./pages/backoffice/ProductList.jsx";
import DetailsRequest from "./pages/DetailsRequest";
import ListOfRequests from "./pages/ListOfRequests";
import RequestDetails from "./pages/backoffice/RequestDetails.jsx";
import ProductDetail from "./pages/backoffice/ProductDetail.jsx";
import DonationDetails from "./pages/backoffice/DonationDetails.jsx";
const App = () => {

  return (
    <Routes>
      {/* Public Routes */}
      <Route path="/" element={<Home />} />
      <Route path="/login" element={<Login />} />
      <Route path="/signup" element={<Signup />} />
      <Route path="/Contact" element={<Contact />} />
      <Route path="/Continueinfo" element={<Continueinfo />} />
      <Route path="/About" element={<About />} />
      <Route path="/forget-password" element={<ForgetPass />} />
      <Route path="/reset-code" element={<ResetCode />} />  
      <Route path="/reset-password" element={<ResetPassword />} />
      <Route path="/two-fa-verification" element={<TwoFAVerification />} />


      {/* Private Routes for Admin only */}
      <Route element={<PrivateRoute roles={["admin"]} />}>
        <Route path="/dashboard" element={<Dashboard />} />
        <Route path="/recipients/ngos" element={<NGOList />} />
        <Route path="/donors/supermarkets" element={<SupermarketList />} />
        <Route path="/donors/restaurants" element={<RestaurantList />} />
        <Route path="/recipients/students" element={<StudentList />} />
        <Route path="/transporters" element={<TransporterList />} />
        <Route path="/students/view/:id" element={<ViewStudent />} />
        <Route path="/restaurants/view/:id" element={<ViewRestaurant />} />
        <Route path="/supermarkets/view/:id" element={<ViewSupermarket />} />
        <Route path="/ongs/view/:id" element={<ViewNGO />} />
        <Route path="/transporters/view/:id" element={<ViewTransporter />} />
        <Route path="/admin-profile" element={<AdminProfile />} />
        <Route path="/Donations" element={<DonationList />} />
        <Route path="/DonationTransList" element={<DonationTransactionList/>} />
        <Route path="/food-donation/requests" element={<RequestTable />} />
        <Route path="/food-donation/product" element={<ProductList />} />
        <Route path="/requests/view/:id" element={<RequestDetails />} /> {/* Route pour les détails */}
        <Route path="/products/view/:id" element={<ProductDetail />} /> {/* Route pour les détails */}
        <Route path="/donations/view/:id" element={<DonationDetails />} />
           <Route path="/ListDonationsRequest/:id" element={<ListDonationsRequest />}/>
      </Route>

      {/* Private Routes for other roles (if needed) */}
      <Route element={<PrivateRoute roles={["ong", "restaurant", "supermarket", "student", "transporter"]} />}>
        {/* Place here any additional routes only accessible for these roles */}

        <Route path="/profile" element={<Profile />} />
        <Route path="/edit-profile" element={<EditProfile />} />
        <Route path= "/account-settings" element={<AccountSettings />} />
      </Route>

      <Route element={<PrivateRoute roles={["ong", "restaurant", "supermarket", "student"]} />}>
      <Route path="/ListOfDonations" element={<ListOfDonations />} />
      <Route path="/ListOfRequests" element={<ListOfRequests />} />
      <Route path="/AddDonation" element={<AddDonation />} />
      <Route path="/DetailsDonations/:id" element={<DetailsDonations />} />
      <Route path="/DetailsRequest/:id" element={<DetailsRequest />} />
      </Route>
         {/* Private Routes for ong,student */}
      <Route element={<PrivateRoute roles={["ong", "student"]} />}>
      <Route path="/myrequest" element={<MyRequest />} />
   
      </Route>
      <Route element={<PrivateRoute roles={["supermarket","restaurant"]} />}>
  <Route path="/mydonations" element={<MyDonations />} />
</Route>

       {/* NotFound Route - This should be the last route */}
       <Route path="*" element={<NotFound />} />


    </Routes>
  );
};

export default App;
</file>

<file path="jenkinsfile">
pipeline {
    agent any

    stages {
        // ✅ Étape 1: Installer les dépendances
        stage('Install Dependencies') {
            steps {
                script {
                    // Backend dependencies
                    dir('sustainafood-backend') {
                        sh 'npm install'
                    }
                    // Frontend dependencies
                    dir('sustainafood-frontend') {
                        sh 'npm install --legacy-peer-deps'
                    }
                }
            }
        }

        // ✅ Étape 2: Exécuter les tests unitaires séparément (2FA & Sign-in)
        stage('Run Backend Tests Separately') {
            steps {
                script {
                    dir('sustainafood-backend') {
                        // ✅ Lancer user-2fa.test.js
                        echo 'Running backend test: 2FA'
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh 'npx jest test/user-2fa.test.js --detectOpenHandles --forceExit'
                        }

                        // ✅ Lancer user-signin.test.js
                        echo 'Running backend test: Sign-in'
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh 'npx jest test/user-signin.test.js --detectOpenHandles --forceExit'
                        }

                        echo 'Backend tests completed.'
                    }
                }
            }
        }

        // ✅ Étape 3: Tests frontend
        stage('Run Frontend Tests') {
            steps {
                script {
                    dir('sustainafood-frontend') {
                        echo 'Running frontend tests...'
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            sh 'npm test'
                        }
                        echo 'Frontend tests completed.'
                    }
                }
            }
        }

        // ✅ Étape 4: Build Application
        stage('Build Application') {
            steps {
                script {
                    // Backend build (optionnel)
                    dir('sustainafood-backend') {
                        echo 'Building backend...'
                        // sh 'npm run build' // Uncomment if backend build is needed
                        echo 'Backend build completed.'
                    }

                    // Frontend build
                    dir('sustainafood-frontend') {
                        echo 'Building frontend...'

                        // Installer fontawesome icons (optional)
                        sh 'npm install @fortawesome/fontawesome-svg-core'
                        sh 'npm install @fortawesome/react-fontawesome'
                        sh 'npm install @fortawesome/free-solid-svg-icons'

                        // Build frontend
                        sh 'npm run build'
                        echo 'Frontend build completed.'
                    }
                }
            }
        }

        // ✅ Étape 5: SonarQube Analysis
        stage('SonarQube Analysis') {
            steps {
                script {
                    sh 'node -v' // Debug Node.js version

                    def scannerHome = tool 'scanner' // Sonar scanner tool name in Jenkins
                    withSonarQubeEnv {
                        // Run sonar-scanner
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }
    }
}
</file>

</files>
